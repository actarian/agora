/**
 * @license agora v1.0.0
 * (c) 2020 Luca Zampetti <lzampetti@gmail.com>
 * License: MIT
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('rxcomp'), require('rxcomp-form'), require('rxjs/operators'), require('rxjs')) :
  typeof define === 'function' && define.amd ? define(['rxcomp', 'rxcomp-form', 'rxjs/operators', 'rxjs'], factory) :
  (global = global || self, factory(global.rxcomp, global.rxcomp.form, global.rxjs.operators, global.rxjs));
}(this, (function (rxcomp, rxcompForm, operators, rxjs) { 'use strict';

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var agoraRtmSdk = createCommonjsModule(function (module, exports) {
  /*! @preserve
   * AgoraRTM Web SDK 1.2.2 - commit: v1.2.2-0-gb428acc
   * Copyright (C) 2018-2020 Agora Lab.
   * This file is licensed under the AGORA, INC. SDK LICENSE AGREEMENT
   * A copy of this license may be found at https://www.agora.io/en/sdk-license-agreement/
   */
  !function(e,t){module.exports=t();}(commonjsGlobal,function(){var commonjsGlobal$1="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:{};function unwrapExports(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}var _global=createCommonjsModule(function(e){var t=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t);}),_core=createCommonjsModule(function(e){var t=e.exports={version:"2.6.9"};"number"==typeof __e&&(__e=t);}),_core_1=_core.version,_isObject=function(e){return "object"==typeof e?null!==e:"function"==typeof e},_anObject=function(e){if(!_isObject(e))throw TypeError(e+" is not an object!");return e},_fails=function(e){try{return !!e()}catch(e){return !0}},_descriptors=!_fails(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),document$1=_global.document,is=_isObject(document$1)&&_isObject(document$1.createElement),_domCreate=function(e){return is?document$1.createElement(e):{}},_ie8DomDefine=!_descriptors&&!_fails(function(){return 7!=Object.defineProperty(_domCreate("div"),"a",{get:function(){return 7}}).a}),_toPrimitive=function(e,t){if(!_isObject(e))return e;var r,n;if(t&&"function"==typeof(r=e.toString)&&!_isObject(n=r.call(e)))return n;if("function"==typeof(r=e.valueOf)&&!_isObject(n=r.call(e)))return n;if(!t&&"function"==typeof(r=e.toString)&&!_isObject(n=r.call(e)))return n;throw TypeError("Can't convert object to primitive value")},dP=Object.defineProperty,f=_descriptors?Object.defineProperty:function(e,t,r){if(_anObject(e),t=_toPrimitive(t,!0),_anObject(r),_ie8DomDefine)try{return dP(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return "value"in r&&(e[t]=r.value),e},_objectDp={f:f},_propertyDesc=function(e,t){return {enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},_hide=_descriptors?function(e,t,r){return _objectDp.f(e,t,_propertyDesc(1,r))}:function(e,t,r){return e[t]=r,e},hasOwnProperty={}.hasOwnProperty,_has=function(e,t){return hasOwnProperty.call(e,t)},id=0,px=Math.random(),_uid=function(e){return "Symbol(".concat(void 0===e?"":e,")_",(++id+px).toString(36))},_library=!1,_shared=createCommonjsModule(function(e){var t=_global["__core-js_shared__"]||(_global["__core-js_shared__"]={});(e.exports=function(e,r){return t[e]||(t[e]=void 0!==r?r:{})})("versions",[]).push({version:_core.version,mode:"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"});}),_functionToString=_shared("native-function-to-string",Function.toString),_redefine=createCommonjsModule(function(e){var t=_uid("src"),r=(""+_functionToString).split("toString");_core.inspectSource=function(e){return _functionToString.call(e)},(e.exports=function(e,n,o,i){var s="function"==typeof o;s&&(_has(o,"name")||_hide(o,"name",n)),e[n]!==o&&(s&&(_has(o,t)||_hide(o,t,e[n]?""+e[n]:r.join(String(n)))),e===_global?e[n]=o:i?e[n]?e[n]=o:_hide(e,n,o):(delete e[n],_hide(e,n,o)));})(Function.prototype,"toString",function(){return "function"==typeof this&&this[t]||_functionToString.call(this)});}),_aFunction=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e},_ctx=function(e,t,r){if(_aFunction(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}},PROTOTYPE="prototype",$export=function(e,t,r){var n,o,i,s,a=e&$export.F,u=e&$export.G,l=e&$export.S,c=e&$export.P,p=e&$export.B,f=u?_global:l?_global[t]||(_global[t]={}):(_global[t]||{})[PROTOTYPE],d=u?_core:_core[t]||(_core[t]={}),g=d[PROTOTYPE]||(d[PROTOTYPE]={});for(n in u&&(r=t),r)i=((o=!a&&f&&void 0!==f[n])?f:r)[n],s=p&&o?_ctx(i,_global):c&&"function"==typeof i?_ctx(Function.call,i):i,f&&_redefine(f,n,i,e&$export.U),d[n]!=i&&_hide(d,n,s),c&&g[n]!=i&&(g[n]=i);};_global.core=_core,$export.F=1,$export.G=2,$export.S=4,$export.P=8,$export.B=16,$export.W=32,$export.U=64,$export.R=128;var _export=$export,toString={}.toString,_cof=function(e){return toString.call(e).slice(8,-1)},_iobject=Object("z").propertyIsEnumerable(0)?Object:function(e){return "String"==_cof(e)?e.split(""):Object(e)},_defined=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e},_toIobject=function(e){return _iobject(_defined(e))},ceil=Math.ceil,floor=Math.floor,_toInteger=function(e){return isNaN(e=+e)?0:(e>0?floor:ceil)(e)},min=Math.min,_toLength=function(e){return e>0?min(_toInteger(e),9007199254740991):0},max=Math.max,min$1=Math.min,_toAbsoluteIndex=function(e,t){return (e=_toInteger(e))<0?max(e+t,0):min$1(e,t)},_arrayIncludes=function(e){return function(t,r,n){var o,i=_toIobject(t),s=_toLength(i.length),a=_toAbsoluteIndex(n,s);if(e&&r!=r){for(;s>a;)if((o=i[a++])!=o)return !0}else for(;s>a;a++)if((e||a in i)&&i[a]===r)return e||a||0;return !e&&-1}},shared=_shared("keys"),_sharedKey=function(e){return shared[e]||(shared[e]=_uid(e))},arrayIndexOf=_arrayIncludes(!1),IE_PROTO=_sharedKey("IE_PROTO"),_objectKeysInternal=function(e,t){var r,n=_toIobject(e),o=0,i=[];for(r in n)r!=IE_PROTO&&_has(n,r)&&i.push(r);for(;t.length>o;)_has(n,r=t[o++])&&(~arrayIndexOf(i,r)||i.push(r));return i},_enumBugKeys="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),_objectKeys=Object.keys||function(e){return _objectKeysInternal(e,_enumBugKeys)},f$1={}.propertyIsEnumerable,_objectPie={f:f$1},isEnum=_objectPie.f,_objectToArray=function(e){return function(t){for(var r,n=_toIobject(t),o=_objectKeys(n),i=o.length,s=0,a=[];i>s;)r=o[s++],_descriptors&&!isEnum.call(n,r)||a.push(e?[r,n[r]]:n[r]);return a}},$entries=_objectToArray(!0);_export(_export.S,"Object",{entries:function(e){return $entries(e)}});var _stringRepeat=function(e){var t=String(_defined(this)),r="",n=_toInteger(e);if(n<0||n==1/0)throw RangeError("Count can't be negative");for(;n>0;(n>>>=1)&&(t+=t))1&n&&(r+=t);return r},_stringPad=function(e,t,r,n){var o=String(_defined(e)),i=o.length,s=void 0===r?" ":String(r),a=_toLength(t);if(a<=i||""==s)return o;var u=a-i,l=_stringRepeat.call(s,Math.ceil(u/s.length));return l.length>u&&(l=l.slice(0,u)),n?l+o:o+l},navigator$1=_global.navigator,_userAgent=navigator$1&&navigator$1.userAgent||"",WEBKIT_BUG=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(_userAgent);_export(_export.P+_export.F*WEBKIT_BUG,"String",{padEnd:function(e){return _stringPad(this,e,arguments.length>1?arguments[1]:void 0,!1)}});var WEBKIT_BUG$1=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(_userAgent);_export(_export.P+_export.F*WEBKIT_BUG$1,"String",{padStart:function(e){return _stringPad(this,e,arguments.length>1?arguments[1]:void 0,!0)}});var _wks=createCommonjsModule(function(e){var t=_shared("wks"),r=_global.Symbol,n="function"==typeof r;(e.exports=function(e){return t[e]||(t[e]=n&&r[e]||(n?r:_uid)("Symbol."+e))}).store=t;}),MATCH=_wks("match"),_isRegexp=function(e){var t;return _isObject(e)&&(void 0!==(t=e[MATCH])?!!t:"RegExp"==_cof(e))},_stringContext=function(e,t,r){if(_isRegexp(t))throw TypeError("String#"+r+" doesn't accept regex!");return String(_defined(e))},MATCH$1=_wks("match"),_failsIsRegexp=function(e){var t=/./;try{"/./"[e](t);}catch(r){try{return t[MATCH$1]=!1,!"/./"[e](t)}catch(e){}}return !0},STARTS_WITH="startsWith",$startsWith=""[STARTS_WITH];_export(_export.P+_export.F*_failsIsRegexp(STARTS_WITH),"String",{startsWith:function(e){var t=_stringContext(this,e,STARTS_WITH),r=_toLength(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),n=String(e);return $startsWith?$startsWith.call(t,n,r):t.slice(r,r+n.length)===n}});var ENDS_WITH="endsWith",$endsWith=""[ENDS_WITH];_export(_export.P+_export.F*_failsIsRegexp(ENDS_WITH),"String",{endsWith:function(e){var t=_stringContext(this,e,ENDS_WITH),r=arguments.length>1?arguments[1]:void 0,n=_toLength(t.length),o=void 0===r?n:Math.min(_toLength(r),n),i=String(e);return $endsWith?$endsWith.call(t,i,o):t.slice(o-i.length,o)===i}});var UNSCOPABLES=_wks("unscopables"),ArrayProto=Array.prototype;null==ArrayProto[UNSCOPABLES]&&_hide(ArrayProto,UNSCOPABLES,{});var _addToUnscopables=function(e){ArrayProto[UNSCOPABLES][e]=!0;},$includes=_arrayIncludes(!0);_export(_export.P,"Array",{includes:function(e){return $includes(this,e,arguments.length>1?arguments[1]:void 0)}}),_addToUnscopables("includes");var _toObject=function(e){return Object(_defined(e))},_iterCall=function(e,t,r,n){try{return n?t(_anObject(r)[0],r[1]):t(r)}catch(t){var o=e.return;throw void 0!==o&&_anObject(o.call(e)),t}},_iterators={},ITERATOR=_wks("iterator"),ArrayProto$1=Array.prototype,_isArrayIter=function(e){return void 0!==e&&(_iterators.Array===e||ArrayProto$1[ITERATOR]===e)},_createProperty=function(e,t,r){t in e?_objectDp.f(e,t,_propertyDesc(0,r)):e[t]=r;},TAG=_wks("toStringTag"),ARG="Arguments"==_cof(function(){return arguments}()),tryGet=function(e,t){try{return e[t]}catch(e){}},_classof=function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=tryGet(t=Object(e),TAG))?r:ARG?_cof(t):"Object"==(n=_cof(t))&&"function"==typeof t.callee?"Arguments":n},ITERATOR$1=_wks("iterator"),core_getIteratorMethod=_core.getIteratorMethod=function(e){if(null!=e)return e[ITERATOR$1]||e["@@iterator"]||_iterators[_classof(e)]},ITERATOR$2=_wks("iterator"),SAFE_CLOSING=!1;try{var riter=[7][ITERATOR$2]();riter.return=function(){SAFE_CLOSING=!0;},Array.from(riter,function(){throw 2});}catch(e){}var _iterDetect=function(e,t){if(!t&&!SAFE_CLOSING)return !1;var r=!1;try{var n=[7],o=n[ITERATOR$2]();o.next=function(){return {done:r=!0}},n[ITERATOR$2]=function(){return o},e(n);}catch(e){}return r};_export(_export.S+_export.F*!_iterDetect(function(e){Array.from(e);}),"Array",{from:function(e){var t,r,n,o,i=_toObject(e),s="function"==typeof this?this:Array,a=arguments.length,u=a>1?arguments[1]:void 0,l=void 0!==u,c=0,p=core_getIteratorMethod(i);if(l&&(u=_ctx(u,a>2?arguments[2]:void 0,2)),null==p||s==Array&&_isArrayIter(p))for(r=new s(t=_toLength(i.length));t>c;c++)_createProperty(r,c,l?u(i[c],c):i[c]);else for(o=p.call(i),r=new s;!(n=o.next()).done;c++)_createProperty(r,c,l?_iterCall(o,u,[n.value,c],!0):n.value);return r.length=c,r}});var INCLUDES="includes";_export(_export.P+_export.F*_failsIsRegexp(INCLUDES),"String",{includes:function(e){return !!~_stringContext(this,e,INCLUDES).indexOf(e,arguments.length>1?arguments[1]:void 0)}});var _sameValue=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t},builtinExec=RegExp.prototype.exec,_regexpExecAbstract=function(e,t){var r=e.exec;if("function"==typeof r){var n=r.call(e,t);if("object"!=typeof n)throw new TypeError("RegExp exec method returned something other than an Object or null");return n}if("RegExp"!==_classof(e))throw new TypeError("RegExp#exec called on incompatible receiver");return builtinExec.call(e,t)},_flags=function(){var e=_anObject(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},nativeExec=RegExp.prototype.exec,nativeReplace=String.prototype.replace,patchedExec=nativeExec,LAST_INDEX="lastIndex",UPDATES_LAST_INDEX_WRONG=function(){var e=/a/,t=/b*/g;return nativeExec.call(e,"a"),nativeExec.call(t,"a"),0!==e[LAST_INDEX]||0!==t[LAST_INDEX]}(),NPCG_INCLUDED=void 0!==/()??/.exec("")[1],PATCH=UPDATES_LAST_INDEX_WRONG||NPCG_INCLUDED;PATCH&&(patchedExec=function(e){var t,r,n,o,i=this;return NPCG_INCLUDED&&(r=new RegExp("^"+i.source+"$(?!\\s)",_flags.call(i))),UPDATES_LAST_INDEX_WRONG&&(t=i[LAST_INDEX]),n=nativeExec.call(i,e),UPDATES_LAST_INDEX_WRONG&&n&&(i[LAST_INDEX]=i.global?n.index+n[0].length:t),NPCG_INCLUDED&&n&&n.length>1&&nativeReplace.call(n[0],r,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(n[o]=void 0);}),n});var _regexpExec=patchedExec;_export({target:"RegExp",proto:!0,forced:_regexpExec!==/./.exec},{exec:_regexpExec});var SPECIES=_wks("species"),REPLACE_SUPPORTS_NAMED_GROUPS=!_fails(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),SPLIT_WORKS_WITH_OVERWRITTEN_EXEC=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var r="ab".split(e);return 2===r.length&&"a"===r[0]&&"b"===r[1]}(),_fixReWks=function(e,t,r){var n=_wks(e),o=!_fails(function(){var t={};return t[n]=function(){return 7},7!=""[e](t)}),i=o?!_fails(function(){var t=!1,r=/a/;return r.exec=function(){return t=!0,null},"split"===e&&(r.constructor={},r.constructor[SPECIES]=function(){return r}),r[n](""),!t}):void 0;if(!o||!i||"replace"===e&&!REPLACE_SUPPORTS_NAMED_GROUPS||"split"===e&&!SPLIT_WORKS_WITH_OVERWRITTEN_EXEC){var s=/./[n],a=r(_defined,n,""[e],function(e,t,r,n,i){return t.exec===_regexpExec?o&&!i?{done:!0,value:s.call(t,r,n)}:{done:!0,value:e.call(r,t,n)}:{done:!1}}),u=a[0],l=a[1];_redefine(String.prototype,e,u),_hide(RegExp.prototype,n,2==t?function(e,t){return l.call(e,this,t)}:function(e){return l.call(e,this)});}};_fixReWks("search",1,function(e,t,r,n){return [function(r){var n=e(this),o=null==r?void 0:r[t];return void 0!==o?o.call(r,n):new RegExp(r)[t](String(n))},function(e){var t=n(r,e,this);if(t.done)return t.value;var o=_anObject(e),i=String(this),s=o.lastIndex;_sameValue(s,0)||(o.lastIndex=0);var a=_regexpExecAbstract(o,i);return _sameValue(o.lastIndex,s)||(o.lastIndex=s),null===a?-1:a.index}]});var SPECIES$1=_wks("species"),_speciesConstructor=function(e,t){var r,n=_anObject(e).constructor;return void 0===n||null==(r=_anObject(n)[SPECIES$1])?t:_aFunction(r)},_stringAt=function(e){return function(t,r){var n,o,i=String(_defined(t)),s=_toInteger(r),a=i.length;return s<0||s>=a?e?"":void 0:(n=i.charCodeAt(s))<55296||n>56319||s+1===a||(o=i.charCodeAt(s+1))<56320||o>57343?e?i.charAt(s):n:e?i.slice(s,s+2):o-56320+(n-55296<<10)+65536}},at=_stringAt(!0),_advanceStringIndex=function(e,t,r){return t+(r?at(e,t).length:1)},$min=Math.min,$push=[].push,$SPLIT="split",LENGTH="length",LAST_INDEX$1="lastIndex",MAX_UINT32=4294967295,SUPPORTS_Y=!_fails(function(){RegExp(MAX_UINT32,"y");});_fixReWks("split",2,function(e,t,r,n){var o;return o="c"=="abbc"[$SPLIT](/(b)*/)[1]||4!="test"[$SPLIT](/(?:)/,-1)[LENGTH]||2!="ab"[$SPLIT](/(?:ab)*/)[LENGTH]||4!="."[$SPLIT](/(.?)(.?)/)[LENGTH]||"."[$SPLIT](/()()/)[LENGTH]>1||""[$SPLIT](/.?/)[LENGTH]?function(e,t){var n=String(this);if(void 0===e&&0===t)return [];if(!_isRegexp(e))return r.call(n,e,t);for(var o,i,s,a=[],u=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),l=0,c=void 0===t?MAX_UINT32:t>>>0,p=new RegExp(e.source,u+"g");(o=_regexpExec.call(p,n))&&!((i=p[LAST_INDEX$1])>l&&(a.push(n.slice(l,o.index)),o[LENGTH]>1&&o.index<n[LENGTH]&&$push.apply(a,o.slice(1)),s=o[0][LENGTH],l=i,a[LENGTH]>=c));)p[LAST_INDEX$1]===o.index&&p[LAST_INDEX$1]++;return l===n[LENGTH]?!s&&p.test("")||a.push(""):a.push(n.slice(l)),a[LENGTH]>c?a.slice(0,c):a}:"0"[$SPLIT](void 0,0)[LENGTH]?function(e,t){return void 0===e&&0===t?[]:r.call(this,e,t)}:r,[function(r,n){var i=e(this),s=null==r?void 0:r[t];return void 0!==s?s.call(r,i,n):o.call(String(i),r,n)},function(e,t){var i=n(o,e,this,t,o!==r);if(i.done)return i.value;var s=_anObject(e),a=String(this),u=_speciesConstructor(s,RegExp),l=s.unicode,c=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(SUPPORTS_Y?"y":"g"),p=new u(SUPPORTS_Y?s:"^(?:"+s.source+")",c),f=void 0===t?MAX_UINT32:t>>>0;if(0===f)return [];if(0===a.length)return null===_regexpExecAbstract(p,a)?[a]:[];for(var d=0,g=0,h=[];g<a.length;){p.lastIndex=SUPPORTS_Y?g:0;var b,_=_regexpExecAbstract(p,SUPPORTS_Y?a:a.slice(g));if(null===_||(b=$min(_toLength(p.lastIndex+(SUPPORTS_Y?0:g)),a.length))===d)g=_advanceStringIndex(a,g,l);else {if(h.push(a.slice(d,g)),h.length===f)return h;for(var y=1;y<=_.length-1;y++)if(h.push(_[y]),h.length===f)return h;g=d=b;}}return h.push(a.slice(d)),h}]});var _strictMethod=function(e,t){return !!e&&_fails(function(){t?e.call(null,function(){},1):e.call(null);})},$sort=[].sort,test=[1,2,3];_export(_export.P+_export.F*(_fails(function(){test.sort(void 0);})||!_fails(function(){test.sort(null);})||!_strictMethod($sort)),"Array",{sort:function(e){return void 0===e?$sort.call(_toObject(this)):$sort.call(_toObject(this),_aFunction(e))}});var _iterStep=function(e,t){return {value:t,done:!!e}},_objectDps=_descriptors?Object.defineProperties:function(e,t){_anObject(e);for(var r,n=_objectKeys(t),o=n.length,i=0;o>i;)_objectDp.f(e,r=n[i++],t[r]);return e},document$2=_global.document,_html=document$2&&document$2.documentElement,IE_PROTO$1=_sharedKey("IE_PROTO"),Empty=function(){},PROTOTYPE$1="prototype",createDict=function(){var e,t=_domCreate("iframe"),r=_enumBugKeys.length;for(t.style.display="none",_html.appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),createDict=e.F;r--;)delete createDict[PROTOTYPE$1][_enumBugKeys[r]];return createDict()},_objectCreate=Object.create||function(e,t){var r;return null!==e?(Empty[PROTOTYPE$1]=_anObject(e),r=new Empty,Empty[PROTOTYPE$1]=null,r[IE_PROTO$1]=e):r=createDict(),void 0===t?r:_objectDps(r,t)},def=_objectDp.f,TAG$1=_wks("toStringTag"),_setToStringTag=function(e,t,r){e&&!_has(e=r?e:e.prototype,TAG$1)&&def(e,TAG$1,{configurable:!0,value:t});},IteratorPrototype={};_hide(IteratorPrototype,_wks("iterator"),function(){return this});var _iterCreate=function(e,t,r){e.prototype=_objectCreate(IteratorPrototype,{next:_propertyDesc(1,r)}),_setToStringTag(e,t+" Iterator");},IE_PROTO$2=_sharedKey("IE_PROTO"),ObjectProto=Object.prototype,_objectGpo=Object.getPrototypeOf||function(e){return e=_toObject(e),_has(e,IE_PROTO$2)?e[IE_PROTO$2]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?ObjectProto:null},ITERATOR$3=_wks("iterator"),BUGGY=!([].keys&&"next"in[].keys()),FF_ITERATOR="@@iterator",KEYS="keys",VALUES="values",returnThis=function(){return this},_iterDefine=function(e,t,r,n,o,i,s){_iterCreate(r,t,n);var a,u,l,c=function(e){if(!BUGGY&&e in g)return g[e];switch(e){case KEYS:case VALUES:return function(){return new r(this,e)}}return function(){return new r(this,e)}},p=t+" Iterator",f=o==VALUES,d=!1,g=e.prototype,h=g[ITERATOR$3]||g[FF_ITERATOR]||o&&g[o],b=h||c(o),_=o?f?c("entries"):b:void 0,y="Array"==t&&g.entries||h;if(y&&(l=_objectGpo(y.call(new e)))!==Object.prototype&&l.next&&(_setToStringTag(l,p,!0),"function"!=typeof l[ITERATOR$3]&&_hide(l,ITERATOR$3,returnThis)),f&&h&&h.name!==VALUES&&(d=!0,b=function(){return h.call(this)}),(BUGGY||d||!g[ITERATOR$3])&&_hide(g,ITERATOR$3,b),_iterators[t]=b,_iterators[p]=returnThis,o)if(a={values:f?b:c(VALUES),keys:i?b:c(KEYS),entries:_},s)for(u in a)u in g||_redefine(g,u,a[u]);else _export(_export.P+_export.F*(BUGGY||d),t,a);return a},es6_array_iterator=_iterDefine(Array,"Array",function(e,t){this._t=_toIobject(e),this._i=0,this._k=t;},function(){var e=this._t,t=this._k,r=this._i++;return !e||r>=e.length?(this._t=void 0,_iterStep(1)):_iterStep(0,"keys"==t?r:"values"==t?e[r]:[r,e[r]])},"values");_iterators.Arguments=_iterators.Array,_addToUnscopables("keys"),_addToUnscopables("values"),_addToUnscopables("entries");for(var ITERATOR$4=_wks("iterator"),TO_STRING_TAG=_wks("toStringTag"),ArrayValues=_iterators.Array,DOMIterables={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},collections=_objectKeys(DOMIterables),i=0;i<collections.length;i++){var NAME=collections[i],explicit=DOMIterables[NAME],Collection=_global[NAME],proto=Collection&&Collection.prototype,key;if(proto&&(proto[ITERATOR$4]||_hide(proto,ITERATOR$4,ArrayValues),proto[TO_STRING_TAG]||_hide(proto,TO_STRING_TAG,NAME),_iterators[NAME]=ArrayValues,explicit))for(key in es6_array_iterator)proto[key]||_redefine(proto,key,es6_array_iterator[key],!0);}var dP$1=_objectDp.f,FProto=Function.prototype,nameRE=/^\s*function ([^ (]*)/,NAME$1="name";NAME$1 in FProto||_descriptors&&dP$1(FProto,NAME$1,{configurable:!0,get:function(){try{return (""+this).match(nameRE)[1]}catch(e){return ""}}}),_descriptors&&"g"!=/./g.flags&&_objectDp.f(RegExp.prototype,"flags",{configurable:!0,get:_flags});var TO_STRING="toString",$toString=/./[TO_STRING],define=function(e){_redefine(RegExp.prototype,TO_STRING,e,!0);};_fails(function(){return "/a/b"!=$toString.call({source:"a",flags:"b"})})?define(function(){var e=_anObject(this);return "/".concat(e.source,"/","flags"in e?e.flags:!_descriptors&&e instanceof RegExp?_flags.call(e):void 0)}):$toString.name!=TO_STRING&&define(function(){return $toString.call(this)});var test$1={};function _typeof(e){return (_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function asyncGeneratorStep(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value;}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o);}function _asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise(function(n,o){var i=e.apply(t,r);function s(e){asyncGeneratorStep(i,n,o,s,a,"next",e);}function a(e){asyncGeneratorStep(i,n,o,s,a,"throw",e);}s(void 0);})}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _defineProperty(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n);}return r}function _objectSpread2(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(r,!0).forEach(function(t){_defineProperty(e,t,r[t]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ownKeys(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t));});}return e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t);}function _getPrototypeOf(e){return (_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _setPrototypeOf(e,t){return (_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return !1}}function _construct(e,t,r){return (_construct=isNativeReflectConstruct()?Reflect.construct:function(e,t,r){var n=[null];n.push.apply(n,t);var o=new(Function.bind.apply(e,n));return r&&_setPrototypeOf(o,r.prototype),o}).apply(null,arguments)}function _isNativeFunction(e){return -1!==Function.toString.call(e).indexOf("[native code]")}function _wrapNativeSuper(e){var t="function"==typeof Map?new Map:void 0;return (_wrapNativeSuper=function(e){if(null===e||!_isNativeFunction(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r);}function r(){return _construct(e,arguments,_getPrototypeOf(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(r,e)})(e)}function _objectWithoutPropertiesLoose(e,t){if(null==e)return {};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}function _objectWithoutProperties(e,t){if(null==e)return {};var r,n,o=_objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r]);}return o}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _possibleConstructorReturn(e,t){return !t||"object"!=typeof t&&"function"!=typeof t?_assertThisInitialized(e):t}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _get(e,t,r){return (_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=_superPropBase(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(r):o.value}})(e,t,r||e)}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_nonIterableRest()}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_nonIterableSpread()}function _arrayWithoutHoles(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _iterableToArray(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _iterableToArrayLimit(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e;}finally{try{n||null==a.return||a.return();}finally{if(o)throw i}}return r}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}test$1[_wks("toStringTag")]="z",test$1+""!="[object z]"&&_redefine(Object.prototype,"toString",function(){return "[object "+_classof(this)+"]"},!0);var max$1=Math.max,min$2=Math.min,floor$1=Math.floor,SUBSTITUTION_SYMBOLS=/\$([$&`']|\d\d?|<[^>]*>)/g,SUBSTITUTION_SYMBOLS_NO_NAMED=/\$([$&`']|\d\d?)/g,maybeToString=function(e){return void 0===e?e:String(e)};_fixReWks("replace",2,function(e,t,r,n){return [function(n,o){var i=e(this),s=null==n?void 0:n[t];return void 0!==s?s.call(n,i,o):r.call(String(i),n,o)},function(e,t){var i=n(r,e,this,t);if(i.done)return i.value;var s=_anObject(e),a=String(this),u="function"==typeof t;u||(t=String(t));var l=s.global;if(l){var c=s.unicode;s.lastIndex=0;}for(var p=[];;){var f=_regexpExecAbstract(s,a);if(null===f)break;if(p.push(f),!l)break;""===String(f[0])&&(s.lastIndex=_advanceStringIndex(a,_toLength(s.lastIndex),c));}for(var d="",g=0,h=0;h<p.length;h++){f=p[h];for(var b=String(f[0]),_=max$1(min$2(_toInteger(f.index),a.length),0),y=[],m=1;m<f.length;m++)y.push(maybeToString(f[m]));var v=f.groups;if(u){var $=[b].concat(y,_,a);void 0!==v&&$.push(v);var E=String(t.apply(void 0,$));}else E=o(b,a,_,y,v,t);_>=g&&(d+=a.slice(g,_)+E,g=_+b.length);}return d+a.slice(g)}];function o(e,t,n,o,i,s){var a=n+e.length,u=o.length,l=SUBSTITUTION_SYMBOLS_NO_NAMED;return void 0!==i&&(i=_toObject(i),l=SUBSTITUTION_SYMBOLS),r.call(s,l,function(r,s){var l;switch(s.charAt(0)){case"$":return "$";case"&":return e;case"`":return t.slice(0,n);case"'":return t.slice(a);case"<":l=i[s.slice(1,-1)];break;default:var c=+s;if(0===c)return r;if(c>u){var p=floor$1(c/10);return 0===p?r:p<=u?void 0===o[p-1]?s.charAt(1):o[p-1]+s.charAt(1):r}l=o[c-1];}return void 0===l?"":l})}});var f$2=_wks,_wksExt={f:f$2},defineProperty=_objectDp.f,_wksDefine=function(e){var t=_core.Symbol||(_core.Symbol=_global.Symbol||{});"_"==e.charAt(0)||e in t||defineProperty(t,e,{value:_wksExt.f(e)});};_wksDefine("asyncIterator");var _meta=createCommonjsModule(function(e){var t=_uid("meta"),r=_objectDp.f,n=0,o=Object.isExtensible||function(){return !0},i=!_fails(function(){return o(Object.preventExtensions({}))}),s=function(e){r(e,t,{value:{i:"O"+ ++n,w:{}}});},a=e.exports={KEY:t,NEED:!1,fastKey:function(e,r){if(!_isObject(e))return "symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!_has(e,t)){if(!o(e))return "F";if(!r)return "E";s(e);}return e[t].i},getWeak:function(e,r){if(!_has(e,t)){if(!o(e))return !0;if(!r)return !1;s(e);}return e[t].w},onFreeze:function(e){return i&&a.NEED&&o(e)&&!_has(e,t)&&s(e),e}};}),_meta_1=_meta.KEY,_meta_2=_meta.NEED,_meta_3=_meta.fastKey,_meta_4=_meta.getWeak,_meta_5=_meta.onFreeze,f$3=Object.getOwnPropertySymbols,_objectGops={f:f$3},_enumKeys=function(e){var t=_objectKeys(e),r=_objectGops.f;if(r)for(var n,o=r(e),i=_objectPie.f,s=0;o.length>s;)i.call(e,n=o[s++])&&t.push(n);return t},_isArray=Array.isArray||function(e){return "Array"==_cof(e)},hiddenKeys=_enumBugKeys.concat("length","prototype"),f$4=Object.getOwnPropertyNames||function(e){return _objectKeysInternal(e,hiddenKeys)},_objectGopn={f:f$4},gOPN=_objectGopn.f,toString$1={}.toString,windowNames="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],getWindowNames=function(e){try{return gOPN(e)}catch(e){return windowNames.slice()}},f$5=function(e){return windowNames&&"[object Window]"==toString$1.call(e)?getWindowNames(e):gOPN(_toIobject(e))},_objectGopnExt={f:f$5},gOPD=Object.getOwnPropertyDescriptor,f$6=_descriptors?gOPD:function(e,t){if(e=_toIobject(e),t=_toPrimitive(t,!0),_ie8DomDefine)try{return gOPD(e,t)}catch(e){}if(_has(e,t))return _propertyDesc(!_objectPie.f.call(e,t),e[t])},_objectGopd={f:f$6},META=_meta.KEY,gOPD$1=_objectGopd.f,dP$2=_objectDp.f,gOPN$1=_objectGopnExt.f,$Symbol=_global.Symbol,$JSON=_global.JSON,_stringify=$JSON&&$JSON.stringify,PROTOTYPE$2="prototype",HIDDEN=_wks("_hidden"),TO_PRIMITIVE=_wks("toPrimitive"),isEnum$1={}.propertyIsEnumerable,SymbolRegistry=_shared("symbol-registry"),AllSymbols=_shared("symbols"),OPSymbols=_shared("op-symbols"),ObjectProto$1=Object[PROTOTYPE$2],USE_NATIVE="function"==typeof $Symbol&&!!_objectGops.f,QObject=_global.QObject,setter=!QObject||!QObject[PROTOTYPE$2]||!QObject[PROTOTYPE$2].findChild,setSymbolDesc=_descriptors&&_fails(function(){return 7!=_objectCreate(dP$2({},"a",{get:function(){return dP$2(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=gOPD$1(ObjectProto$1,t);n&&delete ObjectProto$1[t],dP$2(e,t,r),n&&e!==ObjectProto$1&&dP$2(ObjectProto$1,t,n);}:dP$2,wrap=function(e){var t=AllSymbols[e]=_objectCreate($Symbol[PROTOTYPE$2]);return t._k=e,t},isSymbol=USE_NATIVE&&"symbol"==typeof $Symbol.iterator?function(e){return "symbol"==typeof e}:function(e){return e instanceof $Symbol},$defineProperty=function(e,t,r){return e===ObjectProto$1&&$defineProperty(OPSymbols,t,r),_anObject(e),t=_toPrimitive(t,!0),_anObject(r),_has(AllSymbols,t)?(r.enumerable?(_has(e,HIDDEN)&&e[HIDDEN][t]&&(e[HIDDEN][t]=!1),r=_objectCreate(r,{enumerable:_propertyDesc(0,!1)})):(_has(e,HIDDEN)||dP$2(e,HIDDEN,_propertyDesc(1,{})),e[HIDDEN][t]=!0),setSymbolDesc(e,t,r)):dP$2(e,t,r)},$defineProperties=function(e,t){_anObject(e);for(var r,n=_enumKeys(t=_toIobject(t)),o=0,i=n.length;i>o;)$defineProperty(e,r=n[o++],t[r]);return e},$create=function(e,t){return void 0===t?_objectCreate(e):$defineProperties(_objectCreate(e),t)},$propertyIsEnumerable=function(e){var t=isEnum$1.call(this,e=_toPrimitive(e,!0));return !(this===ObjectProto$1&&_has(AllSymbols,e)&&!_has(OPSymbols,e))&&(!(t||!_has(this,e)||!_has(AllSymbols,e)||_has(this,HIDDEN)&&this[HIDDEN][e])||t)},$getOwnPropertyDescriptor=function(e,t){if(e=_toIobject(e),t=_toPrimitive(t,!0),e!==ObjectProto$1||!_has(AllSymbols,t)||_has(OPSymbols,t)){var r=gOPD$1(e,t);return !r||!_has(AllSymbols,t)||_has(e,HIDDEN)&&e[HIDDEN][t]||(r.enumerable=!0),r}},$getOwnPropertyNames=function(e){for(var t,r=gOPN$1(_toIobject(e)),n=[],o=0;r.length>o;)_has(AllSymbols,t=r[o++])||t==HIDDEN||t==META||n.push(t);return n},$getOwnPropertySymbols=function(e){for(var t,r=e===ObjectProto$1,n=gOPN$1(r?OPSymbols:_toIobject(e)),o=[],i=0;n.length>i;)!_has(AllSymbols,t=n[i++])||r&&!_has(ObjectProto$1,t)||o.push(AllSymbols[t]);return o};USE_NATIVE||($Symbol=function(){if(this instanceof $Symbol)throw TypeError("Symbol is not a constructor!");var e=_uid(arguments.length>0?arguments[0]:void 0),t=function(r){this===ObjectProto$1&&t.call(OPSymbols,r),_has(this,HIDDEN)&&_has(this[HIDDEN],e)&&(this[HIDDEN][e]=!1),setSymbolDesc(this,e,_propertyDesc(1,r));};return _descriptors&&setter&&setSymbolDesc(ObjectProto$1,e,{configurable:!0,set:t}),wrap(e)},_redefine($Symbol[PROTOTYPE$2],"toString",function(){return this._k}),_objectGopd.f=$getOwnPropertyDescriptor,_objectDp.f=$defineProperty,_objectGopn.f=_objectGopnExt.f=$getOwnPropertyNames,_objectPie.f=$propertyIsEnumerable,_objectGops.f=$getOwnPropertySymbols,_descriptors&&!_library&&_redefine(ObjectProto$1,"propertyIsEnumerable",$propertyIsEnumerable,!0),_wksExt.f=function(e){return wrap(_wks(e))}),_export(_export.G+_export.W+_export.F*!USE_NATIVE,{Symbol:$Symbol});for(var es6Symbols="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),j=0;es6Symbols.length>j;)_wks(es6Symbols[j++]);for(var wellKnownSymbols=_objectKeys(_wks.store),k=0;wellKnownSymbols.length>k;)_wksDefine(wellKnownSymbols[k++]);_export(_export.S+_export.F*!USE_NATIVE,"Symbol",{for:function(e){return _has(SymbolRegistry,e+="")?SymbolRegistry[e]:SymbolRegistry[e]=$Symbol(e)},keyFor:function(e){if(!isSymbol(e))throw TypeError(e+" is not a symbol!");for(var t in SymbolRegistry)if(SymbolRegistry[t]===e)return t},useSetter:function(){setter=!0;},useSimple:function(){setter=!1;}}),_export(_export.S+_export.F*!USE_NATIVE,"Object",{create:$create,defineProperty:$defineProperty,defineProperties:$defineProperties,getOwnPropertyDescriptor:$getOwnPropertyDescriptor,getOwnPropertyNames:$getOwnPropertyNames,getOwnPropertySymbols:$getOwnPropertySymbols});var FAILS_ON_PRIMITIVES=_fails(function(){_objectGops.f(1);});_export(_export.S+_export.F*FAILS_ON_PRIMITIVES,"Object",{getOwnPropertySymbols:function(e){return _objectGops.f(_toObject(e))}}),$JSON&&_export(_export.S+_export.F*(!USE_NATIVE||_fails(function(){var e=$Symbol();return "[null]"!=_stringify([e])||"{}"!=_stringify({a:e})||"{}"!=_stringify(Object(e))})),"JSON",{stringify:function(e){for(var t,r,n=[e],o=1;arguments.length>o;)n.push(arguments[o++]);if(r=t=n[1],(_isObject(t)||void 0!==e)&&!isSymbol(e))return _isArray(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!isSymbol(t))return t}),n[1]=t,_stringify.apply($JSON,n)}}),$Symbol[PROTOTYPE$2][TO_PRIMITIVE]||_hide($Symbol[PROTOTYPE$2],TO_PRIMITIVE,$Symbol[PROTOTYPE$2].valueOf),_setToStringTag($Symbol,"Symbol"),_setToStringTag(Math,"Math",!0),_setToStringTag(_global.JSON,"JSON",!0),function(e){var t=function(){try{return !!Symbol.iterator}catch(e){return !1}}(),r=function(e){var r={next:function(){var t=e.shift();return {done:void 0===t,value:t}}};return t&&(r[Symbol.iterator]=function(){return r}),r},n=function(e){return encodeURIComponent(e).replace(/%20/g,"+")},o=function(e){return decodeURIComponent(String(e).replace(/\+/g," "))};(function(){try{var t=e.URLSearchParams;return "a=1"===new t("?a=1").toString()&&"function"==typeof t.prototype.set}catch(e){return !1}})()||function(){var o=function e(t){Object.defineProperty(this,"_entries",{writable:!0,value:{}});var r=_typeof(t);if("undefined"===r);else if("string"===r)""!==t&&this._fromString(t);else if(t instanceof e){var n=this;t.forEach(function(e,t){n.append(t,e);});}else {if(null===t||"object"!==r)throw new TypeError("Unsupported input's type for URLSearchParams");if("[object Array]"===Object.prototype.toString.call(t))for(var o=0;o<t.length;o++){var i=t[o];if("[object Array]"!==Object.prototype.toString.call(i)&&2===i.length)throw new TypeError("Expected [string, any] as entry at index "+o+" of URLSearchParams's input");this.append(i[0],i[1]);}else for(var s in t)t.hasOwnProperty(s)&&this.append(s,t[s]);}},i=o.prototype;i.append=function(e,t){e in this._entries?this._entries[e].push(String(t)):this._entries[e]=[String(t)];},i.delete=function(e){delete this._entries[e];},i.get=function(e){return e in this._entries?this._entries[e][0]:null},i.getAll=function(e){return e in this._entries?this._entries[e].slice(0):[]},i.has=function(e){return e in this._entries},i.set=function(e,t){this._entries[e]=[String(t)];},i.forEach=function(e,t){var r;for(var n in this._entries)if(this._entries.hasOwnProperty(n)){r=this._entries[n];for(var o=0;o<r.length;o++)e.call(t,r[o],n,this);}},i.keys=function(){var e=[];return this.forEach(function(t,r){e.push(r);}),r(e)},i.values=function(){var e=[];return this.forEach(function(t){e.push(t);}),r(e)},i.entries=function(){var e=[];return this.forEach(function(t,r){e.push([r,t]);}),r(e)},t&&(i[Symbol.iterator]=i.entries),i.toString=function(){var e=[];return this.forEach(function(t,r){e.push(n(r)+"="+n(t));}),e.join("&")},e.URLSearchParams=o;}();var i=e.URLSearchParams.prototype;"function"!=typeof i.sort&&(i.sort=function(){var e=this,t=[];this.forEach(function(r,n){t.push([n,r]),e._entries||e.delete(n);}),t.sort(function(e,t){return e[0]<t[0]?-1:e[0]>t[0]?1:0}),e._entries&&(e._entries={});for(var r=0;r<t.length;r++)this.append(t[r][0],t[r][1]);}),"function"!=typeof i._fromString&&Object.defineProperty(i,"_fromString",{enumerable:!1,configurable:!1,writable:!1,value:function(e){if(this._entries)this._entries={};else {var t=[];this.forEach(function(e,r){t.push(r);});for(var r=0;r<t.length;r++)this.delete(t[r]);}var n,i=(e=e.replace(/^\?/,"")).split("&");for(r=0;r<i.length;r++)n=i[r].split("="),this.append(o(n[0]),n.length>1?o(n[1]):"");}});}(void 0!==commonjsGlobal$1?commonjsGlobal$1:"undefined"!=typeof window?window:"undefined"!=typeof self?self:commonjsGlobal$1),function(e){var t,r,n;if(function(){try{var t=new e.URL("b","http://a");return t.pathname="c%20d","http://a/c%20d"===t.href&&t.searchParams}catch(e){return !1}}()||(t=e.URL,n=(r=function(t,r){"string"!=typeof t&&(t=String(t));var n,o=document;if(r&&(void 0===e.location||r!==e.location.href)){(n=(o=document.implementation.createHTMLDocument("")).createElement("base")).href=r,o.head.appendChild(n);try{if(0!==n.href.indexOf(r))throw new Error(n.href)}catch(e){throw new Error("URL unable to set base "+r+" due to "+e)}}var i=o.createElement("a");if(i.href=t,n&&(o.body.appendChild(i),i.href=i.href),":"===i.protocol||!/:/.test(i.href))throw new TypeError("Invalid URL");Object.defineProperty(this,"_anchorElement",{value:i});var s=new e.URLSearchParams(this.search),a=!0,u=!0,l=this;["append","delete","set"].forEach(function(e){var t=s[e];s[e]=function(){t.apply(s,arguments),a&&(u=!1,l.search=s.toString(),u=!0);};}),Object.defineProperty(this,"searchParams",{value:s,enumerable:!0});var c=void 0;Object.defineProperty(this,"_updateSearchParams",{enumerable:!1,configurable:!1,writable:!1,value:function(){this.search!==c&&(c=this.search,u&&(a=!1,this.searchParams._fromString(this.search),a=!0));}});}).prototype,["hash","host","hostname","port","protocol"].forEach(function(e){!function(e){Object.defineProperty(n,e,{get:function(){return this._anchorElement[e]},set:function(t){this._anchorElement[e]=t;},enumerable:!0});}(e);}),Object.defineProperty(n,"search",{get:function(){return this._anchorElement.search},set:function(e){this._anchorElement.search=e,this._updateSearchParams();},enumerable:!0}),Object.defineProperties(n,{toString:{get:function(){var e=this;return function(){return e.href}}},href:{get:function(){return this._anchorElement.href.replace(/\?$/,"")},set:function(e){this._anchorElement.href=e,this._updateSearchParams();},enumerable:!0},pathname:{get:function(){return this._anchorElement.pathname.replace(/(^\/?)/,"/")},set:function(e){this._anchorElement.pathname=e;},enumerable:!0},origin:{get:function(){var e={"http:":80,"https:":443,"ftp:":21}[this._anchorElement.protocol],t=this._anchorElement.port!=e&&""!==this._anchorElement.port;return this._anchorElement.protocol+"//"+this._anchorElement.hostname+(t?":"+this._anchorElement.port:"")},enumerable:!0},password:{get:function(){return ""},set:function(e){},enumerable:!0},username:{get:function(){return ""},set:function(e){},enumerable:!0}}),r.createObjectURL=function(e){return t.createObjectURL.apply(t,arguments)},r.revokeObjectURL=function(e){return t.revokeObjectURL.apply(t,arguments)},e.URL=r),void 0!==e.location&&!("origin"in e.location)){var o=function(){return e.location.protocol+"//"+e.location.hostname+(e.location.port?":"+e.location.port:"")};try{Object.defineProperty(e.location,"origin",{get:o,enumerable:!0});}catch(t){setInterval(function(){e.location.origin=o();},100);}}}(void 0!==commonjsGlobal$1?commonjsGlobal$1:"undefined"!=typeof window?window:"undefined"!=typeof self?self:commonjsGlobal$1);for(var TYPED=_uid("typed_array"),VIEW=_uid("view"),ABV=!(!_global.ArrayBuffer||!_global.DataView),CONSTR=ABV,i$1=0,l=9,Typed,TypedArrayConstructors="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");i$1<l;)(Typed=_global[TypedArrayConstructors[i$1++]])?(_hide(Typed.prototype,TYPED,!0),_hide(Typed.prototype,VIEW,!0)):CONSTR=!1;var _typed={ABV:ABV,CONSTR:CONSTR,TYPED:TYPED,VIEW:VIEW},_redefineAll=function(e,t,r){for(var n in t)_redefine(e,n,t[n],r);return e},_anInstance=function(e,t,r,n){if(!(e instanceof t)||void 0!==n&&n in e)throw TypeError(r+": incorrect invocation!");return e},_toIndex=function(e){if(void 0===e)return 0;var t=_toInteger(e),r=_toLength(t);if(t!==r)throw RangeError("Wrong length!");return r},_arrayFill=function(e){for(var t=_toObject(this),r=_toLength(t.length),n=arguments.length,o=_toAbsoluteIndex(n>1?arguments[1]:void 0,r),i=n>2?arguments[2]:void 0,s=void 0===i?r:_toAbsoluteIndex(i,r);s>o;)t[o++]=e;return t},_typedBuffer=createCommonjsModule(function(e,t){var r=_objectGopn.f,n=_objectDp.f,o="prototype",i="Wrong index!",s=_global.ArrayBuffer,a=_global.DataView,u=_global.Math,l=_global.RangeError,c=_global.Infinity,p=s,f=u.abs,d=u.pow,g=u.floor,h=u.log,b=u.LN2,_=_descriptors?"_b":"buffer",y=_descriptors?"_l":"byteLength",m=_descriptors?"_o":"byteOffset";function v(e,t,r){var n,o,i,s=new Array(r),a=8*r-t-1,u=(1<<a)-1,l=u>>1,p=23===t?d(2,-24)-d(2,-77):0,_=0,y=e<0||0===e&&1/e<0?1:0;for((e=f(e))!=e||e===c?(o=e!=e?1:0,n=u):(n=g(h(e)/b),e*(i=d(2,-n))<1&&(n--,i*=2),(e+=n+l>=1?p/i:p*d(2,1-l))*i>=2&&(n++,i/=2),n+l>=u?(o=0,n=u):n+l>=1?(o=(e*i-1)*d(2,t),n+=l):(o=e*d(2,l-1)*d(2,t),n=0));t>=8;s[_++]=255&o,o/=256,t-=8);for(n=n<<t|o,a+=t;a>0;s[_++]=255&n,n/=256,a-=8);return s[--_]|=128*y,s}function $(e,t,r){var n,o=8*r-t-1,i=(1<<o)-1,s=i>>1,a=o-7,u=r-1,l=e[u--],p=127&l;for(l>>=7;a>0;p=256*p+e[u],u--,a-=8);for(n=p&(1<<-a)-1,p>>=-a,a+=t;a>0;n=256*n+e[u],u--,a-=8);if(0===p)p=1-s;else {if(p===i)return n?NaN:l?-c:c;n+=d(2,t),p-=s;}return (l?-1:1)*n*d(2,p-t)}function E(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function I(e){return [255&e]}function S(e){return [255&e,e>>8&255]}function w(e){return [255&e,e>>8&255,e>>16&255,e>>24&255]}function O(e){return v(e,52,8)}function R(e){return v(e,23,4)}function T(e,t,r){n(e[o],t,{get:function(){return this[r]}});}function A(e,t,r,n){var o=_toIndex(+r);if(o+t>e[y])throw l(i);var s=e[_]._b,a=o+e[m],u=s.slice(a,a+t);return n?u:u.reverse()}function N(e,t,r,n,o,s){var a=_toIndex(+r);if(a+t>e[y])throw l(i);for(var u=e[_]._b,c=a+e[m],p=n(+o),f=0;f<t;f++)u[c+f]=p[s?f:t-f-1];}if(_typed.ABV){if(!_fails(function(){s(1);})||!_fails(function(){new s(-1);})||_fails(function(){return new s,new s(1.5),new s(NaN),"ArrayBuffer"!=s.name})){for(var L,P=(s=function(e){return _anInstance(this,s),new p(_toIndex(e))})[o]=p[o],C=r(p),k=0;C.length>k;)(L=C[k++])in s||_hide(s,L,p[L]);P.constructor=s;}var x=new a(new s(2)),q=a[o].setInt8;x.setInt8(0,2147483648),x.setInt8(1,2147483649),!x.getInt8(0)&&x.getInt8(1)||_redefineAll(a[o],{setInt8:function(e,t){q.call(this,e,t<<24>>24);},setUint8:function(e,t){q.call(this,e,t<<24>>24);}},!0);}else s=function(e){_anInstance(this,s,"ArrayBuffer");var t=_toIndex(e);this._b=_arrayFill.call(new Array(t),0),this[y]=t;},a=function(e,t,r){_anInstance(this,a,"DataView"),_anInstance(e,s,"DataView");var n=e[y],o=_toInteger(t);if(o<0||o>n)throw l("Wrong offset!");if(o+(r=void 0===r?n-o:_toLength(r))>n)throw l("Wrong length!");this[_]=e,this[m]=o,this[y]=r;},_descriptors&&(T(s,"byteLength","_l"),T(a,"buffer","_b"),T(a,"byteLength","_l"),T(a,"byteOffset","_o")),_redefineAll(a[o],{getInt8:function(e){return A(this,1,e)[0]<<24>>24},getUint8:function(e){return A(this,1,e)[0]},getInt16:function(e){var t=A(this,2,e,arguments[1]);return (t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=A(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return E(A(this,4,e,arguments[1]))},getUint32:function(e){return E(A(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return $(A(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return $(A(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){N(this,1,e,I,t);},setUint8:function(e,t){N(this,1,e,I,t);},setInt16:function(e,t){N(this,2,e,S,t,arguments[2]);},setUint16:function(e,t){N(this,2,e,S,t,arguments[2]);},setInt32:function(e,t){N(this,4,e,w,t,arguments[2]);},setUint32:function(e,t){N(this,4,e,w,t,arguments[2]);},setFloat32:function(e,t){N(this,4,e,R,t,arguments[2]);},setFloat64:function(e,t){N(this,8,e,O,t,arguments[2]);}});_setToStringTag(s,"ArrayBuffer"),_setToStringTag(a,"DataView"),_hide(a[o],_typed.VIEW,!0),t.ArrayBuffer=s,t.DataView=a;}),SPECIES$2=_wks("species"),_arraySpeciesConstructor=function(e){var t;return _isArray(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!_isArray(t.prototype)||(t=void 0),_isObject(t)&&null===(t=t[SPECIES$2])&&(t=void 0)),void 0===t?Array:t},_arraySpeciesCreate=function(e,t){return new(_arraySpeciesConstructor(e))(t)},_arrayMethods=function(e,t){var r=1==e,n=2==e,o=3==e,i=4==e,s=6==e,a=5==e||s,u=t||_arraySpeciesCreate;return function(t,l,c){for(var p,f,d=_toObject(t),g=_iobject(d),h=_ctx(l,c,3),b=_toLength(g.length),_=0,y=r?u(t,b):n?u(t,0):void 0;b>_;_++)if((a||_ in g)&&(f=h(p=g[_],_,d),e))if(r)y[_]=f;else if(f)switch(e){case 3:return !0;case 5:return p;case 6:return _;case 2:y.push(p);}else if(i)return !1;return s?-1:o||i?i:y}},SPECIES$3=_wks("species"),_setSpecies=function(e){var t=_global[e];_descriptors&&t&&!t[SPECIES$3]&&_objectDp.f(t,SPECIES$3,{configurable:!0,get:function(){return this}});},_arrayCopyWithin=[].copyWithin||function(e,t){var r=_toObject(this),n=_toLength(r.length),o=_toAbsoluteIndex(e,n),i=_toAbsoluteIndex(t,n),s=arguments.length>2?arguments[2]:void 0,a=Math.min((void 0===s?n:_toAbsoluteIndex(s,n))-i,n-o),u=1;for(i<o&&o<i+a&&(u=-1,i+=a-1,o+=a-1);a-- >0;)i in r?r[o]=r[i]:delete r[o],o+=u,i+=u;return r},_typedArray=createCommonjsModule(function(e){if(_descriptors){var t=_library,r=_global,n=_fails,o=_export,i=_typed,s=_typedBuffer,a=_ctx,u=_anInstance,l=_propertyDesc,c=_hide,p=_redefineAll,f=_toInteger,d=_toLength,g=_toIndex,h=_toAbsoluteIndex,b=_toPrimitive,_=_has,y=_classof,m=_isObject,v=_toObject,$=_isArrayIter,E=_objectCreate,I=_objectGpo,S=_objectGopn.f,w=core_getIteratorMethod,O=_uid,R=_wks,T=_arrayMethods,A=_arrayIncludes,N=_speciesConstructor,L=es6_array_iterator,P=_iterators,C=_iterDetect,k=_setSpecies,x=_arrayFill,q=_arrayCopyWithin,M=_objectDp,j=_objectGopd,U=M.f,D=j.f,B=r.RangeError,G=r.TypeError,F=r.Uint8Array,V=Array.prototype,H=s.ArrayBuffer,z=s.DataView,W=T(0),K=T(2),J=T(3),Z=T(4),Y=T(5),X=T(6),Q=A(!0),ee=A(!1),te=L.values,re=L.keys,ne=L.entries,oe=V.lastIndexOf,ie=V.reduce,se=V.reduceRight,ae=V.join,ue=V.sort,le=V.slice,ce=V.toString,pe=V.toLocaleString,fe=R("iterator"),de=R("toStringTag"),ge=O("typed_constructor"),he=O("def_constructor"),be=i.CONSTR,_e=i.TYPED,ye=i.VIEW,me=T(1,function(e,t){return Se(N(e,e[he]),t)}),ve=n(function(){return 1===new F(new Uint16Array([1]).buffer)[0]}),$e=!!F&&!!F.prototype.set&&n(function(){new F(1).set({});}),Ee=function(e,t){var r=f(e);if(r<0||r%t)throw B("Wrong offset!");return r},Ie=function(e){if(m(e)&&_e in e)return e;throw G(e+" is not a typed array!")},Se=function(e,t){if(!(m(e)&&ge in e))throw G("It is not a typed array constructor!");return new e(t)},we=function(e,t){return Oe(N(e,e[he]),t)},Oe=function(e,t){for(var r=0,n=t.length,o=Se(e,n);n>r;)o[r]=t[r++];return o},Re=function(e,t,r){U(e,t,{get:function(){return this._d[r]}});},Te=function(e){var t,r,n,o,i,s,u=v(e),l=arguments.length,c=l>1?arguments[1]:void 0,p=void 0!==c,f=w(u);if(null!=f&&!$(f)){for(s=f.call(u),n=[],t=0;!(i=s.next()).done;t++)n.push(i.value);u=n;}for(p&&l>2&&(c=a(c,arguments[2],2)),t=0,r=d(u.length),o=Se(this,r);r>t;t++)o[t]=p?c(u[t],t):u[t];return o},Ae=function(){for(var e=0,t=arguments.length,r=Se(this,t);t>e;)r[e]=arguments[e++];return r},Ne=!!F&&n(function(){pe.call(new F(1));}),Le=function(){return pe.apply(Ne?le.call(Ie(this)):Ie(this),arguments)},Pe={copyWithin:function(e,t){return q.call(Ie(this),e,t,arguments.length>2?arguments[2]:void 0)},every:function(e){return Z(Ie(this),e,arguments.length>1?arguments[1]:void 0)},fill:function(e){return x.apply(Ie(this),arguments)},filter:function(e){return we(this,K(Ie(this),e,arguments.length>1?arguments[1]:void 0))},find:function(e){return Y(Ie(this),e,arguments.length>1?arguments[1]:void 0)},findIndex:function(e){return X(Ie(this),e,arguments.length>1?arguments[1]:void 0)},forEach:function(e){W(Ie(this),e,arguments.length>1?arguments[1]:void 0);},indexOf:function(e){return ee(Ie(this),e,arguments.length>1?arguments[1]:void 0)},includes:function(e){return Q(Ie(this),e,arguments.length>1?arguments[1]:void 0)},join:function(e){return ae.apply(Ie(this),arguments)},lastIndexOf:function(e){return oe.apply(Ie(this),arguments)},map:function(e){return me(Ie(this),e,arguments.length>1?arguments[1]:void 0)},reduce:function(e){return ie.apply(Ie(this),arguments)},reduceRight:function(e){return se.apply(Ie(this),arguments)},reverse:function(){for(var e,t=Ie(this).length,r=Math.floor(t/2),n=0;n<r;)e=this[n],this[n++]=this[--t],this[t]=e;return this},some:function(e){return J(Ie(this),e,arguments.length>1?arguments[1]:void 0)},sort:function(e){return ue.call(Ie(this),e)},subarray:function(e,t){var r=Ie(this),n=r.length,o=h(e,n);return new(N(r,r[he]))(r.buffer,r.byteOffset+o*r.BYTES_PER_ELEMENT,d((void 0===t?n:h(t,n))-o))}},Ce=function(e,t){return we(this,le.call(Ie(this),e,t))},ke=function(e){Ie(this);var t=Ee(arguments[1],1),r=this.length,n=v(e),o=d(n.length),i=0;if(o+t>r)throw B("Wrong length!");for(;i<o;)this[t+i]=n[i++];},xe={entries:function(){return ne.call(Ie(this))},keys:function(){return re.call(Ie(this))},values:function(){return te.call(Ie(this))}},qe=function(e,t){return m(e)&&e[_e]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},Me=function(e,t){return qe(e,t=b(t,!0))?l(2,e[t]):D(e,t)},je=function(e,t,r){return !(qe(e,t=b(t,!0))&&m(r)&&_(r,"value"))||_(r,"get")||_(r,"set")||r.configurable||_(r,"writable")&&!r.writable||_(r,"enumerable")&&!r.enumerable?U(e,t,r):(e[t]=r.value,e)};be||(j.f=Me,M.f=je),o(o.S+o.F*!be,"Object",{getOwnPropertyDescriptor:Me,defineProperty:je}),n(function(){ce.call({});})&&(ce=pe=function(){return ae.call(this)});var Ue=p({},Pe);p(Ue,xe),c(Ue,fe,xe.values),p(Ue,{slice:Ce,set:ke,constructor:function(){},toString:ce,toLocaleString:Le}),Re(Ue,"buffer","b"),Re(Ue,"byteOffset","o"),Re(Ue,"byteLength","l"),Re(Ue,"length","e"),U(Ue,de,{get:function(){return this[_e]}}),e.exports=function(e,s,a,l){var p=e+((l=!!l)?"Clamped":"")+"Array",f="get"+e,h="set"+e,b=r[p],_=b||{},v=b&&I(b),$=!b||!i.ABV,w={},O=b&&b.prototype,R=function(e,t){U(e,t,{get:function(){return function(e,t){var r=e._d;return r.v[f](t*s+r.o,ve)}(this,t)},set:function(e){return function(e,t,r){var n=e._d;l&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),n.v[h](t*s+n.o,r,ve);}(this,t,e)},enumerable:!0});};$?(b=a(function(e,t,r,n){u(e,b,p,"_d");var o,i,a,l,f=0,h=0;if(m(t)){if(!(t instanceof H||"ArrayBuffer"==(l=y(t))||"SharedArrayBuffer"==l))return _e in t?Oe(b,t):Te.call(b,t);o=t,h=Ee(r,s);var _=t.byteLength;if(void 0===n){if(_%s)throw B("Wrong length!");if((i=_-h)<0)throw B("Wrong length!")}else if((i=d(n)*s)+h>_)throw B("Wrong length!");a=i/s;}else a=g(t),o=new H(i=a*s);for(c(e,"_d",{b:o,o:h,l:i,e:a,v:new z(o)});f<a;)R(e,f++);}),O=b.prototype=E(Ue),c(O,"constructor",b)):n(function(){b(1);})&&n(function(){new b(-1);})&&C(function(e){new b,new b(null),new b(1.5),new b(e);},!0)||(b=a(function(e,t,r,n){var o;return u(e,b,p),m(t)?t instanceof H||"ArrayBuffer"==(o=y(t))||"SharedArrayBuffer"==o?void 0!==n?new _(t,Ee(r,s),n):void 0!==r?new _(t,Ee(r,s)):new _(t):_e in t?Oe(b,t):Te.call(b,t):new _(g(t))}),W(v!==Function.prototype?S(_).concat(S(v)):S(_),function(e){e in b||c(b,e,_[e]);}),b.prototype=O,t||(O.constructor=b));var T=O[fe],A=!!T&&("values"==T.name||null==T.name),N=xe.values;c(b,ge,!0),c(O,_e,p),c(O,ye,!0),c(O,he,b),(l?new b(1)[de]==p:de in O)||U(O,de,{get:function(){return p}}),w[p]=b,o(o.G+o.W+o.F*(b!=_),w),o(o.S,p,{BYTES_PER_ELEMENT:s}),o(o.S+o.F*n(function(){_.of.call(b,1);}),p,{from:Te,of:Ae}),"BYTES_PER_ELEMENT"in O||c(O,"BYTES_PER_ELEMENT",s),o(o.P,p,Pe),k(p),o(o.P+o.F*$e,p,{set:ke}),o(o.P+o.F*!A,p,xe),t||O.toString==ce||(O.toString=ce),o(o.P+o.F*n(function(){new b(1).slice();}),p,{slice:Ce}),o(o.P+o.F*(n(function(){return [1,2].toLocaleString()!=new b([1,2]).toLocaleString()})||!n(function(){O.toLocaleString.call([1,2]);})),p,{toLocaleString:Le}),P[p]=A?T:N,t||A||c(O,fe,N);};}else e.exports=function(){};});_typedArray("Uint8",1,function(e){return function(t,r,n){return e(this,t,r,n)}});var _forOf=createCommonjsModule(function(e){var t={},r={},n=e.exports=function(e,n,o,i,s){var a,u,l,c,p=s?function(){return e}:core_getIteratorMethod(e),f=_ctx(o,i,n?2:1),d=0;if("function"!=typeof p)throw TypeError(e+" is not iterable!");if(_isArrayIter(p)){for(a=_toLength(e.length);a>d;d++)if((c=n?f(_anObject(u=e[d])[0],u[1]):f(e[d]))===t||c===r)return c}else for(l=p.call(e);!(u=l.next()).done;)if((c=_iterCall(l,f,u.value,n))===t||c===r)return c};n.BREAK=t,n.RETURN=r;}),_invoke=function(e,t,r){var n=void 0===r;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3])}return e.apply(r,t)},process$1=_global.process,setTask=_global.setImmediate,clearTask=_global.clearImmediate,MessageChannel=_global.MessageChannel,Dispatch=_global.Dispatch,counter=0,queue={},ONREADYSTATECHANGE="onreadystatechange",defer,channel,port,run=function(){var e=+this;if(queue.hasOwnProperty(e)){var t=queue[e];delete queue[e],t();}},listener=function(e){run.call(e.data);};setTask&&clearTask||(setTask=function(e){for(var t=[],r=1;arguments.length>r;)t.push(arguments[r++]);return queue[++counter]=function(){_invoke("function"==typeof e?e:Function(e),t);},defer(counter),counter},clearTask=function(e){delete queue[e];},"process"==_cof(process$1)?defer=function(e){process$1.nextTick(_ctx(run,e,1));}:Dispatch&&Dispatch.now?defer=function(e){Dispatch.now(_ctx(run,e,1));}:MessageChannel?(channel=new MessageChannel,port=channel.port2,channel.port1.onmessage=listener,defer=_ctx(port.postMessage,port,1)):_global.addEventListener&&"function"==typeof postMessage&&!_global.importScripts?(defer=function(e){_global.postMessage(e+"","*");},_global.addEventListener("message",listener,!1)):defer=ONREADYSTATECHANGE in _domCreate("script")?function(e){_html.appendChild(_domCreate("script"))[ONREADYSTATECHANGE]=function(){_html.removeChild(this),run.call(e);};}:function(e){setTimeout(_ctx(run,e,1),0);});var _task={set:setTask,clear:clearTask},macrotask=_task.set,Observer=_global.MutationObserver||_global.WebKitMutationObserver,process$2=_global.process,Promise$1=_global.Promise,isNode="process"==_cof(process$2),_microtask=function(){var e,t,r,n=function(){var n,o;for(isNode&&(n=process$2.domain)&&n.exit();e;){o=e.fn,e=e.next;try{o();}catch(n){throw e?r():t=void 0,n}}t=void 0,n&&n.enter();};if(isNode)r=function(){process$2.nextTick(n);};else if(!Observer||_global.navigator&&_global.navigator.standalone)if(Promise$1&&Promise$1.resolve){var o=Promise$1.resolve(void 0);r=function(){o.then(n);};}else r=function(){macrotask.call(_global,n);};else {var i=!0,s=document.createTextNode("");new Observer(n).observe(s,{characterData:!0}),r=function(){s.data=i=!i;};}return function(n){var o={fn:n,next:void 0};t&&(t.next=o),e||(e=o,r()),t=o;}};function PromiseCapability(e){var t,r;this.promise=new e(function(e,n){if(void 0!==t||void 0!==r)throw TypeError("Bad Promise constructor");t=e,r=n;}),this.resolve=_aFunction(t),this.reject=_aFunction(r);}var f$7=function(e){return new PromiseCapability(e)},_newPromiseCapability={f:f$7},_perform=function(e){try{return {e:!1,v:e()}}catch(e){return {e:!0,v:e}}},_promiseResolve=function(e,t){if(_anObject(e),_isObject(t)&&t.constructor===e)return t;var r=_newPromiseCapability.f(e);return (0, r.resolve)(t),r.promise},task=_task.set,microtask=_microtask(),PROMISE="Promise",TypeError$1=_global.TypeError,process$3=_global.process,versions=process$3&&process$3.versions,v8=versions&&versions.v8||"",$Promise=_global[PROMISE],isNode$1="process"==_classof(process$3),empty=function(){},Internal,newGenericPromiseCapability,OwnPromiseCapability,Wrapper,newPromiseCapability=newGenericPromiseCapability=_newPromiseCapability.f,USE_NATIVE$1=!!function(){try{var e=$Promise.resolve(1),t=(e.constructor={})[_wks("species")]=function(e){e(empty,empty);};return (isNode$1||"function"==typeof PromiseRejectionEvent)&&e.then(empty)instanceof t&&0!==v8.indexOf("6.6")&&-1===_userAgent.indexOf("Chrome/66")}catch(e){}}(),isThenable=function(e){var t;return !(!_isObject(e)||"function"!=typeof(t=e.then))&&t},notify=function(e,t){if(!e._n){e._n=!0;var r=e._c;microtask(function(){for(var n=e._v,o=1==e._s,i=0,s=function(t){var r,i,s,a=o?t.ok:t.fail,u=t.resolve,l=t.reject,c=t.domain;try{a?(o||(2==e._h&&onHandleUnhandled(e),e._h=1),!0===a?r=n:(c&&c.enter(),r=a(n),c&&(c.exit(),s=!0)),r===t.promise?l(TypeError$1("Promise-chain cycle")):(i=isThenable(r))?i.call(r,u,l):u(r)):l(n);}catch(e){c&&!s&&c.exit(),l(e);}};r.length>i;)s(r[i++]);e._c=[],e._n=!1,t&&!e._h&&onUnhandled(e);});}},onUnhandled=function(e){task.call(_global,function(){var t,r,n,o=e._v,i=isUnhandled(e);if(i&&(t=_perform(function(){isNode$1?process$3.emit("unhandledRejection",o,e):(r=_global.onunhandledrejection)?r({promise:e,reason:o}):(n=_global.console)&&n.error&&n.error("Unhandled promise rejection",o);}),e._h=isNode$1||isUnhandled(e)?2:1),e._a=void 0,i&&t.e)throw t.v});},isUnhandled=function(e){return 1!==e._h&&0===(e._a||e._c).length},onHandleUnhandled=function(e){task.call(_global,function(){var t;isNode$1?process$3.emit("rejectionHandled",e):(t=_global.onrejectionhandled)&&t({promise:e,reason:e._v});});},$reject=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),notify(t,!0));},$resolve=function(e){var t,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===e)throw TypeError$1("Promise can't be resolved itself");(t=isThenable(e))?microtask(function(){var n={_w:r,_d:!1};try{t.call(e,_ctx($resolve,n,1),_ctx($reject,n,1));}catch(e){$reject.call(n,e);}}):(r._v=e,r._s=1,notify(r,!1));}catch(e){$reject.call({_w:r,_d:!1},e);}}};USE_NATIVE$1||($Promise=function(e){_anInstance(this,$Promise,PROMISE,"_h"),_aFunction(e),Internal.call(this);try{e(_ctx($resolve,this,1),_ctx($reject,this,1));}catch(e){$reject.call(this,e);}},Internal=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1;},Internal.prototype=_redefineAll($Promise.prototype,{then:function(e,t){var r=newPromiseCapability(_speciesConstructor(this,$Promise));return r.ok="function"!=typeof e||e,r.fail="function"==typeof t&&t,r.domain=isNode$1?process$3.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&notify(this,!1),r.promise},catch:function(e){return this.then(void 0,e)}}),OwnPromiseCapability=function(){var e=new Internal;this.promise=e,this.resolve=_ctx($resolve,e,1),this.reject=_ctx($reject,e,1);},_newPromiseCapability.f=newPromiseCapability=function(e){return e===$Promise||e===Wrapper?new OwnPromiseCapability(e):newGenericPromiseCapability(e)}),_export(_export.G+_export.W+_export.F*!USE_NATIVE$1,{Promise:$Promise}),_setToStringTag($Promise,PROMISE),_setSpecies(PROMISE),Wrapper=_core[PROMISE],_export(_export.S+_export.F*!USE_NATIVE$1,PROMISE,{reject:function(e){var t=newPromiseCapability(this);return (0, t.reject)(e),t.promise}}),_export(_export.S+_export.F*!USE_NATIVE$1,PROMISE,{resolve:function(e){return _promiseResolve(this,e)}}),_export(_export.S+_export.F*!(USE_NATIVE$1&&_iterDetect(function(e){$Promise.all(e).catch(empty);})),PROMISE,{all:function(e){var t=this,r=newPromiseCapability(t),n=r.resolve,o=r.reject,i=_perform(function(){var r=[],i=0,s=1;_forOf(e,!1,function(e){var a=i++,u=!1;r.push(void 0),s++,t.resolve(e).then(function(e){u||(u=!0,r[a]=e,--s||n(r));},o);}),--s||n(r);});return i.e&&o(i.v),r.promise},race:function(e){var t=this,r=newPromiseCapability(t),n=r.reject,o=_perform(function(){_forOf(e,!1,function(e){t.resolve(e).then(r.resolve,n);});});return o.e&&n(o.v),r.promise}});var support={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return !1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};function isDataView(e){return e&&DataView.prototype.isPrototypeOf(e)}if(support.arrayBuffer)var viewClasses=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],isArrayBufferView=ArrayBuffer.isView||function(e){return e&&viewClasses.indexOf(Object.prototype.toString.call(e))>-1};function normalizeName(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function normalizeValue(e){return "string"!=typeof e&&(e=String(e)),e}function iteratorFor(e){var t={next:function(){var t=e.shift();return {done:void 0===t,value:t}}};return support.iterable&&(t[Symbol.iterator]=function(){return t}),t}function Headers(e){this.map={},e instanceof Headers?e.forEach(function(e,t){this.append(t,e);},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1]);},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t]);},this);}function consumed(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0;}function fileReaderReady(e){return new Promise(function(t,r){e.onload=function(){t(e.result);},e.onerror=function(){r(e.error);};})}function readBlobAsArrayBuffer(e){var t=new FileReader,r=fileReaderReady(t);return t.readAsArrayBuffer(e),r}function readBlobAsText(e){var t=new FileReader,r=fileReaderReady(t);return t.readAsText(e),r}function readArrayBufferAsText(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}function bufferClone(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function Body(){return this.bodyUsed=!1,this._initBody=function(e){this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:support.blob&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:support.formData&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:support.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():support.arrayBuffer&&support.blob&&isDataView(e)?(this._bodyArrayBuffer=bufferClone(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):support.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(e)||isArrayBufferView(e))?this._bodyArrayBuffer=bufferClone(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):support.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"));},support.blob&&(this.blob=function(){var e=consumed(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?consumed(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(readBlobAsArrayBuffer)}),this.text=function(){var e=consumed(this);if(e)return e;if(this._bodyBlob)return readBlobAsText(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},support.formData&&(this.formData=function(){return this.text().then(decode)}),this.json=function(){return this.text().then(JSON.parse)},this}Headers.prototype.append=function(e,t){e=normalizeName(e),t=normalizeValue(t);var r=this.map[e];this.map[e]=r?r+", "+t:t;},Headers.prototype.delete=function(e){delete this.map[normalizeName(e)];},Headers.prototype.get=function(e){return e=normalizeName(e),this.has(e)?this.map[e]:null},Headers.prototype.has=function(e){return this.map.hasOwnProperty(normalizeName(e))},Headers.prototype.set=function(e,t){this.map[normalizeName(e)]=normalizeValue(t);},Headers.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this);},Headers.prototype.keys=function(){var e=[];return this.forEach(function(t,r){e.push(r);}),iteratorFor(e)},Headers.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t);}),iteratorFor(e)},Headers.prototype.entries=function(){var e=[];return this.forEach(function(t,r){e.push([r,t]);}),iteratorFor(e)},support.iterable&&(Headers.prototype[Symbol.iterator]=Headers.prototype.entries);var methods=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function normalizeMethod(e){var t=e.toUpperCase();return methods.indexOf(t)>-1?t:e}function Request(e,t){var r=(t=t||{}).body;if(e instanceof Request){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new Headers(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,r||null==e._bodyInit||(r=e._bodyInit,e.bodyUsed=!0);}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new Headers(t.headers)),this.method=normalizeMethod(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r);}function decode(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var r=e.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");t.append(decodeURIComponent(n),decodeURIComponent(o));}}),t}function parseHeaders(e){var t=new Headers;return e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(e){var r=e.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();t.append(n,o);}}),t}function Response(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new Headers(t.headers),this.url=t.url||"",this._initBody(e);}Request.prototype.clone=function(){return new Request(this,{body:this._bodyInit})},Body.call(Request.prototype),Body.call(Response.prototype),Response.prototype.clone=function(){return new Response(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new Headers(this.headers),url:this.url})},Response.error=function(){var e=new Response(null,{status:0,statusText:""});return e.type="error",e};var redirectStatuses=[301,302,303,307,308];Response.redirect=function(e,t){if(-1===redirectStatuses.indexOf(t))throw new RangeError("Invalid status code");return new Response(null,{status:t,headers:{location:e}})};var DOMException$1=self.DOMException;try{new DOMException$1;}catch(err){DOMException$1=function(e,t){this.message=e,this.name=t;var r=Error(e);this.stack=r.stack;},DOMException$1.prototype=Object.create(Error.prototype),DOMException$1.prototype.constructor=DOMException$1;}function fetch(e,t){return new Promise(function(r,n){var o=new Request(e,t);if(o.signal&&o.signal.aborted)return n(new DOMException$1("Aborted","AbortError"));var i=new XMLHttpRequest;function s(){i.abort();}i.onload=function(){var e={status:i.status,statusText:i.statusText,headers:parseHeaders(i.getAllResponseHeaders()||"")};e.url="responseURL"in i?i.responseURL:e.headers.get("X-Request-URL");var t="response"in i?i.response:i.responseText;r(new Response(t,e));},i.onerror=function(){n(new TypeError("Network request failed"));},i.ontimeout=function(){n(new TypeError("Network request failed"));},i.onabort=function(){n(new DOMException$1("Aborted","AbortError"));},i.open(o.method,o.url,!0),"include"===o.credentials?i.withCredentials=!0:"omit"===o.credentials&&(i.withCredentials=!1),"responseType"in i&&support.blob&&(i.responseType="blob"),o.headers.forEach(function(e,t){i.setRequestHeader(t,e);}),o.signal&&(o.signal.addEventListener("abort",s),i.onreadystatechange=function(){4===i.readyState&&o.signal.removeEventListener("abort",s);}),i.send(void 0===o._bodyInit?null:o._bodyInit);})}function get(e,t){var r,n,o=arguments.length<3?e:arguments[2];return _anObject(e)===o?e[t]:(r=_objectGopd.f(e,t))?_has(r,"value")?r.value:void 0!==r.get?r.get.call(o):void 0:_isObject(n=_objectGpo(e))?get(n,t,o):void 0}fetch.polyfill=!0,self.fetch||(self.fetch=fetch,self.Headers=Headers,self.Request=Request,self.Response=Response),_export(_export.S,"Reflect",{get:get});var check=function(e,t){if(_anObject(e),!_isObject(t)&&null!==t)throw TypeError(t+": can't set as prototype!")},_setProto={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=_ctx(Function.call,_objectGopd.f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array);}catch(e){t=!0;}return function(e,n){return check(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:check};_export(_export.S,"Object",{setPrototypeOf:_setProto.set}),function(){function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function t(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function r(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}function n(e){return (n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function o(e,t){return (o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function s(e,t,r){return (s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=n(e)););return e}(e,t);if(o){var i=Object.getOwnPropertyDescriptor(o,t);return i.get?i.get.call(r):i.value}})(e,t,r||e)}var a=function(){function t(){e(this,t),Object.defineProperty(this,"listeners",{value:{},writable:!0,configurable:!0});}return r(t,[{key:"addEventListener",value:function(e,t){e in this.listeners||(this.listeners[e]=[]),this.listeners[e].push(t);}},{key:"removeEventListener",value:function(e,t){if(e in this.listeners)for(var r=this.listeners[e],n=0,o=r.length;n<o;n++)if(r[n]===t)return void r.splice(n,1)}},{key:"dispatchEvent",value:function(e){var t=this;if(e.type in this.listeners){for(var r=function(r){setTimeout(function(){return r.call(t,e)});},n=this.listeners[e.type],o=0,i=n.length;o<i;o++)r(n[o]);return !e.defaultPrevented}}}]),t}(),u=function(t){function u(){var t,r,o;return e(this,u),(r=this,o=n(u).call(this),t=!o||"object"!==_typeof(o)&&"function"!=typeof o?i(r):o).listeners||a.call(i(t)),Object.defineProperty(i(t),"aborted",{value:!1,writable:!0,configurable:!0}),Object.defineProperty(i(t),"onabort",{value:null,writable:!0,configurable:!0}),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t);}(u,t),r(u,[{key:"toString",value:function(){return "[object AbortSignal]"}},{key:"dispatchEvent",value:function(e){"abort"===e.type&&(this.aborted=!0,"function"==typeof this.onabort&&this.onabort.call(this,e)),s(n(u.prototype),"dispatchEvent",this).call(this,e);}}]),u}(a),l=function(){function t(){e(this,t),Object.defineProperty(this,"signal",{value:new u,writable:!0,configurable:!0});}return r(t,[{key:"abort",value:function(){var e;try{e=new Event("abort");}catch(t){"undefined"!=typeof document?document.createEvent?(e=document.createEvent("Event")).initEvent("abort",!1,!1):(e=document.createEventObject()).type="abort":e={type:"abort",bubbles:!1,cancelable:!1};}this.signal.dispatchEvent(e);}},{key:"toString",value:function(){return "[object AbortController]"}}]),t}();"undefined"!=typeof Symbol&&Symbol.toStringTag&&(l.prototype[Symbol.toStringTag]="AbortController",u.prototype[Symbol.toStringTag]="AbortSignal"),function(e){(function(e){return e.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL?(console.log("__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill"),!0):"function"==typeof e.Request&&!e.Request.prototype.hasOwnProperty("signal")||!e.AbortController})(e)&&(e.AbortController=l,e.AbortSignal=u);}("undefined"!=typeof self?self:commonjsGlobal$1);}(),_export(_export.S,"Math",{clz32:function(e){return (e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}});var log=Math.log,LN2=Math.LN2,clz32=Math.clz32||function(e){return 31-log(e>>>0)/LN2|0},fromCharCode=String.fromCharCode,Object_prototype_toString={}.toString,NativeUint8Array=window.Uint8Array,patchedU8Array=NativeUint8Array||Array,ArrayBufferString=Object_prototype_toString.call((window.ArrayBuffer||patchedU8Array).prototype),RtmStatusCode;function decoderReplacer(e){var t=e.charCodeAt(0)<<24,r=0|clz32(~t),n=0,o=0|e.length,i="";if(r<5&&o>=r){for(t=t<<r>>>24+r,n=1;n<r;n=n+1|0)t=t<<6|63&e.charCodeAt(n);t<=65535?i+=fromCharCode(t):t<=1114111?i+=fromCharCode(55296+((t=t-65536|0)>>10)|0,56320+(1023&t)|0):n=0;}for(;n<o;n=n+1|0)i+="ï¿½";return i}function TextDecoder$1(){}function encoderReplacer(e){var t=0|e.charCodeAt(0);if(t>=55296&&t<=56319){var r=0|e.charCodeAt(1);if(r!=r)return fromCharCode(239,191,189);if(!(r>=56320&&r<=57343))return fromCharCode(239,191,189);if((t=(t-55296<<10)+r-56320+65536|0)>65535)return fromCharCode(240|t>>>18,128|t>>>12&63,128|t>>>6&63,128|63&t)}return t<=127?e:t<=2047?fromCharCode(192|t>>>6,128|63&t):fromCharCode(224|t>>>12,128|t>>>6&63,128|63&t)}function TextEncoder$1(){}TextDecoder$1.prototype.decode=function(e){var t=e&&e.buffer||e;if(Object_prototype_toString.call(t)!==ArrayBufferString)throw Error("Failed to execute 'decode' on 'TextDecoder': The provided value is not of type '(ArrayBuffer or ArrayBufferView)'");for(var r=NativeUint8Array?new patchedU8Array(t):t,n="",o=0,i=0|r.length;o<i;o=o+32768|0)n+=fromCharCode.apply(0,r[NativeUint8Array?"slice":"subarray"](o,o+32768|0));return n.replace(/[\xc0-\xff][\x80-\xbf]*/g,decoderReplacer)},window.TextDecoder||(window.TextDecoder=TextDecoder$1),TextEncoder$1.prototype.encode=function(e){for(var t=void 0===e?"":(""+e).replace(/[\x80-\uD7ff\uDC00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]?/g,encoderReplacer),r=0|t.length,n=new patchedU8Array(r),o=0;o<r;o=o+1|0)n[o]=t.charCodeAt(o);return n},window.TextEncoder||(window.TextEncoder=TextEncoder$1),function(e){var t,r,n,o,i,s,a,u,l;!function(e){e.LOGIN="LOGIN",e.LOGIN_SUCCESS="LOGIN_SUCCESS",e.LOGIN_FAILURE="LOGIN_FAILURE",e.LOGIN_TIMEOUT="LOGIN_TIMEOUT",e.INTERRUPTED="INTERRUPTED",e.LOGOUT="LOGOUT",e.BANNED_BY_SERVER="BANNED_BY_SERVER",e.REMOTE_LOGIN="REMOTE_LOGIN";}(t||(t={})),e.ConnectionChangeReason=t,function(e){e.DISCONNECTED="DISCONNECTED",e.CONNECTING="CONNECTING",e.CONNECTED="CONNECTED",e.RECONNECTING="RECONNECTING",e.ABORTED="ABORTED";}(r||(r={})),e.ConnectionState=r,function(e){e.IDLE="IDLE",e.SENT_TO_REMOTE="SENT_TO_REMOTE",e.RECEIVED_BY_REMOTE="RECEIVED_BY_REMOTE",e.ACCEPTED_BY_REMOTE="ACCEPTED_BY_REMOTE",e.REFUSED_BY_REMOTE="REFUSED_BY_REMOTE",e.CANCELED="CANCELED",e.FAILURE="FAILURE";}(n||(n={})),e.LocalInvitationState=n,function(e){e.INVITATION_RECEIVED="INVITATION_RECEIVED",e.ACCEPT_SENT_TO_LOCAL="ACCEPT_SENT_TO_LOCAL",e.REFUSED="REFUSED",e.ACCEPTED="ACCEPTED",e.CANCELED="CANCELED",e.FAILURE="FAILURE";}(o||(o={})),e.RemoteInvitationState=o,function(e){e.UNKNOWN="UNKNOWN",e.PEER_NO_RESPONSE="PEER_NO_RESPONSE",e.INVITATION_EXPIRE="INVITATION_EXPIRE",e.PEER_OFFLINE="PEER_OFFLINE",e.NOT_LOGGEDIN="NOT_LOGGEDIN";}(i||(i={})),e.LocalInvitationFailureReason=i,function(e){e.UNKNOWN="UNKNOWN",e.PEER_OFFLINE="PEER_OFFLINE",e.ACCEPT_FAILURE="ACCEPT_FAILURE",e.INVITATION_EXPIRE="INVITATION_EXPIRE";}(s||(s={})),e.RemoteInvitationFailureReason=s,function(e){e.ONLINE="ONLINE",e.UNREACHABLE="UNREACHABLE",e.OFFLINE="OFFLINE";}(a||(a={})),e.PeerOnlineState=a,function(e){e.ONLINE_STATUS="ONLINE_STATUS";}(u||(u={})),e.PeerSubscriptionOption=u,function(e){e.TEXT="TEXT",e.RAW="RAW";}(l||(l={})),e.MessageType=l;}(RtmStatusCode||(RtmStatusCode={}));for(var RtmStatusCode$1=RtmStatusCode,rngBrowser=createCommonjsModule(function(e){var t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(t){var r=new Uint8Array(16);e.exports=function(){return t(r),r};}else {var n=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),n[t]=e>>>((3&t)<<3)&255;return n};}}),byteToHex=[],i$2=0;i$2<256;++i$2)byteToHex[i$2]=(i$2+256).toString(16).substr(1);function bytesToUuid(e,t){var r=t||0,n=byteToHex;return [n[e[r++]],n[e[r++]],n[e[r++]],n[e[r++]],"-",n[e[r++]],n[e[r++]],"-",n[e[r++]],n[e[r++]],"-",n[e[r++]],n[e[r++]],"-",n[e[r++]],n[e[r++]],n[e[r++]],n[e[r++]],n[e[r++]],n[e[r++]]].join("")}var bytesToUuid_1=bytesToUuid;function v4(e,t,r){var n=t&&r||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var o=(e=e||{}).random||(e.rng||rngBrowser)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,t)for(var i=0;i<16;++i)t[n+i]=o[i];return t||bytesToUuid_1(o)}var v4_1=v4,version="1.2.2",BUILD="v1.2.2-0-gb428acc",processId=v4_1(),WEB_PLATFORM_TYPE=7,VERSION_NO=3,SUBVERSION=1,END_CALL_PREFIX="AgoraRTMLegacyEndcallCompatibleMessagePrefix";const AttributeOperationError={ATTRIBUTE_OPERATION_ERR_FAILURE:2,ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT:3,ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW:4,ATTRIBUTE_OPERATION_ERR_TOO_OFTEN:5,ATTRIBUTE_OPERATION_ERR_USER_NOT_FOUND:6,ATTRIBUTE_OPERATION_ERR_TIMEOUT:7,ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN:102},ChannelMessageError={CHANNEL_MESSAGE_ERR_FAILURE:1,CHANNEL_MESSAGE_ERR_TIMEOUT:2,CHANNEL_MESSAGE_ERR_TOO_OFTEN:3,CHANNEL_MESSAGE_ERR_INVALID_MESSAGE:4,CHANNEL_MESSAGE_ERR_NOT_IN_CHANNEL:5,CHANNEL_MESSAGE_ERR_USER_NOT_LOGGED_IN:102},CreateChannelError={CREATE_CHANNEL_ERR_INVALID_ARGUMENT:1},CreateInstanceError={CREATE_INSTANCE_ERR_INVALID_ARGUMENT:1},GetMembersError={GET_MEMBERS_ERR_FAILURE:1,GET_MEMBERS_ERR_REJECTED:2,GET_MEMBERS_ERR_TIMEOUT:3,GET_MEMBERS_ERR_TOO_OFTEN:4,GET_MEMBERS_ERR_NOT_IN_CHANNEL:5,GET_MEMBERS_ERR_USER_NOT_LOGGED_IN:102},InvitationApiCallError={INVITATION_API_CALL_ERR_INVALID_ARGUMENT:1,INVITATION_API_CALL_ERR_NOT_STARTED:2,INVITATION_API_CALL_ERR_ALREADY_END:3,INVITATION_API_CALL_ERR_ALREADY_ACCEPT:4,INVITATION_API_CALL_ERR_ALREADY_SENT:5},JoinChannelError={JOIN_CHANNEL_ERR_FAILURE:1,JOIN_CHANNEL_ERR_REJECTED:2,JOIN_CHANNEL_ERR_INVALID_ARGUMENT:3,JOIN_CHANNEL_TIMEOUT:4,JOIN_CHANNEL_ERR_EXCEED_LIMIT:5,JOIN_CHANNEL_ERR_ALREADY_JOINED:6,JOIN_CHANNEL_ERR_TOO_OFTEN:7,JOIN_CHANNEL_ERR_JOIN_SAME_CHANNEL_TOO_OFTEN:8,JOIN_CHANNEL_ERR_USER_NOT_LOGGED_IN:102,JOIN_CHANNEL_ERR_ABORTED_BY_LEAVE:201,JOIN_CHANNEL_ERR_ALREADY_JOINED_CHANNEL_OF_SAME_ID:202},LeaveChannelError={LEAVE_CHANNEL_ERR_FAILURE:1,LEAVE_CHANNEL_ERR_REJECTED:2,LEAVE_CHANNEL_ERR_NOT_IN_CHANNEL:3,LEAVE_CHANNEL_ERR_USER_NOT_LOGGED_IN:102},LoginError={LOGIN_ERR_UNKNOWN:1,LOGIN_ERR_REJECTED:2,LOGIN_ERR_INVALID_ARGUMENT:3,LOGIN_ERR_INVALID_APP_ID:4,LOGIN_ERR_INVALID_TOKEN:5,LOGIN_ERR_TOKEN_EXPIRED:6,LOGIN_ERR_NOT_AUTHORIZED:7,LOGIN_ERR_ALREADY_LOGIN:8,LOGIN_ERR_TIMEOUT:9,LOGIN_ERR_TOO_OFTEN:10,LOGIN_ERR_ABORTED_BY_LOGOUT:201},LogoutError={LOGOUT_ERR_USER_NOT_LOGGED_IN:102},PeerMessageError={PEER_MESSAGE_ERR_FAILURE:1,PEER_MESSAGE_ERR_TIMEOUT:2,PEER_MESSAGE_ERR_TOO_OFTEN:5,PEER_MESSAGE_ERR_INVALID_USERID:6,PEER_MESSAGE_ERR_INVALID_MESSAGE:7,PEER_MESSAGE_ERR_USER_NOT_LOGGED_IN:102},QueryPeersOnlineStatusError={QUERY_PEERS_ONLINE_STATUS_ERR_INVALID_ARGUMENT:2,QUERY_PEERS_ONLINE_STATUS_ERR_REJECTED:3,QUERY_PEERS_ONLINE_STATUS_ERR_TIMEOUT:4,QUERY_PEERS_ONLINE_STATUS_ERR_TOO_OFTEN:5,QUERY_PEERS_ONLINE_STATUS_ERR_USER_NOT_LOGGED_IN:102},RenewTokenError={RENEW_TOKEN_ERR_FAILURE:1,RENEW_TOKEN_ERR_INVALID_ARGUMENT:2,RENEW_TOKEN_ERR_REJECTED:3,RENEW_TOKEN_ERR_TOO_OFTEN:4,RENEW_TOKEN_ERR_TOKEN_EXPIRED:5,RENEW_TOKEN_ERR_INVALID_TOKEN:6,RENEW_TOKEN_ERR_USER_NOT_LOGGED_IN:102,RENEW_TOKEN_ERR_ABORTED_BY_LOGOUT:201},GetChannelMemberCountErrCode={GET_CHANNEL_MEMBER_COUNT_ERR_FAILURE:1,GET_CHANNEL_MEMBER_COUNT_ERR_INVALID_ARGUMENT:2,GET_CHANNEL_MEMBER_COUNT_ERR_TOO_OFTEN:3,GET_CHANNEL_MEMBER_COUNT_ERR_TIMEOUT:4,GET_CHANNEL_MEMBER_COUNT_ERR_EXCEED_LIMIT:5,GET_CHANNEL_MEMBER_COUNT_ERR_NOT_INITIALIZED:101,GET_CHANNEL_MEMBER_COUNT_ERR_USER_NOT_LOGGED_IN:102},PeerSubscriptionStatusError={PEER_SUBSCRIPTION_STATUS_ERR_FAILURE:1,PEER_SUBSCRIPTION_STATUS_ERR_INVALID_ARGUMENT:2,PEER_SUBSCRIPTION_STATUS_ERR_REJECTED:3,PEER_SUBSCRIPTION_STATUS_ERR_TIMEOUT:4,PEER_SUBSCRIPTION_STATUS_ERR_TOO_OFTEN:5,PEER_SUBSCRIPTION_STATUS_ERR_OVERFLOW:6,PEER_SUBSCRIPTION_STATUS_ERR_USER_NOT_LOGGED_IN:102};var ATTRIBUTE_OPERATION_ERR_FAILURE=AttributeOperationError.ATTRIBUTE_OPERATION_ERR_FAILURE,ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT=AttributeOperationError.ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT,ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW=AttributeOperationError.ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW,ATTRIBUTE_OPERATION_ERR_USER_NOT_FOUND=AttributeOperationError.ATTRIBUTE_OPERATION_ERR_USER_NOT_FOUND,ATTRIBUTE_OPERATION_ERR_TIMEOUT=AttributeOperationError.ATTRIBUTE_OPERATION_ERR_TIMEOUT,ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN=AttributeOperationError.ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN,CHANNEL_MESSAGE_ERR_FAILURE=ChannelMessageError.CHANNEL_MESSAGE_ERR_FAILURE,CHANNEL_MESSAGE_ERR_TIMEOUT=ChannelMessageError.CHANNEL_MESSAGE_ERR_TIMEOUT,CHANNEL_MESSAGE_ERR_INVALID_MESSAGE=ChannelMessageError.CHANNEL_MESSAGE_ERR_INVALID_MESSAGE,CHANNEL_MESSAGE_ERR_USER_NOT_LOGGED_IN=ChannelMessageError.CHANNEL_MESSAGE_ERR_USER_NOT_LOGGED_IN,CREATE_CHANNEL_ERR_INVALID_ARGUMENT=CreateChannelError.CREATE_CHANNEL_ERR_INVALID_ARGUMENT,CREATE_INSTANCE_ERR_INVALID_ARGUMENT=CreateInstanceError.CREATE_INSTANCE_ERR_INVALID_ARGUMENT,GET_CHANNEL_MEMBER_COUNT_ERR_INVALID_ARGUMENT=GetChannelMemberCountErrCode.GET_CHANNEL_MEMBER_COUNT_ERR_INVALID_ARGUMENT,GET_CHANNEL_MEMBER_COUNT_ERR_TIMEOUT=GetChannelMemberCountErrCode.GET_CHANNEL_MEMBER_COUNT_ERR_TIMEOUT,GET_CHANNEL_MEMBER_COUNT_ERR_EXCEED_LIMIT=GetChannelMemberCountErrCode.GET_CHANNEL_MEMBER_COUNT_ERR_EXCEED_LIMIT,GET_CHANNEL_MEMBER_COUNT_ERR_USER_NOT_LOGGED_IN=GetChannelMemberCountErrCode.GET_CHANNEL_MEMBER_COUNT_ERR_USER_NOT_LOGGED_IN,GET_MEMBERS_ERR_FAILURE=GetMembersError.GET_MEMBERS_ERR_FAILURE,GET_MEMBERS_ERR_REJECTED=GetMembersError.GET_MEMBERS_ERR_REJECTED,GET_MEMBERS_ERR_NOT_IN_CHANNEL=GetMembersError.GET_MEMBERS_ERR_NOT_IN_CHANNEL,GET_MEMBERS_ERR_USER_NOT_LOGGED_IN=GetMembersError.GET_MEMBERS_ERR_USER_NOT_LOGGED_IN,INVITATION_API_CALL_ERR_INVALID_ARGUMENT=InvitationApiCallError.INVITATION_API_CALL_ERR_INVALID_ARGUMENT,INVITATION_API_CALL_ERR_NOT_STARTED=InvitationApiCallError.INVITATION_API_CALL_ERR_NOT_STARTED,INVITATION_API_CALL_ERR_ALREADY_END=InvitationApiCallError.INVITATION_API_CALL_ERR_ALREADY_END,INVITATION_API_CALL_ERR_ALREADY_ACCEPT=InvitationApiCallError.INVITATION_API_CALL_ERR_ALREADY_ACCEPT,INVITATION_API_CALL_ERR_ALREADY_SENT=InvitationApiCallError.INVITATION_API_CALL_ERR_ALREADY_SENT,JOIN_CHANNEL_ERR_FAILURE=JoinChannelError.JOIN_CHANNEL_ERR_FAILURE,JOIN_CHANNEL_ERR_INVALID_ARGUMENT=JoinChannelError.JOIN_CHANNEL_ERR_INVALID_ARGUMENT,JOIN_CHANNEL_TIMEOUT=JoinChannelError.JOIN_CHANNEL_TIMEOUT,JOIN_CHANNEL_ERR_EXCEED_LIMIT=JoinChannelError.JOIN_CHANNEL_ERR_EXCEED_LIMIT,JOIN_CHANNEL_ERR_ALREADY_JOINED=JoinChannelError.JOIN_CHANNEL_ERR_ALREADY_JOINED,JOIN_CHANNEL_ERR_USER_NOT_LOGGED_IN=JoinChannelError.JOIN_CHANNEL_ERR_USER_NOT_LOGGED_IN,JOIN_CHANNEL_ERR_ALREADY_JOINED_CHANNEL_OF_SAME_ID=JoinChannelError.JOIN_CHANNEL_ERR_ALREADY_JOINED_CHANNEL_OF_SAME_ID,LEAVE_CHANNEL_ERR_FAILURE=LeaveChannelError.LEAVE_CHANNEL_ERR_FAILURE,LEAVE_CHANNEL_ERR_REJECTED=LeaveChannelError.LEAVE_CHANNEL_ERR_REJECTED,LEAVE_CHANNEL_ERR_NOT_IN_CHANNEL=LeaveChannelError.LEAVE_CHANNEL_ERR_NOT_IN_CHANNEL,LEAVE_CHANNEL_ERR_USER_NOT_LOGGED_IN=LeaveChannelError.LEAVE_CHANNEL_ERR_USER_NOT_LOGGED_IN,LOGIN_ERR_UNKNOWN=LoginError.LOGIN_ERR_UNKNOWN,LOGIN_ERR_REJECTED=LoginError.LOGIN_ERR_REJECTED,LOGIN_ERR_INVALID_ARGUMENT=LoginError.LOGIN_ERR_INVALID_ARGUMENT,LOGIN_ERR_INVALID_APP_ID=LoginError.LOGIN_ERR_INVALID_APP_ID,LOGIN_ERR_INVALID_TOKEN=LoginError.LOGIN_ERR_INVALID_TOKEN,LOGIN_ERR_TOKEN_EXPIRED=LoginError.LOGIN_ERR_TOKEN_EXPIRED,LOGIN_ERR_ALREADY_LOGIN=LoginError.LOGIN_ERR_ALREADY_LOGIN,LOGIN_ERR_TIMEOUT=LoginError.LOGIN_ERR_TIMEOUT,LOGIN_ERR_TOO_OFTEN=LoginError.LOGIN_ERR_TOO_OFTEN,LOGOUT_ERR_USER_NOT_LOGGED_IN=LogoutError.LOGOUT_ERR_USER_NOT_LOGGED_IN,PEER_MESSAGE_ERR_FAILURE=PeerMessageError.PEER_MESSAGE_ERR_FAILURE,PEER_MESSAGE_ERR_TIMEOUT=PeerMessageError.PEER_MESSAGE_ERR_TIMEOUT,PEER_MESSAGE_ERR_INVALID_USERID=PeerMessageError.PEER_MESSAGE_ERR_INVALID_USERID,PEER_MESSAGE_ERR_INVALID_MESSAGE=PeerMessageError.PEER_MESSAGE_ERR_INVALID_MESSAGE,PEER_MESSAGE_ERR_USER_NOT_LOGGED_IN=PeerMessageError.PEER_MESSAGE_ERR_USER_NOT_LOGGED_IN,QUERY_PEERS_ONLINE_STATUS_ERR_INVALID_ARGUMENT=QueryPeersOnlineStatusError.QUERY_PEERS_ONLINE_STATUS_ERR_INVALID_ARGUMENT,QUERY_PEERS_ONLINE_STATUS_ERR_TIMEOUT=QueryPeersOnlineStatusError.QUERY_PEERS_ONLINE_STATUS_ERR_TIMEOUT,QUERY_PEERS_ONLINE_STATUS_ERR_USER_NOT_LOGGED_IN=QueryPeersOnlineStatusError.QUERY_PEERS_ONLINE_STATUS_ERR_USER_NOT_LOGGED_IN,RENEW_TOKEN_ERR_FAILURE=RenewTokenError.RENEW_TOKEN_ERR_FAILURE,RENEW_TOKEN_ERR_INVALID_ARGUMENT=RenewTokenError.RENEW_TOKEN_ERR_INVALID_ARGUMENT,RENEW_TOKEN_ERR_TOKEN_EXPIRED=RenewTokenError.RENEW_TOKEN_ERR_TOKEN_EXPIRED,RENEW_TOKEN_ERR_INVALID_TOKEN=RenewTokenError.RENEW_TOKEN_ERR_INVALID_TOKEN,RENEW_TOKEN_ERR_USER_NOT_LOGGED_IN=RenewTokenError.RENEW_TOKEN_ERR_USER_NOT_LOGGED_IN,PEER_SUBSCRIPTION_STATUS_ERR_FAILURE=PeerSubscriptionStatusError.PEER_SUBSCRIPTION_STATUS_ERR_FAILURE,PEER_SUBSCRIPTION_STATUS_ERR_INVALID_ARGUMENT=PeerSubscriptionStatusError.PEER_SUBSCRIPTION_STATUS_ERR_INVALID_ARGUMENT,PEER_SUBSCRIPTION_STATUS_ERR_TIMEOUT=PeerSubscriptionStatusError.PEER_SUBSCRIPTION_STATUS_ERR_TIMEOUT,PEER_SUBSCRIPTION_STATUS_ERR_OVERFLOW=PeerSubscriptionStatusError.PEER_SUBSCRIPTION_STATUS_ERR_OVERFLOW,PEER_SUBSCRIPTION_STATUS_ERR_USER_NOT_LOGGED_IN=PeerSubscriptionStatusError.PEER_SUBSCRIPTION_STATUS_ERR_USER_NOT_LOGGED_IN,runtime_1=createCommonjsModule(function(e){var t=function(e){var t,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag";function u(e,t,r,n){var o=t&&t.prototype instanceof h?t:h,i=Object.create(o.prototype),s=new R(n||[]);return i._invoke=function(e,t,r){var n=c;return function(o,i){if(n===f)throw new Error("Generator is already running");if(n===d){if("throw"===o)throw i;return A()}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var a=S(s,r);if(a){if(a===g)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===c)throw n=d,r.arg;r.dispatchException(r.arg);}else "return"===r.method&&r.abrupt("return",r.arg);n=f;var u=l(e,t,r);if("normal"===u.type){if(n=r.done?d:p,u.arg===g)continue;return {value:u.arg,done:r.done}}"throw"===u.type&&(n=d,r.method="throw",r.arg=u.arg);}}}(e,r,s),i}function l(e,t,r){try{return {type:"normal",arg:e.call(t,r)}}catch(e){return {type:"throw",arg:e}}}e.wrap=u;var c="suspendedStart",p="suspendedYield",f="executing",d="completed",g={};function h(){}function b(){}function _(){}var y={};y[i]=function(){return this};var m=Object.getPrototypeOf,v=m&&m(m(T([])));v&&v!==r&&n.call(v,i)&&(y=v);var $=_.prototype=h.prototype=Object.create(y);function E(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)};});}function I(e){var t;this._invoke=function(r,o){function i(){return new Promise(function(t,i){!function t(r,o,i,s){var a=l(e[r],e,o);if("throw"!==a.type){var u=a.arg,c=u.value;return c&&"object"===_typeof(c)&&n.call(c,"__await")?Promise.resolve(c.__await).then(function(e){t("next",e,i,s);},function(e){t("throw",e,i,s);}):Promise.resolve(c).then(function(e){u.value=e,i(u);},function(e){return t("throw",e,i,s)})}s(a.arg);}(r,o,t,i);})}return t=t?t.then(i,i):i()};}function S(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,S(e,r),"throw"===r.method))return g;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method");}return g}var o=l(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,g;var i=o.arg;return i?i.done?(r[e.resultName]=i.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,g):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function w(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t);}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t;}function R(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(w,this),this.reset(!0);}function T(e){if(e){var r=e[i];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,s=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return s.next=s}}return {next:A}}function A(){return {value:t,done:!0}}return b.prototype=$.constructor=_,_.constructor=b,_[a]=b.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return !!t&&(t===b||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,_):(e.__proto__=_,a in e||(e[a]="GeneratorFunction")),e.prototype=Object.create($),e},e.awrap=function(e){return {__await:e}},E(I.prototype),I.prototype[s]=function(){return this},e.AsyncIterator=I,e.async=function(t,r,n,o){var i=new I(u(t,r,n,o));return e.isGeneratorFunction(r)?i:i.next().then(function(e){return e.done?e.value:i.next()})},E($),$[a]="Generator",$[i]=function(){return this},$.toString=function(){return "[object Generator]"},e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=T,R.prototype={constructor:R,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t);},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var s=this.tryEntries[i],a=s.completion;if("root"===s.tryLoc)return o("end");if(s.tryLoc<=this.prev){var u=n.call(s,"catchLoc"),l=n.call(s,"finallyLoc");if(u&&l){if(this.prev<s.catchLoc)return o(s.catchLoc,!0);if(this.prev<s.finallyLoc)return o(s.finallyLoc)}else if(u){if(this.prev<s.catchLoc)return o(s.catchLoc,!0)}else {if(!l)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return o(s.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var s=i?i.completion:{};return s.type=e,s.arg=t,i?(this.method="next",this.next=i.finallyLoc,g):this.complete(s)},complete:function(e,t){if("throw"===e.type)throw e.arg;return "break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),O(r),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;O(r);}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:T(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=t;}catch(e){Function("r","regeneratorRuntime = r")(t);}}),regenerator=runtime_1,setPrototypeOf=_setProto.set,_inheritIfRequired=function(e,t,r){var n,o=t.constructor;return o!==r&&"function"==typeof o&&(n=o.prototype)!==r.prototype&&_isObject(n)&&setPrototypeOf&&setPrototypeOf(e,n),e},dP$3=_objectDp.f,gOPN$2=_objectGopn.f,$RegExp=_global.RegExp,Base=$RegExp,proto$1=$RegExp.prototype,re1=/a/g,re2=/a/g,CORRECT_NEW=new $RegExp(re1)!==re1;if(_descriptors&&(!CORRECT_NEW||_fails(function(){return re2[_wks("match")]=!1,$RegExp(re1)!=re1||$RegExp(re2)==re2||"/a/i"!=$RegExp(re1,"i")}))){$RegExp=function(e,t){var r=this instanceof $RegExp,n=_isRegexp(e),o=void 0===t;return !r&&n&&e.constructor===$RegExp&&o?e:_inheritIfRequired(CORRECT_NEW?new Base(n&&!o?e.source:e,t):Base((n=e instanceof $RegExp)?e.source:e,n&&o?_flags.call(e):t),r?this:proto$1,$RegExp)};for(var proxy=function(e){e in $RegExp||dP$3($RegExp,e,{configurable:!0,get:function(){return Base[e]},set:function(t){Base[e]=t;}});},keys=gOPN$2(Base),i$3=0;keys.length>i$3;)proxy(keys[i$3++]);proto$1.constructor=$RegExp,$RegExp.prototype=proto$1,_redefine(_global,"RegExp",$RegExp);}_setSpecies("RegExp");var freeGlobal="object"==_typeof(commonjsGlobal$1)&&commonjsGlobal$1&&commonjsGlobal$1.Object===Object&&commonjsGlobal$1,_freeGlobal=freeGlobal,freeSelf="object"==("undefined"==typeof self?"undefined":_typeof(self))&&self&&self.Object===Object&&self,root=_freeGlobal||freeSelf||Function("return this")(),_root=root,_Symbol2=_root.Symbol,_Symbol=_Symbol2,objectProto=Object.prototype,hasOwnProperty$1=objectProto.hasOwnProperty,nativeObjectToString=objectProto.toString,symToStringTag=_Symbol?_Symbol.toStringTag:void 0;function getRawTag(e){var t=hasOwnProperty$1.call(e,symToStringTag),r=e[symToStringTag];try{e[symToStringTag]=void 0;var n=!0;}catch(e){}var o=nativeObjectToString.call(e);return n&&(t?e[symToStringTag]=r:delete e[symToStringTag]),o}var _getRawTag=getRawTag,objectProto$1=Object.prototype,nativeObjectToString$1=objectProto$1.toString;function objectToString(e){return nativeObjectToString$1.call(e)}var _objectToString=objectToString,nullTag="[object Null]",undefinedTag="[object Undefined]",symToStringTag$1=_Symbol?_Symbol.toStringTag:void 0;function baseGetTag(e){return null==e?void 0===e?undefinedTag:nullTag:symToStringTag$1&&symToStringTag$1 in Object(e)?_getRawTag(e):_objectToString(e)}var _baseGetTag=baseGetTag;function isObject(e){var t=_typeof(e);return null!=e&&("object"==t||"function"==t)}var isObject_1=isObject,asyncTag="[object AsyncFunction]",funcTag="[object Function]",genTag="[object GeneratorFunction]",proxyTag="[object Proxy]";function isFunction(e){if(!isObject_1(e))return !1;var t=_baseGetTag(e);return t==funcTag||t==genTag||t==asyncTag||t==proxyTag}var isFunction_1=isFunction,coreJsData=_root["__core-js_shared__"],_coreJsData=coreJsData,maskSrcKey=(uid=/[^.]+$/.exec(_coreJsData&&_coreJsData.keys&&_coreJsData.keys.IE_PROTO||""),uid?"Symbol(src)_1."+uid:""),uid;function isMasked(e){return !!maskSrcKey&&maskSrcKey in e}var _isMasked=isMasked,funcProto=Function.prototype,funcToString=funcProto.toString;function toSource(e){if(null!=e){try{return funcToString.call(e)}catch(e){}try{return e+""}catch(e){}}return ""}var _toSource=toSource,reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reIsHostCtor=/^\[object .+?Constructor\]$/,funcProto$1=Function.prototype,objectProto$2=Object.prototype,funcToString$1=funcProto$1.toString,hasOwnProperty$2=objectProto$2.hasOwnProperty,reIsNative=RegExp("^"+funcToString$1.call(hasOwnProperty$2).replace(reRegExpChar,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function baseIsNative(e){return !(!isObject_1(e)||_isMasked(e))&&(isFunction_1(e)?reIsNative:reIsHostCtor).test(_toSource(e))}var _baseIsNative=baseIsNative;function getValue(e,t){return null==e?void 0:e[t]}var _getValue=getValue;function getNative(e,t){var r=_getValue(e,t);return _baseIsNative(r)?r:void 0}var _getNative=getNative,nativeCreate=_getNative(Object,"create"),_nativeCreate=nativeCreate;function hashClear(){this.__data__=_nativeCreate?_nativeCreate(null):{},this.size=0;}var _hashClear=hashClear;function hashDelete(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}var _hashDelete=hashDelete,HASH_UNDEFINED="__lodash_hash_undefined__",objectProto$3=Object.prototype,hasOwnProperty$3=objectProto$3.hasOwnProperty;function hashGet(e){var t=this.__data__;if(_nativeCreate){var r=t[e];return r===HASH_UNDEFINED?void 0:r}return hasOwnProperty$3.call(t,e)?t[e]:void 0}var _hashGet=hashGet,objectProto$4=Object.prototype,hasOwnProperty$4=objectProto$4.hasOwnProperty;function hashHas(e){var t=this.__data__;return _nativeCreate?void 0!==t[e]:hasOwnProperty$4.call(t,e)}var _hashHas=hashHas,HASH_UNDEFINED$1="__lodash_hash_undefined__";function hashSet(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=_nativeCreate&&void 0===t?HASH_UNDEFINED$1:t,this}var _hashSet=hashSet;function Hash(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1]);}}Hash.prototype.clear=_hashClear,Hash.prototype.delete=_hashDelete,Hash.prototype.get=_hashGet,Hash.prototype.has=_hashHas,Hash.prototype.set=_hashSet;var _Hash=Hash;function listCacheClear(){this.__data__=[],this.size=0;}var _listCacheClear=listCacheClear;function eq(e,t){return e===t||e!=e&&t!=t}var eq_1=eq;function assocIndexOf(e,t){for(var r=e.length;r--;)if(eq_1(e[r][0],t))return r;return -1}var _assocIndexOf=assocIndexOf,arrayProto=Array.prototype,splice=arrayProto.splice;function listCacheDelete(e){var t=this.__data__,r=_assocIndexOf(t,e);return !(r<0)&&(r==t.length-1?t.pop():splice.call(t,r,1),--this.size,!0)}var _listCacheDelete=listCacheDelete;function listCacheGet(e){var t=this.__data__,r=_assocIndexOf(t,e);return r<0?void 0:t[r][1]}var _listCacheGet=listCacheGet;function listCacheHas(e){return _assocIndexOf(this.__data__,e)>-1}var _listCacheHas=listCacheHas;function listCacheSet(e,t){var r=this.__data__,n=_assocIndexOf(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this}var _listCacheSet=listCacheSet;function ListCache(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1]);}}ListCache.prototype.clear=_listCacheClear,ListCache.prototype.delete=_listCacheDelete,ListCache.prototype.get=_listCacheGet,ListCache.prototype.has=_listCacheHas,ListCache.prototype.set=_listCacheSet;var _ListCache=ListCache,Map$1=_getNative(_root,"Map"),_Map=Map$1;function mapCacheClear(){this.size=0,this.__data__={hash:new _Hash,map:new(_Map||_ListCache),string:new _Hash};}var _mapCacheClear=mapCacheClear;function isKeyable(e){var t=_typeof(e);return "string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}var _isKeyable=isKeyable;function getMapData(e,t){var r=e.__data__;return _isKeyable(t)?r["string"==typeof t?"string":"hash"]:r.map}var _getMapData=getMapData;function mapCacheDelete(e){var t=_getMapData(this,e).delete(e);return this.size-=t?1:0,t}var _mapCacheDelete=mapCacheDelete;function mapCacheGet(e){return _getMapData(this,e).get(e)}var _mapCacheGet=mapCacheGet;function mapCacheHas(e){return _getMapData(this,e).has(e)}var _mapCacheHas=mapCacheHas;function mapCacheSet(e,t){var r=_getMapData(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this}var _mapCacheSet=mapCacheSet;function MapCache(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1]);}}MapCache.prototype.clear=_mapCacheClear,MapCache.prototype.delete=_mapCacheDelete,MapCache.prototype.get=_mapCacheGet,MapCache.prototype.has=_mapCacheHas,MapCache.prototype.set=_mapCacheSet;var _MapCache=MapCache,HASH_UNDEFINED$2="__lodash_hash_undefined__";function setCacheAdd(e){return this.__data__.set(e,HASH_UNDEFINED$2),this}var _setCacheAdd=setCacheAdd;function setCacheHas(e){return this.__data__.has(e)}var _setCacheHas=setCacheHas;function SetCache(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new _MapCache;++t<r;)this.add(e[t]);}SetCache.prototype.add=SetCache.prototype.push=_setCacheAdd,SetCache.prototype.has=_setCacheHas;var _SetCache=SetCache;function baseFindIndex(e,t,r,n){for(var o=e.length,i=r+(n?1:-1);n?i--:++i<o;)if(t(e[i],i,e))return i;return -1}var _baseFindIndex=baseFindIndex;function baseIsNaN(e){return e!=e}var _baseIsNaN=baseIsNaN;function strictIndexOf(e,t,r){for(var n=r-1,o=e.length;++n<o;)if(e[n]===t)return n;return -1}var _strictIndexOf=strictIndexOf;function baseIndexOf(e,t,r){return t==t?_strictIndexOf(e,t,r):_baseFindIndex(e,_baseIsNaN,r)}var _baseIndexOf=baseIndexOf;function arrayIncludes(e,t){return !!(null==e?0:e.length)&&_baseIndexOf(e,t,0)>-1}var _arrayIncludes$1=arrayIncludes;function arrayIncludesWith(e,t,r){for(var n=-1,o=null==e?0:e.length;++n<o;)if(r(t,e[n]))return !0;return !1}var _arrayIncludesWith=arrayIncludesWith;function cacheHas(e,t){return e.has(t)}var _cacheHas=cacheHas,Set$1=_getNative(_root,"Set"),_Set=Set$1;function noop(){}var noop_1=noop;function setToArray(e){var t=-1,r=Array(e.size);return e.forEach(function(e){r[++t]=e;}),r}var _setToArray=setToArray,INFINITY=1/0,createSet=_Set&&1/_setToArray(new _Set([,-0]))[1]==INFINITY?function(e){return new _Set(e)}:noop_1,_createSet=createSet,LARGE_ARRAY_SIZE=200;function baseUniq(e,t,r){var n=-1,o=_arrayIncludes$1,i=e.length,s=!0,a=[],u=a;if(r)s=!1,o=_arrayIncludesWith;else if(i>=LARGE_ARRAY_SIZE){var l=t?null:_createSet(e);if(l)return _setToArray(l);s=!1,o=_cacheHas,u=new _SetCache;}else u=t?[]:a;e:for(;++n<i;){var c=e[n],p=t?t(c):c;if(c=r||0!==c?c:0,s&&p==p){for(var f=u.length;f--;)if(u[f]===p)continue e;t&&u.push(p),a.push(c);}else o(u,p,r)||(u!==a&&u.push(p),a.push(c));}return a}var _baseUniq=baseUniq;function uniq(e){return e&&e.length?_baseUniq(e):[]}var uniq_1=uniq;function fromPairs(e){for(var t=-1,r=null==e?0:e.length,n={};++t<r;){var o=e[t];n[o[0]]=o[1];}return n}var fromPairs_1=fromPairs;function arrayMap(e,t){for(var r=-1,n=null==e?0:e.length,o=Array(n);++r<n;)o[r]=t(e[r],r,e);return o}var _arrayMap=arrayMap;function stackClear(){this.__data__=new _ListCache,this.size=0;}var _stackClear=stackClear;function stackDelete(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}var _stackDelete=stackDelete;function stackGet(e){return this.__data__.get(e)}var _stackGet=stackGet;function stackHas(e){return this.__data__.has(e)}var _stackHas=stackHas,LARGE_ARRAY_SIZE$1=200;function stackSet(e,t){var r=this.__data__;if(r instanceof _ListCache){var n=r.__data__;if(!_Map||n.length<LARGE_ARRAY_SIZE$1-1)return n.push([e,t]),this.size=++r.size,this;r=this.__data__=new _MapCache(n);}return r.set(e,t),this.size=r.size,this}var _stackSet=stackSet;function Stack(e){var t=this.__data__=new _ListCache(e);this.size=t.size;}Stack.prototype.clear=_stackClear,Stack.prototype.delete=_stackDelete,Stack.prototype.get=_stackGet,Stack.prototype.has=_stackHas,Stack.prototype.set=_stackSet;var _Stack=Stack;function arrayEach(e,t){for(var r=-1,n=null==e?0:e.length;++r<n&&!1!==t(e[r],r,e););return e}var _arrayEach=arrayEach,defineProperty$1=function(){try{var e=_getNative(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),_defineProperty$1=defineProperty$1;function baseAssignValue(e,t,r){"__proto__"==t&&_defineProperty$1?_defineProperty$1(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r;}var _baseAssignValue=baseAssignValue,objectProto$5=Object.prototype,hasOwnProperty$5=objectProto$5.hasOwnProperty;function assignValue(e,t,r){var n=e[t];hasOwnProperty$5.call(e,t)&&eq_1(n,r)&&(void 0!==r||t in e)||_baseAssignValue(e,t,r);}var _assignValue=assignValue;function copyObject(e,t,r,n){var o=!r;r||(r={});for(var i=-1,s=t.length;++i<s;){var a=t[i],u=n?n(r[a],e[a],a,r,e):void 0;void 0===u&&(u=e[a]),o?_baseAssignValue(r,a,u):_assignValue(r,a,u);}return r}var _copyObject=copyObject;function baseTimes(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}var _baseTimes=baseTimes;function isObjectLike(e){return null!=e&&"object"==_typeof(e)}var isObjectLike_1=isObjectLike,argsTag="[object Arguments]";function baseIsArguments(e){return isObjectLike_1(e)&&_baseGetTag(e)==argsTag}var _baseIsArguments=baseIsArguments,objectProto$6=Object.prototype,hasOwnProperty$6=objectProto$6.hasOwnProperty,propertyIsEnumerable=objectProto$6.propertyIsEnumerable,isArguments=_baseIsArguments(function(){return arguments}())?_baseIsArguments:function(e){return isObjectLike_1(e)&&hasOwnProperty$6.call(e,"callee")&&!propertyIsEnumerable.call(e,"callee")},isArguments_1=isArguments,isArray=Array.isArray,isArray_1=isArray;function stubFalse(){return !1}var stubFalse_1=stubFalse,isBuffer_1=createCommonjsModule(function(e,t){var r=t&&!t.nodeType&&t,n=r&&e&&!e.nodeType&&e,o=n&&n.exports===r?_root.Buffer:void 0,i=(o?o.isBuffer:void 0)||stubFalse_1;e.exports=i;}),MAX_SAFE_INTEGER=9007199254740991,reIsUint=/^(?:0|[1-9]\d*)$/;function isIndex(e,t){var r=_typeof(e);return !!(t=null==t?MAX_SAFE_INTEGER:t)&&("number"==r||"symbol"!=r&&reIsUint.test(e))&&e>-1&&e%1==0&&e<t}var _isIndex=isIndex,MAX_SAFE_INTEGER$1=9007199254740991;function isLength(e){return "number"==typeof e&&e>-1&&e%1==0&&e<=MAX_SAFE_INTEGER$1}var isLength_1=isLength,argsTag$1="[object Arguments]",arrayTag="[object Array]",boolTag="[object Boolean]",dateTag="[object Date]",errorTag="[object Error]",funcTag$1="[object Function]",mapTag="[object Map]",numberTag="[object Number]",objectTag="[object Object]",regexpTag="[object RegExp]",setTag="[object Set]",stringTag="[object String]",weakMapTag="[object WeakMap]",arrayBufferTag="[object ArrayBuffer]",dataViewTag="[object DataView]",float32Tag="[object Float32Array]",float64Tag="[object Float64Array]",int8Tag="[object Int8Array]",int16Tag="[object Int16Array]",int32Tag="[object Int32Array]",uint8Tag="[object Uint8Array]",uint8ClampedTag="[object Uint8ClampedArray]",uint16Tag="[object Uint16Array]",uint32Tag="[object Uint32Array]",typedArrayTags={};function baseIsTypedArray(e){return isObjectLike_1(e)&&isLength_1(e.length)&&!!typedArrayTags[_baseGetTag(e)]}typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=!0,typedArrayTags[argsTag$1]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag$1]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=!1;var _baseIsTypedArray=baseIsTypedArray;function baseUnary(e){return function(t){return e(t)}}var _baseUnary=baseUnary,_nodeUtil=createCommonjsModule(function(e,t){var r=t&&!t.nodeType&&t,n=r&&e&&!e.nodeType&&e,o=n&&n.exports===r&&_freeGlobal.process,i=function(){try{var e=n&&n.require&&n.require("util").types;return e||o&&o.binding&&o.binding("util")}catch(e){}}();e.exports=i;}),nodeIsTypedArray=_nodeUtil&&_nodeUtil.isTypedArray,isTypedArray=nodeIsTypedArray?_baseUnary(nodeIsTypedArray):_baseIsTypedArray,isTypedArray_1=isTypedArray,objectProto$7=Object.prototype,hasOwnProperty$7=objectProto$7.hasOwnProperty;function arrayLikeKeys(e,t){var r=isArray_1(e),n=!r&&isArguments_1(e),o=!r&&!n&&isBuffer_1(e),i=!r&&!n&&!o&&isTypedArray_1(e),s=r||n||o||i,a=s?_baseTimes(e.length,String):[],u=a.length;for(var l in e)!t&&!hasOwnProperty$7.call(e,l)||s&&("length"==l||o&&("offset"==l||"parent"==l)||i&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||_isIndex(l,u))||a.push(l);return a}var _arrayLikeKeys=arrayLikeKeys,objectProto$8=Object.prototype;function isPrototype(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||objectProto$8)}var _isPrototype=isPrototype,_objectSap=function(e,t){var r=(_core.Object||{})[e]||Object[e],n={};n[e]=t(r),_export(_export.S+_export.F*_fails(function(){r(1);}),"Object",n);};function overArg(e,t){return function(r){return e(t(r))}}_objectSap("keys",function(){return function(e){return _objectKeys(_toObject(e))}});var _overArg=overArg,nativeKeys=_overArg(Object.keys,Object),_nativeKeys=nativeKeys,objectProto$9=Object.prototype,hasOwnProperty$8=objectProto$9.hasOwnProperty;function baseKeys(e){if(!_isPrototype(e))return _nativeKeys(e);var t=[];for(var r in Object(e))hasOwnProperty$8.call(e,r)&&"constructor"!=r&&t.push(r);return t}var _baseKeys=baseKeys;function isArrayLike(e){return null!=e&&isLength_1(e.length)&&!isFunction_1(e)}var isArrayLike_1=isArrayLike;function keys$1(e){return isArrayLike_1(e)?_arrayLikeKeys(e):_baseKeys(e)}var keys_1=keys$1;function baseAssign(e,t){return e&&_copyObject(t,keys_1(t),e)}var _baseAssign=baseAssign;function nativeKeysIn(e){var t=[];if(null!=e)for(var r in Object(e))t.push(r);return t}var _nativeKeysIn=nativeKeysIn,objectProto$a=Object.prototype,hasOwnProperty$9=objectProto$a.hasOwnProperty;function baseKeysIn(e){if(!isObject_1(e))return _nativeKeysIn(e);var t=_isPrototype(e),r=[];for(var n in e)("constructor"!=n||!t&&hasOwnProperty$9.call(e,n))&&r.push(n);return r}var _baseKeysIn=baseKeysIn;function keysIn$1(e){return isArrayLike_1(e)?_arrayLikeKeys(e,!0):_baseKeysIn(e)}var keysIn_1=keysIn$1;function baseAssignIn(e,t){return e&&_copyObject(t,keysIn_1(t),e)}var _baseAssignIn=baseAssignIn,_cloneBuffer=createCommonjsModule(function(e,t){var r=t&&!t.nodeType&&t,n=r&&e&&!e.nodeType&&e,o=n&&n.exports===r?_root.Buffer:void 0,i=o?o.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var r=e.length,n=i?i(r):new e.constructor(r);return e.copy(n),n};});function copyArray(e,t){var r=-1,n=e.length;for(t||(t=Array(n));++r<n;)t[r]=e[r];return t}var _copyArray=copyArray;function arrayFilter(e,t){for(var r=-1,n=null==e?0:e.length,o=0,i=[];++r<n;){var s=e[r];t(s,r,e)&&(i[o++]=s);}return i}var _arrayFilter=arrayFilter;function stubArray(){return []}var stubArray_1=stubArray,objectProto$b=Object.prototype,propertyIsEnumerable$1=objectProto$b.propertyIsEnumerable,nativeGetSymbols=Object.getOwnPropertySymbols,getSymbols=nativeGetSymbols?function(e){return null==e?[]:(e=Object(e),_arrayFilter(nativeGetSymbols(e),function(t){return propertyIsEnumerable$1.call(e,t)}))}:stubArray_1,_getSymbols=getSymbols;function copySymbols(e,t){return _copyObject(e,_getSymbols(e),t)}var _copySymbols=copySymbols;function arrayPush(e,t){for(var r=-1,n=t.length,o=e.length;++r<n;)e[o+r]=t[r];return e}var _arrayPush=arrayPush,getPrototype=_overArg(Object.getPrototypeOf,Object),_getPrototype=getPrototype,nativeGetSymbols$1=Object.getOwnPropertySymbols,getSymbolsIn=nativeGetSymbols$1?function(e){for(var t=[];e;)_arrayPush(t,_getSymbols(e)),e=_getPrototype(e);return t}:stubArray_1,_getSymbolsIn=getSymbolsIn;function copySymbolsIn(e,t){return _copyObject(e,_getSymbolsIn(e),t)}var _copySymbolsIn=copySymbolsIn;function baseGetAllKeys(e,t,r){var n=t(e);return isArray_1(e)?n:_arrayPush(n,r(e))}var _baseGetAllKeys=baseGetAllKeys;function getAllKeys(e){return _baseGetAllKeys(e,keys_1,_getSymbols)}var _getAllKeys=getAllKeys;function getAllKeysIn(e){return _baseGetAllKeys(e,keysIn_1,_getSymbolsIn)}var _getAllKeysIn=getAllKeysIn,DataView$1=_getNative(_root,"DataView"),_DataView=DataView$1,Promise$2=_getNative(_root,"Promise"),_Promise=Promise$2,WeakMap=_getNative(_root,"WeakMap"),_WeakMap=WeakMap,mapTag$1="[object Map]",objectTag$1="[object Object]",promiseTag="[object Promise]",setTag$1="[object Set]",weakMapTag$1="[object WeakMap]",dataViewTag$1="[object DataView]",dataViewCtorString=_toSource(_DataView),mapCtorString=_toSource(_Map),promiseCtorString=_toSource(_Promise),setCtorString=_toSource(_Set),weakMapCtorString=_toSource(_WeakMap),getTag=_baseGetTag;(_DataView&&getTag(new _DataView(new ArrayBuffer(1)))!=dataViewTag$1||_Map&&getTag(new _Map)!=mapTag$1||_Promise&&getTag(_Promise.resolve())!=promiseTag||_Set&&getTag(new _Set)!=setTag$1||_WeakMap&&getTag(new _WeakMap)!=weakMapTag$1)&&(getTag=function(e){var t=_baseGetTag(e),r=t==objectTag$1?e.constructor:void 0,n=r?_toSource(r):"";if(n)switch(n){case dataViewCtorString:return dataViewTag$1;case mapCtorString:return mapTag$1;case promiseCtorString:return promiseTag;case setCtorString:return setTag$1;case weakMapCtorString:return weakMapTag$1}return t});var _getTag=getTag,objectProto$c=Object.prototype,hasOwnProperty$a=objectProto$c.hasOwnProperty;function initCloneArray(e){var t=e.length,r=new e.constructor(t);return t&&"string"==typeof e[0]&&hasOwnProperty$a.call(e,"index")&&(r.index=e.index,r.input=e.input),r}var _initCloneArray=initCloneArray,Uint8Array$1=_root.Uint8Array,_Uint8Array=Uint8Array$1;function cloneArrayBuffer(e){var t=new e.constructor(e.byteLength);return new _Uint8Array(t).set(new _Uint8Array(e)),t}var _cloneArrayBuffer=cloneArrayBuffer;function cloneDataView(e,t){var r=t?_cloneArrayBuffer(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.byteLength)}var _cloneDataView=cloneDataView,reFlags=/\w*$/;function cloneRegExp(e){var t=new e.constructor(e.source,reFlags.exec(e));return t.lastIndex=e.lastIndex,t}var _cloneRegExp=cloneRegExp,symbolProto=_Symbol?_Symbol.prototype:void 0,symbolValueOf=symbolProto?symbolProto.valueOf:void 0;function cloneSymbol(e){return symbolValueOf?Object(symbolValueOf.call(e)):{}}var _cloneSymbol=cloneSymbol;function cloneTypedArray(e,t){var r=t?_cloneArrayBuffer(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.length)}var _cloneTypedArray=cloneTypedArray,boolTag$1="[object Boolean]",dateTag$1="[object Date]",mapTag$2="[object Map]",numberTag$1="[object Number]",regexpTag$1="[object RegExp]",setTag$2="[object Set]",stringTag$1="[object String]",symbolTag="[object Symbol]",arrayBufferTag$1="[object ArrayBuffer]",dataViewTag$2="[object DataView]",float32Tag$1="[object Float32Array]",float64Tag$1="[object Float64Array]",int8Tag$1="[object Int8Array]",int16Tag$1="[object Int16Array]",int32Tag$1="[object Int32Array]",uint8Tag$1="[object Uint8Array]",uint8ClampedTag$1="[object Uint8ClampedArray]",uint16Tag$1="[object Uint16Array]",uint32Tag$1="[object Uint32Array]";function initCloneByTag(e,t,r){var n=e.constructor;switch(t){case arrayBufferTag$1:return _cloneArrayBuffer(e);case boolTag$1:case dateTag$1:return new n(+e);case dataViewTag$2:return _cloneDataView(e,r);case float32Tag$1:case float64Tag$1:case int8Tag$1:case int16Tag$1:case int32Tag$1:case uint8Tag$1:case uint8ClampedTag$1:case uint16Tag$1:case uint32Tag$1:return _cloneTypedArray(e,r);case mapTag$2:return new n;case numberTag$1:case stringTag$1:return new n(e);case regexpTag$1:return _cloneRegExp(e);case setTag$2:return new n;case symbolTag:return _cloneSymbol(e)}}var _initCloneByTag=initCloneByTag,objectCreate=Object.create,baseCreate=function(){function e(){}return function(t){if(!isObject_1(t))return {};if(objectCreate)return objectCreate(t);e.prototype=t;var r=new e;return e.prototype=void 0,r}}(),_baseCreate=baseCreate;function initCloneObject(e){return "function"!=typeof e.constructor||_isPrototype(e)?{}:_baseCreate(_getPrototype(e))}var _initCloneObject=initCloneObject,mapTag$3="[object Map]";function baseIsMap(e){return isObjectLike_1(e)&&_getTag(e)==mapTag$3}var _baseIsMap=baseIsMap,nodeIsMap=_nodeUtil&&_nodeUtil.isMap,isMap=nodeIsMap?_baseUnary(nodeIsMap):_baseIsMap,isMap_1=isMap,setTag$3="[object Set]";function baseIsSet(e){return isObjectLike_1(e)&&_getTag(e)==setTag$3}var _baseIsSet=baseIsSet,nodeIsSet=_nodeUtil&&_nodeUtil.isSet,isSet=nodeIsSet?_baseUnary(nodeIsSet):_baseIsSet,isSet_1=isSet,CLONE_DEEP_FLAG=1,CLONE_FLAT_FLAG=2,CLONE_SYMBOLS_FLAG=4,argsTag$2="[object Arguments]",arrayTag$1="[object Array]",boolTag$2="[object Boolean]",dateTag$2="[object Date]",errorTag$1="[object Error]",funcTag$2="[object Function]",genTag$1="[object GeneratorFunction]",mapTag$4="[object Map]",numberTag$2="[object Number]",objectTag$2="[object Object]",regexpTag$2="[object RegExp]",setTag$4="[object Set]",stringTag$2="[object String]",symbolTag$1="[object Symbol]",weakMapTag$2="[object WeakMap]",arrayBufferTag$2="[object ArrayBuffer]",dataViewTag$3="[object DataView]",float32Tag$2="[object Float32Array]",float64Tag$2="[object Float64Array]",int8Tag$2="[object Int8Array]",int16Tag$2="[object Int16Array]",int32Tag$2="[object Int32Array]",uint8Tag$2="[object Uint8Array]",uint8ClampedTag$2="[object Uint8ClampedArray]",uint16Tag$2="[object Uint16Array]",uint32Tag$2="[object Uint32Array]",cloneableTags={};function baseClone(e,t,r,n,o,i){var s,a=t&CLONE_DEEP_FLAG,u=t&CLONE_FLAT_FLAG,l=t&CLONE_SYMBOLS_FLAG;if(r&&(s=o?r(e,n,o,i):r(e)),void 0!==s)return s;if(!isObject_1(e))return e;var c=isArray_1(e);if(c){if(s=_initCloneArray(e),!a)return _copyArray(e,s)}else {var p=_getTag(e),f=p==funcTag$2||p==genTag$1;if(isBuffer_1(e))return _cloneBuffer(e,a);if(p==objectTag$2||p==argsTag$2||f&&!o){if(s=u||f?{}:_initCloneObject(e),!a)return u?_copySymbolsIn(e,_baseAssignIn(s,e)):_copySymbols(e,_baseAssign(s,e))}else {if(!cloneableTags[p])return o?e:{};s=_initCloneByTag(e,p,a);}}i||(i=new _Stack);var d=i.get(e);if(d)return d;i.set(e,s),isSet_1(e)?e.forEach(function(n){s.add(baseClone(n,t,r,n,e,i));}):isMap_1(e)&&e.forEach(function(n,o){s.set(o,baseClone(n,t,r,o,e,i));});var g=l?u?_getAllKeysIn:_getAllKeys:u?keysIn:keys_1,h=c?void 0:g(e);return _arrayEach(h||e,function(n,o){h&&(n=e[o=n]),_assignValue(s,o,baseClone(n,t,r,o,e,i));}),s}cloneableTags[argsTag$2]=cloneableTags[arrayTag$1]=cloneableTags[arrayBufferTag$2]=cloneableTags[dataViewTag$3]=cloneableTags[boolTag$2]=cloneableTags[dateTag$2]=cloneableTags[float32Tag$2]=cloneableTags[float64Tag$2]=cloneableTags[int8Tag$2]=cloneableTags[int16Tag$2]=cloneableTags[int32Tag$2]=cloneableTags[mapTag$4]=cloneableTags[numberTag$2]=cloneableTags[objectTag$2]=cloneableTags[regexpTag$2]=cloneableTags[setTag$4]=cloneableTags[stringTag$2]=cloneableTags[symbolTag$1]=cloneableTags[uint8Tag$2]=cloneableTags[uint8ClampedTag$2]=cloneableTags[uint16Tag$2]=cloneableTags[uint32Tag$2]=!0,cloneableTags[errorTag$1]=cloneableTags[funcTag$2]=cloneableTags[weakMapTag$2]=!1;var _baseClone=baseClone,symbolTag$2="[object Symbol]";function isSymbol$1(e){return "symbol"==_typeof(e)||isObjectLike_1(e)&&_baseGetTag(e)==symbolTag$2}var isSymbol_1=isSymbol$1,reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/;function isKey(e,t){if(isArray_1(e))return !1;var r=_typeof(e);return !("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!isSymbol_1(e))||(reIsPlainProp.test(e)||!reIsDeepProp.test(e)||null!=t&&e in Object(t))}var _isKey=isKey,FUNC_ERROR_TEXT="Expected a function";function memoize(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(FUNC_ERROR_TEXT);var r=function r(){var n=arguments,o=t?t.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var s=e.apply(this,n);return r.cache=i.set(o,s)||i,s};return r.cache=new(memoize.Cache||_MapCache),r}memoize.Cache=_MapCache;var memoize_1=memoize,MAX_MEMOIZE_SIZE=500;function memoizeCapped(e){var t=memoize_1(e,function(e){return r.size===MAX_MEMOIZE_SIZE&&r.clear(),e}),r=t.cache;return t}var _memoizeCapped=memoizeCapped,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,reEscapeChar=/\\(\\)?/g,stringToPath=_memoizeCapped(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(rePropName,function(e,r,n,o){t.push(n?o.replace(reEscapeChar,"$1"):r||e);}),t}),_stringToPath=stringToPath,INFINITY$1=1/0,symbolProto$1=_Symbol?_Symbol.prototype:void 0,symbolToString=symbolProto$1?symbolProto$1.toString:void 0;function baseToString(e){if("string"==typeof e)return e;if(isArray_1(e))return _arrayMap(e,baseToString)+"";if(isSymbol_1(e))return symbolToString?symbolToString.call(e):"";var t=e+"";return "0"==t&&1/e==-INFINITY$1?"-0":t}var _baseToString=baseToString;function toString$2(e){return null==e?"":_baseToString(e)}var toString_1=toString$2;function castPath(e,t){return isArray_1(e)?e:_isKey(e,t)?[e]:_stringToPath(toString_1(e))}var _castPath=castPath;function last(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}var last_1=last,INFINITY$2=1/0;function toKey(e){if("string"==typeof e||isSymbol_1(e))return e;var t=e+"";return "0"==t&&1/e==-INFINITY$2?"-0":t}var _toKey=toKey;function baseGet(e,t){for(var r=0,n=(t=_castPath(t,e)).length;null!=e&&r<n;)e=e[_toKey(t[r++])];return r&&r==n?e:void 0}var _baseGet=baseGet;function baseSlice(e,t,r){var n=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(r=r>o?o:r)<0&&(r+=o),o=t>r?0:r-t>>>0,t>>>=0;for(var i=Array(o);++n<o;)i[n]=e[n+t];return i}var _baseSlice=baseSlice;function parent(e,t){return t.length<2?e:_baseGet(e,_baseSlice(t,0,-1))}var _parent=parent;function baseUnset(e,t){return t=_castPath(t,e),null==(e=_parent(e,t))||delete e[_toKey(last_1(t))]}var _baseUnset=baseUnset,objectTag$3="[object Object]",funcProto$2=Function.prototype,objectProto$d=Object.prototype,funcToString$2=funcProto$2.toString,hasOwnProperty$b=objectProto$d.hasOwnProperty,objectCtorString=funcToString$2.call(Object);function isPlainObject(e){if(!isObjectLike_1(e)||_baseGetTag(e)!=objectTag$3)return !1;var t=_getPrototype(e);if(null===t)return !0;var r=hasOwnProperty$b.call(t,"constructor")&&t.constructor;return "function"==typeof r&&r instanceof r&&funcToString$2.call(r)==objectCtorString}var isPlainObject_1=isPlainObject;function customOmitClone(e){return isPlainObject_1(e)?void 0:e}var _customOmitClone=customOmitClone,spreadableSymbol=_Symbol?_Symbol.isConcatSpreadable:void 0;function isFlattenable(e){return isArray_1(e)||isArguments_1(e)||!!(spreadableSymbol&&e&&e[spreadableSymbol])}var _isFlattenable=isFlattenable;function baseFlatten(e,t,r,n,o){var i=-1,s=e.length;for(r||(r=_isFlattenable),o||(o=[]);++i<s;){var a=e[i];t>0&&r(a)?t>1?baseFlatten(a,t-1,r,n,o):_arrayPush(o,a):n||(o[o.length]=a);}return o}var _baseFlatten=baseFlatten;function flatten(e){return (null==e?0:e.length)?_baseFlatten(e,1):[]}var flatten_1=flatten;function apply(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}var _apply=apply,nativeMax=Math.max;function overRest(e,t,r){return t=nativeMax(void 0===t?e.length-1:t,0),function(){for(var n=arguments,o=-1,i=nativeMax(n.length-t,0),s=Array(i);++o<i;)s[o]=n[t+o];o=-1;for(var a=Array(t+1);++o<t;)a[o]=n[o];return a[t]=r(s),_apply(e,this,a)}}var _overRest=overRest;function constant(e){return function(){return e}}var constant_1=constant;function identity(e){return e}var identity_1=identity,baseSetToString=_defineProperty$1?function(e,t){return _defineProperty$1(e,"toString",{configurable:!0,enumerable:!1,value:constant_1(t),writable:!0})}:identity_1,_baseSetToString=baseSetToString,HOT_COUNT=800,HOT_SPAN=16,nativeNow=Date.now;function shortOut(e){var t=0,r=0;return function(){var n=nativeNow(),o=HOT_SPAN-(n-r);if(r=n,o>0){if(++t>=HOT_COUNT)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}var _shortOut=shortOut,setToString=_shortOut(_baseSetToString),_setToString=setToString;function flatRest(e){return _setToString(_overRest(e,void 0,flatten_1),e+"")}var _flatRest=flatRest,CLONE_DEEP_FLAG$1=1,CLONE_FLAT_FLAG$1=2,CLONE_SYMBOLS_FLAG$1=4,omit=_flatRest(function(e,t){var r={};if(null==e)return r;var n=!1;t=_arrayMap(t,function(t){return t=_castPath(t,e),n||(n=t.length>1),t}),_copyObject(e,_getAllKeysIn(e),r),n&&(r=_baseClone(r,CLONE_DEEP_FLAG$1|CLONE_FLAT_FLAG$1|CLONE_SYMBOLS_FLAG$1,_customOmitClone));for(var o=t.length;o--;)_baseUnset(r,t[o]);return r}),omit_1=omit;function arrayAggregator(e,t,r,n){for(var o=-1,i=null==e?0:e.length;++o<i;){var s=e[o];t(n,s,r(s),e);}return n}var _arrayAggregator=arrayAggregator;function createBaseFor(e){return function(t,r,n){for(var o=-1,i=Object(t),s=n(t),a=s.length;a--;){var u=s[e?a:++o];if(!1===r(i[u],u,i))break}return t}}var _createBaseFor=createBaseFor,baseFor=_createBaseFor(),_baseFor=baseFor;function baseForOwn(e,t){return e&&_baseFor(e,t,keys_1)}var _baseForOwn=baseForOwn;function createBaseEach(e,t){return function(r,n){if(null==r)return r;if(!isArrayLike_1(r))return e(r,n);for(var o=r.length,i=t?o:-1,s=Object(r);(t?i--:++i<o)&&!1!==n(s[i],i,s););return r}}var _createBaseEach=createBaseEach,baseEach=_createBaseEach(_baseForOwn),_baseEach=baseEach;function baseAggregator(e,t,r,n){return _baseEach(e,function(e,o,i){t(n,e,r(e),i);}),n}var _baseAggregator=baseAggregator;function arraySome(e,t){for(var r=-1,n=null==e?0:e.length;++r<n;)if(t(e[r],r,e))return !0;return !1}var _arraySome=arraySome,COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;function equalArrays(e,t,r,n,o,i){var s=r&COMPARE_PARTIAL_FLAG,a=e.length,u=t.length;if(a!=u&&!(s&&u>a))return !1;var l=i.get(e);if(l&&i.get(t))return l==t;var c=-1,p=!0,f=r&COMPARE_UNORDERED_FLAG?new _SetCache:void 0;for(i.set(e,t),i.set(t,e);++c<a;){var d=e[c],g=t[c];if(n)var h=s?n(g,d,c,t,e,i):n(d,g,c,e,t,i);if(void 0!==h){if(h)continue;p=!1;break}if(f){if(!_arraySome(t,function(e,t){if(!_cacheHas(f,t)&&(d===e||o(d,e,r,n,i)))return f.push(t)})){p=!1;break}}else if(d!==g&&!o(d,g,r,n,i)){p=!1;break}}return i.delete(e),i.delete(t),p}var _equalArrays=equalArrays;function mapToArray(e){var t=-1,r=Array(e.size);return e.forEach(function(e,n){r[++t]=[n,e];}),r}var _mapToArray=mapToArray,COMPARE_PARTIAL_FLAG$1=1,COMPARE_UNORDERED_FLAG$1=2,boolTag$3="[object Boolean]",dateTag$3="[object Date]",errorTag$2="[object Error]",mapTag$5="[object Map]",numberTag$3="[object Number]",regexpTag$3="[object RegExp]",setTag$5="[object Set]",stringTag$3="[object String]",symbolTag$3="[object Symbol]",arrayBufferTag$3="[object ArrayBuffer]",dataViewTag$4="[object DataView]",symbolProto$2=_Symbol?_Symbol.prototype:void 0,symbolValueOf$1=symbolProto$2?symbolProto$2.valueOf:void 0;function equalByTag(e,t,r,n,o,i,s){switch(r){case dataViewTag$4:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return !1;e=e.buffer,t=t.buffer;case arrayBufferTag$3:return !(e.byteLength!=t.byteLength||!i(new _Uint8Array(e),new _Uint8Array(t)));case boolTag$3:case dateTag$3:case numberTag$3:return eq_1(+e,+t);case errorTag$2:return e.name==t.name&&e.message==t.message;case regexpTag$3:case stringTag$3:return e==t+"";case mapTag$5:var a=_mapToArray;case setTag$5:var u=n&COMPARE_PARTIAL_FLAG$1;if(a||(a=_setToArray),e.size!=t.size&&!u)return !1;var l=s.get(e);if(l)return l==t;n|=COMPARE_UNORDERED_FLAG$1,s.set(e,t);var c=_equalArrays(a(e),a(t),n,o,i,s);return s.delete(e),c;case symbolTag$3:if(symbolValueOf$1)return symbolValueOf$1.call(e)==symbolValueOf$1.call(t)}return !1}var _equalByTag=equalByTag,COMPARE_PARTIAL_FLAG$2=1,objectProto$e=Object.prototype,hasOwnProperty$c=objectProto$e.hasOwnProperty;function equalObjects(e,t,r,n,o,i){var s=r&COMPARE_PARTIAL_FLAG$2,a=_getAllKeys(e),u=a.length;if(u!=_getAllKeys(t).length&&!s)return !1;for(var l=u;l--;){var c=a[l];if(!(s?c in t:hasOwnProperty$c.call(t,c)))return !1}var p=i.get(e);if(p&&i.get(t))return p==t;var f=!0;i.set(e,t),i.set(t,e);for(var d=s;++l<u;){var g=e[c=a[l]],h=t[c];if(n)var b=s?n(h,g,c,t,e,i):n(g,h,c,e,t,i);if(!(void 0===b?g===h||o(g,h,r,n,i):b)){f=!1;break}d||(d="constructor"==c);}if(f&&!d){var _=e.constructor,y=t.constructor;_!=y&&"constructor"in e&&"constructor"in t&&!("function"==typeof _&&_ instanceof _&&"function"==typeof y&&y instanceof y)&&(f=!1);}return i.delete(e),i.delete(t),f}var _equalObjects=equalObjects,COMPARE_PARTIAL_FLAG$3=1,argsTag$3="[object Arguments]",arrayTag$2="[object Array]",objectTag$4="[object Object]",objectProto$f=Object.prototype,hasOwnProperty$d=objectProto$f.hasOwnProperty;function baseIsEqualDeep(e,t,r,n,o,i){var s=isArray_1(e),a=isArray_1(t),u=s?arrayTag$2:_getTag(e),l=a?arrayTag$2:_getTag(t),c=(u=u==argsTag$3?objectTag$4:u)==objectTag$4,p=(l=l==argsTag$3?objectTag$4:l)==objectTag$4,f=u==l;if(f&&isBuffer_1(e)){if(!isBuffer_1(t))return !1;s=!0,c=!1;}if(f&&!c)return i||(i=new _Stack),s||isTypedArray_1(e)?_equalArrays(e,t,r,n,o,i):_equalByTag(e,t,u,r,n,o,i);if(!(r&COMPARE_PARTIAL_FLAG$3)){var d=c&&hasOwnProperty$d.call(e,"__wrapped__"),g=p&&hasOwnProperty$d.call(t,"__wrapped__");if(d||g){var h=d?e.value():e,b=g?t.value():t;return i||(i=new _Stack),o(h,b,r,n,i)}}return !!f&&(i||(i=new _Stack),_equalObjects(e,t,r,n,o,i))}var _baseIsEqualDeep=baseIsEqualDeep;function baseIsEqual(e,t,r,n,o){return e===t||(null==e||null==t||!isObjectLike_1(e)&&!isObjectLike_1(t)?e!=e&&t!=t:_baseIsEqualDeep(e,t,r,n,baseIsEqual,o))}var _baseIsEqual=baseIsEqual,COMPARE_PARTIAL_FLAG$4=1,COMPARE_UNORDERED_FLAG$2=2;function baseIsMatch(e,t,r,n){var o=r.length,i=o,s=!n;if(null==e)return !i;for(e=Object(e);o--;){var a=r[o];if(s&&a[2]?a[1]!==e[a[0]]:!(a[0]in e))return !1}for(;++o<i;){var u=(a=r[o])[0],l=e[u],c=a[1];if(s&&a[2]){if(void 0===l&&!(u in e))return !1}else {var p=new _Stack;if(n)var f=n(l,c,u,e,t,p);if(!(void 0===f?_baseIsEqual(c,l,COMPARE_PARTIAL_FLAG$4|COMPARE_UNORDERED_FLAG$2,n,p):f))return !1}}return !0}var _baseIsMatch=baseIsMatch;function isStrictComparable(e){return e==e&&!isObject_1(e)}var _isStrictComparable=isStrictComparable;function getMatchData(e){for(var t=keys_1(e),r=t.length;r--;){var n=t[r],o=e[n];t[r]=[n,o,_isStrictComparable(o)];}return t}var _getMatchData=getMatchData;function matchesStrictComparable(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}var _matchesStrictComparable=matchesStrictComparable;function baseMatches(e){var t=_getMatchData(e);return 1==t.length&&t[0][2]?_matchesStrictComparable(t[0][0],t[0][1]):function(r){return r===e||_baseIsMatch(r,e,t)}}var _baseMatches=baseMatches;function get$1(e,t,r){var n=null==e?void 0:_baseGet(e,t);return void 0===n?r:n}var get_1=get$1;function baseHasIn(e,t){return null!=e&&t in Object(e)}var _baseHasIn=baseHasIn;function hasPath(e,t,r){for(var n=-1,o=(t=_castPath(t,e)).length,i=!1;++n<o;){var s=_toKey(t[n]);if(!(i=null!=e&&r(e,s)))break;e=e[s];}return i||++n!=o?i:!!(o=null==e?0:e.length)&&isLength_1(o)&&_isIndex(s,o)&&(isArray_1(e)||isArguments_1(e))}var _hasPath=hasPath;function hasIn(e,t){return null!=e&&_hasPath(e,t,_baseHasIn)}var hasIn_1=hasIn,COMPARE_PARTIAL_FLAG$5=1,COMPARE_UNORDERED_FLAG$3=2;function baseMatchesProperty(e,t){return _isKey(e)&&_isStrictComparable(t)?_matchesStrictComparable(_toKey(e),t):function(r){var n=get_1(r,e);return void 0===n&&n===t?hasIn_1(r,e):_baseIsEqual(t,n,COMPARE_PARTIAL_FLAG$5|COMPARE_UNORDERED_FLAG$3)}}var _baseMatchesProperty=baseMatchesProperty;function baseProperty(e){return function(t){return null==t?void 0:t[e]}}var _baseProperty=baseProperty;function basePropertyDeep(e){return function(t){return _baseGet(t,e)}}var _basePropertyDeep=basePropertyDeep;function property(e){return _isKey(e)?_baseProperty(_toKey(e)):_basePropertyDeep(e)}var property_1=property;function baseIteratee(e){return "function"==typeof e?e:null==e?identity_1:"object"==_typeof(e)?isArray_1(e)?_baseMatchesProperty(e[0],e[1]):_baseMatches(e):property_1(e)}var _baseIteratee=baseIteratee;function createAggregator(e,t){return function(r,n){var o=isArray_1(r)?_arrayAggregator:_baseAggregator,i=t?t():{};return o(r,e,_baseIteratee(n),i)}}var _createAggregator=createAggregator,keyBy=_createAggregator(function(e,t,r){_baseAssignValue(e,r,t);}),keyBy_1=keyBy;function mapValues(e,t){var r={};return t=_baseIteratee(t),_baseForOwn(e,function(e,n,o){_baseAssignValue(r,n,t(e,n,o));}),r}var mapValues_1=mapValues,$at=_stringAt(!0);_iterDefine(String,"String",function(e){this._t=String(e),this._i=0;},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=$at(t,r),this._i+=e.length,{value:e,done:!1})});var _validateCollection=function(e,t){if(!_isObject(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e},dP$4=_objectDp.f,fastKey=_meta.fastKey,SIZE=_descriptors?"_s":"size",getEntry=function(e,t){var r,n=fastKey(t);if("F"!==n)return e._i[n];for(r=e._f;r;r=r.n)if(r.k==t)return r},_collectionStrong={getConstructor:function(e,t,r,n){var o=e(function(e,i){_anInstance(e,o,t,"_i"),e._t=t,e._i=_objectCreate(null),e._f=void 0,e._l=void 0,e[SIZE]=0,null!=i&&_forOf(i,r,e[n],e);});return _redefineAll(o.prototype,{clear:function(){for(var e=_validateCollection(this,t),r=e._i,n=e._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete r[n.i];e._f=e._l=void 0,e[SIZE]=0;},delete:function(e){var r=_validateCollection(this,t),n=getEntry(r,e);if(n){var o=n.n,i=n.p;delete r._i[n.i],n.r=!0,i&&(i.n=o),o&&(o.p=i),r._f==n&&(r._f=o),r._l==n&&(r._l=i),r[SIZE]--;}return !!n},forEach:function(e){_validateCollection(this,t);for(var r,n=_ctx(e,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(n(r.v,r.k,this);r&&r.r;)r=r.p;},has:function(e){return !!getEntry(_validateCollection(this,t),e)}}),_descriptors&&dP$4(o.prototype,"size",{get:function(){return _validateCollection(this,t)[SIZE]}}),o},def:function(e,t,r){var n,o,i=getEntry(e,t);return i?i.v=r:(e._l=i={i:o=fastKey(t,!0),k:t,v:r,p:n=e._l,n:void 0,r:!1},e._f||(e._f=i),n&&(n.n=i),e[SIZE]++,"F"!==o&&(e._i[o]=i)),e},getEntry:getEntry,setStrong:function(e,t,r){_iterDefine(e,t,function(e,r){this._t=_validateCollection(e,t),this._k=r,this._l=void 0;},function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?_iterStep(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,_iterStep(1))},r?"entries":"values",!r,!0),_setSpecies(t);}},_collection=function(e,t,r,n,o,i){var s=_global[e],a=s,u=o?"set":"add",l=a&&a.prototype,c={},p=function(e){var t=l[e];_redefine(l,e,"delete"==e?function(e){return !(i&&!_isObject(e))&&t.call(this,0===e?0:e)}:"has"==e?function(e){return !(i&&!_isObject(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return i&&!_isObject(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,r){return t.call(this,0===e?0:e,r),this});};if("function"==typeof a&&(i||l.forEach&&!_fails(function(){(new a).entries().next();}))){var f=new a,d=f[u](i?{}:-0,1)!=f,g=_fails(function(){f.has(1);}),h=_iterDetect(function(e){new a(e);}),b=!i&&_fails(function(){for(var e=new a,t=5;t--;)e[u](t,t);return !e.has(-0)});h||((a=t(function(t,r){_anInstance(t,a,e);var n=_inheritIfRequired(new s,t,a);return null!=r&&_forOf(r,o,n[u],n),n})).prototype=l,l.constructor=a),(g||b)&&(p("delete"),p("has"),o&&p("get")),(b||d)&&p(u),i&&l.clear&&delete l.clear;}else a=n.getConstructor(t,e,o,u),_redefineAll(a.prototype,r),_meta.NEED=!0;return _setToStringTag(a,e),c[e]=a,_export(_export.G+_export.W+_export.F*(a!=s),c),i||n.setStrong(a,e,o),a},MAP="Map",es6_map=_collection(MAP,function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{get:function(e){var t=_collectionStrong.getEntry(_validateCollection(this,MAP),e);return t&&t.v},set:function(e,t){return _collectionStrong.def(_validateCollection(this,MAP),0===e?0:e,t)}},_collectionStrong,!0),$assign=Object.assign,_objectAssign=!$assign||_fails(function(){var e={},t={},r=Symbol(),n="abcdefghijklmnopqrst";return e[r]=7,n.split("").forEach(function(e){t[e]=e;}),7!=$assign({},e)[r]||Object.keys($assign({},t)).join("")!=n})?function(e,t){for(var r=_toObject(e),n=arguments.length,o=1,i=_objectGops.f,s=_objectPie.f;n>o;)for(var a,u=_iobject(arguments[o++]),l=i?_objectKeys(u).concat(i(u)):_objectKeys(u),c=l.length,p=0;c>p;)a=l[p++],_descriptors&&!s.call(u,a)||(r[a]=u[a]);return r}:$assign,_SIZEOF;_export(_export.S+_export.F,"Object",{assign:_objectAssign});var EVENT_ALL="*",EVENT_ENABLE="enable",EVENT_DISABLE="disable",SEMAPHORE=Symbol(),NO_OP=function(){},Type;!function(e){e[e.U8=0]="U8",e[e.U8C=1]="U8C",e[e.I8=2]="I8",e[e.U16=3]="U16",e[e.I16=4]="I16",e[e.U32=5]="U32",e[e.I32=6]="I32",e[e.F32=7]="F32",e[e.F64=8]="F64";}(Type||(Type={}));var SIZEOF=(_SIZEOF={},_defineProperty(_SIZEOF,0,1),_defineProperty(_SIZEOF,1,1),_defineProperty(_SIZEOF,2,1),_defineProperty(_SIZEOF,3,2),_defineProperty(_SIZEOF,4,2),_defineProperty(_SIZEOF,5,4),_defineProperty(_SIZEOF,6,4),_defineProperty(_SIZEOF,7,4),_defineProperty(_SIZEOF,8,8),_SIZEOF),LogLevel;!function(e){e[e.FINE=0]="FINE",e[e.DEBUG=1]="DEBUG",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.SEVERE=4]="SEVERE",e[e.NONE=5]="NONE";}(LogLevel||(LogLevel={}));var assert="undefined"==typeof process||"1"===process.env.UMBRELLA_ASSERTS?function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"assertion failed";if("function"==typeof e&&!e()||!e)throw new Error("function"==typeof t?t():t)}:NO_OP,meta=_meta.onFreeze;_objectSap("freeze",function(e){return function(t){return e&&_isObject(t)?e(meta(t)):t}});var NULL_LOGGER=Object.freeze({level:LogLevel.NONE,fine:function(){},debug:function(){},info:function(){},warn:function(){},severe:function(){}}),Reflect$1=_global.Reflect,_ownKeys=Reflect$1&&Reflect$1.ownKeys||function(e){var t=_objectGopn.f(_anObject(e)),r=_objectGops.f;return r?t.concat(r(e)):t};_export(_export.S,"Reflect",{ownKeys:_ownKeys});var mixin=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=Reflect.ownKeys(e),n=Reflect.ownKeys(t),o=Symbol("isa");function i(t){var n=r,i=Array.isArray(n),s=0;for(n=i?n:n[Symbol.iterator]();;){var a;if(i){if(s>=n.length)break;a=n[s++];}else {if((s=n.next()).done)break;a=s.value;}var u=a,l=Object.getOwnPropertyDescriptor(t.prototype,u);!l||l.configurable?Object.defineProperty(t.prototype,u,{value:e[u],writable:!0}):console.log("not patching: ".concat(t.name,".").concat(u.toString()));}return Object.defineProperty(t.prototype,o,{value:!0}),t}var s=n,a=Array.isArray(s),u=0;for(s=a?s:s[Symbol.iterator]();;){var l;if(a){if(u>=s.length)break;l=s[u++];}else {if((u=s.next()).done)break;l=u.value;}var c=l;Object.defineProperty(i,c,{value:t[c],enumerable:t.propertyIsEnumerable(c)});}return Object.defineProperty(i,Symbol.hasInstance,{value:function(e){return !!e[o]}}),i},IllegalArgumentError=function(e){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,"illegal argument(s)"+(void 0!==e?": "+e:"")))}return _inherits(t,_wrapNativeSuper(Error)),t}(),illegalArgs=function(e){throw new IllegalArgumentError(e)},IllegalArityError=function(e){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,"illegal arity: ".concat(e)))}return _inherits(t,_wrapNativeSuper(Error)),t}(),IllegalStateError=function(e){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,"illegal state"+(void 0!==e?": "+e:"")))}return _inherits(t,_wrapNativeSuper(Error)),t}(),UnsupportedOperationError=function(e){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,"unsupported operation"+(void 0!==e?": "+e:"")))}return _inherits(t,_wrapNativeSuper(Error)),t}(),meta$1=_meta.onFreeze;_objectSap("seal",function(e){return function(t){return e&&_isObject(t)?e(meta$1(t)):t}});var IEnableMixin=mixin({_enabled:!0,isEnabled:function(){return this._enabled},enable:function(){this._enabled=!0,this.notify&&this.notify({id:EVENT_ENABLE,target:this});},disable:function(){this._enabled=!1,this.notify&&this.notify({id:EVENT_DISABLE,target:this});},toggle:function(){return this._enabled?this.disable():this.enable(),this._enabled}}),inotify_dispatch=function(e,t){if(e)for(var r,n=0,o=e.length;n<o;n++)if((r=e[n])[0].call(r[1],t),t.canceled)return},INotifyMixin=mixin({addListener:function(e,t,r){var n=(this._listeners=this._listeners||{})[e];return n||(n=this._listeners[e]=[]),-1===this.__listener(n,t,r)&&(n.push([t,r]),!0)},removeListener:function(e,t,r){if(!this._listeners)return !1;var n=this._listeners[e];if(n){var o=this.__listener(n,t,r);if(-1!==o)return n.splice(o,1),!0}return !1},notify:function(e){this._listeners&&(void 0===e.target&&(e.target=this),inotify_dispatch(this._listeners[e.id],e),inotify_dispatch(this._listeners[EVENT_ALL],e));},__listener:function(e,t,r){for(var n=e.length;--n>=0;){var o=e[n];if(o[0]===t&&o[1]===r)break}return n}}),IWatchMixin=mixin({addWatch:function(e,t){return this._watches=this._watches||{},!this._watches[e]&&(this._watches[e]=t,!0)},removeWatch:function(e){if(this._watches)return !!this._watches[e]&&(delete this._watches[e],!0)},notifyWatches:function(e,t){if(this._watches){var r=this._watches;for(var n in r)r[n](n,e,t);}}}),isArrayLike$1=function(e){return null!=e&&"function"!=typeof e&&void 0!==e.length},SET="Set",es6_set=_collection(SET,function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{add:function(e){return _collectionStrong.def(_validateCollection(this,SET),e=0===e?0:e,e)}},_collectionStrong);_typedArray("Float64",8,function(e){return function(t,r,n){return e(this,t,r,n)}}),_typedArray("Int32",4,function(e){return function(t,r,n){return e(this,t,r,n)}}),_typedArray("Int16",2,function(e){return function(t,r,n){return e(this,t,r,n)}}),_typedArray("Uint16",2,function(e){return function(t,r,n){return e(this,t,r,n)}}),_typedArray("Int8",1,function(e){return function(t,r,n){return e(this,t,r,n)}}),_typedArray("Uint8",1,function(e){return function(t,r,n){return e(this,t,r,n)}},!0),_typedArray("Uint32",4,function(e){return function(t,r,n){return e(this,t,r,n)}}),_typedArray("Float32",4,function(e){return function(t,r,n){return e(this,t,r,n)}});var compare=function(e,t){return e===t?0:null==e?null==t?0:-1:null==t?null==e?0:1:"function"==typeof e.compare?e.compare(t):"function"==typeof t.compare?-t.compare(e):e<t?-1:e>t?1:0},OBJP=Object.getPrototypeOf({}),FN="function",STR="string",equiv=function(e,t){var r;return e===t||(null==e?e==t:_typeof(e.equiv)===FN?e.equiv(t):null==t?e==t:_typeof(t.equiv)===FN?t.equiv(e):_typeof(e)!==STR&&_typeof(t)!==STR&&(null!=(r=Object.getPrototypeOf(e))&&r!==OBJP||null!=(r=Object.getPrototypeOf(t))&&r!==OBJP?_typeof(e)!==FN&&void 0!==e.length&&_typeof(t)!==FN&&void 0!==t.length?equivArrayLike(e,t):e instanceof Set&&t instanceof Set?equivSet(e,t):e instanceof Map&&t instanceof Map?equivMap(e,t):e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():e instanceof RegExp&&t instanceof RegExp?e.toString()===t.toString():e!=e&&t!=t:equivObject(e,t)))},equivArrayLike=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:equiv,n=e.length;if(n===t.length)for(;--n>=0&&r(e[n],t[n]););return n<0},equivSet=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:equiv;return e.size===t.size&&r(_toConsumableArray(e.keys()).sort(),_toConsumableArray(t.keys()).sort())},equivMap=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:equiv;return e.size===t.size&&r(_toConsumableArray(e).sort(),_toConsumableArray(t).sort())},equivObject=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:equiv;if(Object.keys(e).length!==Object.keys(t).length)return !1;for(var n in e)if(!t.hasOwnProperty(n)||!r(e[n],t[n]))return !1;return !0},Reduced=function(){function e(t){_classCallCheck(this,e),this.value=t;}return _createClass(e,[{key:"deref",value:function(){return this.value}}]),e}(),isReduced=function(e){return e instanceof Reduced},unreduced=function(e){return e instanceof Reduced?e.deref():e},_marked2=regenerator.mark(iterator1);function iterator1(e,t){var r,n,o,i,s,a;return regenerator.wrap(function(u){for(;;)switch(u.prev=u.next){case 0:r=e([NO_OP,NO_OP,function(e,t){return t}])[2],n=t,o=Array.isArray(n),i=0,n=o?n:n[Symbol.iterator]();case 2:if(!o){u.next=8;break}if(!(i>=n.length)){u.next=5;break}return u.abrupt("break",25);case 5:s=n[i++],u.next=12;break;case 8:if(!(i=n.next()).done){u.next=11;break}return u.abrupt("break",25);case 11:s=i.value;case 12:if(a=r(SEMAPHORE,s),!isReduced(a)){u.next=20;break}if((a=unreduced(a.deref()))===SEMAPHORE){u.next=19;break}return u.next=19,a;case 19:return u.abrupt("return");case 20:if(a===SEMAPHORE){u.next=23;break}return u.next=23,a;case 23:u.next=2;break;case 25:case"end":return u.stop()}},_marked2)}var compR=function(e,t){return [e[0],e[1],t]};function map(e,t){return t?iterator1(map(e),t):function(t){var r=t[2];return compR(t,function(t,n){return r(t,e(n))})}}function partial(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var o=r[0],i=r[1],s=r[2],a=r[3],u=r[4],l=r[5],c=r[6],p=r[7];switch(r.length){case 1:return function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return e.apply(void 0,[o].concat(r))};case 2:return function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return e.apply(void 0,[o,i].concat(r))};case 3:return function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return e.apply(void 0,[o,i,s].concat(r))};case 4:return function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return e.apply(void 0,[o,i,s,a].concat(r))};case 5:return function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return e.apply(void 0,[o,i,s,a,u].concat(r))};case 6:return function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return e.apply(void 0,[o,i,s,a,u,l].concat(r))};case 7:return function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return e.apply(void 0,[o,i,s,a,u,l,c].concat(r))};case 8:return function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return e.apply(void 0,[o,i,s,a,u,l,c,p].concat(r))};default:illegalArgs();}}var foo=partial(function(e,t){return e+t},"a"),INV_MAX=1/4294967295,ARandom=function(){function e(){_classCallCheck(this,e);}return _createClass(e,[{key:"float",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return this.int()*INV_MAX*e}},{key:"norm",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return this.int()*INV_MAX*e*2-e}},{key:"minmax",value:function(e,t){return this.float()*(t-e)+e}},{key:"gaussian",value:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-.5,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,n=0,o=e;o-- >0;)n+=this.float(r);return n/e+t}}]),e}(),random=Math.random,SystemRandom=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).apply(this,arguments))}return _inherits(t,ARandom),_createClass(t,[{key:"int",value:function(){return 4294967295*random()>>>0}},{key:"float",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return random()*e}}]),t}(),SYSTEM=new SystemRandom;_export(_export.P,"Array",{fill:_arrayFill}),_addToUnscopables("fill");var DCons=function(){function e(t){_classCallCheck(this,e),this._length=0,t&&this.into(t);}return _createClass(e,[{key:"copy",value:function(){return new e(this)}},{key:"empty",value:function(){return new e}},{key:"clear",value:function(){this.release();}},{key:"release",value:function(){for(var e,t=this.head;t;)e=t.next,delete t.value,delete t.prev,delete t.next,t=e;return delete this.head,delete this.tail,this._length=0,!0}},{key:"compare",value:function(e){var t=this._length;if(t<e._length)return -1;if(t>e._length)return 1;if(0===t)return 0;for(var r=this.head,n=e.head,o=0;r&&0==o;)o=compare(r.value,n.value),r=r.next,n=n.next;return o}},{key:"equiv",value:function(t){if((t instanceof e||isArrayLike$1(t))&&this._length===t.length){if(0===this._length)return !0;var r=this.head,n=t,o=Array.isArray(n),i=0;for(n=o?n:n[Symbol.iterator]();;){var s;if(o){if(i>=n.length)break;s=n[i++];}else {if((i=n.next()).done)break;s=i.value;}var a=s;if(!equiv(r.value,a))return !1;r=r.next;}return !0}return !1}},{key:Symbol.iterator,value:regenerator.mark(function e(){var t;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:t=this.head;case 1:if(!t){e.next=7;break}return e.next=4,t.value;case 4:t=t.next,e.next=1;break;case 7:case"end":return e.stop()}},e,this)})},{key:"cycle",value:regenerator.mark(function e(){return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.delegateYield(this,"t0",2);case 2:e.next=0;break;case 4:case"end":return e.stop()}},e,this)})},{key:"$reduce",value:function(e,t){for(var r=this.head;r&&!isReduced(t);)t=e(t,r.value),r=r.next;return t}},{key:"drop",value:function(){var e=this.head;if(e)return this.head=e.next,this.head?delete this.head.prev:delete this.tail,this._length--,e.value}},{key:"cons",value:function(e){var t={value:e,next:this.head};return this.head?this.head.prev=t:this.tail=t,this.head=t,this._length++,this}},{key:"insertBefore",value:function(e,t){e||illegalArgs("cell is undefined");var r={value:t,next:e,prev:e.prev};return e.prev?e.prev.next=r:this.head=r,e.prev=r,this._length++,this}},{key:"insertAfter",value:function(e,t){e||illegalArgs("cell is undefined");var r={value:t,next:e.next,prev:e};return e.next?e.next.prev=r:this.tail=r,e.next=r,this._length++,this}},{key:"insertBeforeNth",value:function(e,t){return e<0&&(e+=this._length),e<=0?this.cons(t):(this.ensureIndex(e),this.insertBefore(this.nthCellUnsafe(e),t))}},{key:"insertAfterNth",value:function(e,t){return e<0&&(e+=this._length),e>=this._length-1?this.push(t):(this.ensureIndex(e),this.insertAfter(this.nthCellUnsafe(e),t))}},{key:"insertSorted",value:function(e,t){t=t||compare;for(var r=this.head;r;){if(t(e,r.value)<=0)return this.insertBefore(r,e);r=r.next;}return this.push(e)}},{key:"find",value:function(e){for(var t=this.head;t;){if(t.value===e)return t;t=t.next;}}},{key:"findWith",value:function(e){for(var t=this.head;t;){if(e(t.value))return t;t=t.next;}}},{key:"concat",value:function(){for(var e=this.copy(),t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];for(var o=0,i=r;o<i.length;o++){var s=i[o];e.into(s);}return e}},{key:"into",value:function(e){var t=e,r=Array.isArray(t),n=0;for(t=r?t:t[Symbol.iterator]();;){var o;if(r){if(n>=t.length)break;o=t[n++];}else {if((n=t.next()).done)break;o=n.value;}var i=o;this.push(i);}}},{key:"slice",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.length,n=t<0?t+this._length:t,o=r<0?r+this._length:r;(n<0||o<0)&&illegalArgs("invalid indices: ${from} / ${to}");for(var i=new e,s=this.nthCell(n);s&&++n<=o;)i.push(s.value),s=s.next;return i}},{key:"splice",value:function(t){var r,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=arguments.length>2?arguments[2]:void 0;"number"==typeof t?(t<0&&(t+=this._length),this.ensureIndex(t),r=this.nthCellUnsafe(t)):r=t;var i=new e;if(n>0)for(;r&&n-- >0;)this.remove(r),i.push(r.value),r=r.next;else r&&(r=r.next);if(o)if(r){var s=o,a=Array.isArray(s),u=0;for(s=a?s:s[Symbol.iterator]();;){var l;if(a){if(u>=s.length)break;l=s[u++];}else {if((u=s.next()).done)break;l=u.value;}var c=l;this.insertBefore(r,c);}}else {var p=o,f=Array.isArray(p),d=0;for(p=f?p:p[Symbol.iterator]();;){var g;if(f){if(d>=p.length)break;g=p[d++];}else {if((d=p.next()).done)break;g=d.value;}var h=g;this.push(h);}}return i}},{key:"remove",value:function(e){return e.prev?e.prev.next=e.next:this.head=e.next,e.next?e.next.prev=e.prev:this.tail=e.prev,this._length--,this}},{key:"swap",value:function(e,t){if(e!==t){var r=e.value;e.value=t.value,t.value=r;}return this}},{key:"push",value:function(e){if(this.tail){var t={value:e,prev:this.tail};return this.tail.next=t,this.tail=t,this._length++,this}return this.cons(e)}},{key:"pop",value:function(){var e=this.tail;if(e)return this.tail=e.prev,this.tail?delete this.tail.next:delete this.head,this._length--,e.value}},{key:"first",value:function(){return this.head&&this.head.value}},{key:"peek",value:function(){return this.tail&&this.tail.value}},{key:"setHead",value:function(e){return this.head?(this.head.value=e,this):this.cons(e)}},{key:"setTail",value:function(e){return this.tail?(this.tail.value=e,this):this.push(e)}},{key:"setNth",value:function(e,t){var r=this.nthCell(e);return !r&&illegalArgs("index out of bounds: ".concat(e)),r.value=t,this}},{key:"nth",value:function(e,t){var r=this.nthCell(e);return r?r.value:t}},{key:"nthCell",value:function(e){if(e<0&&(e+=this._length),!(e<0||e>=this._length))return this.nthCellUnsafe(e)}},{key:"rotateLeft",value:function(){switch(this._length){case 0:case 1:return this;case 2:return this.swap(this.head,this.tail);default:return this.push(this.drop())}}},{key:"rotateRight",value:function(){switch(this._length){case 0:case 1:return this;case 2:return this.swap(this.head,this.tail);default:var e=this.peek();return this.pop(),this.cons(e)}}},{key:"map",value:function(t){for(var r=new e,n=this.head;n;)r.push(t(n.value)),n=n.next;return r}},{key:"filter",value:function(t){for(var r=new e,n=this.head;n;)t(n.value)&&r.push(n.value),n=n.next;return r}},{key:"reduce",value:function(e,t){for(var r=t,n=this.head;n;)r=e(r,n.value),n=n.next;return r}},{key:"shuffle",value:function(){for(var e=this._length,t=this.tail;e>1;){var r=Math.floor(Math.random()*e);this.swap(this.nthCell(r),t),t=t.prev,e--;}return this}},{key:"reverse",value:function(){for(var e=this.head,t=this.tail,r=(this._length>>>1)+(1&this._length);e&&t&&r>0;){var n=e.value;e.value=t.value,t.value=n,e=e.next,t=t.prev,r--;}return this}},{key:"asHead",value:function(e){return e===this.head?this:(this.remove(e),this.head.prev=e,e.next=this.head,e.prev=void 0,this.head=e,this._length++,this)}},{key:"asTail",value:function(e){return e===this.tail?this:(this.remove(e),this.tail.next=e,e.prev=this.tail,e.next=void 0,this.tail=e,this._length++,this)}},{key:"toString",value:function(){for(var e=[],t=this.head;t;)e.push(null!=t.value?String(t.value):void 0===t.value?"undefined":"null"),t=t.next;return e.join(", ")}},{key:"toJSON",value:function(){return _toConsumableArray(this)}},{key:"ensureIndex",value:function(e){assert(e>=0&&e<this._length,"index out of range: ".concat(e));}},{key:"nthCellUnsafe",value:function(e){var t,r;for(e<=this._length>>1?(t=this.head,r="next"):(t=this.tail,r="prev",e=this._length-e-1);e-- >0&&t;)t=t[r];return t}},{key:"length",get:function(){return this._length}}]),e}(),LRUCache=function(){function e(t,r){_classCallCheck(this,e);var n=Object.assign({maxlen:1/0,maxsize:1/0,map:function(){return new Map},ksize:function(){return 0},vsize:function(){return 0}},r);this.map=n.map(),this.items=new DCons,this._size=0,this.opts=n,t&&this.into(t);}return _createClass(e,[{key:Symbol.iterator,value:function(){return this.entries()}},{key:"entries",value:function(){return map(function(e){return [e.k,e]},this.items)}},{key:"keys",value:function(){return map(function(e){return e.k},this.items)}},{key:"values",value:function(){return map(function(e){return e.v},this.items)}},{key:"copy",value:function(){var e=this.empty();e.items=this.items.copy();for(var t=e.items.head;t;)e.map.set(t.value.k,t),t=t.next;return e}},{key:"empty",value:function(){return new e(null,this.opts)}},{key:"release",value:function(){this._size=0,this.map.clear();var e=this.opts.release;if(e){for(var t;t=this.items.drop();)e(t.k,t.v);return !0}return this.items.release()}},{key:"has",value:function(e){return this.map.has(e)}},{key:"get",value:function(e,t){var r=this.map.get(e);return r?this.resetEntry(r):t}},{key:"set",value:function(e,t){var r=this.opts.ksize(e)+this.opts.vsize(t),n=this.map.get(e);return n&&(this._size-=n.value.s),this._size+=r,this.ensureSize()&&(n?(n.value.v=t,n.value.s=r,this.items.asTail(n)):(this.items.push({k:e,v:t,s:r}),this.map.set(e,this.items.tail))),t}},{key:"into",value:function(e){var t=e,r=Array.isArray(t),n=0;for(t=r?t:t[Symbol.iterator]();;){var o;if(r){if(n>=t.length)break;o=t[n++];}else {if((n=t.next()).done)break;o=n.value;}var i=o;this.set(i[0],i[1]);}return this}},{key:"getSet",value:function(e,t){var r=this,n=this.map.get(e);return n?Promise.resolve(this.resetEntry(n)):t().then(function(t){return r.set(e,t)})}},{key:"delete",value:function(e){var t=this.map.get(e);return !!t&&(this.removeEntry(t),!0)}},{key:"resetEntry",value:function(e){return this.items.asTail(e),e.value.v}},{key:"ensureSize",value:function(){for(var e=this.opts.release,t=this.opts.maxsize,r=this.opts.maxlen;this._size>t||this.length>=r;){var n=this.items.drop();if(!n)return !1;this.map.delete(n.k),e&&e(n.k,n.v),this._size-=n.s;}return !0}},{key:"removeEntry",value:function(e){var t=e.value;this.map.delete(t.k),this.items.remove(e),this.opts.release&&this.opts.release(t.k,t.v),this._size-=t.s;}},{key:"length",get:function(){return this.items.length}},{key:"size",get:function(){return this._size}}]),e}(),TLRUCache=function(e){function t(e,r){return _classCallCheck(this,t),r=Object.assign({ttl:36e5},r),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e,r))}return _inherits(t,LRUCache),_createClass(t,[{key:"empty",value:function(){return new t(null,this.opts)}},{key:"has",value:function(e){return void 0!==this.get(e)}},{key:"get",value:function(e,t){var r=this.map.get(e);if(r){if(r.value.t>=Date.now())return this.resetEntry(r);this.removeEntry(r);}return t}},{key:"set",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.opts.ttl,n=this.opts.ksize(e)+this.opts.vsize(t),o=this.map.get(e);if(o&&(this._size-=o.value.s),this._size+=n,this.ensureSize()){var i=Date.now()+r;o?(o.value.v=t,o.value.s=n,o.value.t=i,this.items.asTail(o)):(this.items.push({k:e,v:t,s:n,t:i}),this.map.set(e,this.items.tail));}return t}},{key:"getSet",value:function(e,t){var r=this,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.opts.ttl,o=this.get(e);return o?Promise.resolve(o):t().then(function(t){return r.set(e,t,n)})}},{key:"prune",value:function(){for(var e=Date.now(),t=this.items.head;t;)t.value.t<e&&this.removeEntry(t),t=t.next;}},{key:"ensureSize",value:function(){for(var e=this.opts.maxsize,r=this.opts.maxlen,n=Date.now(),o=this.items.head;o&&(this._size>e||this.length>=r);)o.value.t<n&&this.removeEntry(o),o=o.next;return _get(_getPrototypeOf(t.prototype),"ensureSize",this).call(this)}}]),t}(),_stringWs="\t\n\v\f\r Â áá ââââââââââââ¯âã\u2028\u2029\ufeff",space="["+_stringWs+"]",non="âÂ",ltrim=RegExp("^"+space+space+"*"),rtrim=RegExp(space+space+"*$"),exporter=function(e,t,r){var n={},o=_fails(function(){return !!_stringWs[e]()||non[e]()!=non}),i=n[e]=o?t(trim):_stringWs[e];r&&(n[r]=i),_export(_export.P+_export.F*o,"String",n);},trim=exporter.trim=function(e,t){return e=String(_defined(e)),1&t&&(e=e.replace(ltrim,"")),2&t&&(e=e.replace(rtrim,"")),e},_stringTrim=exporter,gOPN$3=_objectGopn.f,gOPD$2=_objectGopd.f,dP$5=_objectDp.f,$trim=_stringTrim.trim,NUMBER="Number",$Number=_global[NUMBER],Base$1=$Number,proto$2=$Number.prototype,BROKEN_COF=_cof(_objectCreate(proto$2))==NUMBER,TRIM="trim"in String.prototype,toNumber=function(e){var t=_toPrimitive(e,!1);if("string"==typeof t&&t.length>2){var r,n,o,i=(t=TRIM?t.trim():$trim(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(r=t.charCodeAt(2))||120===r)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return +t}for(var s,a=t.slice(2),u=0,l=a.length;u<l;u++)if((s=a.charCodeAt(u))<48||s>o)return NaN;return parseInt(a,n)}}return +t};if(!$Number(" 0o1")||!$Number("0b1")||$Number("+0x1")){$Number=function(e){var t=arguments.length<1?0:e,r=this;return r instanceof $Number&&(BROKEN_COF?_fails(function(){proto$2.valueOf.call(r);}):_cof(r)!=NUMBER)?_inheritIfRequired(new Base$1(toNumber(t)),r,$Number):toNumber(t)};for(var keys$2=_descriptors?gOPN$3(Base$1):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),j$1=0,key$1;keys$2.length>j$1;j$1++)_has(Base$1,key$1=keys$2[j$1])&&!_has($Number,key$1)&&dP$5($Number,key$1,gOPD$2(Base$1,key$1));$Number.prototype=proto$2,proto$2.constructor=$Number,_redefine(_global,NUMBER,$Number);}_export(_export.S,"Number",{isNaN:function(e){return e!=e}});var rApply=(_global.Reflect||{}).apply,fApply=Function.apply;_export(_export.S+_export.F*!_fails(function(){rApply(function(){});}),"Reflect",{apply:function(e,t,r){var n=_aFunction(e),o=_anObject(r);return rApply?rApply(n,t,o):fApply.call(n,t,o)}});var R="object"===("undefined"==typeof Reflect?"undefined":_typeof(Reflect))?Reflect:null,ReflectApply=R&&"function"==typeof R.apply?R.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)},ReflectOwnKeys;function ProcessEmitWarning(e){console&&console.warn&&console.warn(e);}ReflectOwnKeys=R&&"function"==typeof R.ownKeys?R.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var NumberIsNaN=Number.isNaN||function(e){return e!=e};function EventEmitter(){EventEmitter.init.call(this);}var events=EventEmitter;EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._eventsCount=0,EventEmitter.prototype._maxListeners=void 0;var defaultMaxListeners=10;function $getMaxListeners(e){return void 0===e._maxListeners?EventEmitter.defaultMaxListeners:e._maxListeners}function _addListener(e,t,r,n){var o,i,s;if("function"!=typeof r)throw new TypeError('The "listener" argument must be of type Function. Received type '+_typeof(r));if(void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),s=i[t]),void 0===s)s=i[t]=r,++e._eventsCount;else if("function"==typeof s?s=i[t]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(o=$getMaxListeners(e))>0&&s.length>o&&!s.warned){s.warned=!0;var a=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");a.name="MaxListenersExceededWarning",a.emitter=e,a.type=t,a.count=s.length,ProcessEmitWarning(a);}return e}function onceWrapper(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,ReflectApply(this.listener,this.target,e));}function _onceWrap(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},o=onceWrapper.bind(n);return o.listener=r,n.wrapFn=o,o}function _listeners(e,t,r){var n=e._events;if(void 0===n)return [];var o=n[t];return void 0===o?[]:"function"==typeof o?r?[o.listener||o]:[o]:r?unwrapListeners(o):arrayClone(o,o.length)}function listenerCount(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function arrayClone(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function spliceOne(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop();}function unwrapListeners(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}function getType(e){return Object.prototype.toString.call(e).slice(8,-1)}function isPlainObject$1(e){return "Object"===getType(e)&&(e.constructor===Object&&Object.getPrototypeOf(e)===Object.prototype)}function isNil(e){return null==e}Object.defineProperty(EventEmitter,"defaultMaxListeners",{enumerable:!0,get:function(){return defaultMaxListeners},set:function(e){if("number"!=typeof e||e<0||NumberIsNaN(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");defaultMaxListeners=e;}}),EventEmitter.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0;},EventEmitter.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||NumberIsNaN(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},EventEmitter.prototype.getMaxListeners=function(){return $getMaxListeners(this)},EventEmitter.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,o=this._events;if(void 0!==o)n=n&&void 0===o.error;else if(!n)return !1;if(n){var i;if(t.length>0&&(i=t[0]),i instanceof Error)throw i;var s=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw s.context=i,s}var a=o[e];if(void 0===a)return !1;if("function"==typeof a)ReflectApply(a,this,t);else {var u=a.length,l=arrayClone(a,u);for(r=0;r<u;++r)ReflectApply(l[r],this,t);}return !0},EventEmitter.prototype.addListener=function(e,t){return _addListener(this,e,t,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.prependListener=function(e,t){return _addListener(this,e,t,!0)},EventEmitter.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+_typeof(t));return this.on(e,_onceWrap(this,e,t)),this},EventEmitter.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+_typeof(t));return this.prependListener(e,_onceWrap(this,e,t)),this},EventEmitter.prototype.removeListener=function(e,t){var r,n,o,i,s;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+_typeof(t));if(void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(o=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){s=r[i].listener,o=i;break}if(o<0)return this;0===o?r.shift():spliceOne(r,o),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,s||t);}return this},EventEmitter.prototype.off=EventEmitter.prototype.removeListener,EventEmitter.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var o,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(o=i[n])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},EventEmitter.prototype.listeners=function(e){return _listeners(this,e,!0)},EventEmitter.prototype.rawListeners=function(e){return _listeners(this,e,!1)},EventEmitter.listenerCount=function(e,t){return "function"==typeof e.listenerCount?e.listenerCount(t):listenerCount.call(e,t)},EventEmitter.prototype.listenerCount=listenerCount,EventEmitter.prototype.eventNames=function(){return this._eventsCount>0?ReflectOwnKeys(this._events):[]};var isNil_1=isNil,quot=/"/g,createHTML=function(e,t,r,n){var o=String(_defined(e)),i="<"+t;return ""!==r&&(i+=" "+r+'="'+String(n).replace(quot,"&quot;")+'"'),i+">"+o+"</"+t+">"},_stringHtml=function(e,t){var r={};r[e]=t(createHTML),_export(_export.P+_export.F*_fails(function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}),"String",r);};_stringHtml("sub",function(e){return function(){return e(this,"sub","","")}});var long_1=Long,wasm=null;try{wasm=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports;}catch(e){}function Long(e,t,r){this.low=0|e,this.high=0|t,this.unsigned=!!r;}function isLong(e){return !0===(e&&e.__isLong__)}Long.prototype.__isLong__,Object.defineProperty(Long.prototype,"__isLong__",{value:!0}),Long.isLong=isLong;var INT_CACHE={},UINT_CACHE={};function fromInt(e,t){var r,n,o;return t?(o=0<=(e>>>=0)&&e<256)&&(n=UINT_CACHE[e])?n:(r=fromBits(e,(0|e)<0?-1:0,!0),o&&(UINT_CACHE[e]=r),r):(o=-128<=(e|=0)&&e<128)&&(n=INT_CACHE[e])?n:(r=fromBits(e,e<0?-1:0,!1),o&&(INT_CACHE[e]=r),r)}function fromNumber(e,t){if(isNaN(e))return t?UZERO:ZERO;if(t){if(e<0)return UZERO;if(e>=TWO_PWR_64_DBL)return MAX_UNSIGNED_VALUE}else {if(e<=-TWO_PWR_63_DBL)return MIN_VALUE;if(e+1>=TWO_PWR_63_DBL)return MAX_VALUE}return e<0?fromNumber(-e,t).neg():fromBits(e%TWO_PWR_32_DBL|0,e/TWO_PWR_32_DBL|0,t)}function fromBits(e,t,r){return new Long(e,t,r)}Long.fromInt=fromInt,Long.fromNumber=fromNumber,Long.fromBits=fromBits;var pow_dbl=Math.pow;function fromString(e,t,r){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return ZERO;if("number"==typeof t?(r=t,t=!1):t=!!t,(r=r||10)<2||36<r)throw RangeError("radix");var n;if((n=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===n)return fromString(e.substring(1),t,r).neg();for(var o=fromNumber(pow_dbl(r,8)),i=ZERO,s=0;s<e.length;s+=8){var a=Math.min(8,e.length-s),u=parseInt(e.substring(s,s+a),r);if(a<8){var l=fromNumber(pow_dbl(r,a));i=i.mul(l).add(fromNumber(u));}else i=(i=i.mul(o)).add(fromNumber(u));}return i.unsigned=t,i}function fromValue(e,t){return "number"==typeof e?fromNumber(e,t):"string"==typeof e?fromString(e,t):fromBits(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}Long.fromString=fromString,Long.fromValue=fromValue;var TWO_PWR_16_DBL=65536,TWO_PWR_24_DBL=1<<24,TWO_PWR_32_DBL=TWO_PWR_16_DBL*TWO_PWR_16_DBL,TWO_PWR_64_DBL=TWO_PWR_32_DBL*TWO_PWR_32_DBL,TWO_PWR_63_DBL=TWO_PWR_64_DBL/2,TWO_PWR_24=fromInt(TWO_PWR_24_DBL),ZERO=fromInt(0);Long.ZERO=ZERO;var UZERO=fromInt(0,!0);Long.UZERO=UZERO;var ONE=fromInt(1);Long.ONE=ONE;var UONE=fromInt(1,!0);Long.UONE=UONE;var NEG_ONE=fromInt(-1);Long.NEG_ONE=NEG_ONE;var MAX_VALUE=fromBits(-1,2147483647,!1);Long.MAX_VALUE=MAX_VALUE;var MAX_UNSIGNED_VALUE=fromBits(-1,-1,!0);Long.MAX_UNSIGNED_VALUE=MAX_UNSIGNED_VALUE;var MIN_VALUE=fromBits(0,-2147483648,!1);Long.MIN_VALUE=MIN_VALUE;var LongPrototype=Long.prototype;LongPrototype.toInt=function(){return this.unsigned?this.low>>>0:this.low},LongPrototype.toNumber=function(){return this.unsigned?(this.high>>>0)*TWO_PWR_32_DBL+(this.low>>>0):this.high*TWO_PWR_32_DBL+(this.low>>>0)},LongPrototype.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return "0";if(this.isNegative()){if(this.eq(MIN_VALUE)){var t=fromNumber(e),r=this.div(t),n=r.mul(t).sub(this);return r.toString(e)+n.toInt().toString(e)}return "-"+this.neg().toString(e)}for(var o=fromNumber(pow_dbl(e,6),this.unsigned),i=this,s="";;){var a=i.div(o),u=(i.sub(a.mul(o)).toInt()>>>0).toString(e);if((i=a).isZero())return u+s;for(;u.length<6;)u="0"+u;s=""+u+s;}},LongPrototype.getHighBits=function(){return this.high},LongPrototype.getHighBitsUnsigned=function(){return this.high>>>0},LongPrototype.getLowBits=function(){return this.low},LongPrototype.getLowBitsUnsigned=function(){return this.low>>>0},LongPrototype.getNumBitsAbs=function(){if(this.isNegative())return this.eq(MIN_VALUE)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},LongPrototype.isZero=function(){return 0===this.high&&0===this.low},LongPrototype.eqz=LongPrototype.isZero,LongPrototype.isNegative=function(){return !this.unsigned&&this.high<0},LongPrototype.isPositive=function(){return this.unsigned||this.high>=0},LongPrototype.isOdd=function(){return 1==(1&this.low)},LongPrototype.isEven=function(){return 0==(1&this.low)},LongPrototype.equals=function(e){return isLong(e)||(e=fromValue(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},LongPrototype.eq=LongPrototype.equals,LongPrototype.notEquals=function(e){return !this.eq(e)},LongPrototype.neq=LongPrototype.notEquals,LongPrototype.ne=LongPrototype.notEquals,LongPrototype.lessThan=function(e){return this.comp(e)<0},LongPrototype.lt=LongPrototype.lessThan,LongPrototype.lessThanOrEqual=function(e){return this.comp(e)<=0},LongPrototype.lte=LongPrototype.lessThanOrEqual,LongPrototype.le=LongPrototype.lessThanOrEqual,LongPrototype.greaterThan=function(e){return this.comp(e)>0},LongPrototype.gt=LongPrototype.greaterThan,LongPrototype.greaterThanOrEqual=function(e){return this.comp(e)>=0},LongPrototype.gte=LongPrototype.greaterThanOrEqual,LongPrototype.ge=LongPrototype.greaterThanOrEqual,LongPrototype.compare=function(e){if(isLong(e)||(e=fromValue(e)),this.eq(e))return 0;var t=this.isNegative(),r=e.isNegative();return t&&!r?-1:!t&&r?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},LongPrototype.comp=LongPrototype.compare,LongPrototype.negate=function(){return !this.unsigned&&this.eq(MIN_VALUE)?MIN_VALUE:this.not().add(ONE)},LongPrototype.neg=LongPrototype.negate,LongPrototype.add=function(e){isLong(e)||(e=fromValue(e));var t=this.high>>>16,r=65535&this.high,n=this.low>>>16,o=65535&this.low,i=e.high>>>16,s=65535&e.high,a=e.low>>>16,u=0,l=0,c=0,p=0;return c+=(p+=o+(65535&e.low))>>>16,l+=(c+=n+a)>>>16,u+=(l+=r+s)>>>16,u+=t+i,fromBits((c&=65535)<<16|(p&=65535),(u&=65535)<<16|(l&=65535),this.unsigned)},LongPrototype.subtract=function(e){return isLong(e)||(e=fromValue(e)),this.add(e.neg())},LongPrototype.sub=LongPrototype.subtract,LongPrototype.multiply=function(e){if(this.isZero())return ZERO;if(isLong(e)||(e=fromValue(e)),wasm)return fromBits(wasm.mul(this.low,this.high,e.low,e.high),wasm.get_high(),this.unsigned);if(e.isZero())return ZERO;if(this.eq(MIN_VALUE))return e.isOdd()?MIN_VALUE:ZERO;if(e.eq(MIN_VALUE))return this.isOdd()?MIN_VALUE:ZERO;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(TWO_PWR_24)&&e.lt(TWO_PWR_24))return fromNumber(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,r=65535&this.high,n=this.low>>>16,o=65535&this.low,i=e.high>>>16,s=65535&e.high,a=e.low>>>16,u=65535&e.low,l=0,c=0,p=0,f=0;return p+=(f+=o*u)>>>16,c+=(p+=n*u)>>>16,p&=65535,c+=(p+=o*a)>>>16,l+=(c+=r*u)>>>16,c&=65535,l+=(c+=n*a)>>>16,c&=65535,l+=(c+=o*s)>>>16,l+=t*u+r*a+n*s+o*i,fromBits((p&=65535)<<16|(f&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},LongPrototype.mul=LongPrototype.multiply,LongPrototype.divide=function(e){if(isLong(e)||(e=fromValue(e)),e.isZero())throw Error("division by zero");var t,r,n;if(wasm)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?fromBits((this.unsigned?wasm.div_u:wasm.div_s)(this.low,this.high,e.low,e.high),wasm.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?UZERO:ZERO;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return UZERO;if(e.gt(this.shru(1)))return UONE;n=UZERO;}else {if(this.eq(MIN_VALUE))return e.eq(ONE)||e.eq(NEG_ONE)?MIN_VALUE:e.eq(MIN_VALUE)?ONE:(t=this.shr(1).div(e).shl(1)).eq(ZERO)?e.isNegative()?ONE:NEG_ONE:(r=this.sub(e.mul(t)),n=t.add(r.div(e)));if(e.eq(MIN_VALUE))return this.unsigned?UZERO:ZERO;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();n=ZERO;}for(r=this;r.gte(e);){t=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(t)/Math.LN2),i=o<=48?1:pow_dbl(2,o-48),s=fromNumber(t),a=s.mul(e);a.isNegative()||a.gt(r);)a=(s=fromNumber(t-=i,this.unsigned)).mul(e);s.isZero()&&(s=ONE),n=n.add(s),r=r.sub(a);}return n},LongPrototype.div=LongPrototype.divide,LongPrototype.modulo=function(e){return isLong(e)||(e=fromValue(e)),wasm?fromBits((this.unsigned?wasm.rem_u:wasm.rem_s)(this.low,this.high,e.low,e.high),wasm.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},LongPrototype.mod=LongPrototype.modulo,LongPrototype.rem=LongPrototype.modulo,LongPrototype.not=function(){return fromBits(~this.low,~this.high,this.unsigned)},LongPrototype.and=function(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low&e.low,this.high&e.high,this.unsigned)},LongPrototype.or=function(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low|e.low,this.high|e.high,this.unsigned)},LongPrototype.xor=function(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low^e.low,this.high^e.high,this.unsigned)},LongPrototype.shiftLeft=function(e){return isLong(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?fromBits(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):fromBits(0,this.low<<e-32,this.unsigned)},LongPrototype.shl=LongPrototype.shiftLeft,LongPrototype.shiftRight=function(e){return isLong(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?fromBits(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):fromBits(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},LongPrototype.shr=LongPrototype.shiftRight,LongPrototype.shiftRightUnsigned=function(e){if(isLong(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?fromBits(this.low>>>e|t<<32-e,t>>>e,this.unsigned):fromBits(32===e?t:t>>>e-32,0,this.unsigned)},LongPrototype.shru=LongPrototype.shiftRightUnsigned,LongPrototype.shr_u=LongPrototype.shiftRightUnsigned,LongPrototype.toSigned=function(){return this.unsigned?fromBits(this.low,this.high,!1):this},LongPrototype.toUnsigned=function(){return this.unsigned?this:fromBits(this.low,this.high,!0)},LongPrototype.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},LongPrototype.toBytesLE=function(){var e=this.high,t=this.low;return [255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},LongPrototype.toBytesBE=function(){var e=this.high,t=this.low;return [e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},Long.fromBytes=function(e,t,r){return r?Long.fromBytesLE(e,t):Long.fromBytesBE(e,t)},Long.fromBytesLE=function(e,t){return new Long(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},Long.fromBytesBE=function(e,t){return new Long(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};var _extendStatics=function(e,t){return (_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(e,t)};function __extends(e,t){function r(){this.constructor=e;}_extendStatics(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}function isFunction$1(e){return "function"==typeof e}var _enable_super_gross_mode_that_will_cause_bad_things=!1,config={Promise:void 0,set useDeprecatedSynchronousErrorHandling(e){_enable_super_gross_mode_that_will_cause_bad_things=e;},get useDeprecatedSynchronousErrorHandling(){return _enable_super_gross_mode_that_will_cause_bad_things}};function hostReportError(e){setTimeout(function(){throw e},0);}var empty$1={closed:!0,next:function(e){},error:function(e){if(config.useDeprecatedSynchronousErrorHandling)throw e;hostReportError(e);},complete:function(){}},isArray$1=Array.isArray||function(e){return e&&"number"==typeof e.length};function isObject$1(e){return null!==e&&"object"===_typeof(e)}function UnsubscriptionErrorImpl(e){return Error.call(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map(function(e,t){return t+1+") "+e.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e,this}UnsubscriptionErrorImpl.prototype=Object.create(Error.prototype);var UnsubscriptionError=UnsubscriptionErrorImpl,Subscription=function(){function e(e){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,e&&(this._unsubscribe=e);}var t;return e.prototype.unsubscribe=function(){var t;if(!this.closed){var r=this._parentOrParents,n=this._unsubscribe,o=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,r instanceof e)r.remove(this);else if(null!==r)for(var i=0;i<r.length;++i){r[i].remove(this);}if(isFunction$1(n))try{n.call(this);}catch(e){t=e instanceof UnsubscriptionError?flattenUnsubscriptionErrors(e.errors):[e];}if(isArray$1(o)){i=-1;for(var s=o.length;++i<s;){var a=o[i];if(isObject$1(a))try{a.unsubscribe();}catch(e){t=t||[],e instanceof UnsubscriptionError?t=t.concat(flattenUnsubscriptionErrors(e.errors)):t.push(e);}}}if(t)throw new UnsubscriptionError(t)}},e.prototype.add=function(t){var r=t;if(!t)return e.EMPTY;switch(_typeof(t)){case"function":r=new e(t);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof e)){var n=r;(r=new e)._subscriptions=[n];}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}var o=r._parentOrParents;if(null===o)r._parentOrParents=this;else if(o instanceof e){if(o===this)return r;r._parentOrParents=[o,this];}else {if(-1!==o.indexOf(this))return r;o.push(this);}var i=this._subscriptions;return null===i?this._subscriptions=[r]:i.push(r),r},e.prototype.remove=function(e){var t=this._subscriptions;if(t){var r=t.indexOf(e);-1!==r&&t.splice(r,1);}},e.EMPTY=((t=new e).closed=!0,t),e}();function flattenUnsubscriptionErrors(e){return e.reduce(function(e,t){return e.concat(t instanceof UnsubscriptionError?t.errors:t)},[])}var rxSubscriber="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),Subscriber=function(e){function t(r,n,o){var i=e.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=empty$1;break;case 1:if(!r){i.destination=empty$1;break}if("object"===_typeof(r)){r instanceof t?(i.syncErrorThrowable=r.syncErrorThrowable,i.destination=r,r.add(i)):(i.syncErrorThrowable=!0,i.destination=new SafeSubscriber(i,r));break}default:i.syncErrorThrowable=!0,i.destination=new SafeSubscriber(i,r,n,o);}return i}return __extends(t,e),t.prototype[rxSubscriber]=function(){return this},t.create=function(e,r,n){var o=new t(e,r,n);return o.syncErrorThrowable=!1,o},t.prototype.next=function(e){this.isStopped||this._next(e);},t.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e));},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete());},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this));},t.prototype._next=function(e){this.destination.next(e);},t.prototype._error=function(e){this.destination.error(e),this.unsubscribe();},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe();},t.prototype._unsubscribeAndRecycle=function(){var e=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=e,this},t}(Subscription),SafeSubscriber=function(e){function t(t,r,n,o){var i,s=e.call(this)||this;s._parentSubscriber=t;var a=s;return isFunction$1(r)?i=r:r&&(i=r.next,n=r.error,o=r.complete,r!==empty$1&&(isFunction$1((a=Object.create(r)).unsubscribe)&&s.add(a.unsubscribe.bind(a)),a.unsubscribe=s.unsubscribe.bind(s))),s._context=a,s._next=i,s._error=n,s._complete=o,s}return __extends(t,e),t.prototype.next=function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;config.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e);}},t.prototype.error=function(e){if(!this.isStopped){var t=this._parentSubscriber,r=config.useDeprecatedSynchronousErrorHandling;if(this._error)r&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else if(t.syncErrorThrowable)r?(t.syncErrorValue=e,t.syncErrorThrown=!0):hostReportError(e),this.unsubscribe();else {if(this.unsubscribe(),r)throw e;hostReportError(e);}}},t.prototype.complete=function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var r=function(){return e._complete.call(e._context)};config.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe());}else this.unsubscribe();}},t.prototype.__tryOrUnsub=function(e,t){try{e.call(this._context,t);}catch(e){if(this.unsubscribe(),config.useDeprecatedSynchronousErrorHandling)throw e;hostReportError(e);}},t.prototype.__tryOrSetError=function(e,t,r){if(!config.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,r);}catch(t){return config.useDeprecatedSynchronousErrorHandling?(e.syncErrorValue=t,e.syncErrorThrown=!0,!0):(hostReportError(t),!0)}return !1},t.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe();},t}(Subscriber),OuterSubscriber=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.notifyNext=function(e,t,r,n,o){this.destination.next(t);},t.prototype.notifyError=function(e,t){this.destination.error(e);},t.prototype.notifyComplete=function(e){this.destination.complete();},t}(Subscriber),InnerSubscriber=function(e){function t(t,r,n){var o=e.call(this)||this;return o.parent=t,o.outerValue=r,o.outerIndex=n,o.index=0,o}return __extends(t,e),t.prototype._next=function(e){this.parent.notifyNext(this.outerValue,e,this.outerIndex,this.index++,this);},t.prototype._error=function(e){this.parent.notifyError(e,this),this.unsubscribe();},t.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe();},t}(Subscriber),subscribeToArray=function(e){return function(t){for(var r=0,n=e.length;r<n&&!t.closed;r++)t.next(e[r]);t.complete();}},subscribeToPromise=function(e){return function(t){return e.then(function(e){t.closed||(t.next(e),t.complete());},function(e){return t.error(e)}).then(null,hostReportError),t}};function getSymbolIterator(){return "function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var iterator=getSymbolIterator(),subscribeToIterable=function(e){return function(t){for(var r=e[iterator]();;){var n=r.next();if(n.done){t.complete();break}if(t.next(n.value),t.closed)break}return "function"==typeof r.return&&t.add(function(){r.return&&r.return();}),t}},observable="function"==typeof Symbol&&Symbol.observable||"@@observable",subscribeToObservable=function(e){return function(t){var r=e[observable]();if("function"!=typeof r.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return r.subscribe(t)}},isArrayLike$2=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function isPromise(e){return !!e&&"function"!=typeof e.subscribe&&"function"==typeof e.then}var subscribeTo=function(e){if(e&&"function"==typeof e[observable])return subscribeToObservable(e);if(isArrayLike$2(e))return subscribeToArray(e);if(isPromise(e))return subscribeToPromise(e);if(e&&"function"==typeof e[iterator])return subscribeToIterable(e);var t=isObject$1(e)?"an invalid object":"'"+e+"'";throw new TypeError("You provided "+t+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function canReportError(e){for(;e;){var t=e,r=t.closed,n=t.destination,o=t.isStopped;if(r||o)return !1;e=n&&n instanceof Subscriber?n:null;}return !0}function toSubscriber(e,t,r){if(e){if(e instanceof Subscriber)return e;if(e[rxSubscriber])return e[rxSubscriber]()}return e||t||r?new Subscriber(e,t,r):new Subscriber(empty$1)}function noop$1(){}function pipe(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return pipeFromArray(e)}function pipeFromArray(e){return e?1===e.length?e[0]:function(t){return e.reduce(function(e,t){return t(e)},t)}:noop$1}var Observable=function(){function e(e){this._isScalar=!1,e&&(this._subscribe=e);}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var n=this.operator,o=toSubscriber(e,t,r);if(n?o.add(n.call(o,this.source)):o.add(this.source||config.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),config.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){config.useDeprecatedSynchronousErrorHandling&&(e.syncErrorThrown=!0,e.syncErrorValue=t),canReportError(e)?e.error(t):console.warn(t);}},e.prototype.forEach=function(e,t){var r=this;return new(t=getPromiseCtor(t))(function(t,n){var o;o=r.subscribe(function(t){try{e(t);}catch(e){n(e),o&&o.unsubscribe();}},n,t);})},e.prototype._subscribe=function(e){var t=this.source;return t&&t.subscribe(e)},e.prototype[observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?this:pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=getPromiseCtor(e))(function(e,r){var n;t.subscribe(function(e){return n=e},function(e){return r(e)},function(){return e(n)});})},e.create=function(t){return new e(t)},e}();function getPromiseCtor(e){if(e||(e=Promise),!e)throw new Error("no Promise impl found");return e}function subscribeToResult(e,t,r,n,o){if(void 0===o&&(o=new InnerSubscriber(e,r,n)),!o.closed)return t instanceof Observable?t.subscribe(o):subscribeTo(t)(o)}var Action=function(e){function t(t,r){return e.call(this)||this}return __extends(t,e),t.prototype.schedule=function(e,t){return this},t}(Subscription),AsyncAction=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n.pending=!1,n}return __extends(t,e),t.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,n=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(n,r,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(n,this.id,t),this},t.prototype.requestAsyncId=function(e,t,r){return void 0===r&&(r=0),setInterval(e.flush.bind(e,this),r)},t.prototype.recycleAsyncId=function(e,t,r){if(void 0===r&&(r=0),null!==r&&this.delay===r&&!1===this.pending)return t;clearInterval(t);},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(e,t);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null));},t.prototype._execute=function(e,t){var r=!1,n=void 0;try{this.work(e);}catch(e){r=!0,n=!!e&&e||new Error(e);}if(r)return this.unsubscribe(),n},t.prototype._unsubscribe=function(){var e=this.id,t=this.scheduler,r=t.actions,n=r.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==n&&r.splice(n,1),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null;},t}(Action),Scheduler=function(){function e(t,r){void 0===r&&(r=e.now),this.SchedulerAction=t,this.now=r;}return e.prototype.schedule=function(e,t,r){return void 0===t&&(t=0),new this.SchedulerAction(this,e).schedule(r,t)},e.now=function(){return Date.now()},e}(),AsyncScheduler=function(e){function t(r,n){void 0===n&&(n=Scheduler.now);var o=e.call(this,r,function(){return t.delegate&&t.delegate!==o?t.delegate.now():n()})||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return __extends(t,e),t.prototype.schedule=function(r,n,o){return void 0===n&&(n=0),t.delegate&&t.delegate!==this?t.delegate.schedule(r,n,o):e.prototype.schedule.call(this,r,n,o)},t.prototype.flush=function(e){var t=this.actions;if(this.active)t.push(e);else {var r;this.active=!0;do{if(r=e.execute(e.state,e.delay))break}while(e=t.shift());if(this.active=!1,r){for(;e=t.shift();)e.unsubscribe();throw r}}},t}(Scheduler),async=new AsyncScheduler(AsyncAction);function isNumeric(e){return !isArray$1(e)&&e-parseFloat(e)+1>=0}function isScheduler(e){return e&&"function"==typeof e.schedule}function timer(e,t,r){void 0===e&&(e=0);var n=-1;return isNumeric(t)?n=Number(t)<1?1:Number(t):isScheduler(t)&&(r=t),isScheduler(r)||(r=async),new Observable(function(t){var o=isNumeric(e)?e:+e-r.now();return r.schedule(dispatch,o,{index:0,period:n,subscriber:t})})}function dispatch(e){var t=e.index,r=e.period,n=e.subscriber;if(n.next(t),!n.closed){if(-1===r)return n.complete();e.index=t+1,this.schedule(e,r);}}function catchError(e){return function(t){var r=new CatchOperator(e),n=t.lift(r);return r.caught=n}}var CatchOperator=function(){function e(e){this.selector=e;}return e.prototype.call=function(e,t){return t.subscribe(new CatchSubscriber(e,this.selector,this.caught))},e}(),CatchSubscriber=function(e){function t(t,r,n){var o=e.call(this,t)||this;return o.selector=r,o.caught=n,o}return __extends(t,e),t.prototype.error=function(t){if(!this.isStopped){var r=void 0;try{r=this.selector(t,this.caught);}catch(t){return void e.prototype.error.call(this,t)}this._unsubscribeAndRecycle();var n=new InnerSubscriber(this,void 0,void 0);this.add(n),subscribeToResult(this,r,void 0,void 0,n);}},t}(OuterSubscriber);function scheduleArray(e,t){return new Observable(function(r){var n=new Subscription,o=0;return n.add(t.schedule(function(){o!==e.length?(r.next(e[o++]),r.closed||n.add(this.schedule())):r.complete();})),n})}function fromArray(e,t){return t?scheduleArray(e,t):new Observable(subscribeToArray(e))}var NONE={};function combineLatest(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=null,n=null;return isScheduler(e[e.length-1])&&(n=e.pop()),"function"==typeof e[e.length-1]&&(r=e.pop()),1===e.length&&isArray$1(e[0])&&(e=e[0]),fromArray(e,n).lift(new CombineLatestOperator(r))}var CombineLatestOperator=function(){function e(e){this.resultSelector=e;}return e.prototype.call=function(e,t){return t.subscribe(new CombineLatestSubscriber(e,this.resultSelector))},e}(),CombineLatestSubscriber=function(e){function t(t,r){var n=e.call(this,t)||this;return n.resultSelector=r,n.active=0,n.values=[],n.observables=[],n}return __extends(t,e),t.prototype._next=function(e){this.values.push(NONE),this.observables.push(e);},t.prototype._complete=function(){var e=this.observables,t=e.length;if(0===t)this.destination.complete();else {this.active=t,this.toRespond=t;for(var r=0;r<t;r++){var n=e[r];this.add(subscribeToResult(this,n,n,r));}}},t.prototype.notifyComplete=function(e){0==(this.active-=1)&&this.destination.complete();},t.prototype.notifyNext=function(e,t,r,n,o){var i=this.values,s=i[r],a=this.toRespond?s===NONE?--this.toRespond:this.toRespond:0;i[r]=t,0===a&&(this.resultSelector?this._tryResultSelector(i):this.destination.next(i.slice()));},t.prototype._tryResultSelector=function(e){var t;try{t=this.resultSelector.apply(this,e);}catch(e){return void this.destination.error(e)}this.destination.next(t);},t}(OuterSubscriber);function scheduleObservable(e,t){return new Observable(function(r){var n=new Subscription;return n.add(t.schedule(function(){var o=e[observable]();n.add(o.subscribe({next:function(e){n.add(t.schedule(function(){return r.next(e)}));},error:function(e){n.add(t.schedule(function(){return r.error(e)}));},complete:function(){n.add(t.schedule(function(){return r.complete()}));}}));})),n})}function schedulePromise(e,t){return new Observable(function(r){var n=new Subscription;return n.add(t.schedule(function(){return e.then(function(e){n.add(t.schedule(function(){r.next(e),n.add(t.schedule(function(){return r.complete()}));}));},function(e){n.add(t.schedule(function(){return r.error(e)}));})})),n})}function scheduleIterable(e,t){if(!e)throw new Error("Iterable cannot be null");return new Observable(function(r){var n,o=new Subscription;return o.add(function(){n&&"function"==typeof n.return&&n.return();}),o.add(t.schedule(function(){n=e[iterator](),o.add(t.schedule(function(){if(!r.closed){var e,t;try{var o=n.next();e=o.value,t=o.done;}catch(e){return void r.error(e)}t?r.complete():(r.next(e),this.schedule());}}));})),o})}function isInteropObservable(e){return e&&"function"==typeof e[observable]}function isIterable(e){return e&&"function"==typeof e[iterator]}function scheduled(e,t){if(null!=e){if(isInteropObservable(e))return scheduleObservable(e,t);if(isPromise(e))return schedulePromise(e,t);if(isArrayLike$2(e))return scheduleArray(e,t);if(isIterable(e)||"string"==typeof e)return scheduleIterable(e,t)}throw new TypeError((null!==e&&_typeof(e)||e)+" is not observable")}function from(e,t){return t?scheduled(e,t):e instanceof Observable?e:new Observable(subscribeTo(e))}function of(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[e.length-1];return isScheduler(r)?(e.pop(),scheduleArray(e,r)):fromArray(e)}function map$1(e,t){return function(r){if("function"!=typeof e)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return r.lift(new MapOperator(e,t))}}var MapOperator=function(){function e(e,t){this.project=e,this.thisArg=t;}return e.prototype.call=function(e,t){return t.subscribe(new MapSubscriber(e,this.project,this.thisArg))},e}(),MapSubscriber=function(e){function t(t,r,n){var o=e.call(this,t)||this;return o.project=r,o.count=0,o.thisArg=n||o,o}return __extends(t,e),t.prototype._next=function(e){var t;try{t=this.project.call(this.thisArg,e,this.count++);}catch(e){return void this.destination.error(e)}this.destination.next(t);},t}(Subscriber);function mergeMap(e,t,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof t?function(n){return n.pipe(mergeMap(function(r,n){return from(e(r,n)).pipe(map$1(function(e,o){return t(r,e,n,o)}))},r))}:("number"==typeof t&&(r=t),function(t){return t.lift(new MergeMapOperator(e,r))})}var MergeMapOperator=function(){function e(e,t){void 0===t&&(t=Number.POSITIVE_INFINITY),this.project=e,this.concurrent=t;}return e.prototype.call=function(e,t){return t.subscribe(new MergeMapSubscriber(e,this.project,this.concurrent))},e}(),MergeMapSubscriber=function(e){function t(t,r,n){void 0===n&&(n=Number.POSITIVE_INFINITY);var o=e.call(this,t)||this;return o.project=r,o.concurrent=n,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return __extends(t,e),t.prototype._next=function(e){this.active<this.concurrent?this._tryNext(e):this.buffer.push(e);},t.prototype._tryNext=function(e){var t,r=this.index++;try{t=this.project(e,r);}catch(e){return void this.destination.error(e)}this.active++,this._innerSub(t,e,r);},t.prototype._innerSub=function(e,t,r){var n=new InnerSubscriber(this,void 0,void 0);this.destination.add(n),subscribeToResult(this,e,t,r,n);},t.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe();},t.prototype.notifyNext=function(e,t,r,n,o){this.destination.next(t);},t.prototype.notifyComplete=function(e){var t=this.buffer;this.remove(e),this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete();},t}(OuterSubscriber);function identity$1(e){return e}function mergeAll(e){return void 0===e&&(e=Number.POSITIVE_INFINITY),mergeMap(identity$1,e)}function concatAll(){return mergeAll(1)}function concat(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return concatAll()(of.apply(void 0,e))}function concatMap(e,t){return mergeMap(e,t,1)}function defaultIfEmpty(e){return void 0===e&&(e=null),function(t){return t.lift(new DefaultIfEmptyOperator(e))}}var DefaultIfEmptyOperator=function(){function e(e){this.defaultValue=e;}return e.prototype.call=function(e,t){return t.subscribe(new DefaultIfEmptySubscriber(e,this.defaultValue))},e}(),DefaultIfEmptySubscriber=function(e){function t(t,r){var n=e.call(this,t)||this;return n.defaultValue=r,n.isEmpty=!0,n}return __extends(t,e),t.prototype._next=function(e){this.isEmpty=!1,this.destination.next(e);},t.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete();},t}(Subscriber);function isDate(e){return e instanceof Date&&!isNaN(+e)}var EMPTY=new Observable(function(e){return e.complete()}),NotificationKind;function empty$2(e){return e?emptyScheduled(e):EMPTY}function emptyScheduled(e){return new Observable(function(t){return e.schedule(function(){return t.complete()})})}function throwError(e,t){return new Observable(t?function(r){return t.schedule(dispatch$1,0,{error:e,subscriber:r})}:function(t){return t.error(e)})}function dispatch$1(e){var t=e.error;e.subscriber.error(t);}NotificationKind||(NotificationKind={});var Notification=function(){function e(e,t,r){this.kind=e,this.value=t,this.error=r,this.hasValue="N"===e;}return e.prototype.observe=function(e){switch(this.kind){case"N":return e.next&&e.next(this.value);case"E":return e.error&&e.error(this.error);case"C":return e.complete&&e.complete()}},e.prototype.do=function(e,t,r){switch(this.kind){case"N":return e&&e(this.value);case"E":return t&&t(this.error);case"C":return r&&r()}},e.prototype.accept=function(e,t,r){return e&&"function"==typeof e.next?this.observe(e):this.do(e,t,r)},e.prototype.toObservable=function(){switch(this.kind){case"N":return of(this.value);case"E":return throwError(this.error);case"C":return empty$2()}throw new Error("unexpected notification kind value")},e.createNext=function(t){return void 0!==t?new e("N",t):e.undefinedValueNotification},e.createError=function(t){return new e("E",void 0,t)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e.undefinedValueNotification=new e("N",void 0),e}();function delay(e,t){void 0===t&&(t=async);var r=isDate(e)?+e-t.now():Math.abs(e);return function(e){return e.lift(new DelayOperator(r,t))}}var DelayOperator=function(){function e(e,t){this.delay=e,this.scheduler=t;}return e.prototype.call=function(e,t){return t.subscribe(new DelaySubscriber(e,this.delay,this.scheduler))},e}(),DelaySubscriber=function(e){function t(t,r,n){var o=e.call(this,t)||this;return o.delay=r,o.scheduler=n,o.queue=[],o.active=!1,o.errored=!1,o}return __extends(t,e),t.dispatch=function(e){for(var t=e.source,r=t.queue,n=e.scheduler,o=e.destination;r.length>0&&r[0].time-n.now()<=0;)r.shift().notification.observe(o);if(r.length>0){var i=Math.max(0,r[0].time-n.now());this.schedule(e,i);}else this.unsubscribe(),t.active=!1;},t.prototype._schedule=function(e){this.active=!0,this.destination.add(e.schedule(t.dispatch,this.delay,{source:this,destination:this.destination,scheduler:e}));},t.prototype.scheduleNotification=function(e){if(!0!==this.errored){var t=this.scheduler,r=new DelayMessage(t.now()+this.delay,e);this.queue.push(r),!1===this.active&&this._schedule(t);}},t.prototype._next=function(e){this.scheduleNotification(Notification.createNext(e));},t.prototype._error=function(e){this.errored=!0,this.queue=[],this.destination.error(e),this.unsubscribe();},t.prototype._complete=function(){this.scheduleNotification(Notification.createComplete()),this.unsubscribe();},t}(Subscriber),DelayMessage=function(){return function(e,t){this.time=e,this.notification=t;}}();function distinct(e,t){return function(r){return r.lift(new DistinctOperator(e,t))}}var DistinctOperator=function(){function e(e,t){this.keySelector=e,this.flushes=t;}return e.prototype.call=function(e,t){return t.subscribe(new DistinctSubscriber(e,this.keySelector,this.flushes))},e}(),DistinctSubscriber=function(e){function t(t,r,n){var o=e.call(this,t)||this;return o.keySelector=r,o.values=new Set,n&&o.add(subscribeToResult(o,n)),o}return __extends(t,e),t.prototype.notifyNext=function(e,t,r,n,o){this.values.clear();},t.prototype.notifyError=function(e,t){this._error(e);},t.prototype._next=function(e){this.keySelector?this._useKeySelector(e):this._finalizeNext(e,e);},t.prototype._useKeySelector=function(e){var t,r=this.destination;try{t=this.keySelector(e);}catch(e){return void r.error(e)}this._finalizeNext(t,e);},t.prototype._finalizeNext=function(e,t){var r=this.values;r.has(e)||(r.add(e),this.destination.next(t));},t}(OuterSubscriber);function ArgumentOutOfRangeErrorImpl(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}ArgumentOutOfRangeErrorImpl.prototype=Object.create(Error.prototype);var ArgumentOutOfRangeError=ArgumentOutOfRangeErrorImpl;function filter(e,t){return function(r){return r.lift(new FilterOperator(e,t))}}var FilterOperator=function(){function e(e,t){this.predicate=e,this.thisArg=t;}return e.prototype.call=function(e,t){return t.subscribe(new FilterSubscriber(e,this.predicate,this.thisArg))},e}(),FilterSubscriber=function(e){function t(t,r,n){var o=e.call(this,t)||this;return o.predicate=r,o.thisArg=n,o.count=0,o}return __extends(t,e),t.prototype._next=function(e){var t;try{t=this.predicate.call(this.thisArg,e,this.count++);}catch(e){return void this.destination.error(e)}t&&this.destination.next(e);},t}(Subscriber);function EmptyErrorImpl(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}EmptyErrorImpl.prototype=Object.create(Error.prototype);var EmptyError=EmptyErrorImpl;function throwIfEmpty(e){return void 0===e&&(e=defaultErrorFactory),function(t){return t.lift(new ThrowIfEmptyOperator(e))}}var ThrowIfEmptyOperator=function(){function e(e){this.errorFactory=e;}return e.prototype.call=function(e,t){return t.subscribe(new ThrowIfEmptySubscriber(e,this.errorFactory))},e}(),ThrowIfEmptySubscriber=function(e){function t(t,r){var n=e.call(this,t)||this;return n.errorFactory=r,n.hasValue=!1,n}return __extends(t,e),t.prototype._next=function(e){this.hasValue=!0,this.destination.next(e);},t.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var e=void 0;try{e=this.errorFactory();}catch(t){e=t;}this.destination.error(e);},t}(Subscriber);function defaultErrorFactory(){return new EmptyError}function take(e){return function(t){return 0===e?empty$2():t.lift(new TakeOperator(e))}}var TakeOperator=function(){function e(e){if(this.total=e,this.total<0)throw new ArgumentOutOfRangeError}return e.prototype.call=function(e,t){return t.subscribe(new TakeSubscriber(e,this.total))},e}(),TakeSubscriber=function(e){function t(t,r){var n=e.call(this,t)||this;return n.total=r,n.count=0,n}return __extends(t,e),t.prototype._next=function(e){var t=this.total,r=++this.count;r<=t&&(this.destination.next(e),r===t&&(this.destination.complete(),this.unsubscribe()));},t}(Subscriber);function finalize(e){return function(t){return t.lift(new FinallyOperator(e))}}var FinallyOperator=function(){function e(e){this.callback=e;}return e.prototype.call=function(e,t){return t.subscribe(new FinallySubscriber(e,this.callback))},e}(),FinallySubscriber=function(e){function t(t,r){var n=e.call(this,t)||this;return n.add(new Subscription(r)),n}return __extends(t,e),t}(Subscriber);function first(e,t){var r=arguments.length>=2;return function(n){return n.pipe(e?filter(function(t,r){return e(t,r,n)}):identity$1,take(1),r?defaultIfEmpty(t):throwIfEmpty(function(){return new EmptyError}))}}function ObjectUnsubscribedErrorImpl(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}ObjectUnsubscribedErrorImpl.prototype=Object.create(Error.prototype);var ObjectUnsubscribedError=ObjectUnsubscribedErrorImpl,SubjectSubscription=function(e){function t(t,r){var n=e.call(this)||this;return n.subject=t,n.subscriber=r,n.closed=!1,n}return __extends(t,e),t.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var e=this.subject,t=e.observers;if(this.subject=null,t&&0!==t.length&&!e.isStopped&&!e.closed){var r=t.indexOf(this.subscriber);-1!==r&&t.splice(r,1);}}},t}(Subscription),SubjectSubscriber=function(e){function t(t){var r=e.call(this,t)||this;return r.destination=t,r}return __extends(t,e),t}(Subscriber),Subject=function(e){function t(){var t=e.call(this)||this;return t.observers=[],t.closed=!1,t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return __extends(t,e),t.prototype[rxSubscriber]=function(){return new SubjectSubscriber(this)},t.prototype.lift=function(e){var t=new AnonymousSubject(this,this);return t.operator=e,t},t.prototype.next=function(e){if(this.closed)throw new ObjectUnsubscribedError;if(!this.isStopped)for(var t=this.observers,r=t.length,n=t.slice(),o=0;o<r;o++)n[o].next(e);},t.prototype.error=function(e){if(this.closed)throw new ObjectUnsubscribedError;this.hasError=!0,this.thrownError=e,this.isStopped=!0;for(var t=this.observers,r=t.length,n=t.slice(),o=0;o<r;o++)n[o].error(e);this.observers.length=0;},t.prototype.complete=function(){if(this.closed)throw new ObjectUnsubscribedError;this.isStopped=!0;for(var e=this.observers,t=e.length,r=e.slice(),n=0;n<t;n++)r[n].complete();this.observers.length=0;},t.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null;},t.prototype._trySubscribe=function(t){if(this.closed)throw new ObjectUnsubscribedError;return e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){if(this.closed)throw new ObjectUnsubscribedError;return this.hasError?(e.error(this.thrownError),Subscription.EMPTY):this.isStopped?(e.complete(),Subscription.EMPTY):(this.observers.push(e),new SubjectSubscription(this,e))},t.prototype.asObservable=function(){var e=new Observable;return e.source=this,e},t.create=function(e,t){return new AnonymousSubject(e,t)},t}(Observable),AnonymousSubject=function(e){function t(t,r){var n=e.call(this)||this;return n.destination=t,n.source=r,n}return __extends(t,e),t.prototype.next=function(e){var t=this.destination;t&&t.next&&t.next(e);},t.prototype.error=function(e){var t=this.destination;t&&t.error&&this.destination.error(e);},t.prototype.complete=function(){var e=this.destination;e&&e.complete&&this.destination.complete();},t.prototype._subscribe=function(e){return this.source?this.source.subscribe(e):Subscription.EMPTY},t}(Subject),GroupedObservable=function(e){function t(t,r,n){var o=e.call(this)||this;return o.key=t,o.groupSubject=r,o.refCountSubscription=n,o}return __extends(t,e),t.prototype._subscribe=function(e){var t=new Subscription,r=this.refCountSubscription,n=this.groupSubject;return r&&!r.closed&&t.add(new InnerRefCountSubscription(r)),t.add(n.subscribe(e)),t},t}(Observable),InnerRefCountSubscription=function(e){function t(t){var r=e.call(this)||this;return r.parent=t,t.count++,r}return __extends(t,e),t.prototype.unsubscribe=function(){var t=this.parent;t.closed||this.closed||(e.prototype.unsubscribe.call(this),t.count-=1,0===t.count&&t.attemptedToUnsubscribe&&t.unsubscribe());},t}(Subscription);function ignoreElements(){return function(e){return e.lift(new IgnoreElementsOperator)}}var IgnoreElementsOperator=function(){function e(){}return e.prototype.call=function(e,t){return t.subscribe(new IgnoreElementsSubscriber(e))},e}(),IgnoreElementsSubscriber=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype._next=function(e){},t}(Subscriber);function takeLast(e){return function(t){return 0===e?empty$2():t.lift(new TakeLastOperator(e))}}var TakeLastOperator=function(){function e(e){if(this.total=e,this.total<0)throw new ArgumentOutOfRangeError}return e.prototype.call=function(e,t){return t.subscribe(new TakeLastSubscriber(e,this.total))},e}(),TakeLastSubscriber=function(e){function t(t,r){var n=e.call(this,t)||this;return n.total=r,n.ring=new Array,n.count=0,n}return __extends(t,e),t.prototype._next=function(e){var t=this.ring,r=this.total,n=this.count++;t.length<r?t.push(e):t[n%r]=e;},t.prototype._complete=function(){var e=this.destination,t=this.count;if(t>0)for(var r=this.count>=this.total?this.total:this.count,n=this.ring,o=0;o<r;o++){var i=t++%r;e.next(n[i]);}e.complete();},t}(Subscriber);function mapTo(e){return function(t){return t.lift(new MapToOperator(e))}}var MapToOperator=function(){function e(e){this.value=e;}return e.prototype.call=function(e,t){return t.subscribe(new MapToSubscriber(e,this.value))},e}(),MapToSubscriber=function(e){function t(t,r){var n=e.call(this,t)||this;return n.value=r,n}return __extends(t,e),t.prototype._next=function(e){this.destination.next(this.value);},t}(Subscriber);function scan(e,t){var r=!1;return arguments.length>=2&&(r=!0),function(n){return n.lift(new ScanOperator(e,t,r))}}var ScanOperator=function(){function e(e,t,r){void 0===r&&(r=!1),this.accumulator=e,this.seed=t,this.hasSeed=r;}return e.prototype.call=function(e,t){return t.subscribe(new ScanSubscriber(e,this.accumulator,this.seed,this.hasSeed))},e}(),ScanSubscriber=function(e){function t(t,r,n,o){var i=e.call(this,t)||this;return i.accumulator=r,i._seed=n,i.hasSeed=o,i.index=0,i}return __extends(t,e),Object.defineProperty(t.prototype,"seed",{get:function(){return this._seed},set:function(e){this.hasSeed=!0,this._seed=e;},enumerable:!0,configurable:!0}),t.prototype._next=function(e){if(this.hasSeed)return this._tryNext(e);this.seed=e,this.destination.next(e);},t.prototype._tryNext=function(e){var t,r=this.index++;try{t=this.accumulator(this.seed,e,r);}catch(e){this.destination.error(e);}this.seed=t,this.destination.next(t);},t}(Subscriber);function reduce(e,t){return arguments.length>=2?function(r){return pipe(scan(e,t),takeLast(1),defaultIfEmpty(t))(r)}:function(t){return pipe(scan(function(t,r,n){return e(t,r,n+1)}),takeLast(1))(t)}}function merge(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=Number.POSITIVE_INFINITY,n=null,o=e[e.length-1];return isScheduler(o)?(n=e.pop(),e.length>1&&"number"==typeof e[e.length-1]&&(r=e.pop())):"number"==typeof o&&(r=e.pop()),null===n&&1===e.length&&e[0]instanceof Observable?e[0]:mergeAll(r)(fromArray(e,n))}function refCount(){return function(e){return e.lift(new RefCountOperator(e))}}var RefCountOperator=function(){function e(e){this.connectable=e;}return e.prototype.call=function(e,t){var r=this.connectable;r._refCount++;var n=new RefCountSubscriber(e,r),o=t.subscribe(n);return n.closed||(n.connection=r.connect()),o},e}(),RefCountSubscriber=function(e){function t(t,r){var n=e.call(this,t)||this;return n.connectable=r,n}return __extends(t,e),t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._refCount;if(t<=0)this.connection=null;else if(e._refCount=t-1,t>1)this.connection=null;else {var r=this.connection,n=e._connection;this.connection=null,!n||r&&n!==r||n.unsubscribe();}}else this.connection=null;},t}(Subscriber),ConnectableObservable=function(e){function t(t,r){var n=e.call(this)||this;return n.source=t,n.subjectFactory=r,n._refCount=0,n._isComplete=!1,n}return __extends(t,e),t.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},t.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},t.prototype.connect=function(){var e=this._connection;return e||(this._isComplete=!1,(e=this._connection=new Subscription).add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(),this))),e.closed&&(this._connection=null,e=Subscription.EMPTY)),e},t.prototype.refCount=function(){return refCount()(this)},t}(Observable),connectableProto=ConnectableObservable.prototype,connectableObservableDescriptor={operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:connectableProto._subscribe},_isComplete:{value:connectableProto._isComplete,writable:!0},getSubject:{value:connectableProto.getSubject},connect:{value:connectableProto.connect},refCount:{value:connectableProto.refCount}},ConnectableSubscriber=function(e){function t(t,r){var n=e.call(this,t)||this;return n.connectable=r,n}return __extends(t,e),t.prototype._error=function(t){this._unsubscribe(),e.prototype._error.call(this,t);},t.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),e.prototype._complete.call(this);},t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._connection;e._refCount=0,e._subject=null,e._connection=null,t&&t.unsubscribe();}},t}(SubjectSubscriber);function multicast(e,t){return function(r){var n;if(n="function"==typeof e?e:function(){return e},"function"==typeof t)return r.lift(new MulticastOperator(n,t));var o=Object.create(r,connectableObservableDescriptor);return o.source=r,o.subjectFactory=n,o}}var MulticastOperator=function(){function e(e,t){this.subjectFactory=e,this.selector=t;}return e.prototype.call=function(e,t){var r=this.selector,n=this.subjectFactory(),o=r(n).subscribe(e);return o.add(t.subscribe(n)),o},e}();function observeOn(e,t){return void 0===t&&(t=0),function(r){return r.lift(new ObserveOnOperator(e,t))}}var ObserveOnOperator=function(){function e(e,t){void 0===t&&(t=0),this.scheduler=e,this.delay=t;}return e.prototype.call=function(e,t){return t.subscribe(new ObserveOnSubscriber(e,this.scheduler,this.delay))},e}(),ObserveOnSubscriber=function(e){function t(t,r,n){void 0===n&&(n=0);var o=e.call(this,t)||this;return o.scheduler=r,o.delay=n,o}return __extends(t,e),t.dispatch=function(e){var t=e.notification,r=e.destination;t.observe(r),this.unsubscribe();},t.prototype.scheduleMessage=function(e){this.destination.add(this.scheduler.schedule(t.dispatch,this.delay,new ObserveOnMessage(e,this.destination)));},t.prototype._next=function(e){this.scheduleMessage(Notification.createNext(e));},t.prototype._error=function(e){this.scheduleMessage(Notification.createError(e)),this.unsubscribe();},t.prototype._complete=function(){this.scheduleMessage(Notification.createComplete()),this.unsubscribe();},t}(Subscriber),ObserveOnMessage=function(){return function(e,t){this.notification=e,this.destination=t;}}();function not(e,t){function r(){return !r.pred.apply(r.thisArg,arguments)}return r.pred=e,r.thisArg=t,r}var BehaviorSubject=function(e){function t(t){var r=e.call(this)||this;return r._value=t,r}return __extends(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),t.prototype._subscribe=function(t){var r=e.prototype._subscribe.call(this,t);return r&&!r.closed&&t.next(this._value),r},t.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new ObjectUnsubscribedError;return this._value},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t);},t}(Subject),AsyncSubject=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.value=null,t.hasNext=!1,t.hasCompleted=!1,t}return __extends(t,e),t.prototype._subscribe=function(t){return this.hasError?(t.error(this.thrownError),Subscription.EMPTY):this.hasCompleted&&this.hasNext?(t.next(this.value),t.complete(),Subscription.EMPTY):e.prototype._subscribe.call(this,t)},t.prototype.next=function(e){this.hasCompleted||(this.value=e,this.hasNext=!0);},t.prototype.error=function(t){this.hasCompleted||e.prototype.error.call(this,t);},t.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&e.prototype.next.call(this,this.value),e.prototype.complete.call(this);},t}(Subject),QueueAction=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return __extends(t,e),t.prototype.schedule=function(t,r){return void 0===r&&(r=0),r>0?e.prototype.schedule.call(this,t,r):(this.delay=r,this.state=t,this.scheduler.flush(this),this)},t.prototype.execute=function(t,r){return r>0||this.closed?e.prototype.execute.call(this,t,r):this._execute(t,r)},t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0?e.prototype.requestAsyncId.call(this,t,r,n):t.flush(this)},t}(AsyncAction),QueueScheduler=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t}(AsyncScheduler),queue$1=new QueueScheduler(QueueAction),ReplaySubject=function(e){function t(t,r,n){void 0===t&&(t=Number.POSITIVE_INFINITY),void 0===r&&(r=Number.POSITIVE_INFINITY);var o=e.call(this)||this;return o.scheduler=n,o._events=[],o._infiniteTimeWindow=!1,o._bufferSize=t<1?1:t,o._windowTime=r<1?1:r,r===Number.POSITIVE_INFINITY?(o._infiniteTimeWindow=!0,o.next=o.nextInfiniteTimeWindow):o.next=o.nextTimeWindow,o}return __extends(t,e),t.prototype.nextInfiniteTimeWindow=function(t){var r=this._events;r.push(t),r.length>this._bufferSize&&r.shift(),e.prototype.next.call(this,t);},t.prototype.nextTimeWindow=function(t){this._events.push(new ReplayEvent(this._getNow(),t)),this._trimBufferThenGetEvents(),e.prototype.next.call(this,t);},t.prototype._subscribe=function(e){var t,r=this._infiniteTimeWindow,n=r?this._events:this._trimBufferThenGetEvents(),o=this.scheduler,i=n.length;if(this.closed)throw new ObjectUnsubscribedError;if(this.isStopped||this.hasError?t=Subscription.EMPTY:(this.observers.push(e),t=new SubjectSubscription(this,e)),o&&e.add(e=new ObserveOnSubscriber(e,o)),r)for(var s=0;s<i&&!e.closed;s++)e.next(n[s]);else for(s=0;s<i&&!e.closed;s++)e.next(n[s].value);return this.hasError?e.error(this.thrownError):this.isStopped&&e.complete(),t},t.prototype._getNow=function(){return (this.scheduler||queue$1).now()},t.prototype._trimBufferThenGetEvents=function(){for(var e=this._getNow(),t=this._bufferSize,r=this._windowTime,n=this._events,o=n.length,i=0;i<o&&!(e-n[i].time<r);)i++;return o>t&&(i=Math.max(i,o-t)),i>0&&n.splice(0,i),n},t}(Subject),ReplayEvent=function(){return function(e,t){this.time=e,this.value=t;}}();function race(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(1===e.length){if(!isArray$1(e[0]))return e[0];e=e[0];}return fromArray(e,void 0).lift(new RaceOperator)}var RaceOperator=function(){function e(){}return e.prototype.call=function(e,t){return t.subscribe(new RaceSubscriber(e))},e}(),RaceSubscriber=function(e){function t(t){var r=e.call(this,t)||this;return r.hasFirst=!1,r.observables=[],r.subscriptions=[],r}return __extends(t,e),t.prototype._next=function(e){this.observables.push(e);},t.prototype._complete=function(){var e=this.observables,t=e.length;if(0===t)this.destination.complete();else {for(var r=0;r<t&&!this.hasFirst;r++){var n=e[r],o=subscribeToResult(this,n,n,r);this.subscriptions&&this.subscriptions.push(o),this.add(o);}this.observables=null;}},t.prototype.notifyNext=function(e,t,r,n,o){if(!this.hasFirst){this.hasFirst=!0;for(var i=0;i<this.subscriptions.length;i++)if(i!==r){var s=this.subscriptions[i];s.unsubscribe(),this.remove(s);}this.subscriptions=null;}this.destination.next(t);},t}(OuterSubscriber);function retryWhen(e){return function(t){return t.lift(new RetryWhenOperator(e,t))}}var RetryWhenOperator=function(){function e(e,t){this.notifier=e,this.source=t;}return e.prototype.call=function(e,t){return t.subscribe(new RetryWhenSubscriber(e,this.notifier,this.source))},e}(),RetryWhenSubscriber=function(e){function t(t,r,n){var o=e.call(this,t)||this;return o.notifier=r,o.source=n,o}return __extends(t,e),t.prototype.error=function(t){if(!this.isStopped){var r=this.errors,n=this.retries,o=this.retriesSubscription;if(n)this.errors=null,this.retriesSubscription=null;else {r=new Subject;try{n=(0,this.notifier)(r);}catch(t){return e.prototype.error.call(this,t)}o=subscribeToResult(this,n);}this._unsubscribeAndRecycle(),this.errors=r,this.retries=n,this.retriesSubscription=o,r.next(t);}},t.prototype._unsubscribe=function(){var e=this.errors,t=this.retriesSubscription;e&&(e.unsubscribe(),this.errors=null),t&&(t.unsubscribe(),this.retriesSubscription=null),this.retries=null;},t.prototype.notifyNext=function(e,t,r,n,o){var i=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=i,this.source.subscribe(this);},t}(OuterSubscriber);function shareSubjectFactory(){return new Subject}function share(){return function(e){return refCount()(multicast(shareSubjectFactory)(e))}}function shareReplay(e,t,r){var n;return n=e&&"object"===_typeof(e)?e:{bufferSize:e,windowTime:t,refCount:!1,scheduler:r},function(e){return e.lift(shareReplayOperator(n))}}function shareReplayOperator(e){var t,r,n=e.bufferSize,o=void 0===n?Number.POSITIVE_INFINITY:n,i=e.windowTime,s=void 0===i?Number.POSITIVE_INFINITY:i,a=e.refCount,u=e.scheduler,l=0,c=!1,p=!1;return function(e){l++,t&&!c||(c=!1,t=new ReplaySubject(o,s,u),r=e.subscribe({next:function(e){t.next(e);},error:function(e){c=!0,t.error(e);},complete:function(){p=!0,t.complete();}}));var n=t.subscribe(this);this.add(function(){l--,n.unsubscribe(),r&&!p&&a&&0===l&&(r.unsubscribe(),r=void 0,t=void 0);});}}function skipLast(e){return function(t){return t.lift(new SkipLastOperator(e))}}var SkipLastOperator=function(){function e(e){if(this._skipCount=e,this._skipCount<0)throw new ArgumentOutOfRangeError}return e.prototype.call=function(e,t){return 0===this._skipCount?t.subscribe(new Subscriber(e)):t.subscribe(new SkipLastSubscriber(e,this._skipCount))},e}(),SkipLastSubscriber=function(e){function t(t,r){var n=e.call(this,t)||this;return n._skipCount=r,n._count=0,n._ring=new Array(r),n}return __extends(t,e),t.prototype._next=function(e){var t=this._skipCount,r=this._count++;if(r<t)this._ring[r]=e;else {var n=r%t,o=this._ring,i=o[n];o[n]=e,this.destination.next(i);}},t}(Subscriber),nextHandle=1,tasksByHandle={};function runIfPresent(e){var t=tasksByHandle[e];t&&t();}var Immediate={setImmediate:function(e){var t=nextHandle++;return tasksByHandle[t]=e,Promise.resolve().then(function(){return runIfPresent(t)}),t},clearImmediate:function(e){delete tasksByHandle[e];}},AsapAction=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return __extends(t,e),t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.actions.push(this),t.scheduled||(t.scheduled=Immediate.setImmediate(t.flush.bind(t,null))))},t.prototype.recycleAsyncId=function(t,r,n){if(void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0)return e.prototype.recycleAsyncId.call(this,t,r,n);0===t.actions.length&&(Immediate.clearImmediate(r),t.scheduled=void 0);},t}(AsyncAction),AsapScheduler=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.flush=function(e){this.active=!0,this.scheduled=void 0;var t,r=this.actions,n=-1,o=r.length;e=e||r.shift();do{if(t=e.execute(e.state,e.delay))break}while(++n<o&&(e=r.shift()));if(this.active=!1,t){for(;++n<o&&(e=r.shift());)e.unsubscribe();throw t}},t}(AsyncScheduler),asap=new AsapScheduler(AsapAction),SubscribeOnObservable=function(e){function t(t,r,n){void 0===r&&(r=0),void 0===n&&(n=asap);var o=e.call(this)||this;return o.source=t,o.delayTime=r,o.scheduler=n,(!isNumeric(r)||r<0)&&(o.delayTime=0),n&&"function"==typeof n.schedule||(o.scheduler=asap),o}return __extends(t,e),t.create=function(e,r,n){return void 0===r&&(r=0),void 0===n&&(n=asap),new t(e,r,n)},t.dispatch=function(e){var t=e.source,r=e.subscriber;return this.add(t.subscribe(r))},t.prototype._subscribe=function(e){var r=this.delayTime,n=this.source;return this.scheduler.schedule(t.dispatch,r,{source:n,subscriber:e})},t}(Observable);function subscribeOn(e,t){return void 0===t&&(t=0),function(r){return r.lift(new SubscribeOnOperator(e,t))}}var SubscribeOnOperator=function(){function e(e,t){this.scheduler=e,this.delay=t;}return e.prototype.call=function(e,t){return new SubscribeOnObservable(t,this.delay,this.scheduler).subscribe(e)},e}();function switchMap(e,t){return "function"==typeof t?function(r){return r.pipe(switchMap(function(r,n){return from(e(r,n)).pipe(map$1(function(e,o){return t(r,e,n,o)}))}))}:function(t){return t.lift(new SwitchMapOperator(e))}}var SwitchMapOperator=function(){function e(e){this.project=e;}return e.prototype.call=function(e,t){return t.subscribe(new SwitchMapSubscriber(e,this.project))},e}(),SwitchMapSubscriber=function(e){function t(t,r){var n=e.call(this,t)||this;return n.project=r,n.index=0,n}return __extends(t,e),t.prototype._next=function(e){var t,r=this.index++;try{t=this.project(e,r);}catch(e){return void this.destination.error(e)}this._innerSub(t,e,r);},t.prototype._innerSub=function(e,t,r){var n=this.innerSubscription;n&&n.unsubscribe();var o=new InnerSubscriber(this,void 0,void 0);this.destination.add(o),this.innerSubscription=subscribeToResult(this,e,t,r,o);},t.prototype._complete=function(){var t=this.innerSubscription;t&&!t.closed||e.prototype._complete.call(this),this.unsubscribe();},t.prototype._unsubscribe=function(){this.innerSubscription=null;},t.prototype.notifyComplete=function(t){this.destination.remove(t),this.innerSubscription=null,this.isStopped&&e.prototype._complete.call(this);},t.prototype.notifyNext=function(e,t,r,n,o){this.destination.next(t);},t}(OuterSubscriber);function switchAll(){return switchMap(identity$1)}function takeUntil(e){return function(t){return t.lift(new TakeUntilOperator(e))}}var TakeUntilOperator=function(){function e(e){this.notifier=e;}return e.prototype.call=function(e,t){var r=new TakeUntilSubscriber(e),n=subscribeToResult(r,this.notifier);return n&&!r.seenValue?(r.add(n),t.subscribe(r)):r},e}(),TakeUntilSubscriber=function(e){function t(t){var r=e.call(this,t)||this;return r.seenValue=!1,r}return __extends(t,e),t.prototype.notifyNext=function(e,t,r,n,o){this.seenValue=!0,this.complete();},t.prototype.notifyComplete=function(){},t}(OuterSubscriber);function tap(e,t,r){return function(n){return n.lift(new DoOperator(e,t,r))}}var DoOperator=function(){function e(e,t,r){this.nextOrObserver=e,this.error=t,this.complete=r;}return e.prototype.call=function(e,t){return t.subscribe(new TapSubscriber(e,this.nextOrObserver,this.error,this.complete))},e}(),TapSubscriber=function(e){function t(t,r,n,o){var i=e.call(this,t)||this;return i._tapNext=noop$1,i._tapError=noop$1,i._tapComplete=noop$1,i._tapError=n||noop$1,i._tapComplete=o||noop$1,isFunction$1(r)?(i._context=i,i._tapNext=r):r&&(i._context=r,i._tapNext=r.next||noop$1,i._tapError=r.error||noop$1,i._tapComplete=r.complete||noop$1),i}return __extends(t,e),t.prototype._next=function(e){try{this._tapNext.call(this._context,e);}catch(e){return void this.destination.error(e)}this.destination.next(e);},t.prototype._error=function(e){try{this._tapError.call(this._context,e);}catch(e){return void this.destination.error(e)}this.destination.error(e);},t.prototype._complete=function(){try{this._tapComplete.call(this._context);}catch(e){return void this.destination.error(e)}return this.destination.complete()},t}(Subscriber);function defer$1(e){return new Observable(function(t){var r;try{r=e();}catch(e){return void t.error(e)}return (r?from(r):empty$2()).subscribe(t)})}function TimeoutErrorImpl(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}TimeoutErrorImpl.prototype=Object.create(Error.prototype);var TimeoutError=TimeoutErrorImpl;function timeoutWith(e,t,r){return void 0===r&&(r=async),function(n){var o=isDate(e),i=o?+e-r.now():Math.abs(e);return n.lift(new TimeoutWithOperator(i,o,t,r))}}var TimeoutWithOperator=function(){function e(e,t,r,n){this.waitFor=e,this.absoluteTimeout=t,this.withObservable=r,this.scheduler=n;}return e.prototype.call=function(e,t){return t.subscribe(new TimeoutWithSubscriber(e,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},e}(),TimeoutWithSubscriber=function(e){function t(t,r,n,o,i){var s=e.call(this,t)||this;return s.absoluteTimeout=r,s.waitFor=n,s.withObservable=o,s.scheduler=i,s.action=null,s.scheduleTimeout(),s}return __extends(t,e),t.dispatchTimeout=function(e){var t=e.withObservable;e._unsubscribeAndRecycle(),e.add(subscribeToResult(e,t));},t.prototype.scheduleTimeout=function(){var e=this.action;e?this.action=e.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(t.dispatchTimeout,this.waitFor,this));},t.prototype._next=function(t){this.absoluteTimeout||this.scheduleTimeout(),e.prototype._next.call(this,t);},t.prototype._unsubscribe=function(){this.action=null,this.scheduler=null,this.withObservable=null;},t}(OuterSubscriber);function timeout(e,t){return void 0===t&&(t=async),timeoutWith(e,throwError(new TimeoutError),t)}function withLatestFrom(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){var r;"function"==typeof e[e.length-1]&&(r=e.pop());var n=e;return t.lift(new WithLatestFromOperator(n,r))}}var WithLatestFromOperator=function(){function e(e,t){this.observables=e,this.project=t;}return e.prototype.call=function(e,t){return t.subscribe(new WithLatestFromSubscriber(e,this.observables,this.project))},e}(),WithLatestFromSubscriber=function(e){function t(t,r,n){var o=e.call(this,t)||this;o.observables=r,o.project=n,o.toRespond=[];var i=r.length;o.values=new Array(i);for(var s=0;s<i;s++)o.toRespond.push(s);for(s=0;s<i;s++){var a=r[s];o.add(subscribeToResult(o,a,a,s));}return o}return __extends(t,e),t.prototype.notifyNext=function(e,t,r,n,o){this.values[r]=t;var i=this.toRespond;if(i.length>0){var s=i.indexOf(r);-1!==s&&i.splice(s,1);}},t.prototype.notifyComplete=function(){},t.prototype._next=function(e){if(0===this.toRespond.length){var t=[e].concat(this.values);this.project?this._tryProject(t):this.destination.next(t);}},t.prototype._tryProject=function(e){var t;try{t=this.project.apply(this,e);}catch(e){return void this.destination.error(e)}this.destination.next(t);},t}(OuterSubscriber);function zip(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[e.length-1];return "function"==typeof r&&e.pop(),fromArray(e,void 0).lift(new ZipOperator(r))}var ZipOperator=function(){function e(e){this.resultSelector=e;}return e.prototype.call=function(e,t){return t.subscribe(new ZipSubscriber(e,this.resultSelector))},e}(),ZipSubscriber=function(e){function t(t,r,n){void 0===n&&(n=Object.create(null));var o=e.call(this,t)||this;return o.iterators=[],o.active=0,o.resultSelector="function"==typeof r?r:null,o.values=n,o}return __extends(t,e),t.prototype._next=function(e){var t=this.iterators;isArray$1(e)?t.push(new StaticArrayIterator(e)):"function"==typeof e[iterator]?t.push(new StaticIterator(e[iterator]())):t.push(new ZipBufferIterator(this.destination,this,e));},t.prototype._complete=function(){var e=this.iterators,t=e.length;if(this.unsubscribe(),0!==t){this.active=t;for(var r=0;r<t;r++){var n=e[r];if(n.stillUnsubscribed)this.destination.add(n.subscribe(n,r));else this.active--;}}else this.destination.complete();},t.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete();},t.prototype.checkIterators=function(){for(var e=this.iterators,t=e.length,r=this.destination,n=0;n<t;n++){if("function"==typeof(s=e[n]).hasValue&&!s.hasValue())return}var o=!1,i=[];for(n=0;n<t;n++){var s,a=(s=e[n]).next();if(s.hasCompleted()&&(o=!0),a.done)return void r.complete();i.push(a.value);}this.resultSelector?this._tryresultSelector(i):r.next(i),o&&r.complete();},t.prototype._tryresultSelector=function(e){var t;try{t=this.resultSelector.apply(this,e);}catch(e){return void this.destination.error(e)}this.destination.next(t);},t}(Subscriber),StaticIterator=function(){function e(e){this.iterator=e,this.nextResult=e.next();}return e.prototype.hasValue=function(){return !0},e.prototype.next=function(){var e=this.nextResult;return this.nextResult=this.iterator.next(),e},e.prototype.hasCompleted=function(){var e=this.nextResult;return e&&e.done},e}(),StaticArrayIterator=function(){function e(e){this.array=e,this.index=0,this.length=0,this.length=e.length;}return e.prototype[iterator]=function(){return this},e.prototype.next=function(e){var t=this.index++,r=this.array;return t<this.length?{value:r[t],done:!1}:{value:null,done:!0}},e.prototype.hasValue=function(){return this.array.length>this.index},e.prototype.hasCompleted=function(){return this.array.length===this.index},e}(),ZipBufferIterator=function(e){function t(t,r,n){var o=e.call(this,t)||this;return o.parent=r,o.observable=n,o.stillUnsubscribed=!0,o.buffer=[],o.isComplete=!1,o}return __extends(t,e),t.prototype[iterator]=function(){return this},t.prototype.next=function(){var e=this.buffer;return 0===e.length&&this.isComplete?{value:null,done:!0}:{value:e.shift(),done:!1}},t.prototype.hasValue=function(){return this.buffer.length>0},t.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},t.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete();},t.prototype.notifyNext=function(e,t,r,n,o){this.buffer.push(t),this.parent.checkIterators();},t.prototype.subscribe=function(e,t){return subscribeToResult(this,this.observable,this,t)},t}(OuterSubscriber);function baseSome(e,t){var r;return _baseEach(e,function(e,n,o){return !(r=t(e,n,o))}),!!r}var _baseSome=baseSome;function isIterateeCall(e,t,r){if(!isObject_1(r))return !1;var n=_typeof(t);return !!("number"==n?isArrayLike_1(r)&&_isIndex(t,r.length):"string"==n&&t in r)&&eq_1(r[t],e)}var _isIterateeCall=isIterateeCall;function some(e,t,r){var n=isArray_1(e)?_arraySome:_baseSome;return r&&_isIterateeCall(e,t,r)&&(t=void 0),n(e,_baseIteratee(t))}var some_1=some;function baseMap(e,t){var r=-1,n=isArrayLike_1(e)?Array(e.length):[];return _baseEach(e,function(e,o,i){n[++r]=t(e,o,i);}),n}var _baseMap=baseMap;function baseSortBy(e,t){var r=e.length;for(e.sort(t);r--;)e[r]=e[r].value;return e}var _baseSortBy=baseSortBy;function compareAscending(e,t){if(e!==t){var r=void 0!==e,n=null===e,o=e==e,i=isSymbol_1(e),s=void 0!==t,a=null===t,u=t==t,l=isSymbol_1(t);if(!a&&!l&&!i&&e>t||i&&s&&u&&!a&&!l||n&&s&&u||!r&&u||!o)return 1;if(!n&&!i&&!l&&e<t||l&&r&&o&&!n&&!i||a&&r&&o||!s&&o||!u)return -1}return 0}var _compareAscending=compareAscending;function compareMultiple(e,t,r){for(var n=-1,o=e.criteria,i=t.criteria,s=o.length,a=r.length;++n<s;){var u=_compareAscending(o[n],i[n]);if(u)return n>=a?u:u*("desc"==r[n]?-1:1)}return e.index-t.index}var _compareMultiple=compareMultiple;function baseOrderBy(e,t,r){var n=-1;t=_arrayMap(t.length?t:[identity_1],_baseUnary(_baseIteratee));var o=_baseMap(e,function(e,r,o){return {criteria:_arrayMap(t,function(t){return t(e)}),index:++n,value:e}});return _baseSortBy(o,function(e,t){return _compareMultiple(e,t,r)})}var _baseOrderBy=baseOrderBy;function baseRest(e,t){return _setToString(_overRest(e,t,identity_1),e+"")}var _baseRest=baseRest,sortBy=_baseRest(function(e,t){if(null==e)return [];var r=t.length;return r>1&&_isIterateeCall(e,t[0],t[1])?t=[]:r>2&&_isIterateeCall(t[0],t[1],t[2])&&(t=[t[0]]),_baseOrderBy(e,_baseFlatten(t,1),[])}),sortBy_1=sortBy,AnimationFrameAction=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return __extends(t,e),t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.actions.push(this),t.scheduled||(t.scheduled=requestAnimationFrame(function(){return t.flush(null)})))},t.prototype.recycleAsyncId=function(t,r,n){if(void 0===n&&(n=0),null!==n&&n>0||null===n&&this.delay>0)return e.prototype.recycleAsyncId.call(this,t,r,n);0===t.actions.length&&(cancelAnimationFrame(r),t.scheduled=void 0);},t}(AsyncAction),AnimationFrameScheduler=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.flush=function(e){this.active=!0,this.scheduled=void 0;var t,r=this.actions,n=-1,o=r.length;e=e||r.shift();do{if(t=e.execute(e.state,e.delay))break}while(++n<o&&(e=r.shift()));if(this.active=!1,t){for(;++n<o&&(e=r.shift());)e.unsubscribe();throw t}},t}(AsyncScheduler),animationFrame=new AnimationFrameScheduler(AnimationFrameAction),VirtualTimeScheduler=function(e){function t(t,r){void 0===t&&(t=VirtualAction),void 0===r&&(r=Number.POSITIVE_INFINITY);var n=e.call(this,t,function(){return n.frame})||this;return n.maxFrames=r,n.frame=0,n.index=-1,n}return __extends(t,e),t.prototype.flush=function(){for(var e,t,r=this.actions,n=this.maxFrames;(t=r[0])&&t.delay<=n&&(r.shift(),this.frame=t.delay,!(e=t.execute(t.state,t.delay))););if(e){for(;t=r.shift();)t.unsubscribe();throw e}},t.frameTimeFactor=10,t}(AsyncScheduler),VirtualAction=function(e){function t(t,r,n){void 0===n&&(n=t.index+=1);var o=e.call(this,t,r)||this;return o.scheduler=t,o.work=r,o.index=n,o.active=!0,o.index=t.index=n,o}return __extends(t,e),t.prototype.schedule=function(r,n){if(void 0===n&&(n=0),!this.id)return e.prototype.schedule.call(this,r,n);this.active=!1;var o=new t(this.scheduler,this.work);return this.add(o),o.schedule(r,n)},t.prototype.requestAsyncId=function(e,r,n){void 0===n&&(n=0),this.delay=e.frame+n;var o=e.actions;return o.push(this),o.sort(t.sortActions),!0},t.prototype.recycleAsyncId=function(e,t,r){},t.prototype._execute=function(t,r){if(!0===this.active)return e.prototype._execute.call(this,t,r)},t.sortActions=function(e,t){return e.delay===t.delay?e.index===t.index?0:e.index>t.index?1:-1:e.delay>t.delay?1:-1},t}(AsyncAction);function isObservable(e){return !!e&&(e instanceof Observable||"function"==typeof e.lift&&"function"==typeof e.subscribe)}function bindCallback(e,t,r){if(t){if(!isScheduler(t))return function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return bindCallback(e,r).apply(void 0,n).pipe(map$1(function(e){return isArray$1(e)?t.apply(void 0,e):t(e)}))};r=t;}return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var o,i=this,s={context:i,subject:o,callbackFunc:e,scheduler:r};return new Observable(function(n){if(r){var a={args:t,subscriber:n,params:s};return r.schedule(dispatch$2,0,a)}if(!o){o=new AsyncSubject;try{e.apply(i,t.concat([function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];o.next(e.length<=1?e[0]:e),o.complete();}]));}catch(e){canReportError(o)?o.error(e):console.warn(e);}}return o.subscribe(n)})}}function dispatch$2(e){var t=this,r=e.args,n=e.subscriber,o=e.params,i=o.callbackFunc,s=o.context,a=o.scheduler,u=o.subject;if(!u){u=o.subject=new AsyncSubject;try{i.apply(s,r.concat([function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var n=e.length<=1?e[0]:e;t.add(a.schedule(dispatchNext,0,{value:n,subject:u}));}]));}catch(e){u.error(e);}}this.add(u.subscribe(n));}function dispatchNext(e){var t=e.value,r=e.subject;r.next(t),r.complete();}function bindNodeCallback(e,t,r){if(t){if(!isScheduler(t))return function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return bindNodeCallback(e,r).apply(void 0,n).pipe(map$1(function(e){return isArray$1(e)?t.apply(void 0,e):t(e)}))};r=t;}return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var o={subject:void 0,args:t,callbackFunc:e,scheduler:r,context:this};return new Observable(function(n){var i=o.context,s=o.subject;if(r)return r.schedule(dispatch$3,0,{params:o,subscriber:n,context:i});if(!s){s=o.subject=new AsyncSubject;try{e.apply(i,t.concat([function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e.shift();r?s.error(r):(s.next(e.length<=1?e[0]:e),s.complete());}]));}catch(e){canReportError(s)?s.error(e):console.warn(e);}}return s.subscribe(n)})}}function dispatch$3(e){var t=this,r=e.params,n=e.subscriber,o=e.context,i=r.callbackFunc,s=r.args,a=r.scheduler,u=r.subject;if(!u){u=r.subject=new AsyncSubject;try{i.apply(o,s.concat([function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var n=e.shift();if(n)t.add(a.schedule(dispatchError,0,{err:n,subject:u}));else {var o=e.length<=1?e[0]:e;t.add(a.schedule(dispatchNext$1,0,{value:o,subject:u}));}}]));}catch(e){this.add(a.schedule(dispatchError,0,{err:e,subject:u}));}}this.add(u.subscribe(n));}function dispatchNext$1(e){var t=e.value,r=e.subject;r.next(t),r.complete();}function dispatchError(e){var t=e.err;e.subject.error(t);}function forkJoin(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(1===e.length){var r=e[0];if(isArray$1(r))return forkJoinInternal(r,null);if(isObject$1(r)&&Object.getPrototypeOf(r)===Object.prototype){var n=Object.keys(r);return forkJoinInternal(n.map(function(e){return r[e]}),n)}}if("function"==typeof e[e.length-1]){var o=e.pop();return forkJoinInternal(e=1===e.length&&isArray$1(e[0])?e[0]:e,null).pipe(map$1(function(e){return o.apply(void 0,e)}))}return forkJoinInternal(e,null)}function forkJoinInternal(e,t){return new Observable(function(r){var n=e.length;if(0!==n)for(var o=new Array(n),i=0,s=0,a=function(a){var u=from(e[a]),l=!1;r.add(u.subscribe({next:function(e){l||(l=!0,s++),o[a]=e;},error:function(e){return r.error(e)},complete:function(){++i!==n&&l||(s===n&&r.next(t?t.reduce(function(e,t,r){return e[t]=o[r],e},{}):o),r.complete());}}));},u=0;u<n;u++)a(u);else r.complete();})}function fromEvent(e,t,r,n){return isFunction$1(r)&&(n=r,r=void 0),n?fromEvent(e,t,r).pipe(map$1(function(e){return isArray$1(e)?n.apply(void 0,e):n(e)})):new Observable(function(n){setupSubscription(e,t,function(e){arguments.length>1?n.next(Array.prototype.slice.call(arguments)):n.next(e);},n,r);})}function setupSubscription(e,t,r,n,o){var i;if(isEventTarget(e)){var s=e;e.addEventListener(t,r,o),i=function(){return s.removeEventListener(t,r,o)};}else if(isJQueryStyleEventEmitter(e)){var a=e;e.on(t,r),i=function(){return a.off(t,r)};}else if(isNodeStyleEventEmitter(e)){var u=e;e.addListener(t,r),i=function(){return u.removeListener(t,r)};}else {if(!e||!e.length)throw new TypeError("Invalid event target");for(var l=0,c=e.length;l<c;l++)setupSubscription(e[l],t,r,n,o);}n.add(i);}function isNodeStyleEventEmitter(e){return e&&"function"==typeof e.addListener&&"function"==typeof e.removeListener}function isJQueryStyleEventEmitter(e){return e&&"function"==typeof e.on&&"function"==typeof e.off}function isEventTarget(e){return e&&"function"==typeof e.addEventListener&&"function"==typeof e.removeEventListener}function fromEventPattern(e,t,r){return r?fromEventPattern(e,t).pipe(map$1(function(e){return isArray$1(e)?r.apply(void 0,e):r(e)})):new Observable(function(r){var n,o=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return r.next(1===e.length?e[0]:e)};try{n=e(o);}catch(e){return void r.error(e)}if(isFunction$1(t))return function(){return t(o,n)}})}function generate(e,t,r,n,o){var i,s;if(1==arguments.length){var a=e;s=a.initialState,t=a.condition,r=a.iterate,i=a.resultSelector||identity$1,o=a.scheduler;}else void 0===n||isScheduler(n)?(s=e,i=identity$1,o=n):(s=e,i=n);return new Observable(function(e){var n=s;if(o)return o.schedule(dispatch$4,0,{subscriber:e,iterate:r,condition:t,resultSelector:i,state:n});for(;;){if(t){var a=void 0;try{a=t(n);}catch(t){return void e.error(t)}if(!a){e.complete();break}}var u=void 0;try{u=i(n);}catch(t){return void e.error(t)}if(e.next(u),e.closed)break;try{n=r(n);}catch(t){return void e.error(t)}}})}function dispatch$4(e){var t=e.subscriber,r=e.condition;if(!t.closed){if(e.needIterate)try{e.state=e.iterate(e.state);}catch(e){return void t.error(e)}else e.needIterate=!0;if(r){var n=void 0;try{n=r(e.state);}catch(e){return void t.error(e)}if(!n)return void t.complete();if(t.closed)return}var o;try{o=e.resultSelector(e.state);}catch(e){return void t.error(e)}if(!t.closed&&(t.next(o),!t.closed))return this.schedule(e)}}function iif(e,t,r){return void 0===t&&(t=EMPTY),void 0===r&&(r=EMPTY),defer$1(function(){return e()?t:r})}function interval(e,t){return void 0===e&&(e=0),void 0===t&&(t=async),(!isNumeric(e)||e<0)&&(e=0),t&&"function"==typeof t.schedule||(t=async),new Observable(function(r){return r.add(t.schedule(dispatch$5,e,{subscriber:r,counter:0,period:e})),r})}function dispatch$5(e){var t=e.subscriber,r=e.counter,n=e.period;t.next(r),this.schedule({subscriber:t,counter:r+1,period:n},n);}var NEVER=new Observable(noop$1);function never(){return NEVER}function onErrorResumeNext(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(0===e.length)return EMPTY;var r=e[0],n=e.slice(1);return 1===e.length&&isArray$1(r)?onErrorResumeNext.apply(void 0,r):new Observable(function(e){var t=function(){return e.add(onErrorResumeNext.apply(void 0,n).subscribe(e))};return from(r).subscribe({next:function(t){e.next(t);},error:t,complete:t})})}function pairs(e,t){return new Observable(t?function(r){var n=Object.keys(e),o=new Subscription;return o.add(t.schedule(dispatch$6,0,{keys:n,index:0,subscriber:r,subscription:o,obj:e})),o}:function(t){for(var r=Object.keys(e),n=0;n<r.length&&!t.closed;n++){var o=r[n];e.hasOwnProperty(o)&&t.next([o,e[o]]);}t.complete();})}function dispatch$6(e){var t=e.keys,r=e.index,n=e.subscriber,o=e.subscription,i=e.obj;if(!n.closed)if(r<t.length){var s=t[r];n.next([s,i[s]]),o.add(this.schedule({keys:t,index:r+1,subscriber:n,subscription:o,obj:i}));}else n.complete();}function partition(e,t,r){return [filter(t,r)(new Observable(subscribeTo(e))),filter(not(t,r))(new Observable(subscribeTo(e)))]}function range(e,t,r){return void 0===e&&(e=0),new Observable(function(n){void 0===t&&(t=e,e=0);var o=0,i=e;if(r)return r.schedule(dispatch$7,0,{index:o,count:t,start:e,subscriber:n});for(;;){if(o++>=t){n.complete();break}if(n.next(i++),n.closed)break}})}function dispatch$7(e){var t=e.start,r=e.index,n=e.count,o=e.subscriber;r>=n?o.complete():(o.next(t),o.closed||(e.index=r+1,e.start=t+1,this.schedule(e)));}function using(e,t){return new Observable(function(r){var n,o;try{n=e();}catch(e){return void r.error(e)}try{o=t(n);}catch(e){return void r.error(e)}var i=(o?from(o):EMPTY).subscribe(r);return function(){i.unsubscribe(),n&&n.unsubscribe();}})}var _esm5=Object.freeze({Observable:Observable,ConnectableObservable:ConnectableObservable,GroupedObservable:GroupedObservable,observable:observable,Subject:Subject,BehaviorSubject:BehaviorSubject,ReplaySubject:ReplaySubject,AsyncSubject:AsyncSubject,asapScheduler:asap,asyncScheduler:async,queueScheduler:queue$1,animationFrameScheduler:animationFrame,VirtualTimeScheduler:VirtualTimeScheduler,VirtualAction:VirtualAction,Scheduler:Scheduler,Subscription:Subscription,Subscriber:Subscriber,Notification:Notification,get NotificationKind(){return NotificationKind},pipe:pipe,noop:noop$1,identity:identity$1,isObservable:isObservable,ArgumentOutOfRangeError:ArgumentOutOfRangeError,EmptyError:EmptyError,ObjectUnsubscribedError:ObjectUnsubscribedError,UnsubscriptionError:UnsubscriptionError,TimeoutError:TimeoutError,bindCallback:bindCallback,bindNodeCallback:bindNodeCallback,combineLatest:combineLatest,concat:concat,defer:defer$1,empty:empty$2,forkJoin:forkJoin,from:from,fromEvent:fromEvent,fromEventPattern:fromEventPattern,generate:generate,iif:iif,interval:interval,merge:merge,never:never,of:of,onErrorResumeNext:onErrorResumeNext,pairs:pairs,partition:partition,race:race,range:range,throwError:throwError,timer:timer,using:using,zip:zip,scheduled:scheduled,EMPTY:EMPTY,NEVER:NEVER,config:config}),lib_es5=createCommonjsModule(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=[],n=function(e,t){return new WebSocket(e,t)};t.normalClosureMessage="Normal closure",t.default=function(e,o){var i=void 0===o?{protocols:r,makeWebSocket:n}:o,s=i.protocols,a=void 0===s?r:s,u=i.makeWebSocket,l=void 0===u?n:u;return new _esm5.Observable(function(r){var n,o=new _esm5.Subject,i=function(e){if(n){p();var t=new Error("Web socket message factory function called more than once");throw r.error(t),t}return n=e.subscribe(function(e){s.send(e);}),o},s=l(e,a),u=!1,c=!1,p=function(){u=!1;};return s.onopen=function(){u=!0,c?s.close():r.next(i);},s.onmessage=function(e){o.next(e.data);},s.onerror=function(e){p(),r.error(new Error(e.message));},s.onclose=function(e){u&&(p(),c?(r.complete(),o.complete()):r.error(new Error(1e3===e.code?t.normalClosureMessage:e.reason)));},function(){c=!0,n&&n.unsubscribe(),u&&(p(),s.close());}})};});unwrapExports(lib_es5);var lib_es5_1=lib_es5.normalClosureMessage;function assignMergeValue(e,t,r){(void 0===r||eq_1(e[t],r))&&(void 0!==r||t in e)||_baseAssignValue(e,t,r);}var _assignMergeValue=assignMergeValue;function isArrayLikeObject(e){return isObjectLike_1(e)&&isArrayLike_1(e)}var isArrayLikeObject_1=isArrayLikeObject;function safeGet(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var _safeGet=safeGet;function toPlainObject(e){return _copyObject(e,keysIn_1(e))}var toPlainObject_1=toPlainObject;function baseMergeDeep(e,t,r,n,o,i,s){var a=_safeGet(e,r),u=_safeGet(t,r),l=s.get(u);if(l)_assignMergeValue(e,r,l);else {var c=i?i(a,u,r+"",e,t,s):void 0,p=void 0===c;if(p){var f=isArray_1(u),d=!f&&isBuffer_1(u),g=!f&&!d&&isTypedArray_1(u);c=u,f||d||g?isArray_1(a)?c=a:isArrayLikeObject_1(a)?c=_copyArray(a):d?(p=!1,c=_cloneBuffer(u,!0)):g?(p=!1,c=_cloneTypedArray(u,!0)):c=[]:isPlainObject_1(u)||isArguments_1(u)?(c=a,isArguments_1(a)?c=toPlainObject_1(a):isObject_1(a)&&!isFunction_1(a)||(c=_initCloneObject(u))):p=!1;}p&&(s.set(u,c),o(c,u,n,i,s),s.delete(u)),_assignMergeValue(e,r,c);}}var _baseMergeDeep=baseMergeDeep;function baseMerge(e,t,r,n,o){e!==t&&_baseFor(t,function(i,s){if(o||(o=new _Stack),isObject_1(i))_baseMergeDeep(e,t,s,r,baseMerge,n,o);else {var a=n?n(_safeGet(e,s),i,s+"",e,t,o):void 0;void 0===a&&(a=i),_assignMergeValue(e,s,a);}},keysIn_1);}var _baseMerge=baseMerge;function createAssigner(e){return _baseRest(function(t,r){var n=-1,o=r.length,i=o>1?r[o-1]:void 0,s=o>2?r[2]:void 0;for(i=e.length>3&&"function"==typeof i?(o--,i):void 0,s&&_isIterateeCall(r[0],r[1],s)&&(i=o<3?void 0:i,o=1),t=Object(t);++n<o;){var a=r[n];a&&e(t,a,n,i);}return t})}var _createAssigner=createAssigner,mergeWith=_createAssigner(function(e,t,r,n){_baseMerge(e,t,r,n);}),mergeWith_1=mergeWith,__extends$1=window&&window.__extends||function(){var e=function(t,r){return (e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(t,r)};return function(t,r){function n(){this.constructor=t;}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n);}}(),BucketBySubscriber=function(e){function t(t,r,n,o){var i=e.call(this,t)||this;i.count=r,i.hashSelector=n,i.subjectSelector=o,i.index=0;for(var s=i.buckets=new Array(r),a=0;a<r;++a)s[a]=o();return t.next(s.map(function(e){return e.asObservable()})),i}return __extends$1(t,e),t.prototype._next=function(e){var t=this.buckets,r=this.closed,n=this.count,o=this.hashSelector;if(!r){var i;try{var s=o(e,this.index++);i=Math.abs(Math.floor(s))%n;}catch(e){return void this.error(e)}t[i].next(e);}},t.prototype._error=function(e){var t=this.buckets,r=this.closed,n=this.destination;r||(t.forEach(function(t){return t.error(e)}),n.error(e));},t.prototype._complete=function(){var e=this.buckets,t=this.closed,r=this.destination;t||(e.forEach(function(e){return e.complete()}),r.complete());},t}(Subscriber),__extends$2=window&&window.__extends||function(){var e=function(t,r){return (e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(t,r)};return function(t,r){function n(){this.constructor=t;}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n);}}(),DeferFinalizeSubscriber=function(e){function t(t,r){var n=e.call(this,t)||this;return n.callback=r,n.kind="U",n.subscription=void 0,n}return __extends$2(t,e),t.prototype.complete=function(){var t=this;this.kind="C",this.defer(function(){return e.prototype.complete.call(t)});},t.prototype.error=function(t){var r=this;this.kind="E",this.defer(function(){return e.prototype.error.call(r,t)});},t.prototype.unsubscribe=function(){var t=this;this.defer(function(){return e.prototype.unsubscribe.call(t)});},t.prototype.defer=function(e){if(this.subscription)this.subscription.add(e);else {var t=new Subscription;this.subscription=t,t.add(e),from(this.callback(this.kind)).pipe(finalize(function(){return t.unsubscribe()})).subscribe();}},t}(Subscriber),__extends$3=window&&window.__extends||function(){var e=function(t,r){return (e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(t,r)};return function(t,r){function n(){this.constructor=t;}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n);}}(),InexorablySubscriber=function(e){function t(t,r){var n=e.call(this,t)||this;return n.add(new Subscription(function(){return r(n.notification)})),n}return __extends$3(t,e),t.prototype.complete=function(){this.notification=new Notification("C"),e.prototype.complete.call(this);},t.prototype.error=function(t){this.notification=new Notification("E",void 0,t),e.prototype.error.call(this,t);},t}(Subscriber);function rateLimit(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];var n=1,o=asap;1===t.length?"number"==typeof t[0]?n=t[0]:o=t[0]:2===t.length&&(n=t[0],o=t[1]);var i=n||1;return function(t){return t.pipe(scan(function(t,r){var n=o.now(),s=n-e;if((t=t.filter(function(e){return e.until>s})).length>=i){var a=t[0],u=t[t.length-1],l=a.until+e*Math.floor(t.length/i);t.push({delay:u.until<n?l-n:l-u.until,until:l,value:r});}else t.push({delay:0,until:n,value:r});return t},[]),map$1(function(e){return e[e.length-1]}),concatMap(function(e){var t=of(e.value);return e.delay?t.pipe(delay(e.delay,o)):t}))}}var __extends$4=window&&window.__extends||function(){var e=function(t,r){return (e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);})(t,r)};return function(t,r){function n(){this.constructor=t;}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n);}}(),UnsubscribeOnSubscriber=function(e){function t(t,r,n){var o=e.call(this,t)||this;return o.scheduler=r,o.delay=n,o}return __extends$4(t,e),t.prototype.unsubscribe=function(){var t=this,r=this.delay;this.scheduler.schedule(function(){return e.prototype.unsubscribe.call(t)},r);},t}(Subscriber),defaultProtocols=[],defaultWebsocketFactory=function(e,t){return new WebSocket(e,t)},normalClosureMessage="Normal closure";function makeWebSocketObservable(e,t){var r=void 0===t?{protocols:defaultProtocols,makeWebSocket:defaultWebsocketFactory}:t,n=r.protocols,o=void 0===n?defaultProtocols:n,i=r.makeWebSocket,s=void 0===i?defaultWebsocketFactory:i;return new Observable(function(t){var r,n=new Subject,i=function(e){if(r){c();var o=new Error("Web socket message factory function called more than once");throw t.error(o),o}return r=e.subscribe(function(e){a.send(e);}),n},a=s(e,o),u=!1,l=!1,c=function(){u=!1;};return a.onopen=function(){u=!0,l?a.close():t.next(i);},a.onmessage=function(e){n.next(e.data);},a.onerror=function(e){c(),t.error(new Error(e.message));},a.onclose=function(e){u&&(c(),l?(t.complete(),n.complete()):t.error(new Error(1e3===e.code?normalClosureMessage:e.reason)));},function(){l=!0,r&&r.unsubscribe(),u&&(c(),a.close());}})}_export(_export.P+_export.F*_fails(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(e){var t=_toObject(this),r=_toPrimitive(t);return "number"!=typeof r||isFinite(r)?t.toISOString():null}});var floor$2=Math.floor,_isInteger=function(e){return !_isObject(e)&&isFinite(e)&&floor$2(e)===e};_export(_export.S,"Number",{isInteger:_isInteger});var aspromise=asPromise;function asPromise(e,t){for(var r=new Array(arguments.length-1),n=0,o=2,i=!0;o<arguments.length;)r[n++]=arguments[o++];return new Promise(function(o,s){r[n]=function(e){if(i)if(i=!1,e)s(e);else {for(var t=new Array(arguments.length-1),r=0;r<t.length;)t[r++]=arguments[r];o.apply(null,t);}};try{e.apply(t||null,r);}catch(e){i&&(i=!1,s(e));}})}var base64_1=createCommonjsModule(function(e,t){var r=t;r.length=function(e){var t=e.length;if(!t)return 0;for(var r=0;--t%4>1&&"="===e.charAt(t);)++r;return Math.ceil(3*e.length)/4-r};for(var n=new Array(64),o=new Array(123),i=0;i<64;)o[n[i]=i<26?i+65:i<52?i+71:i<62?i-4:i-59|43]=i++;r.encode=function(e,t,r){for(var o,i=null,s=[],a=0,u=0;t<r;){var l=e[t++];switch(u){case 0:s[a++]=n[l>>2],o=(3&l)<<4,u=1;break;case 1:s[a++]=n[o|l>>4],o=(15&l)<<2,u=2;break;case 2:s[a++]=n[o|l>>6],s[a++]=n[63&l],u=0;}a>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,s)),a=0);}return u&&(s[a++]=n[o],s[a++]=61,1===u&&(s[a++]=61)),i?(a&&i.push(String.fromCharCode.apply(String,s.slice(0,a))),i.join("")):String.fromCharCode.apply(String,s.slice(0,a))};r.decode=function(e,t,r){for(var n,i=r,s=0,a=0;a<e.length;){var u=e.charCodeAt(a++);if(61===u&&s>1)break;if(void 0===(u=o[u]))throw Error("invalid encoding");switch(s){case 0:n=u,s=1;break;case 1:t[r++]=n<<2|(48&u)>>4,n=u,s=2;break;case 2:t[r++]=(15&n)<<4|(60&u)>>2,n=u,s=3;break;case 3:t[r++]=(3&n)<<6|u,s=0;}}if(1===s)throw Error("invalid encoding");return r-i},r.test=function(e){return /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(e)};}),eventemitter=EventEmitter$1;function EventEmitter$1(){this._listeners={};}EventEmitter$1.prototype.on=function(e,t,r){return (this._listeners[e]||(this._listeners[e]=[])).push({fn:t,ctx:r||this}),this},EventEmitter$1.prototype.off=function(e,t){if(void 0===e)this._listeners={};else if(void 0===t)this._listeners[e]=[];else for(var r=this._listeners[e],n=0;n<r.length;)r[n].fn===t?r.splice(n,1):++n;return this},EventEmitter$1.prototype.emit=function(e){var t=this._listeners[e];if(t){for(var r=[],n=1;n<arguments.length;)r.push(arguments[n++]);for(n=0;n<t.length;)t[n].fn.apply(t[n++].ctx,r);}return this};var float_1=factory(factory);function factory(e){return "undefined"!=typeof Float32Array?function(){var t=new Float32Array([-0]),r=new Uint8Array(t.buffer),n=128===r[3];function o(e,n,o){t[0]=e,n[o]=r[0],n[o+1]=r[1],n[o+2]=r[2],n[o+3]=r[3];}function i(e,n,o){t[0]=e,n[o]=r[3],n[o+1]=r[2],n[o+2]=r[1],n[o+3]=r[0];}function s(e,n){return r[0]=e[n],r[1]=e[n+1],r[2]=e[n+2],r[3]=e[n+3],t[0]}function a(e,n){return r[3]=e[n],r[2]=e[n+1],r[1]=e[n+2],r[0]=e[n+3],t[0]}e.writeFloatLE=n?o:i,e.writeFloatBE=n?i:o,e.readFloatLE=n?s:a,e.readFloatBE=n?a:s;}():function(){function t(e,t,r,n){var o=t<0?1:0;if(o&&(t=-t),0===t)e(1/t>0?0:2147483648,r,n);else if(isNaN(t))e(2143289344,r,n);else if(t>3.4028234663852886e38)e((o<<31|2139095040)>>>0,r,n);else if(t<1.1754943508222875e-38)e((o<<31|Math.round(t/1.401298464324817e-45))>>>0,r,n);else {var i=Math.floor(Math.log(t)/Math.LN2);e((o<<31|i+127<<23|8388607&Math.round(t*Math.pow(2,-i)*8388608))>>>0,r,n);}}function r(e,t,r){var n=e(t,r),o=2*(n>>31)+1,i=n>>>23&255,s=8388607&n;return 255===i?s?NaN:o*(1/0):0===i?1.401298464324817e-45*o*s:o*Math.pow(2,i-150)*(s+8388608)}e.writeFloatLE=t.bind(null,writeUintLE),e.writeFloatBE=t.bind(null,writeUintBE),e.readFloatLE=r.bind(null,readUintLE),e.readFloatBE=r.bind(null,readUintBE);}(),"undefined"!=typeof Float64Array?function(){var t=new Float64Array([-0]),r=new Uint8Array(t.buffer),n=128===r[7];function o(e,n,o){t[0]=e,n[o]=r[0],n[o+1]=r[1],n[o+2]=r[2],n[o+3]=r[3],n[o+4]=r[4],n[o+5]=r[5],n[o+6]=r[6],n[o+7]=r[7];}function i(e,n,o){t[0]=e,n[o]=r[7],n[o+1]=r[6],n[o+2]=r[5],n[o+3]=r[4],n[o+4]=r[3],n[o+5]=r[2],n[o+6]=r[1],n[o+7]=r[0];}function s(e,n){return r[0]=e[n],r[1]=e[n+1],r[2]=e[n+2],r[3]=e[n+3],r[4]=e[n+4],r[5]=e[n+5],r[6]=e[n+6],r[7]=e[n+7],t[0]}function a(e,n){return r[7]=e[n],r[6]=e[n+1],r[5]=e[n+2],r[4]=e[n+3],r[3]=e[n+4],r[2]=e[n+5],r[1]=e[n+6],r[0]=e[n+7],t[0]}e.writeDoubleLE=n?o:i,e.writeDoubleBE=n?i:o,e.readDoubleLE=n?s:a,e.readDoubleBE=n?a:s;}():function(){function t(e,t,r,n,o,i){var s=n<0?1:0;if(s&&(n=-n),0===n)e(0,o,i+t),e(1/n>0?0:2147483648,o,i+r);else if(isNaN(n))e(0,o,i+t),e(2146959360,o,i+r);else if(n>1.7976931348623157e308)e(0,o,i+t),e((s<<31|2146435072)>>>0,o,i+r);else {var a;if(n<2.2250738585072014e-308)e((a=n/5e-324)>>>0,o,i+t),e((s<<31|a/4294967296)>>>0,o,i+r);else {var u=Math.floor(Math.log(n)/Math.LN2);1024===u&&(u=1023),e(4503599627370496*(a=n*Math.pow(2,-u))>>>0,o,i+t),e((s<<31|u+1023<<20|1048576*a&1048575)>>>0,o,i+r);}}}function r(e,t,r,n,o){var i=e(n,o+t),s=e(n,o+r),a=2*(s>>31)+1,u=s>>>20&2047,l=4294967296*(1048575&s)+i;return 2047===u?l?NaN:a*(1/0):0===u?5e-324*a*l:a*Math.pow(2,u-1075)*(l+4503599627370496)}e.writeDoubleLE=t.bind(null,writeUintLE,0,4),e.writeDoubleBE=t.bind(null,writeUintBE,4,0),e.readDoubleLE=r.bind(null,readUintLE,0,4),e.readDoubleBE=r.bind(null,readUintBE,4,0);}(),e}function writeUintLE(e,t,r){t[r]=255&e,t[r+1]=e>>>8&255,t[r+2]=e>>>16&255,t[r+3]=e>>>24;}function writeUintBE(e,t,r){t[r]=e>>>24,t[r+1]=e>>>16&255,t[r+2]=e>>>8&255,t[r+3]=255&e;}function readUintLE(e,t){return (e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24)>>>0}function readUintBE(e,t){return (e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0}var inquire_1=inquire;function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(e){}return null}var utf8_1=createCommonjsModule(function(e,t){var r=t;r.length=function(e){for(var t=0,r=0,n=0;n<e.length;++n)(r=e.charCodeAt(n))<128?t+=1:r<2048?t+=2:55296==(64512&r)&&56320==(64512&e.charCodeAt(n+1))?(++n,t+=4):t+=3;return t},r.read=function(e,t,r){if(r-t<1)return "";for(var n,o=null,i=[],s=0;t<r;)(n=e[t++])<128?i[s++]=n:n>191&&n<224?i[s++]=(31&n)<<6|63&e[t++]:n>239&&n<365?(n=((7&n)<<18|(63&e[t++])<<12|(63&e[t++])<<6|63&e[t++])-65536,i[s++]=55296+(n>>10),i[s++]=56320+(1023&n)):i[s++]=(15&n)<<12|(63&e[t++])<<6|63&e[t++],s>8191&&((o||(o=[])).push(String.fromCharCode.apply(String,i)),s=0);return o?(s&&o.push(String.fromCharCode.apply(String,i.slice(0,s))),o.join("")):String.fromCharCode.apply(String,i.slice(0,s))},r.write=function(e,t,r){for(var n,o,i=r,s=0;s<e.length;++s)(n=e.charCodeAt(s))<128?t[r++]=n:n<2048?(t[r++]=n>>6|192,t[r++]=63&n|128):55296==(64512&n)&&56320==(64512&(o=e.charCodeAt(s+1)))?(n=65536+((1023&n)<<10)+(1023&o),++s,t[r++]=n>>18|240,t[r++]=n>>12&63|128,t[r++]=n>>6&63|128,t[r++]=63&n|128):(t[r++]=n>>12|224,t[r++]=n>>6&63|128,t[r++]=63&n|128);return r-i};}),pool_1=pool;function pool(e,t,r){var n=r||8192,o=n>>>1,i=null,s=n;return function(r){if(r<1||r>o)return e(r);s+r>n&&(i=e(n),s=0);var a=t.call(i,s,s+=r);return 7&s&&(s=1+(7|s)),a}}var longbits=LongBits;function LongBits(e,t){this.lo=e>>>0,this.hi=t>>>0;}var zero=LongBits.zero=new LongBits(0,0);zero.toNumber=function(){return 0},zero.zzEncode=zero.zzDecode=function(){return this},zero.length=function(){return 1};var zeroHash=LongBits.zeroHash="\0\0\0\0\0\0\0\0";LongBits.fromNumber=function(e){if(0===e)return zero;var t=e<0;t&&(e=-e);var r=e>>>0,n=(e-r)/4294967296>>>0;return t&&(n=~n>>>0,r=~r>>>0,++r>4294967295&&(r=0,++n>4294967295&&(n=0))),new LongBits(r,n)},LongBits.from=function(e){if("number"==typeof e)return LongBits.fromNumber(e);if(minimal.isString(e)){if(!minimal.Long)return LongBits.fromNumber(parseInt(e,10));e=minimal.Long.fromString(e);}return e.low||e.high?new LongBits(e.low>>>0,e.high>>>0):zero},LongBits.prototype.toNumber=function(e){if(!e&&this.hi>>>31){var t=1+~this.lo>>>0,r=~this.hi>>>0;return t||(r=r+1>>>0),-(t+4294967296*r)}return this.lo+4294967296*this.hi},LongBits.prototype.toLong=function(e){return minimal.Long?new minimal.Long(0|this.lo,0|this.hi,Boolean(e)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(e)}};var charCodeAt=String.prototype.charCodeAt;LongBits.fromHash=function(e){return e===zeroHash?zero:new LongBits((charCodeAt.call(e,0)|charCodeAt.call(e,1)<<8|charCodeAt.call(e,2)<<16|charCodeAt.call(e,3)<<24)>>>0,(charCodeAt.call(e,4)|charCodeAt.call(e,5)<<8|charCodeAt.call(e,6)<<16|charCodeAt.call(e,7)<<24)>>>0)},LongBits.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},LongBits.prototype.zzEncode=function(){var e=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^e)>>>0,this.lo=(this.lo<<1^e)>>>0,this},LongBits.prototype.zzDecode=function(){var e=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^e)>>>0,this.hi=(this.hi>>>1^e)>>>0,this},LongBits.prototype.length=function(){var e=this.lo,t=(this.lo>>>28|this.hi<<4)>>>0,r=this.hi>>>24;return 0===r?0===t?e<16384?e<128?1:2:e<2097152?3:4:t<16384?t<128?5:6:t<2097152?7:8:r<128?9:10};var minimal=createCommonjsModule(function(e,t){var r=t;function n(e,t,r){for(var n=Object.keys(t),o=0;o<n.length;++o)void 0!==e[n[o]]&&r||(e[n[o]]=t[n[o]]);return e}function o(e){function t(e,r){if(!(this instanceof t))return new t(e,r);Object.defineProperty(this,"message",{get:function(){return e}}),Error.captureStackTrace?Error.captureStackTrace(this,t):Object.defineProperty(this,"stack",{value:(new Error).stack||""}),r&&n(this,r);}return (t.prototype=Object.create(Error.prototype)).constructor=t,Object.defineProperty(t.prototype,"name",{get:function(){return e}}),t.prototype.toString=function(){return this.name+": "+this.message},t}r.asPromise=aspromise,r.base64=base64_1,r.EventEmitter=eventemitter,r.float=float_1,r.inquire=inquire_1,r.utf8=utf8_1,r.pool=pool_1,r.LongBits=longbits,r.global="undefined"!=typeof window&&window||void 0!==commonjsGlobal$1&&commonjsGlobal$1||"undefined"!=typeof self&&self||commonjsGlobal$1,r.emptyArray=Object.freeze?Object.freeze([]):[],r.emptyObject=Object.freeze?Object.freeze({}):{},r.isNode=Boolean(r.global.process&&r.global.process.versions&&r.global.process.versions.node),r.isInteger=Number.isInteger||function(e){return "number"==typeof e&&isFinite(e)&&Math.floor(e)===e},r.isString=function(e){return "string"==typeof e||e instanceof String},r.isObject=function(e){return e&&"object"===_typeof(e)},r.isset=r.isSet=function(e,t){var r=e[t];return !(null==r||!e.hasOwnProperty(t))&&("object"!==_typeof(r)||(Array.isArray(r)?r.length:Object.keys(r).length)>0)},r.Buffer=function(){try{var e=r.inquire("buffer").Buffer;return e.prototype.utf8Write?e:null}catch(e){return null}}(),r._Buffer_from=null,r._Buffer_allocUnsafe=null,r.newBuffer=function(e){return "number"==typeof e?r.Buffer?r._Buffer_allocUnsafe(e):new r.Array(e):r.Buffer?r._Buffer_from(e):"undefined"==typeof Uint8Array?e:new Uint8Array(e)},r.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,r.Long=r.global.dcodeIO&&r.global.dcodeIO.Long||r.global.Long||r.inquire("long"),r.key2Re=/^true|false|0|1$/,r.key32Re=/^-?(?:0|[1-9][0-9]*)$/,r.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,r.longToHash=function(e){return e?r.LongBits.from(e).toHash():r.LongBits.zeroHash},r.longFromHash=function(e,t){var n=r.LongBits.fromHash(e);return r.Long?r.Long.fromBits(n.lo,n.hi,t):n.toNumber(Boolean(t))},r.merge=n,r.lcFirst=function(e){return e.charAt(0).toLowerCase()+e.substring(1)},r.newError=o,r.ProtocolError=o("ProtocolError"),r.oneOfGetter=function(e){for(var t={},r=0;r<e.length;++r)t[e[r]]=1;return function(){for(var e=Object.keys(this),r=e.length-1;r>-1;--r)if(1===t[e[r]]&&void 0!==this[e[r]]&&null!==this[e[r]])return e[r]}},r.oneOfSetter=function(e){return function(t){for(var r=0;r<e.length;++r)e[r]!==t&&delete this[e[r]];}},r.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},r._configure=function(){var e=r.Buffer;e?(r._Buffer_from=e.from!==Uint8Array.from&&e.from||function(t,r){return new e(t,r)},r._Buffer_allocUnsafe=e.allocUnsafe||function(t){return new e(t)}):r._Buffer_from=r._Buffer_allocUnsafe=null;};}),writer=Writer,BufferWriter,LongBits$1=minimal.LongBits,base64=minimal.base64,utf8=minimal.utf8;function Op(e,t,r){this.fn=e,this.len=t,this.next=void 0,this.val=r;}function noop$2(){}function State(e){this.head=e.head,this.tail=e.tail,this.len=e.len,this.next=e.states;}function Writer(){this.len=0,this.head=new Op(noop$2,0,0),this.tail=this.head,this.states=null;}function writeByte(e,t,r){t[r]=255&e;}function writeVarint32(e,t,r){for(;e>127;)t[r++]=127&e|128,e>>>=7;t[r]=e;}function VarintOp(e,t){this.len=e,this.next=void 0,this.val=t;}function writeVarint64(e,t,r){for(;e.hi;)t[r++]=127&e.lo|128,e.lo=(e.lo>>>7|e.hi<<25)>>>0,e.hi>>>=7;for(;e.lo>127;)t[r++]=127&e.lo|128,e.lo=e.lo>>>7;t[r++]=e.lo;}function writeFixed32(e,t,r){t[r]=255&e,t[r+1]=e>>>8&255,t[r+2]=e>>>16&255,t[r+3]=e>>>24;}Writer.create=minimal.Buffer?function(){return (Writer.create=function(){return new BufferWriter})()}:function(){return new Writer},Writer.alloc=function(e){return new minimal.Array(e)},minimal.Array!==Array&&(Writer.alloc=minimal.pool(Writer.alloc,minimal.Array.prototype.subarray)),Writer.prototype._push=function(e,t,r){return this.tail=this.tail.next=new Op(e,t,r),this.len+=t,this},VarintOp.prototype=Object.create(Op.prototype),VarintOp.prototype.fn=writeVarint32,Writer.prototype.uint32=function(e){return this.len+=(this.tail=this.tail.next=new VarintOp((e>>>=0)<128?1:e<16384?2:e<2097152?3:e<268435456?4:5,e)).len,this},Writer.prototype.int32=function(e){return e<0?this._push(writeVarint64,10,LongBits$1.fromNumber(e)):this.uint32(e)},Writer.prototype.sint32=function(e){return this.uint32((e<<1^e>>31)>>>0)},Writer.prototype.uint64=function(e){var t=LongBits$1.from(e);return this._push(writeVarint64,t.length(),t)},Writer.prototype.int64=Writer.prototype.uint64,Writer.prototype.sint64=function(e){var t=LongBits$1.from(e).zzEncode();return this._push(writeVarint64,t.length(),t)},Writer.prototype.bool=function(e){return this._push(writeByte,1,e?1:0)},Writer.prototype.fixed32=function(e){return this._push(writeFixed32,4,e>>>0)},Writer.prototype.sfixed32=Writer.prototype.fixed32,Writer.prototype.fixed64=function(e){var t=LongBits$1.from(e);return this._push(writeFixed32,4,t.lo)._push(writeFixed32,4,t.hi)},Writer.prototype.sfixed64=Writer.prototype.fixed64,Writer.prototype.float=function(e){return this._push(minimal.float.writeFloatLE,4,e)},Writer.prototype.double=function(e){return this._push(minimal.float.writeDoubleLE,8,e)};var writeBytes=minimal.Array.prototype.set?function(e,t,r){t.set(e,r);}:function(e,t,r){for(var n=0;n<e.length;++n)t[r+n]=e[n];};Writer.prototype.bytes=function(e){var t=e.length>>>0;if(!t)return this._push(writeByte,1,0);if(minimal.isString(e)){var r=Writer.alloc(t=base64.length(e));base64.decode(e,r,0),e=r;}return this.uint32(t)._push(writeBytes,t,e)},Writer.prototype.string=function(e){var t=utf8.length(e);return t?this.uint32(t)._push(utf8.write,t,e):this._push(writeByte,1,0)},Writer.prototype.fork=function(){return this.states=new State(this),this.head=this.tail=new Op(noop$2,0,0),this.len=0,this},Writer.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new Op(noop$2,0,0),this.len=0),this},Writer.prototype.ldelim=function(){var e=this.head,t=this.tail,r=this.len;return this.reset().uint32(r),r&&(this.tail.next=e.next,this.tail=t,this.len+=r),this},Writer.prototype.finish=function(){for(var e=this.head.next,t=this.constructor.alloc(this.len),r=0;e;)e.fn(e.val,t,r),r+=e.len,e=e.next;return t},Writer._configure=function(e){BufferWriter=e;};var writer_buffer=BufferWriter$1;(BufferWriter$1.prototype=Object.create(writer.prototype)).constructor=BufferWriter$1;var Buffer=minimal.Buffer;function BufferWriter$1(){writer.call(this);}BufferWriter$1.alloc=function(e){return (BufferWriter$1.alloc=minimal._Buffer_allocUnsafe)(e)};var writeBytesBuffer=Buffer&&Buffer.prototype instanceof Uint8Array&&"set"===Buffer.prototype.set.name?function(e,t,r){t.set(e,r);}:function(e,t,r){if(e.copy)e.copy(t,r,0,e.length);else for(var n=0;n<e.length;)t[r++]=e[n++];};function writeStringBuffer(e,t,r){e.length<40?minimal.utf8.write(e,t,r):t.utf8Write(e,r);}BufferWriter$1.prototype.bytes=function(e){minimal.isString(e)&&(e=minimal._Buffer_from(e,"base64"));var t=e.length>>>0;return this.uint32(t),t&&this._push(writeBytesBuffer,t,e),this},BufferWriter$1.prototype.string=function(e){var t=Buffer.byteLength(e);return this.uint32(t),t&&this._push(writeStringBuffer,t,e),this};var reader=Reader,BufferReader,LongBits$2=minimal.LongBits,utf8$1=minimal.utf8;function indexOutOfRange(e,t){return RangeError("index out of range: "+e.pos+" + "+(t||1)+" > "+e.len)}function Reader(e){this.buf=e,this.pos=0,this.len=e.length;}var create_array="undefined"!=typeof Uint8Array?function(e){if(e instanceof Uint8Array||Array.isArray(e))return new Reader(e);throw Error("illegal buffer")}:function(e){if(Array.isArray(e))return new Reader(e);throw Error("illegal buffer")},value;function readLongVarint(){var e=new LongBits$2(0,0),t=0;if(!(this.len-this.pos>4)){for(;t<3;++t){if(this.pos>=this.len)throw indexOutOfRange(this);if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e}return e.lo=(e.lo|(127&this.buf[this.pos++])<<7*t)>>>0,e}for(;t<4;++t)if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e;if(e.lo=(e.lo|(127&this.buf[this.pos])<<28)>>>0,e.hi=(e.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return e;if(t=0,this.len-this.pos>4){for(;t<5;++t)if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}else for(;t<5;++t){if(this.pos>=this.len)throw indexOutOfRange(this);if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}throw Error("invalid varint encoding")}function readFixed32_end(e,t){return (e[t-4]|e[t-3]<<8|e[t-2]<<16|e[t-1]<<24)>>>0}function readFixed64(){if(this.pos+8>this.len)throw indexOutOfRange(this,8);return new LongBits$2(readFixed32_end(this.buf,this.pos+=4),readFixed32_end(this.buf,this.pos+=4))}Reader.create=minimal.Buffer?function(e){return (Reader.create=function(e){return minimal.Buffer.isBuffer(e)?new BufferReader(e):create_array(e)})(e)}:create_array,Reader.prototype._slice=minimal.Array.prototype.subarray||minimal.Array.prototype.slice,Reader.prototype.uint32=(value=4294967295,function(){if(value=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return value;if(value=(value|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return value;if(value=(value|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return value;if(value=(value|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return value;if(value=(value|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return value;if((this.pos+=5)>this.len)throw this.pos=this.len,indexOutOfRange(this,10);return value}),Reader.prototype.int32=function(){return 0|this.uint32()},Reader.prototype.sint32=function(){var e=this.uint32();return e>>>1^-(1&e)|0},Reader.prototype.bool=function(){return 0!==this.uint32()},Reader.prototype.fixed32=function(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return readFixed32_end(this.buf,this.pos+=4)},Reader.prototype.sfixed32=function(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);return 0|readFixed32_end(this.buf,this.pos+=4)},Reader.prototype.float=function(){if(this.pos+4>this.len)throw indexOutOfRange(this,4);var e=minimal.float.readFloatLE(this.buf,this.pos);return this.pos+=4,e},Reader.prototype.double=function(){if(this.pos+8>this.len)throw indexOutOfRange(this,4);var e=minimal.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,e},Reader.prototype.bytes=function(){var e=this.uint32(),t=this.pos,r=this.pos+e;if(r>this.len)throw indexOutOfRange(this,e);return this.pos+=e,Array.isArray(this.buf)?this.buf.slice(t,r):t===r?new this.buf.constructor(0):this._slice.call(this.buf,t,r)},Reader.prototype.string=function(){var e=this.bytes();return utf8$1.read(e,0,e.length)},Reader.prototype.skip=function(e){if("number"==typeof e){if(this.pos+e>this.len)throw indexOutOfRange(this,e);this.pos+=e;}else do{if(this.pos>=this.len)throw indexOutOfRange(this)}while(128&this.buf[this.pos++]);return this},Reader.prototype.skipType=function(e){switch(e){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(e=7&this.uint32());)this.skipType(e);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+e+" at offset "+this.pos)}return this},Reader._configure=function(e){BufferReader=e;var t=minimal.Long?"toLong":"toNumber";minimal.merge(Reader.prototype,{int64:function(){return readLongVarint.call(this)[t](!1)},uint64:function(){return readLongVarint.call(this)[t](!0)},sint64:function(){return readLongVarint.call(this).zzDecode()[t](!1)},fixed64:function(){return readFixed64.call(this)[t](!0)},sfixed64:function(){return readFixed64.call(this)[t](!1)}});};var reader_buffer=BufferReader$1;function BufferReader$1(e){reader.call(this,e);}(BufferReader$1.prototype=Object.create(reader.prototype)).constructor=BufferReader$1,minimal.Buffer&&(BufferReader$1.prototype._slice=minimal.Buffer.prototype.slice),BufferReader$1.prototype.string=function(){var e=this.uint32();return this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+e,this.len))};var service=Service;function Service(e,t,r){if("function"!=typeof e)throw TypeError("rpcImpl must be a function");minimal.EventEmitter.call(this),this.rpcImpl=e,this.requestDelimited=Boolean(t),this.responseDelimited=Boolean(r);}(Service.prototype=Object.create(minimal.EventEmitter.prototype)).constructor=Service,Service.prototype.rpcCall=function e(t,r,n,o,i){if(!o)throw TypeError("request must be specified");var s=this;if(!i)return minimal.asPromise(e,s,t,r,n,o);if(s.rpcImpl)try{return s.rpcImpl(t,r[s.requestDelimited?"encodeDelimited":"encode"](o).finish(),function(e,r){if(e)return s.emit("error",e,t),i(e);if(null!==r){if(!(r instanceof n))try{r=n[s.responseDelimited?"decodeDelimited":"decode"](r);}catch(e){return s.emit("error",e,t),i(e)}return s.emit("data",r,t),i(null,r)}s.end(!0);})}catch(e){return s.emit("error",e,t),void setTimeout(function(){i(e);},0)}else setTimeout(function(){i(Error("already ended"));},0);},Service.prototype.end=function(e){return this.rpcImpl&&(e||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this};var rpc_1=createCommonjsModule(function(e,t){t.Service=service;}),roots={},indexMinimal=createCommonjsModule(function(e,t){var r=t;function n(){r.Reader._configure(r.BufferReader),r.util._configure();}r.build="minimal",r.Writer=writer,r.BufferWriter=writer_buffer,r.Reader=reader,r.BufferReader=reader_buffer,r.util=minimal,r.rpc=rpc_1,r.roots=roots,r.configure=n,r.Writer._configure(r.BufferWriter),n();}),indexMinimal_1=indexMinimal.build,indexMinimal_2=indexMinimal.Writer,indexMinimal_3=indexMinimal.BufferWriter,indexMinimal_4=indexMinimal.Reader,indexMinimal_5=indexMinimal.BufferReader,indexMinimal_6=indexMinimal.util,indexMinimal_7=indexMinimal.rpc,indexMinimal_8=indexMinimal.roots,indexMinimal_9=indexMinimal.configure;indexMinimal_6.Long=long_1,indexMinimal_9();var $Reader=indexMinimal_4,$Writer=indexMinimal_2,$util=indexMinimal_6,$root=indexMinimal_8.default||(indexMinimal_8.default={});$root.URI=function(){var e={},t=Object.create(e);return t[e[0]="Unknown"]=0,t[e[1]="PingUri"]=1,t[e[2]="PongUri"]=2,t[e[11]="UserJoinUri"]=11,t[e[12]="UserRespUri"]=12,t[e[21]="UserQuitUri"]=21,t[e[22]="UserDropUri"]=22,t[e[31]="GroupEnterUri"]=31,t[e[32]="GroupLeaveUri"]=32,t[e[33]="GroupReplyUri"]=33,t[e[36]="GroupEnterNoticeUri"]=36,t[e[37]="GroupLeaveNoticeUri"]=37,t[e[38]="GroupEventNoticeUri"]=38,t[e[39]="GroupCountNoticeUri"]=39,t[e[41]="UserStatusListUri"]=41,t[e[42]="UserStatusResultUri"]=42,t[e[51]="GroupStatusListUri"]=51,t[e[52]="GroupStatusResultUri"]=52,t[e[55]="GroupAllUsersListUri"]=55,t[e[56]="GroupAllUsersResultUri"]=56,t[e[100]="MessageUri"]=100,t[e[101]="AckUri"]=101,t[e[201]="UserJoinNoticeUri"]=201,t[e[202]="UserQuitNoticeUri"]=202,t[e[203]="UserWaitNoticeUri"]=203,t[e[301]="UserAttributeGetUri"]=301,t[e[302]="UserAttributeRetUri"]=302,t[e[303]="UserAttributeSetUri"]=303,t[e[304]="UserAttributeModUri"]=304,t[e[305]="UserAttributeDelUri"]=305,t[e[307]="UserAttributeRspUri"]=307,t[e[308]="UserAttributeErrUri"]=308,t[e[311]="UserAttributeKeysGetUri"]=311,t[e[312]="UserAttributeKeysRetUri"]=312,t[e[351]="GroupAttributeGetUri"]=351,t[e[352]="GroupAttributeRetUri"]=352,t[e[353]="GroupAttributeSetUri"]=353,t[e[354]="GroupAttributeModUri"]=354,t[e[355]="GroupAttributeDelUri"]=355,t[e[356]="GroupAttributeAltUri"]=356,t[e[357]="GroupAttributeRspUri"]=357,t[e[358]="GroupAttributeErrUri"]=358,t[e[361]="GroupAttributeKeysGetUri"]=361,t[e[362]="GroupAttributeKeysRetUri"]=362,t[e[401]="SubscribeUserStatusUri"]=401,t[e[402]="UnsubscribeUserStatusUri"]=402,t[e[499]="SubscribeResponseUri"]=499,t}();var Wrapper$1=$root.Wrapper=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.uri=0,e.prototype.data=$util.newBuffer([]),e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.uri&&e.hasOwnProperty("uri")&&t.uint32(8).int32(e.uri),null!=e.data&&e.hasOwnProperty("data")&&t.uint32(18).bytes(e.data),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.Wrapper;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.uri=e.int32();break;case 2:n.data=e.bytes();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.uri&&e.hasOwnProperty("uri"))switch(e.uri){default:return "uri: enum value expected";case 0:case 1:case 2:case 11:case 12:case 21:case 22:case 31:case 32:case 33:case 36:case 37:case 38:case 39:case 41:case 42:case 51:case 52:case 55:case 56:case 100:case 101:case 201:case 202:case 203:case 301:case 302:case 303:case 304:case 305:case 307:case 308:case 311:case 312:case 351:case 352:case 353:case 354:case 355:case 356:case 357:case 358:case 361:case 362:case 401:case 402:case 499:}return null!=e.data&&e.hasOwnProperty("data")&&!(e.data&&"number"==typeof e.data.length||$util.isString(e.data))?"data: buffer expected":null},e.fromObject=function(e){if(e instanceof $root.Wrapper)return e;var t=new $root.Wrapper;switch(e.uri){case"Unknown":case 0:t.uri=0;break;case"PingUri":case 1:t.uri=1;break;case"PongUri":case 2:t.uri=2;break;case"UserJoinUri":case 11:t.uri=11;break;case"UserRespUri":case 12:t.uri=12;break;case"UserQuitUri":case 21:t.uri=21;break;case"UserDropUri":case 22:t.uri=22;break;case"GroupEnterUri":case 31:t.uri=31;break;case"GroupLeaveUri":case 32:t.uri=32;break;case"GroupReplyUri":case 33:t.uri=33;break;case"GroupEnterNoticeUri":case 36:t.uri=36;break;case"GroupLeaveNoticeUri":case 37:t.uri=37;break;case"GroupEventNoticeUri":case 38:t.uri=38;break;case"GroupCountNoticeUri":case 39:t.uri=39;break;case"UserStatusListUri":case 41:t.uri=41;break;case"UserStatusResultUri":case 42:t.uri=42;break;case"GroupStatusListUri":case 51:t.uri=51;break;case"GroupStatusResultUri":case 52:t.uri=52;break;case"GroupAllUsersListUri":case 55:t.uri=55;break;case"GroupAllUsersResultUri":case 56:t.uri=56;break;case"MessageUri":case 100:t.uri=100;break;case"AckUri":case 101:t.uri=101;break;case"UserJoinNoticeUri":case 201:t.uri=201;break;case"UserQuitNoticeUri":case 202:t.uri=202;break;case"UserWaitNoticeUri":case 203:t.uri=203;break;case"UserAttributeGetUri":case 301:t.uri=301;break;case"UserAttributeRetUri":case 302:t.uri=302;break;case"UserAttributeSetUri":case 303:t.uri=303;break;case"UserAttributeModUri":case 304:t.uri=304;break;case"UserAttributeDelUri":case 305:t.uri=305;break;case"UserAttributeRspUri":case 307:t.uri=307;break;case"UserAttributeErrUri":case 308:t.uri=308;break;case"UserAttributeKeysGetUri":case 311:t.uri=311;break;case"UserAttributeKeysRetUri":case 312:t.uri=312;break;case"GroupAttributeGetUri":case 351:t.uri=351;break;case"GroupAttributeRetUri":case 352:t.uri=352;break;case"GroupAttributeSetUri":case 353:t.uri=353;break;case"GroupAttributeModUri":case 354:t.uri=354;break;case"GroupAttributeDelUri":case 355:t.uri=355;break;case"GroupAttributeAltUri":case 356:t.uri=356;break;case"GroupAttributeRspUri":case 357:t.uri=357;break;case"GroupAttributeErrUri":case 358:t.uri=358;break;case"GroupAttributeKeysGetUri":case 361:t.uri=361;break;case"GroupAttributeKeysRetUri":case 362:t.uri=362;break;case"SubscribeUserStatusUri":case 401:t.uri=401;break;case"UnsubscribeUserStatusUri":case 402:t.uri=402;break;case"SubscribeResponseUri":case 499:t.uri=499;}return null!=e.data&&("string"==typeof e.data?$util.base64.decode(e.data,t.data=$util.newBuffer($util.base64.length(e.data)),0):e.data.length&&(t.data=e.data)),t},e.toObject=function(e,t){t||(t={});var r={};return t.defaults&&(r.uri=t.enums===String?"Unknown":0,t.bytes===String?r.data="":(r.data=[],t.bytes!==Array&&(r.data=$util.newBuffer(r.data)))),null!=e.uri&&e.hasOwnProperty("uri")&&(r.uri=t.enums===String?$root.URI[e.uri]:e.uri),null!=e.data&&e.hasOwnProperty("data")&&(r.data=t.bytes===String?$util.base64.encode(e.data,0,e.data.length):t.bytes===Array?Array.prototype.slice.call(e.data):e.data),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),Ping=$root.Ping=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.ms=$util.Long?$util.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.ms&&e.hasOwnProperty("ms")&&t.uint32(16).uint64(e.ms),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.Ping;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.ms=e.uint64();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.ms&&e.hasOwnProperty("ms")&&!($util.isInteger(e.ms)||e.ms&&$util.isInteger(e.ms.low)&&$util.isInteger(e.ms.high))?"ms: integer|Long expected":null},e.fromObject=function(e){if(e instanceof $root.Ping)return e;var t=new $root.Ping;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.ms&&($util.Long?(t.ms=$util.Long.fromValue(e.ms)).unsigned=!0:"string"==typeof e.ms?t.ms=parseInt(e.ms,10):"number"==typeof e.ms?t.ms=e.ms:"object"===_typeof(e.ms)&&(t.ms=new $util.LongBits(e.ms.low>>>0,e.ms.high>>>0).toNumber(!0))),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if($util.Long){var o=new $util.Long(0,0,!0);r.ms=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.ms=t.longs===String?"0":0;}return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.ms&&e.hasOwnProperty("ms")&&("number"==typeof e.ms?r.ms=t.longs===String?String(e.ms):e.ms:r.ms=t.longs===String?$util.Long.prototype.toString.call(e.ms):t.longs===Number?new $util.LongBits(e.ms.low>>>0,e.ms.high>>>0).toNumber(!0):e.ms),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),Pong=$root.Pong=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.ms=$util.Long?$util.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.ms&&e.hasOwnProperty("ms")&&t.uint32(16).uint64(e.ms),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.Pong;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.ms=e.uint64();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.ms&&e.hasOwnProperty("ms")&&!($util.isInteger(e.ms)||e.ms&&$util.isInteger(e.ms.low)&&$util.isInteger(e.ms.high))?"ms: integer|Long expected":null},e.fromObject=function(e){if(e instanceof $root.Pong)return e;var t=new $root.Pong;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.ms&&($util.Long?(t.ms=$util.Long.fromValue(e.ms)).unsigned=!0:"string"==typeof e.ms?t.ms=parseInt(e.ms,10):"number"==typeof e.ms?t.ms=e.ms:"object"===_typeof(e.ms)&&(t.ms=new $util.LongBits(e.ms.low>>>0,e.ms.high>>>0).toNumber(!0))),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if($util.Long){var o=new $util.Long(0,0,!0);r.ms=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.ms=t.longs===String?"0":0;}return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.ms&&e.hasOwnProperty("ms")&&("number"==typeof e.ms?r.ms=t.longs===String?String(e.ms):e.ms:r.ms=t.longs===String?$util.Long.prototype.toString.call(e.ms):t.longs===Number?new $util.LongBits(e.ms.low>>>0,e.ms.high>>>0).toNumber(!0):e.ms),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UserJoin=$root.UserJoin=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.opt=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.instance=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.ticket="",e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.opt&&e.hasOwnProperty("opt")&&t.uint32(16).uint64(e.opt),null!=e.instance&&e.hasOwnProperty("instance")&&t.uint32(24).uint64(e.instance),null!=e.account&&e.hasOwnProperty("account")&&t.uint32(34).string(e.account),null!=e.ticket&&e.hasOwnProperty("ticket")&&t.uint32(42).string(e.ticket),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserJoin;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.opt=e.uint64();break;case 3:n.instance=e.uint64();break;case 4:n.account=e.string();break;case 5:n.ticket=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.opt&&e.hasOwnProperty("opt")&&!($util.isInteger(e.opt)||e.opt&&$util.isInteger(e.opt.low)&&$util.isInteger(e.opt.high))?"opt: integer|Long expected":null!=e.instance&&e.hasOwnProperty("instance")&&!($util.isInteger(e.instance)||e.instance&&$util.isInteger(e.instance.low)&&$util.isInteger(e.instance.high))?"instance: integer|Long expected":null!=e.account&&e.hasOwnProperty("account")&&!$util.isString(e.account)?"account: string expected":null!=e.ticket&&e.hasOwnProperty("ticket")&&!$util.isString(e.ticket)?"ticket: string expected":null},e.fromObject=function(e){if(e instanceof $root.UserJoin)return e;var t=new $root.UserJoin;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.opt&&($util.Long?(t.opt=$util.Long.fromValue(e.opt)).unsigned=!0:"string"==typeof e.opt?t.opt=parseInt(e.opt,10):"number"==typeof e.opt?t.opt=e.opt:"object"===_typeof(e.opt)&&(t.opt=new $util.LongBits(e.opt.low>>>0,e.opt.high>>>0).toNumber(!0))),null!=e.instance&&($util.Long?(t.instance=$util.Long.fromValue(e.instance)).unsigned=!0:"string"==typeof e.instance?t.instance=parseInt(e.instance,10):"number"==typeof e.instance?t.instance=e.instance:"object"===_typeof(e.instance)&&(t.instance=new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0))),null!=e.account&&(t.account=String(e.account)),null!=e.ticket&&(t.ticket=String(e.ticket)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if($util.Long){var o=new $util.Long(0,0,!0);r.opt=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.opt=t.longs===String?"0":0;if($util.Long){var i=new $util.Long(0,0,!0);r.instance=t.longs===String?i.toString():t.longs===Number?i.toNumber():i;}else r.instance=t.longs===String?"0":0;r.account="",r.ticket="";}return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.opt&&e.hasOwnProperty("opt")&&("number"==typeof e.opt?r.opt=t.longs===String?String(e.opt):e.opt:r.opt=t.longs===String?$util.Long.prototype.toString.call(e.opt):t.longs===Number?new $util.LongBits(e.opt.low>>>0,e.opt.high>>>0).toNumber(!0):e.opt),null!=e.instance&&e.hasOwnProperty("instance")&&("number"==typeof e.instance?r.instance=t.longs===String?String(e.instance):e.instance:r.instance=t.longs===String?$util.Long.prototype.toString.call(e.instance):t.longs===Number?new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0):e.instance),null!=e.account&&e.hasOwnProperty("account")&&(r.account=e.account),null!=e.ticket&&e.hasOwnProperty("ticket")&&(r.ticket=e.ticket),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UserResp=$root.UserResp=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.code=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&e.hasOwnProperty("account")&&t.uint32(18).string(e.account),null!=e.code&&e.hasOwnProperty("code")&&t.uint32(24).uint32(e.code),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserResp;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.account=e.string();break;case 3:n.code=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.account&&e.hasOwnProperty("account")&&!$util.isString(e.account)?"account: string expected":null!=e.code&&e.hasOwnProperty("code")&&!$util.isInteger(e.code)?"code: integer expected":null},e.fromObject=function(e){if(e instanceof $root.UserResp)return e;var t=new $root.UserResp;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.account&&(t.account=String(e.account)),null!=e.code&&(t.code=e.code>>>0),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.account="",r.code=0;}return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.account&&e.hasOwnProperty("account")&&(r.account=e.account),null!=e.code&&e.hasOwnProperty("code")&&(r.code=e.code),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UserQuit=$root.UserQuit=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.encode=function(e,t){return t||(t=$Writer.create()),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserQuit;e.pos<r;){var o=e.uint32();e.skipType(7&o);}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null},e.fromObject=function(e){return e instanceof $root.UserQuit?e:new $root.UserQuit},e.toObject=function(){return {}},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UserDrop=$root.UserDrop=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.code=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.code&&e.hasOwnProperty("code")&&t.uint32(8).uint32(e.code),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserDrop;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.code=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.code&&e.hasOwnProperty("code")&&!$util.isInteger(e.code)?"code: integer expected":null},e.fromObject=function(e){if(e instanceof $root.UserDrop)return e;var t=new $root.UserDrop;return null!=e.code&&(t.code=e.code>>>0),t},e.toObject=function(e,t){t||(t={});var r={};return t.defaults&&(r.code=0),null!=e.code&&e.hasOwnProperty("code")&&(r.code=e.code),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupEnter=$root.GroupEnter=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.account="",e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&e.hasOwnProperty("account")&&t.uint32(18).string(e.account),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupEnter;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.account=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.account&&e.hasOwnProperty("account")&&!$util.isString(e.account)?"account: string expected":null},e.fromObject=function(e){if(e instanceof $root.GroupEnter)return e;var t=new $root.GroupEnter;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.account&&(t.account=String(e.account)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.account="";}return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.account&&e.hasOwnProperty("account")&&(r.account=e.account),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupLeave=$root.GroupLeave=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.account="",e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.account&&e.hasOwnProperty("account")&&t.uint32(10).string(e.account),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupLeave;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.account=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.account&&e.hasOwnProperty("account")&&!$util.isString(e.account)?"account: string expected":null},e.fromObject=function(e){if(e instanceof $root.GroupLeave)return e;var t=new $root.GroupLeave;return null!=e.account&&(t.account=String(e.account)),t},e.toObject=function(e,t){t||(t={});var r={};return t.defaults&&(r.account=""),null!=e.account&&e.hasOwnProperty("account")&&(r.account=e.account),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupReply=$root.GroupReply=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.code=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&e.hasOwnProperty("account")&&t.uint32(18).string(e.account),null!=e.code&&e.hasOwnProperty("code")&&t.uint32(24).uint32(e.code),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupReply;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.account=e.string();break;case 3:n.code=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.account&&e.hasOwnProperty("account")&&!$util.isString(e.account)?"account: string expected":null!=e.code&&e.hasOwnProperty("code")&&!$util.isInteger(e.code)?"code: integer expected":null},e.fromObject=function(e){if(e instanceof $root.GroupReply)return e;var t=new $root.GroupReply;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.account&&(t.account=String(e.account)),null!=e.code&&(t.code=e.code>>>0),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.account="",r.code=0;}return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.account&&e.hasOwnProperty("account")&&(r.account=e.account),null!=e.code&&e.hasOwnProperty("code")&&(r.code=e.code),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupLeaveNotice=$root.GroupLeaveNotice=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.user="",e.prototype.group="",e.prototype.instance=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.size=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.user&&e.hasOwnProperty("user")&&t.uint32(18).string(e.user),null!=e.group&&e.hasOwnProperty("group")&&t.uint32(26).string(e.group),null!=e.instance&&e.hasOwnProperty("instance")&&t.uint32(32).uint64(e.instance),null!=e.size&&e.hasOwnProperty("size")&&t.uint32(40).uint32(e.size),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupLeaveNotice;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.user=e.string();break;case 3:n.group=e.string();break;case 4:n.instance=e.uint64();break;case 5:n.size=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.user&&e.hasOwnProperty("user")&&!$util.isString(e.user)?"user: string expected":null!=e.group&&e.hasOwnProperty("group")&&!$util.isString(e.group)?"group: string expected":null!=e.instance&&e.hasOwnProperty("instance")&&!($util.isInteger(e.instance)||e.instance&&$util.isInteger(e.instance.low)&&$util.isInteger(e.instance.high))?"instance: integer|Long expected":null!=e.size&&e.hasOwnProperty("size")&&!$util.isInteger(e.size)?"size: integer expected":null},e.fromObject=function(e){if(e instanceof $root.GroupLeaveNotice)return e;var t=new $root.GroupLeaveNotice;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.user&&(t.user=String(e.user)),null!=e.group&&(t.group=String(e.group)),null!=e.instance&&($util.Long?(t.instance=$util.Long.fromValue(e.instance)).unsigned=!0:"string"==typeof e.instance?t.instance=parseInt(e.instance,10):"number"==typeof e.instance?t.instance=e.instance:"object"===_typeof(e.instance)&&(t.instance=new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0))),null!=e.size&&(t.size=e.size>>>0),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(r.user="",r.group="",$util.Long){var o=new $util.Long(0,0,!0);r.instance=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.instance=t.longs===String?"0":0;r.size=0;}return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.user&&e.hasOwnProperty("user")&&(r.user=e.user),null!=e.group&&e.hasOwnProperty("group")&&(r.group=e.group),null!=e.instance&&e.hasOwnProperty("instance")&&("number"==typeof e.instance?r.instance=t.longs===String?String(e.instance):e.instance:r.instance=t.longs===String?$util.Long.prototype.toString.call(e.instance):t.longs===Number?new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0):e.instance),null!=e.size&&e.hasOwnProperty("size")&&(r.size=e.size),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupEnterNotice=$root.GroupEnterNotice=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.user="",e.prototype.group="",e.prototype.instance=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.size=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.user&&e.hasOwnProperty("user")&&t.uint32(18).string(e.user),null!=e.group&&e.hasOwnProperty("group")&&t.uint32(26).string(e.group),null!=e.instance&&e.hasOwnProperty("instance")&&t.uint32(32).uint64(e.instance),null!=e.size&&e.hasOwnProperty("size")&&t.uint32(40).uint32(e.size),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupEnterNotice;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.user=e.string();break;case 3:n.group=e.string();break;case 4:n.instance=e.uint64();break;case 5:n.size=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.user&&e.hasOwnProperty("user")&&!$util.isString(e.user)?"user: string expected":null!=e.group&&e.hasOwnProperty("group")&&!$util.isString(e.group)?"group: string expected":null!=e.instance&&e.hasOwnProperty("instance")&&!($util.isInteger(e.instance)||e.instance&&$util.isInteger(e.instance.low)&&$util.isInteger(e.instance.high))?"instance: integer|Long expected":null!=e.size&&e.hasOwnProperty("size")&&!$util.isInteger(e.size)?"size: integer expected":null},e.fromObject=function(e){if(e instanceof $root.GroupEnterNotice)return e;var t=new $root.GroupEnterNotice;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.user&&(t.user=String(e.user)),null!=e.group&&(t.group=String(e.group)),null!=e.instance&&($util.Long?(t.instance=$util.Long.fromValue(e.instance)).unsigned=!0:"string"==typeof e.instance?t.instance=parseInt(e.instance,10):"number"==typeof e.instance?t.instance=e.instance:"object"===_typeof(e.instance)&&(t.instance=new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0))),null!=e.size&&(t.size=e.size>>>0),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(r.user="",r.group="",$util.Long){var o=new $util.Long(0,0,!0);r.instance=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.instance=t.longs===String?"0":0;r.size=0;}return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.user&&e.hasOwnProperty("user")&&(r.user=e.user),null!=e.group&&e.hasOwnProperty("group")&&(r.group=e.group),null!=e.instance&&e.hasOwnProperty("instance")&&("number"==typeof e.instance?r.instance=t.longs===String?String(e.instance):e.instance:r.instance=t.longs===String?$util.Long.prototype.toString.call(e.instance):t.longs===Number?new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0):e.instance),null!=e.size&&e.hasOwnProperty("size")&&(r.size=e.size),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),Message=$root.Message=function(){function e(e){if(this.MiscMap={},e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.instance=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.dialogue=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.sequence=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.options=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.src="",e.prototype.dst="",e.prototype.payload=$util.newBuffer([]),e.prototype.MiscMap=$util.emptyObject,e.prototype.ms=$util.Long?$util.Long.fromBits(0,0,!0):0,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.instance&&e.hasOwnProperty("instance")&&t.uint32(8).uint64(e.instance),null!=e.dialogue&&e.hasOwnProperty("dialogue")&&t.uint32(16).uint64(e.dialogue),null!=e.sequence&&e.hasOwnProperty("sequence")&&t.uint32(24).uint64(e.sequence),null!=e.options&&e.hasOwnProperty("options")&&t.uint32(32).uint64(e.options),null!=e.src&&e.hasOwnProperty("src")&&t.uint32(42).string(e.src),null!=e.dst&&e.hasOwnProperty("dst")&&t.uint32(50).string(e.dst),null!=e.payload&&e.hasOwnProperty("payload")&&t.uint32(58).bytes(e.payload),null!=e.MiscMap&&e.hasOwnProperty("MiscMap"))for(var r=Object.keys(e.MiscMap),n=0;n<r.length;++n)t.uint32(66).fork().uint32(10).string(r[n]).uint32(18).string(e.MiscMap[r[n]]).ldelim();return null!=e.ms&&e.hasOwnProperty("ms")&&t.uint32(72).uint64(e.ms),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r,n=void 0===t?e.len:e.pos+t,o=new $root.Message;e.pos<n;){var i=e.uint32();switch(i>>>3){case 1:o.instance=e.uint64();break;case 2:o.dialogue=e.uint64();break;case 3:o.sequence=e.uint64();break;case 4:o.options=e.uint64();break;case 5:o.src=e.string();break;case 6:o.dst=e.string();break;case 7:o.payload=e.bytes();break;case 8:e.skip().pos++,o.MiscMap===$util.emptyObject&&(o.MiscMap={}),r=e.string(),e.pos++,o.MiscMap[r]=e.string();break;case 9:o.ms=e.uint64();break;default:e.skipType(7&i);}}return o},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.instance&&e.hasOwnProperty("instance")&&!($util.isInteger(e.instance)||e.instance&&$util.isInteger(e.instance.low)&&$util.isInteger(e.instance.high)))return "instance: integer|Long expected";if(null!=e.dialogue&&e.hasOwnProperty("dialogue")&&!($util.isInteger(e.dialogue)||e.dialogue&&$util.isInteger(e.dialogue.low)&&$util.isInteger(e.dialogue.high)))return "dialogue: integer|Long expected";if(null!=e.sequence&&e.hasOwnProperty("sequence")&&!($util.isInteger(e.sequence)||e.sequence&&$util.isInteger(e.sequence.low)&&$util.isInteger(e.sequence.high)))return "sequence: integer|Long expected";if(null!=e.options&&e.hasOwnProperty("options")&&!($util.isInteger(e.options)||e.options&&$util.isInteger(e.options.low)&&$util.isInteger(e.options.high)))return "options: integer|Long expected";if(null!=e.src&&e.hasOwnProperty("src")&&!$util.isString(e.src))return "src: string expected";if(null!=e.dst&&e.hasOwnProperty("dst")&&!$util.isString(e.dst))return "dst: string expected";if(null!=e.payload&&e.hasOwnProperty("payload")&&!(e.payload&&"number"==typeof e.payload.length||$util.isString(e.payload)))return "payload: buffer expected";if(null!=e.MiscMap&&e.hasOwnProperty("MiscMap")){if(!$util.isObject(e.MiscMap))return "MiscMap: object expected";for(var t=Object.keys(e.MiscMap),r=0;r<t.length;++r)if(!$util.isString(e.MiscMap[t[r]]))return "MiscMap: string{k:string} expected"}return null!=e.ms&&e.hasOwnProperty("ms")&&!($util.isInteger(e.ms)||e.ms&&$util.isInteger(e.ms.low)&&$util.isInteger(e.ms.high))?"ms: integer|Long expected":null},e.fromObject=function(e){if(e instanceof $root.Message)return e;var t=new $root.Message;if(null!=e.instance&&($util.Long?(t.instance=$util.Long.fromValue(e.instance)).unsigned=!0:"string"==typeof e.instance?t.instance=parseInt(e.instance,10):"number"==typeof e.instance?t.instance=e.instance:"object"===_typeof(e.instance)&&(t.instance=new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0))),null!=e.dialogue&&($util.Long?(t.dialogue=$util.Long.fromValue(e.dialogue)).unsigned=!0:"string"==typeof e.dialogue?t.dialogue=parseInt(e.dialogue,10):"number"==typeof e.dialogue?t.dialogue=e.dialogue:"object"===_typeof(e.dialogue)&&(t.dialogue=new $util.LongBits(e.dialogue.low>>>0,e.dialogue.high>>>0).toNumber(!0))),null!=e.sequence&&($util.Long?(t.sequence=$util.Long.fromValue(e.sequence)).unsigned=!0:"string"==typeof e.sequence?t.sequence=parseInt(e.sequence,10):"number"==typeof e.sequence?t.sequence=e.sequence:"object"===_typeof(e.sequence)&&(t.sequence=new $util.LongBits(e.sequence.low>>>0,e.sequence.high>>>0).toNumber(!0))),null!=e.options&&($util.Long?(t.options=$util.Long.fromValue(e.options)).unsigned=!0:"string"==typeof e.options?t.options=parseInt(e.options,10):"number"==typeof e.options?t.options=e.options:"object"===_typeof(e.options)&&(t.options=new $util.LongBits(e.options.low>>>0,e.options.high>>>0).toNumber(!0))),null!=e.src&&(t.src=String(e.src)),null!=e.dst&&(t.dst=String(e.dst)),null!=e.payload&&("string"==typeof e.payload?$util.base64.decode(e.payload,t.payload=$util.newBuffer($util.base64.length(e.payload)),0):e.payload.length&&(t.payload=e.payload)),e.MiscMap){if("object"!==_typeof(e.MiscMap))throw TypeError(".Message.MiscMap: object expected");t.MiscMap={};for(var r=Object.keys(e.MiscMap),n=0;n<r.length;++n)t.MiscMap[r[n]]=String(e.MiscMap[r[n]]);}return null!=e.ms&&($util.Long?(t.ms=$util.Long.fromValue(e.ms)).unsigned=!0:"string"==typeof e.ms?t.ms=parseInt(e.ms,10):"number"==typeof e.ms?t.ms=e.ms:"object"===_typeof(e.ms)&&(t.ms=new $util.LongBits(e.ms.low>>>0,e.ms.high>>>0).toNumber(!0))),t},e.toObject=function(e,t){t||(t={});var r,n={};if((t.objects||t.defaults)&&(n.MiscMap={}),t.defaults){if($util.Long){var o=new $util.Long(0,0,!0);n.instance=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else n.instance=t.longs===String?"0":0;if($util.Long){var i=new $util.Long(0,0,!0);n.dialogue=t.longs===String?i.toString():t.longs===Number?i.toNumber():i;}else n.dialogue=t.longs===String?"0":0;if($util.Long){var s=new $util.Long(0,0,!0);n.sequence=t.longs===String?s.toString():t.longs===Number?s.toNumber():s;}else n.sequence=t.longs===String?"0":0;if($util.Long){var a=new $util.Long(0,0,!0);n.options=t.longs===String?a.toString():t.longs===Number?a.toNumber():a;}else n.options=t.longs===String?"0":0;if(n.src="",n.dst="",t.bytes===String?n.payload="":(n.payload=[],t.bytes!==Array&&(n.payload=$util.newBuffer(n.payload))),$util.Long){var u=new $util.Long(0,0,!0);n.ms=t.longs===String?u.toString():t.longs===Number?u.toNumber():u;}else n.ms=t.longs===String?"0":0;}if(null!=e.instance&&e.hasOwnProperty("instance")&&("number"==typeof e.instance?n.instance=t.longs===String?String(e.instance):e.instance:n.instance=t.longs===String?$util.Long.prototype.toString.call(e.instance):t.longs===Number?new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0):e.instance),null!=e.dialogue&&e.hasOwnProperty("dialogue")&&("number"==typeof e.dialogue?n.dialogue=t.longs===String?String(e.dialogue):e.dialogue:n.dialogue=t.longs===String?$util.Long.prototype.toString.call(e.dialogue):t.longs===Number?new $util.LongBits(e.dialogue.low>>>0,e.dialogue.high>>>0).toNumber(!0):e.dialogue),null!=e.sequence&&e.hasOwnProperty("sequence")&&("number"==typeof e.sequence?n.sequence=t.longs===String?String(e.sequence):e.sequence:n.sequence=t.longs===String?$util.Long.prototype.toString.call(e.sequence):t.longs===Number?new $util.LongBits(e.sequence.low>>>0,e.sequence.high>>>0).toNumber(!0):e.sequence),null!=e.options&&e.hasOwnProperty("options")&&("number"==typeof e.options?n.options=t.longs===String?String(e.options):e.options:n.options=t.longs===String?$util.Long.prototype.toString.call(e.options):t.longs===Number?new $util.LongBits(e.options.low>>>0,e.options.high>>>0).toNumber(!0):e.options),null!=e.src&&e.hasOwnProperty("src")&&(n.src=e.src),null!=e.dst&&e.hasOwnProperty("dst")&&(n.dst=e.dst),null!=e.payload&&e.hasOwnProperty("payload")&&(n.payload=t.bytes===String?$util.base64.encode(e.payload,0,e.payload.length):t.bytes===Array?Array.prototype.slice.call(e.payload):e.payload),e.MiscMap&&(r=Object.keys(e.MiscMap)).length){n.MiscMap={};for(var l=0;l<r.length;++l)n.MiscMap[r[l]]=e.MiscMap[r[l]];}return null!=e.ms&&e.hasOwnProperty("ms")&&("number"==typeof e.ms?n.ms=t.longs===String?String(e.ms):e.ms:n.ms=t.longs===String?$util.Long.prototype.toString.call(e.ms):t.longs===Number?new $util.LongBits(e.ms.low>>>0,e.ms.high>>>0).toNumber(!0):e.ms),n},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),Ack=$root.Ack=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.instance=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.dialogue=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.sequence=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.code=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.instance&&e.hasOwnProperty("instance")&&t.uint32(8).uint64(e.instance),null!=e.dialogue&&e.hasOwnProperty("dialogue")&&t.uint32(16).uint64(e.dialogue),null!=e.sequence&&e.hasOwnProperty("sequence")&&t.uint32(24).uint64(e.sequence),null!=e.code&&e.hasOwnProperty("code")&&t.uint32(32).uint32(e.code),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.Ack;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.instance=e.uint64();break;case 2:n.dialogue=e.uint64();break;case 3:n.sequence=e.uint64();break;case 4:n.code=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.instance&&e.hasOwnProperty("instance")&&!($util.isInteger(e.instance)||e.instance&&$util.isInteger(e.instance.low)&&$util.isInteger(e.instance.high))?"instance: integer|Long expected":null!=e.dialogue&&e.hasOwnProperty("dialogue")&&!($util.isInteger(e.dialogue)||e.dialogue&&$util.isInteger(e.dialogue.low)&&$util.isInteger(e.dialogue.high))?"dialogue: integer|Long expected":null!=e.sequence&&e.hasOwnProperty("sequence")&&!($util.isInteger(e.sequence)||e.sequence&&$util.isInteger(e.sequence.low)&&$util.isInteger(e.sequence.high))?"sequence: integer|Long expected":null!=e.code&&e.hasOwnProperty("code")&&!$util.isInteger(e.code)?"code: integer expected":null},e.fromObject=function(e){if(e instanceof $root.Ack)return e;var t=new $root.Ack;return null!=e.instance&&($util.Long?(t.instance=$util.Long.fromValue(e.instance)).unsigned=!0:"string"==typeof e.instance?t.instance=parseInt(e.instance,10):"number"==typeof e.instance?t.instance=e.instance:"object"===_typeof(e.instance)&&(t.instance=new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0))),null!=e.dialogue&&($util.Long?(t.dialogue=$util.Long.fromValue(e.dialogue)).unsigned=!0:"string"==typeof e.dialogue?t.dialogue=parseInt(e.dialogue,10):"number"==typeof e.dialogue?t.dialogue=e.dialogue:"object"===_typeof(e.dialogue)&&(t.dialogue=new $util.LongBits(e.dialogue.low>>>0,e.dialogue.high>>>0).toNumber(!0))),null!=e.sequence&&($util.Long?(t.sequence=$util.Long.fromValue(e.sequence)).unsigned=!0:"string"==typeof e.sequence?t.sequence=parseInt(e.sequence,10):"number"==typeof e.sequence?t.sequence=e.sequence:"object"===_typeof(e.sequence)&&(t.sequence=new $util.LongBits(e.sequence.low>>>0,e.sequence.high>>>0).toNumber(!0))),null!=e.code&&(t.code=e.code>>>0),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.instance=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.instance=t.longs===String?"0":0;if($util.Long){var o=new $util.Long(0,0,!0);r.dialogue=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.dialogue=t.longs===String?"0":0;if($util.Long){var i=new $util.Long(0,0,!0);r.sequence=t.longs===String?i.toString():t.longs===Number?i.toNumber():i;}else r.sequence=t.longs===String?"0":0;r.code=0;}return null!=e.instance&&e.hasOwnProperty("instance")&&("number"==typeof e.instance?r.instance=t.longs===String?String(e.instance):e.instance:r.instance=t.longs===String?$util.Long.prototype.toString.call(e.instance):t.longs===Number?new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0):e.instance),null!=e.dialogue&&e.hasOwnProperty("dialogue")&&("number"==typeof e.dialogue?r.dialogue=t.longs===String?String(e.dialogue):e.dialogue:r.dialogue=t.longs===String?$util.Long.prototype.toString.call(e.dialogue):t.longs===Number?new $util.LongBits(e.dialogue.low>>>0,e.dialogue.high>>>0).toNumber(!0):e.dialogue),null!=e.sequence&&e.hasOwnProperty("sequence")&&("number"==typeof e.sequence?r.sequence=t.longs===String?String(e.sequence):e.sequence:r.sequence=t.longs===String?$util.Long.prototype.toString.call(e.sequence):t.longs===Number?new $util.LongBits(e.sequence.low>>>0,e.sequence.high>>>0).toNumber(!0):e.sequence),null!=e.code&&e.hasOwnProperty("code")&&(r.code=e.code),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupAllUsersList=$root.GroupAllUsersList=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.pageSize=0,e.prototype.pageNumber=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.group&&e.hasOwnProperty("group")&&t.uint32(18).string(e.group),null!=e.pageSize&&e.hasOwnProperty("pageSize")&&t.uint32(24).uint32(e.pageSize),null!=e.pageNumber&&e.hasOwnProperty("pageNumber")&&t.uint32(32).uint32(e.pageNumber),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAllUsersList;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.group=e.string();break;case 3:n.pageSize=e.uint32();break;case 4:n.pageNumber=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.group&&e.hasOwnProperty("group")&&!$util.isString(e.group)?"group: string expected":null!=e.pageSize&&e.hasOwnProperty("pageSize")&&!$util.isInteger(e.pageSize)?"pageSize: integer expected":null!=e.pageNumber&&e.hasOwnProperty("pageNumber")&&!$util.isInteger(e.pageNumber)?"pageNumber: integer expected":null},e.fromObject=function(e){if(e instanceof $root.GroupAllUsersList)return e;var t=new $root.GroupAllUsersList;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.group&&(t.group=String(e.group)),null!=e.pageSize&&(t.pageSize=e.pageSize>>>0),null!=e.pageNumber&&(t.pageNumber=e.pageNumber>>>0),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.group="",r.pageSize=0,r.pageNumber=0;}return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.group&&e.hasOwnProperty("group")&&(r.group=e.group),null!=e.pageSize&&e.hasOwnProperty("pageSize")&&(r.pageSize=e.pageSize),null!=e.pageNumber&&e.hasOwnProperty("pageNumber")&&(r.pageNumber=e.pageNumber),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupAllUsersResult=$root.GroupAllUsersResult=function(){function e(e){if(this.memberInfos=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.totalSize=0,e.prototype.pageSize=0,e.prototype.pageNumber=0,e.prototype.memberInfos=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.group&&e.hasOwnProperty("group")&&t.uint32(18).string(e.group),null!=e.totalSize&&e.hasOwnProperty("totalSize")&&t.uint32(24).uint32(e.totalSize),null!=e.pageSize&&e.hasOwnProperty("pageSize")&&t.uint32(32).uint32(e.pageSize),null!=e.pageNumber&&e.hasOwnProperty("pageNumber")&&t.uint32(40).uint32(e.pageNumber),null!=e.memberInfos&&e.memberInfos.length)for(var r=0;r<e.memberInfos.length;++r)$root.GroupAllUsersResult.MemberInfo.encode(e.memberInfos[r],t.uint32(50).fork()).ldelim();return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAllUsersResult;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.group=e.string();break;case 3:n.totalSize=e.uint32();break;case 4:n.pageSize=e.uint32();break;case 5:n.pageNumber=e.uint32();break;case 6:n.memberInfos&&n.memberInfos.length||(n.memberInfos=[]),n.memberInfos.push($root.GroupAllUsersResult.MemberInfo.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.group&&e.hasOwnProperty("group")&&!$util.isString(e.group))return "group: string expected";if(null!=e.totalSize&&e.hasOwnProperty("totalSize")&&!$util.isInteger(e.totalSize))return "totalSize: integer expected";if(null!=e.pageSize&&e.hasOwnProperty("pageSize")&&!$util.isInteger(e.pageSize))return "pageSize: integer expected";if(null!=e.pageNumber&&e.hasOwnProperty("pageNumber")&&!$util.isInteger(e.pageNumber))return "pageNumber: integer expected";if(null!=e.memberInfos&&e.hasOwnProperty("memberInfos")){if(!Array.isArray(e.memberInfos))return "memberInfos: array expected";for(var t=0;t<e.memberInfos.length;++t){var r=$root.GroupAllUsersResult.MemberInfo.verify(e.memberInfos[t]);if(r)return "memberInfos."+r}}return null},e.fromObject=function(e){if(e instanceof $root.GroupAllUsersResult)return e;var t=new $root.GroupAllUsersResult;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.group&&(t.group=String(e.group)),null!=e.totalSize&&(t.totalSize=e.totalSize>>>0),null!=e.pageSize&&(t.pageSize=e.pageSize>>>0),null!=e.pageNumber&&(t.pageNumber=e.pageNumber>>>0),e.memberInfos){if(!Array.isArray(e.memberInfos))throw TypeError(".GroupAllUsersResult.memberInfos: array expected");t.memberInfos=[];for(var r=0;r<e.memberInfos.length;++r){if("object"!==_typeof(e.memberInfos[r]))throw TypeError(".GroupAllUsersResult.memberInfos: object expected");t.memberInfos[r]=$root.GroupAllUsersResult.MemberInfo.fromObject(e.memberInfos[r]);}}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.memberInfos=[]),t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.group="",r.totalSize=0,r.pageSize=0,r.pageNumber=0;}if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.group&&e.hasOwnProperty("group")&&(r.group=e.group),null!=e.totalSize&&e.hasOwnProperty("totalSize")&&(r.totalSize=e.totalSize),null!=e.pageSize&&e.hasOwnProperty("pageSize")&&(r.pageSize=e.pageSize),null!=e.pageNumber&&e.hasOwnProperty("pageNumber")&&(r.pageNumber=e.pageNumber),e.memberInfos&&e.memberInfos.length){r.memberInfos=[];for(var o=0;o<e.memberInfos.length;++o)r.memberInfos[o]=$root.GroupAllUsersResult.MemberInfo.toObject(e.memberInfos[o],t);}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e.MemberInfo=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.account="",e.prototype.ts=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.account&&e.hasOwnProperty("account")&&t.uint32(10).string(e.account),null!=e.ts&&e.hasOwnProperty("ts")&&t.uint32(16).uint32(e.ts),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAllUsersResult.MemberInfo;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.account=e.string();break;case 2:n.ts=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.account&&e.hasOwnProperty("account")&&!$util.isString(e.account)?"account: string expected":null!=e.ts&&e.hasOwnProperty("ts")&&!$util.isInteger(e.ts)?"ts: integer expected":null},e.fromObject=function(e){if(e instanceof $root.GroupAllUsersResult.MemberInfo)return e;var t=new $root.GroupAllUsersResult.MemberInfo;return null!=e.account&&(t.account=String(e.account)),null!=e.ts&&(t.ts=e.ts>>>0),t},e.toObject=function(e,t){t||(t={});var r={};return t.defaults&&(r.account="",r.ts=0),null!=e.account&&e.hasOwnProperty("account")&&(r.account=e.account),null!=e.ts&&e.hasOwnProperty("ts")&&(r.ts=e.ts),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),e}(),UserStatusList=$root.UserStatusList=function(){function e(e){if(this.users=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.users=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.users&&e.users.length)for(var r=0;r<e.users.length;++r)t.uint32(18).string(e.users[r]);return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserStatusList;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.users&&n.users.length||(n.users=[]),n.users.push(e.string());break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.users&&e.hasOwnProperty("users")){if(!Array.isArray(e.users))return "users: array expected";for(var t=0;t<e.users.length;++t)if(!$util.isString(e.users[t]))return "users: string[] expected"}return null},e.fromObject=function(e){if(e instanceof $root.UserStatusList)return e;var t=new $root.UserStatusList;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),e.users){if(!Array.isArray(e.users))throw TypeError(".UserStatusList.users: array expected");t.users=[];for(var r=0;r<e.users.length;++r)t.users[r]=String(e.users[r]);}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.users=[]),t.defaults)if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),e.users&&e.users.length){r.users=[];for(var o=0;o<e.users.length;++o)r.users[o]=e.users[o];}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UserStatusResult=$root.UserStatusResult=function(){function e(e){if(this.userInfos=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.userInfos=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.userInfos&&e.userInfos.length)for(var r=0;r<e.userInfos.length;++r)$root.UserStatusResult.UserStatusInfo.encode(e.userInfos[r],t.uint32(18).fork()).ldelim();return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserStatusResult;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.userInfos&&n.userInfos.length||(n.userInfos=[]),n.userInfos.push($root.UserStatusResult.UserStatusInfo.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.userInfos&&e.hasOwnProperty("userInfos")){if(!Array.isArray(e.userInfos))return "userInfos: array expected";for(var t=0;t<e.userInfos.length;++t){var r=$root.UserStatusResult.UserStatusInfo.verify(e.userInfos[t]);if(r)return "userInfos."+r}}return null},e.fromObject=function(e){if(e instanceof $root.UserStatusResult)return e;var t=new $root.UserStatusResult;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),e.userInfos){if(!Array.isArray(e.userInfos))throw TypeError(".UserStatusResult.userInfos: array expected");t.userInfos=[];for(var r=0;r<e.userInfos.length;++r){if("object"!==_typeof(e.userInfos[r]))throw TypeError(".UserStatusResult.userInfos: object expected");t.userInfos[r]=$root.UserStatusResult.UserStatusInfo.fromObject(e.userInfos[r]);}}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.userInfos=[]),t.defaults)if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),e.userInfos&&e.userInfos.length){r.userInfos=[];for(var o=0;o<e.userInfos.length;++o)r.userInfos[o]=$root.UserStatusResult.UserStatusInfo.toObject(e.userInfos[o],t);}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e.UserStatusInfo=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.account="",e.prototype.ts=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.account&&e.hasOwnProperty("account")&&t.uint32(10).string(e.account),null!=e.ts&&e.hasOwnProperty("ts")&&t.uint32(16).uint32(e.ts),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserStatusResult.UserStatusInfo;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.account=e.string();break;case 2:n.ts=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.account&&e.hasOwnProperty("account")&&!$util.isString(e.account)?"account: string expected":null!=e.ts&&e.hasOwnProperty("ts")&&!$util.isInteger(e.ts)?"ts: integer expected":null},e.fromObject=function(e){if(e instanceof $root.UserStatusResult.UserStatusInfo)return e;var t=new $root.UserStatusResult.UserStatusInfo;return null!=e.account&&(t.account=String(e.account)),null!=e.ts&&(t.ts=e.ts>>>0),t},e.toObject=function(e,t){t||(t={});var r={};return t.defaults&&(r.account="",r.ts=0),null!=e.account&&e.hasOwnProperty("account")&&(r.account=e.account),null!=e.ts&&e.hasOwnProperty("ts")&&(r.ts=e.ts),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),e}(),UserAttributeGet=$root.UserAttributeGet=function(){function e(e){if(this.attributes=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.attributes=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&e.hasOwnProperty("account")&&t.uint32(18).string(e.account),null!=e.attributes&&e.attributes.length)for(var r=0;r<e.attributes.length;++r)t.uint32(26).string(e.attributes[r]);return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserAttributeGet;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.account=e.string();break;case 3:n.attributes&&n.attributes.length||(n.attributes=[]),n.attributes.push(e.string());break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.account&&e.hasOwnProperty("account")&&!$util.isString(e.account))return "account: string expected";if(null!=e.attributes&&e.hasOwnProperty("attributes")){if(!Array.isArray(e.attributes))return "attributes: array expected";for(var t=0;t<e.attributes.length;++t)if(!$util.isString(e.attributes[t]))return "attributes: string[] expected"}return null},e.fromObject=function(e){if(e instanceof $root.UserAttributeGet)return e;var t=new $root.UserAttributeGet;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.account&&(t.account=String(e.account)),e.attributes){if(!Array.isArray(e.attributes))throw TypeError(".UserAttributeGet.attributes: array expected");t.attributes=[];for(var r=0;r<e.attributes.length;++r)t.attributes[r]=String(e.attributes[r]);}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.attributes=[]),t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.account="";}if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.account&&e.hasOwnProperty("account")&&(r.account=e.account),e.attributes&&e.attributes.length){r.attributes=[];for(var o=0;o<e.attributes.length;++o)r.attributes[o]=e.attributes[o];}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UserAttributeRet=$root.UserAttributeRet=function(){function e(e){if(this.attributeInfos=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.attributeInfos=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.attributeInfos&&e.attributeInfos.length)for(var r=0;r<e.attributeInfos.length;++r)$root.UserAttributeRet.AttributeInfo.encode(e.attributeInfos[r],t.uint32(18).fork()).ldelim();return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserAttributeRet;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.attributeInfos&&n.attributeInfos.length||(n.attributeInfos=[]),n.attributeInfos.push($root.UserAttributeRet.AttributeInfo.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.attributeInfos&&e.hasOwnProperty("attributeInfos")){if(!Array.isArray(e.attributeInfos))return "attributeInfos: array expected";for(var t=0;t<e.attributeInfos.length;++t){var r=$root.UserAttributeRet.AttributeInfo.verify(e.attributeInfos[t]);if(r)return "attributeInfos."+r}}return null},e.fromObject=function(e){if(e instanceof $root.UserAttributeRet)return e;var t=new $root.UserAttributeRet;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),e.attributeInfos){if(!Array.isArray(e.attributeInfos))throw TypeError(".UserAttributeRet.attributeInfos: array expected");t.attributeInfos=[];for(var r=0;r<e.attributeInfos.length;++r){if("object"!==_typeof(e.attributeInfos[r]))throw TypeError(".UserAttributeRet.attributeInfos: object expected");t.attributeInfos[r]=$root.UserAttributeRet.AttributeInfo.fromObject(e.attributeInfos[r]);}}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.attributeInfos=[]),t.defaults)if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),e.attributeInfos&&e.attributeInfos.length){r.attributeInfos=[];for(var o=0;o<e.attributeInfos.length;++o)r.attributeInfos[o]=$root.UserAttributeRet.AttributeInfo.toObject(e.attributeInfos[o],t);}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e.AttributeInfo=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.key="",e.prototype.value="",e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.key&&e.hasOwnProperty("key")&&t.uint32(10).string(e.key),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(18).string(e.value),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserAttributeRet.AttributeInfo;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.key=e.string();break;case 2:n.value=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.key&&e.hasOwnProperty("key")&&!$util.isString(e.key)?"key: string expected":null!=e.value&&e.hasOwnProperty("value")&&!$util.isString(e.value)?"value: string expected":null},e.fromObject=function(e){if(e instanceof $root.UserAttributeRet.AttributeInfo)return e;var t=new $root.UserAttributeRet.AttributeInfo;return null!=e.key&&(t.key=String(e.key)),null!=e.value&&(t.value=String(e.value)),t},e.toObject=function(e,t){t||(t={});var r={};return t.defaults&&(r.key="",r.value=""),null!=e.key&&e.hasOwnProperty("key")&&(r.key=e.key),null!=e.value&&e.hasOwnProperty("value")&&(r.value=e.value),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),e}(),UserAttributeSet=$root.UserAttributeSet=function(){function e(e){if(this.attributeInfos=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.attributeInfos=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&e.hasOwnProperty("account")&&t.uint32(18).string(e.account),null!=e.attributeInfos&&e.attributeInfos.length)for(var r=0;r<e.attributeInfos.length;++r)$root.UserAttributeSet.AttributeInfo.encode(e.attributeInfos[r],t.uint32(26).fork()).ldelim();return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserAttributeSet;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.account=e.string();break;case 3:n.attributeInfos&&n.attributeInfos.length||(n.attributeInfos=[]),n.attributeInfos.push($root.UserAttributeSet.AttributeInfo.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.account&&e.hasOwnProperty("account")&&!$util.isString(e.account))return "account: string expected";if(null!=e.attributeInfos&&e.hasOwnProperty("attributeInfos")){if(!Array.isArray(e.attributeInfos))return "attributeInfos: array expected";for(var t=0;t<e.attributeInfos.length;++t){var r=$root.UserAttributeSet.AttributeInfo.verify(e.attributeInfos[t]);if(r)return "attributeInfos."+r}}return null},e.fromObject=function(e){if(e instanceof $root.UserAttributeSet)return e;var t=new $root.UserAttributeSet;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.account&&(t.account=String(e.account)),e.attributeInfos){if(!Array.isArray(e.attributeInfos))throw TypeError(".UserAttributeSet.attributeInfos: array expected");t.attributeInfos=[];for(var r=0;r<e.attributeInfos.length;++r){if("object"!==_typeof(e.attributeInfos[r]))throw TypeError(".UserAttributeSet.attributeInfos: object expected");t.attributeInfos[r]=$root.UserAttributeSet.AttributeInfo.fromObject(e.attributeInfos[r]);}}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.attributeInfos=[]),t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.account="";}if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.account&&e.hasOwnProperty("account")&&(r.account=e.account),e.attributeInfos&&e.attributeInfos.length){r.attributeInfos=[];for(var o=0;o<e.attributeInfos.length;++o)r.attributeInfos[o]=$root.UserAttributeSet.AttributeInfo.toObject(e.attributeInfos[o],t);}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e.AttributeInfo=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.key="",e.prototype.value="",e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.key&&e.hasOwnProperty("key")&&t.uint32(10).string(e.key),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(18).string(e.value),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserAttributeSet.AttributeInfo;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.key=e.string();break;case 2:n.value=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.key&&e.hasOwnProperty("key")&&!$util.isString(e.key)?"key: string expected":null!=e.value&&e.hasOwnProperty("value")&&!$util.isString(e.value)?"value: string expected":null},e.fromObject=function(e){if(e instanceof $root.UserAttributeSet.AttributeInfo)return e;var t=new $root.UserAttributeSet.AttributeInfo;return null!=e.key&&(t.key=String(e.key)),null!=e.value&&(t.value=String(e.value)),t},e.toObject=function(e,t){t||(t={});var r={};return t.defaults&&(r.key="",r.value=""),null!=e.key&&e.hasOwnProperty("key")&&(r.key=e.key),null!=e.value&&e.hasOwnProperty("value")&&(r.value=e.value),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),e}(),UserAttributeMod=$root.UserAttributeMod=function(){function e(e){if(this.attributeInfos=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.attributeInfos=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&e.hasOwnProperty("account")&&t.uint32(18).string(e.account),null!=e.attributeInfos&&e.attributeInfos.length)for(var r=0;r<e.attributeInfos.length;++r)$root.UserAttributeMod.AttributeInfo.encode(e.attributeInfos[r],t.uint32(26).fork()).ldelim();return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserAttributeMod;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.account=e.string();break;case 3:n.attributeInfos&&n.attributeInfos.length||(n.attributeInfos=[]),n.attributeInfos.push($root.UserAttributeMod.AttributeInfo.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.account&&e.hasOwnProperty("account")&&!$util.isString(e.account))return "account: string expected";if(null!=e.attributeInfos&&e.hasOwnProperty("attributeInfos")){if(!Array.isArray(e.attributeInfos))return "attributeInfos: array expected";for(var t=0;t<e.attributeInfos.length;++t){var r=$root.UserAttributeMod.AttributeInfo.verify(e.attributeInfos[t]);if(r)return "attributeInfos."+r}}return null},e.fromObject=function(e){if(e instanceof $root.UserAttributeMod)return e;var t=new $root.UserAttributeMod;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.account&&(t.account=String(e.account)),e.attributeInfos){if(!Array.isArray(e.attributeInfos))throw TypeError(".UserAttributeMod.attributeInfos: array expected");t.attributeInfos=[];for(var r=0;r<e.attributeInfos.length;++r){if("object"!==_typeof(e.attributeInfos[r]))throw TypeError(".UserAttributeMod.attributeInfos: object expected");t.attributeInfos[r]=$root.UserAttributeMod.AttributeInfo.fromObject(e.attributeInfos[r]);}}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.attributeInfos=[]),t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.account="";}if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.account&&e.hasOwnProperty("account")&&(r.account=e.account),e.attributeInfos&&e.attributeInfos.length){r.attributeInfos=[];for(var o=0;o<e.attributeInfos.length;++o)r.attributeInfos[o]=$root.UserAttributeMod.AttributeInfo.toObject(e.attributeInfos[o],t);}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e.AttributeInfo=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.key="",e.prototype.value="",e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.key&&e.hasOwnProperty("key")&&t.uint32(10).string(e.key),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(18).string(e.value),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserAttributeMod.AttributeInfo;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.key=e.string();break;case 2:n.value=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.key&&e.hasOwnProperty("key")&&!$util.isString(e.key)?"key: string expected":null!=e.value&&e.hasOwnProperty("value")&&!$util.isString(e.value)?"value: string expected":null},e.fromObject=function(e){if(e instanceof $root.UserAttributeMod.AttributeInfo)return e;var t=new $root.UserAttributeMod.AttributeInfo;return null!=e.key&&(t.key=String(e.key)),null!=e.value&&(t.value=String(e.value)),t},e.toObject=function(e,t){t||(t={});var r={};return t.defaults&&(r.key="",r.value=""),null!=e.key&&e.hasOwnProperty("key")&&(r.key=e.key),null!=e.value&&e.hasOwnProperty("value")&&(r.value=e.value),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),e}(),UserAttributeDel=$root.UserAttributeDel=function(){function e(e){if(this.attributes=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.account="",e.prototype.attributes=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&e.hasOwnProperty("account")&&t.uint32(18).string(e.account),null!=e.attributes&&e.attributes.length)for(var r=0;r<e.attributes.length;++r)t.uint32(26).string(e.attributes[r]);return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserAttributeDel;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.account=e.string();break;case 3:n.attributes&&n.attributes.length||(n.attributes=[]),n.attributes.push(e.string());break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.account&&e.hasOwnProperty("account")&&!$util.isString(e.account))return "account: string expected";if(null!=e.attributes&&e.hasOwnProperty("attributes")){if(!Array.isArray(e.attributes))return "attributes: array expected";for(var t=0;t<e.attributes.length;++t)if(!$util.isString(e.attributes[t]))return "attributes: string[] expected"}return null},e.fromObject=function(e){if(e instanceof $root.UserAttributeDel)return e;var t=new $root.UserAttributeDel;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.account&&(t.account=String(e.account)),e.attributes){if(!Array.isArray(e.attributes))throw TypeError(".UserAttributeDel.attributes: array expected");t.attributes=[];for(var r=0;r<e.attributes.length;++r)t.attributes[r]=String(e.attributes[r]);}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.attributes=[]),t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.account="";}if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.account&&e.hasOwnProperty("account")&&(r.account=e.account),e.attributes&&e.attributes.length){r.attributes=[];for(var o=0;o<e.attributes.length;++o)r.attributes[o]=e.attributes[o];}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UserAttributeErr=$root.UserAttributeErr=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.code=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.code&&e.hasOwnProperty("code")&&t.uint32(16).uint32(e.code),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserAttributeErr;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.code=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.code&&e.hasOwnProperty("code")&&!$util.isInteger(e.code)?"code: integer expected":null},e.fromObject=function(e){if(e instanceof $root.UserAttributeErr)return e;var t=new $root.UserAttributeErr;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.code&&(t.code=e.code>>>0),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.code=0;}return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.code&&e.hasOwnProperty("code")&&(r.code=e.code),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UserAttributeKeysGet=$root.UserAttributeKeysGet=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.account="",e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.account&&e.hasOwnProperty("account")&&t.uint32(18).string(e.account),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserAttributeKeysGet;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.account=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.account&&e.hasOwnProperty("account")&&!$util.isString(e.account)?"account: string expected":null},e.fromObject=function(e){if(e instanceof $root.UserAttributeKeysGet)return e;var t=new $root.UserAttributeKeysGet;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.account&&(t.account=String(e.account)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.account="";}return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.account&&e.hasOwnProperty("account")&&(r.account=e.account),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UserAttributeKeysRet=$root.UserAttributeKeysRet=function(){function e(e){if(this.keys=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.keys=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.keys&&e.keys.length)for(var r=0;r<e.keys.length;++r)t.uint32(18).string(e.keys[r]);return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserAttributeKeysRet;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.keys&&n.keys.length||(n.keys=[]),n.keys.push(e.string());break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.keys&&e.hasOwnProperty("keys")){if(!Array.isArray(e.keys))return "keys: array expected";for(var t=0;t<e.keys.length;++t)if(!$util.isString(e.keys[t]))return "keys: string[] expected"}return null},e.fromObject=function(e){if(e instanceof $root.UserAttributeKeysRet)return e;var t=new $root.UserAttributeKeysRet;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),e.keys){if(!Array.isArray(e.keys))throw TypeError(".UserAttributeKeysRet.keys: array expected");t.keys=[];for(var r=0;r<e.keys.length;++r)t.keys[r]=String(e.keys[r]);}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.keys=[]),t.defaults)if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),e.keys&&e.keys.length){r.keys=[];for(var o=0;o<e.keys.length;++o)r.keys[o]=e.keys[o];}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UserAttributeRsp=$root.UserAttributeRsp=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserAttributeRsp;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null},e.fromObject=function(e){if(e instanceof $root.UserAttributeRsp)return e;var t=new $root.UserAttributeRsp;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults)if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupStatusList=$root.GroupStatusList=function(){function e(e){if(this.groups=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.groups=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.groups&&e.groups.length)for(var r=0;r<e.groups.length;++r)t.uint32(18).string(e.groups[r]);return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupStatusList;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.groups&&n.groups.length||(n.groups=[]),n.groups.push(e.string());break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.groups&&e.hasOwnProperty("groups")){if(!Array.isArray(e.groups))return "groups: array expected";for(var t=0;t<e.groups.length;++t)if(!$util.isString(e.groups[t]))return "groups: string[] expected"}return null},e.fromObject=function(e){if(e instanceof $root.GroupStatusList)return e;var t=new $root.GroupStatusList;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),e.groups){if(!Array.isArray(e.groups))throw TypeError(".GroupStatusList.groups: array expected");t.groups=[];for(var r=0;r<e.groups.length;++r)t.groups[r]=String(e.groups[r]);}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.groups=[]),t.defaults)if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),e.groups&&e.groups.length){r.groups=[];for(var o=0;o<e.groups.length;++o)r.groups[o]=e.groups[o];}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupStatusResult=$root.GroupStatusResult=function(){function e(e){if(this.groupInfos=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.groupInfos=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.groupInfos&&e.groupInfos.length)for(var r=0;r<e.groupInfos.length;++r)$root.GroupStatusResult.GroupInfo.encode(e.groupInfos[r],t.uint32(18).fork()).ldelim();return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupStatusResult;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.groupInfos&&n.groupInfos.length||(n.groupInfos=[]),n.groupInfos.push($root.GroupStatusResult.GroupInfo.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.groupInfos&&e.hasOwnProperty("groupInfos")){if(!Array.isArray(e.groupInfos))return "groupInfos: array expected";for(var t=0;t<e.groupInfos.length;++t){var r=$root.GroupStatusResult.GroupInfo.verify(e.groupInfos[t]);if(r)return "groupInfos."+r}}return null},e.fromObject=function(e){if(e instanceof $root.GroupStatusResult)return e;var t=new $root.GroupStatusResult;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),e.groupInfos){if(!Array.isArray(e.groupInfos))throw TypeError(".GroupStatusResult.groupInfos: array expected");t.groupInfos=[];for(var r=0;r<e.groupInfos.length;++r){if("object"!==_typeof(e.groupInfos[r]))throw TypeError(".GroupStatusResult.groupInfos: object expected");t.groupInfos[r]=$root.GroupStatusResult.GroupInfo.fromObject(e.groupInfos[r]);}}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.groupInfos=[]),t.defaults)if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),e.groupInfos&&e.groupInfos.length){r.groupInfos=[];for(var o=0;o<e.groupInfos.length;++o)r.groupInfos[o]=$root.GroupStatusResult.GroupInfo.toObject(e.groupInfos[o],t);}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e.GroupInfo=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.group="",e.prototype.memberCount=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.group&&e.hasOwnProperty("group")&&t.uint32(10).string(e.group),null!=e.memberCount&&e.hasOwnProperty("memberCount")&&t.uint32(16).uint32(e.memberCount),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupStatusResult.GroupInfo;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.group=e.string();break;case 2:n.memberCount=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.group&&e.hasOwnProperty("group")&&!$util.isString(e.group)?"group: string expected":null!=e.memberCount&&e.hasOwnProperty("memberCount")&&!$util.isInteger(e.memberCount)?"memberCount: integer expected":null},e.fromObject=function(e){if(e instanceof $root.GroupStatusResult.GroupInfo)return e;var t=new $root.GroupStatusResult.GroupInfo;return null!=e.group&&(t.group=String(e.group)),null!=e.memberCount&&(t.memberCount=e.memberCount>>>0),t},e.toObject=function(e,t){t||(t={});var r={};return t.defaults&&(r.group="",r.memberCount=0),null!=e.group&&e.hasOwnProperty("group")&&(r.group=e.group),null!=e.memberCount&&e.hasOwnProperty("memberCount")&&(r.memberCount=e.memberCount),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),e}(),GroupCountNotice=$root.GroupCountNotice=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.instance=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.size=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.instance&&e.hasOwnProperty("instance")&&t.uint32(8).uint64(e.instance),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(16).uint64(e.seq),null!=e.group&&e.hasOwnProperty("group")&&t.uint32(26).string(e.group),null!=e.size&&e.hasOwnProperty("size")&&t.uint32(32).uint32(e.size),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupCountNotice;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.instance=e.uint64();break;case 2:n.seq=e.uint64();break;case 3:n.group=e.string();break;case 4:n.size=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.instance&&e.hasOwnProperty("instance")&&!($util.isInteger(e.instance)||e.instance&&$util.isInteger(e.instance.low)&&$util.isInteger(e.instance.high))?"instance: integer|Long expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.group&&e.hasOwnProperty("group")&&!$util.isString(e.group)?"group: string expected":null!=e.size&&e.hasOwnProperty("size")&&!$util.isInteger(e.size)?"size: integer expected":null},e.fromObject=function(e){if(e instanceof $root.GroupCountNotice)return e;var t=new $root.GroupCountNotice;return null!=e.instance&&($util.Long?(t.instance=$util.Long.fromValue(e.instance)).unsigned=!0:"string"==typeof e.instance?t.instance=parseInt(e.instance,10):"number"==typeof e.instance?t.instance=e.instance:"object"===_typeof(e.instance)&&(t.instance=new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0))),null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.group&&(t.group=String(e.group)),null!=e.size&&(t.size=e.size>>>0),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.instance=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.instance=t.longs===String?"0":0;if($util.Long){var o=new $util.Long(0,0,!0);r.seq=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.seq=t.longs===String?"0":0;r.group="",r.size=0;}return null!=e.instance&&e.hasOwnProperty("instance")&&("number"==typeof e.instance?r.instance=t.longs===String?String(e.instance):e.instance:r.instance=t.longs===String?$util.Long.prototype.toString.call(e.instance):t.longs===Number?new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0):e.instance),null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.group&&e.hasOwnProperty("group")&&(r.group=e.group),null!=e.size&&e.hasOwnProperty("size")&&(r.size=e.size),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupAttributeGet=$root.GroupAttributeGet=function(){function e(e){if(this.attributes=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.attributes=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.group&&e.hasOwnProperty("group")&&t.uint32(18).string(e.group),null!=e.attributes&&e.attributes.length)for(var r=0;r<e.attributes.length;++r)t.uint32(26).string(e.attributes[r]);return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeGet;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.group=e.string();break;case 3:n.attributes&&n.attributes.length||(n.attributes=[]),n.attributes.push(e.string());break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.group&&e.hasOwnProperty("group")&&!$util.isString(e.group))return "group: string expected";if(null!=e.attributes&&e.hasOwnProperty("attributes")){if(!Array.isArray(e.attributes))return "attributes: array expected";for(var t=0;t<e.attributes.length;++t)if(!$util.isString(e.attributes[t]))return "attributes: string[] expected"}return null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeGet)return e;var t=new $root.GroupAttributeGet;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.group&&(t.group=String(e.group)),e.attributes){if(!Array.isArray(e.attributes))throw TypeError(".GroupAttributeGet.attributes: array expected");t.attributes=[];for(var r=0;r<e.attributes.length;++r)t.attributes[r]=String(e.attributes[r]);}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.attributes=[]),t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.group="";}if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.group&&e.hasOwnProperty("group")&&(r.group=e.group),e.attributes&&e.attributes.length){r.attributes=[];for(var o=0;o<e.attributes.length;++o)r.attributes[o]=e.attributes[o];}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupAttributeRet=$root.GroupAttributeRet=function(){function e(e){if(this.attributeMaps=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.attributeMaps=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.attributeMaps&&e.attributeMaps.length)for(var r=0;r<e.attributeMaps.length;++r)$root.GroupAttributeRet.AttributeMap.encode(e.attributeMaps[r],t.uint32(18).fork()).ldelim();return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeRet;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.attributeMaps&&n.attributeMaps.length||(n.attributeMaps=[]),n.attributeMaps.push($root.GroupAttributeRet.AttributeMap.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.attributeMaps&&e.hasOwnProperty("attributeMaps")){if(!Array.isArray(e.attributeMaps))return "attributeMaps: array expected";for(var t=0;t<e.attributeMaps.length;++t){var r=$root.GroupAttributeRet.AttributeMap.verify(e.attributeMaps[t]);if(r)return "attributeMaps."+r}}return null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeRet)return e;var t=new $root.GroupAttributeRet;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),e.attributeMaps){if(!Array.isArray(e.attributeMaps))throw TypeError(".GroupAttributeRet.attributeMaps: array expected");t.attributeMaps=[];for(var r=0;r<e.attributeMaps.length;++r){if("object"!==_typeof(e.attributeMaps[r]))throw TypeError(".GroupAttributeRet.attributeMaps: object expected");t.attributeMaps[r]=$root.GroupAttributeRet.AttributeMap.fromObject(e.attributeMaps[r]);}}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.attributeMaps=[]),t.defaults)if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),e.attributeMaps&&e.attributeMaps.length){r.attributeMaps=[];for(var o=0;o<e.attributeMaps.length;++o)r.attributeMaps[o]=$root.GroupAttributeRet.AttributeMap.toObject(e.attributeMaps[o],t);}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e.AttributeMap=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.key="",e.prototype.value="",e.prototype.origin="",e.prototype.ms=$util.Long?$util.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.key&&e.hasOwnProperty("key")&&t.uint32(10).string(e.key),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(18).string(e.value),null!=e.origin&&e.hasOwnProperty("origin")&&t.uint32(26).string(e.origin),null!=e.ms&&e.hasOwnProperty("ms")&&t.uint32(32).uint64(e.ms),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeRet.AttributeMap;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.key=e.string();break;case 2:n.value=e.string();break;case 3:n.origin=e.string();break;case 4:n.ms=e.uint64();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.key&&e.hasOwnProperty("key")&&!$util.isString(e.key)?"key: string expected":null!=e.value&&e.hasOwnProperty("value")&&!$util.isString(e.value)?"value: string expected":null!=e.origin&&e.hasOwnProperty("origin")&&!$util.isString(e.origin)?"origin: string expected":null!=e.ms&&e.hasOwnProperty("ms")&&!($util.isInteger(e.ms)||e.ms&&$util.isInteger(e.ms.low)&&$util.isInteger(e.ms.high))?"ms: integer|Long expected":null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeRet.AttributeMap)return e;var t=new $root.GroupAttributeRet.AttributeMap;return null!=e.key&&(t.key=String(e.key)),null!=e.value&&(t.value=String(e.value)),null!=e.origin&&(t.origin=String(e.origin)),null!=e.ms&&($util.Long?(t.ms=$util.Long.fromValue(e.ms)).unsigned=!0:"string"==typeof e.ms?t.ms=parseInt(e.ms,10):"number"==typeof e.ms?t.ms=e.ms:"object"===_typeof(e.ms)&&(t.ms=new $util.LongBits(e.ms.low>>>0,e.ms.high>>>0).toNumber(!0))),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults)if(r.key="",r.value="",r.origin="",$util.Long){var n=new $util.Long(0,0,!0);r.ms=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.ms=t.longs===String?"0":0;return null!=e.key&&e.hasOwnProperty("key")&&(r.key=e.key),null!=e.value&&e.hasOwnProperty("value")&&(r.value=e.value),null!=e.origin&&e.hasOwnProperty("origin")&&(r.origin=e.origin),null!=e.ms&&e.hasOwnProperty("ms")&&("number"==typeof e.ms?r.ms=t.longs===String?String(e.ms):e.ms:r.ms=t.longs===String?$util.Long.prototype.toString.call(e.ms):t.longs===Number?new $util.LongBits(e.ms.low>>>0,e.ms.high>>>0).toNumber(!0):e.ms),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),e}(),GroupAttributeSet=$root.GroupAttributeSet=function(){function e(e){if(this.attributeInfos=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.broadcast=!1,e.prototype.attributeInfos=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.group&&e.hasOwnProperty("group")&&t.uint32(18).string(e.group),null!=e.broadcast&&e.hasOwnProperty("broadcast")&&t.uint32(24).bool(e.broadcast),null!=e.attributeInfos&&e.attributeInfos.length)for(var r=0;r<e.attributeInfos.length;++r)$root.GroupAttributeSet.AttributeInfo.encode(e.attributeInfos[r],t.uint32(34).fork()).ldelim();return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeSet;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.group=e.string();break;case 3:n.broadcast=e.bool();break;case 4:n.attributeInfos&&n.attributeInfos.length||(n.attributeInfos=[]),n.attributeInfos.push($root.GroupAttributeSet.AttributeInfo.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.group&&e.hasOwnProperty("group")&&!$util.isString(e.group))return "group: string expected";if(null!=e.broadcast&&e.hasOwnProperty("broadcast")&&"boolean"!=typeof e.broadcast)return "broadcast: boolean expected";if(null!=e.attributeInfos&&e.hasOwnProperty("attributeInfos")){if(!Array.isArray(e.attributeInfos))return "attributeInfos: array expected";for(var t=0;t<e.attributeInfos.length;++t){var r=$root.GroupAttributeSet.AttributeInfo.verify(e.attributeInfos[t]);if(r)return "attributeInfos."+r}}return null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeSet)return e;var t=new $root.GroupAttributeSet;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.group&&(t.group=String(e.group)),null!=e.broadcast&&(t.broadcast=Boolean(e.broadcast)),e.attributeInfos){if(!Array.isArray(e.attributeInfos))throw TypeError(".GroupAttributeSet.attributeInfos: array expected");t.attributeInfos=[];for(var r=0;r<e.attributeInfos.length;++r){if("object"!==_typeof(e.attributeInfos[r]))throw TypeError(".GroupAttributeSet.attributeInfos: object expected");t.attributeInfos[r]=$root.GroupAttributeSet.AttributeInfo.fromObject(e.attributeInfos[r]);}}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.attributeInfos=[]),t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.group="",r.broadcast=!1;}if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.group&&e.hasOwnProperty("group")&&(r.group=e.group),null!=e.broadcast&&e.hasOwnProperty("broadcast")&&(r.broadcast=e.broadcast),e.attributeInfos&&e.attributeInfos.length){r.attributeInfos=[];for(var o=0;o<e.attributeInfos.length;++o)r.attributeInfos[o]=$root.GroupAttributeSet.AttributeInfo.toObject(e.attributeInfos[o],t);}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e.AttributeInfo=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.key="",e.prototype.value="",e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.key&&e.hasOwnProperty("key")&&t.uint32(10).string(e.key),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(18).string(e.value),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeSet.AttributeInfo;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.key=e.string();break;case 2:n.value=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.key&&e.hasOwnProperty("key")&&!$util.isString(e.key)?"key: string expected":null!=e.value&&e.hasOwnProperty("value")&&!$util.isString(e.value)?"value: string expected":null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeSet.AttributeInfo)return e;var t=new $root.GroupAttributeSet.AttributeInfo;return null!=e.key&&(t.key=String(e.key)),null!=e.value&&(t.value=String(e.value)),t},e.toObject=function(e,t){t||(t={});var r={};return t.defaults&&(r.key="",r.value=""),null!=e.key&&e.hasOwnProperty("key")&&(r.key=e.key),null!=e.value&&e.hasOwnProperty("value")&&(r.value=e.value),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),e}(),GroupAttributeMod=$root.GroupAttributeMod=function(){function e(e){if(this.attributeInfos=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.broadcast=!1,e.prototype.attributeInfos=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.group&&e.hasOwnProperty("group")&&t.uint32(18).string(e.group),null!=e.broadcast&&e.hasOwnProperty("broadcast")&&t.uint32(24).bool(e.broadcast),null!=e.attributeInfos&&e.attributeInfos.length)for(var r=0;r<e.attributeInfos.length;++r)$root.GroupAttributeMod.AttributeInfo.encode(e.attributeInfos[r],t.uint32(34).fork()).ldelim();return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeMod;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.group=e.string();break;case 3:n.broadcast=e.bool();break;case 4:n.attributeInfos&&n.attributeInfos.length||(n.attributeInfos=[]),n.attributeInfos.push($root.GroupAttributeMod.AttributeInfo.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.group&&e.hasOwnProperty("group")&&!$util.isString(e.group))return "group: string expected";if(null!=e.broadcast&&e.hasOwnProperty("broadcast")&&"boolean"!=typeof e.broadcast)return "broadcast: boolean expected";if(null!=e.attributeInfos&&e.hasOwnProperty("attributeInfos")){if(!Array.isArray(e.attributeInfos))return "attributeInfos: array expected";for(var t=0;t<e.attributeInfos.length;++t){var r=$root.GroupAttributeMod.AttributeInfo.verify(e.attributeInfos[t]);if(r)return "attributeInfos."+r}}return null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeMod)return e;var t=new $root.GroupAttributeMod;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.group&&(t.group=String(e.group)),null!=e.broadcast&&(t.broadcast=Boolean(e.broadcast)),e.attributeInfos){if(!Array.isArray(e.attributeInfos))throw TypeError(".GroupAttributeMod.attributeInfos: array expected");t.attributeInfos=[];for(var r=0;r<e.attributeInfos.length;++r){if("object"!==_typeof(e.attributeInfos[r]))throw TypeError(".GroupAttributeMod.attributeInfos: object expected");t.attributeInfos[r]=$root.GroupAttributeMod.AttributeInfo.fromObject(e.attributeInfos[r]);}}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.attributeInfos=[]),t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.group="",r.broadcast=!1;}if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.group&&e.hasOwnProperty("group")&&(r.group=e.group),null!=e.broadcast&&e.hasOwnProperty("broadcast")&&(r.broadcast=e.broadcast),e.attributeInfos&&e.attributeInfos.length){r.attributeInfos=[];for(var o=0;o<e.attributeInfos.length;++o)r.attributeInfos[o]=$root.GroupAttributeMod.AttributeInfo.toObject(e.attributeInfos[o],t);}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e.AttributeInfo=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.key="",e.prototype.value="",e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.key&&e.hasOwnProperty("key")&&t.uint32(10).string(e.key),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(18).string(e.value),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeMod.AttributeInfo;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.key=e.string();break;case 2:n.value=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.key&&e.hasOwnProperty("key")&&!$util.isString(e.key)?"key: string expected":null!=e.value&&e.hasOwnProperty("value")&&!$util.isString(e.value)?"value: string expected":null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeMod.AttributeInfo)return e;var t=new $root.GroupAttributeMod.AttributeInfo;return null!=e.key&&(t.key=String(e.key)),null!=e.value&&(t.value=String(e.value)),t},e.toObject=function(e,t){t||(t={});var r={};return t.defaults&&(r.key="",r.value=""),null!=e.key&&e.hasOwnProperty("key")&&(r.key=e.key),null!=e.value&&e.hasOwnProperty("value")&&(r.value=e.value),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),e}(),GroupAttributeDel=$root.GroupAttributeDel=function(){function e(e){if(this.attributes=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.broadcast=!1,e.prototype.attributes=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.group&&e.hasOwnProperty("group")&&t.uint32(18).string(e.group),null!=e.broadcast&&e.hasOwnProperty("broadcast")&&t.uint32(24).bool(e.broadcast),null!=e.attributes&&e.attributes.length)for(var r=0;r<e.attributes.length;++r)t.uint32(34).string(e.attributes[r]);return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeDel;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.group=e.string();break;case 3:n.broadcast=e.bool();break;case 4:n.attributes&&n.attributes.length||(n.attributes=[]),n.attributes.push(e.string());break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.group&&e.hasOwnProperty("group")&&!$util.isString(e.group))return "group: string expected";if(null!=e.broadcast&&e.hasOwnProperty("broadcast")&&"boolean"!=typeof e.broadcast)return "broadcast: boolean expected";if(null!=e.attributes&&e.hasOwnProperty("attributes")){if(!Array.isArray(e.attributes))return "attributes: array expected";for(var t=0;t<e.attributes.length;++t)if(!$util.isString(e.attributes[t]))return "attributes: string[] expected"}return null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeDel)return e;var t=new $root.GroupAttributeDel;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.group&&(t.group=String(e.group)),null!=e.broadcast&&(t.broadcast=Boolean(e.broadcast)),e.attributes){if(!Array.isArray(e.attributes))throw TypeError(".GroupAttributeDel.attributes: array expected");t.attributes=[];for(var r=0;r<e.attributes.length;++r)t.attributes[r]=String(e.attributes[r]);}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.attributes=[]),t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.group="",r.broadcast=!1;}if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.group&&e.hasOwnProperty("group")&&(r.group=e.group),null!=e.broadcast&&e.hasOwnProperty("broadcast")&&(r.broadcast=e.broadcast),e.attributes&&e.attributes.length){r.attributes=[];for(var o=0;o<e.attributes.length;++o)r.attributes[o]=e.attributes[o];}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupAttributeAlt=$root.GroupAttributeAlt=function(){function e(e){if(this.attributeMaps=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.group="",e.prototype.instance=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.attributeMaps=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.group&&e.hasOwnProperty("group")&&t.uint32(18).string(e.group),null!=e.instance&&e.hasOwnProperty("instance")&&t.uint32(24).uint64(e.instance),null!=e.attributeMaps&&e.attributeMaps.length)for(var r=0;r<e.attributeMaps.length;++r)$root.GroupAttributeAlt.AttributeMap.encode(e.attributeMaps[r],t.uint32(34).fork()).ldelim();return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeAlt;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.group=e.string();break;case 3:n.instance=e.uint64();break;case 4:n.attributeMaps&&n.attributeMaps.length||(n.attributeMaps=[]),n.attributeMaps.push($root.GroupAttributeAlt.AttributeMap.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.group&&e.hasOwnProperty("group")&&!$util.isString(e.group))return "group: string expected";if(null!=e.instance&&e.hasOwnProperty("instance")&&!($util.isInteger(e.instance)||e.instance&&$util.isInteger(e.instance.low)&&$util.isInteger(e.instance.high)))return "instance: integer|Long expected";if(null!=e.attributeMaps&&e.hasOwnProperty("attributeMaps")){if(!Array.isArray(e.attributeMaps))return "attributeMaps: array expected";for(var t=0;t<e.attributeMaps.length;++t){var r=$root.GroupAttributeAlt.AttributeMap.verify(e.attributeMaps[t]);if(r)return "attributeMaps."+r}}return null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeAlt)return e;var t=new $root.GroupAttributeAlt;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.group&&(t.group=String(e.group)),null!=e.instance&&($util.Long?(t.instance=$util.Long.fromValue(e.instance)).unsigned=!0:"string"==typeof e.instance?t.instance=parseInt(e.instance,10):"number"==typeof e.instance?t.instance=e.instance:"object"===_typeof(e.instance)&&(t.instance=new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0))),e.attributeMaps){if(!Array.isArray(e.attributeMaps))throw TypeError(".GroupAttributeAlt.attributeMaps: array expected");t.attributeMaps=[];for(var r=0;r<e.attributeMaps.length;++r){if("object"!==_typeof(e.attributeMaps[r]))throw TypeError(".GroupAttributeAlt.attributeMaps: object expected");t.attributeMaps[r]=$root.GroupAttributeAlt.AttributeMap.fromObject(e.attributeMaps[r]);}}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.attributeMaps=[]),t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(r.group="",$util.Long){var o=new $util.Long(0,0,!0);r.instance=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.instance=t.longs===String?"0":0;}if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.group&&e.hasOwnProperty("group")&&(r.group=e.group),null!=e.instance&&e.hasOwnProperty("instance")&&("number"==typeof e.instance?r.instance=t.longs===String?String(e.instance):e.instance:r.instance=t.longs===String?$util.Long.prototype.toString.call(e.instance):t.longs===Number?new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0):e.instance),e.attributeMaps&&e.attributeMaps.length){r.attributeMaps=[];for(var i=0;i<e.attributeMaps.length;++i)r.attributeMaps[i]=$root.GroupAttributeAlt.AttributeMap.toObject(e.attributeMaps[i],t);}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e.AttributeMap=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.key="",e.prototype.value="",e.prototype.origin="",e.prototype.ms=$util.Long?$util.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.key&&e.hasOwnProperty("key")&&t.uint32(10).string(e.key),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(18).string(e.value),null!=e.origin&&e.hasOwnProperty("origin")&&t.uint32(26).string(e.origin),null!=e.ms&&e.hasOwnProperty("ms")&&t.uint32(32).uint64(e.ms),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeAlt.AttributeMap;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.key=e.string();break;case 2:n.value=e.string();break;case 3:n.origin=e.string();break;case 4:n.ms=e.uint64();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.key&&e.hasOwnProperty("key")&&!$util.isString(e.key)?"key: string expected":null!=e.value&&e.hasOwnProperty("value")&&!$util.isString(e.value)?"value: string expected":null!=e.origin&&e.hasOwnProperty("origin")&&!$util.isString(e.origin)?"origin: string expected":null!=e.ms&&e.hasOwnProperty("ms")&&!($util.isInteger(e.ms)||e.ms&&$util.isInteger(e.ms.low)&&$util.isInteger(e.ms.high))?"ms: integer|Long expected":null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeAlt.AttributeMap)return e;var t=new $root.GroupAttributeAlt.AttributeMap;return null!=e.key&&(t.key=String(e.key)),null!=e.value&&(t.value=String(e.value)),null!=e.origin&&(t.origin=String(e.origin)),null!=e.ms&&($util.Long?(t.ms=$util.Long.fromValue(e.ms)).unsigned=!0:"string"==typeof e.ms?t.ms=parseInt(e.ms,10):"number"==typeof e.ms?t.ms=e.ms:"object"===_typeof(e.ms)&&(t.ms=new $util.LongBits(e.ms.low>>>0,e.ms.high>>>0).toNumber(!0))),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults)if(r.key="",r.value="",r.origin="",$util.Long){var n=new $util.Long(0,0,!0);r.ms=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.ms=t.longs===String?"0":0;return null!=e.key&&e.hasOwnProperty("key")&&(r.key=e.key),null!=e.value&&e.hasOwnProperty("value")&&(r.value=e.value),null!=e.origin&&e.hasOwnProperty("origin")&&(r.origin=e.origin),null!=e.ms&&e.hasOwnProperty("ms")&&("number"==typeof e.ms?r.ms=t.longs===String?String(e.ms):e.ms:r.ms=t.longs===String?$util.Long.prototype.toString.call(e.ms):t.longs===Number?new $util.LongBits(e.ms.low>>>0,e.ms.high>>>0).toNumber(!0):e.ms),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),e}(),GroupAttributeRsp=$root.GroupAttributeRsp=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeRsp;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeRsp)return e;var t=new $root.GroupAttributeRsp;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults)if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupAttributeErr=$root.GroupAttributeErr=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.code=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.code&&e.hasOwnProperty("code")&&t.uint32(16).uint32(e.code),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeErr;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.code=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.code&&e.hasOwnProperty("code")&&!$util.isInteger(e.code)?"code: integer expected":null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeErr)return e;var t=new $root.GroupAttributeErr;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.code&&(t.code=e.code>>>0),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.code=0;}return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.code&&e.hasOwnProperty("code")&&(r.code=e.code),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupAttributeKeysGet=$root.GroupAttributeKeysGet=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.group="",e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.group&&e.hasOwnProperty("group")&&t.uint32(18).string(e.group),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeKeysGet;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.group=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.group&&e.hasOwnProperty("group")&&!$util.isString(e.group)?"group: string expected":null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeKeysGet)return e;var t=new $root.GroupAttributeKeysGet;return null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.group&&(t.group=String(e.group)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;r.group="";}return null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.group&&e.hasOwnProperty("group")&&(r.group=e.group),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),GroupAttributeKeysRet=$root.GroupAttributeKeysRet=function(){function e(e){if(this.keys=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.keys=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.keys&&e.keys.length)for(var r=0;r<e.keys.length;++r)t.uint32(18).string(e.keys[r]);return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.GroupAttributeKeysRet;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.keys&&n.keys.length||(n.keys=[]),n.keys.push(e.string());break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.keys&&e.hasOwnProperty("keys")){if(!Array.isArray(e.keys))return "keys: array expected";for(var t=0;t<e.keys.length;++t)if(!$util.isString(e.keys[t]))return "keys: string[] expected"}return null},e.fromObject=function(e){if(e instanceof $root.GroupAttributeKeysRet)return e;var t=new $root.GroupAttributeKeysRet;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),e.keys){if(!Array.isArray(e.keys))throw TypeError(".GroupAttributeKeysRet.keys: array expected");t.keys=[];for(var r=0;r<e.keys.length;++r)t.keys[r]=String(e.keys[r]);}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.keys=[]),t.defaults)if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),e.keys&&e.keys.length){r.keys=[];for(var o=0;o<e.keys.length;++o)r.keys[o]=e.keys[o];}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),SubscribeUserStatus=$root.SubscribeUserStatus=function(){function e(e){if(this.users=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.users=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.users&&e.users.length)for(var r=0;r<e.users.length;++r)t.uint32(18).string(e.users[r]);return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.SubscribeUserStatus;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.users&&n.users.length||(n.users=[]),n.users.push(e.string());break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.users&&e.hasOwnProperty("users")){if(!Array.isArray(e.users))return "users: array expected";for(var t=0;t<e.users.length;++t)if(!$util.isString(e.users[t]))return "users: string[] expected"}return null},e.fromObject=function(e){if(e instanceof $root.SubscribeUserStatus)return e;var t=new $root.SubscribeUserStatus;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),e.users){if(!Array.isArray(e.users))throw TypeError(".SubscribeUserStatus.users: array expected");t.users=[];for(var r=0;r<e.users.length;++r)t.users[r]=String(e.users[r]);}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.users=[]),t.defaults)if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),e.users&&e.users.length){r.users=[];for(var o=0;o<e.users.length;++o)r.users[o]=e.users[o];}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UnsubscribeUserStatus=$root.UnsubscribeUserStatus=function(){function e(e){if(this.users=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.users=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.users&&e.users.length)for(var r=0;r<e.users.length;++r)t.uint32(18).string(e.users[r]);return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UnsubscribeUserStatus;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.users&&n.users.length||(n.users=[]),n.users.push(e.string());break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.users&&e.hasOwnProperty("users")){if(!Array.isArray(e.users))return "users: array expected";for(var t=0;t<e.users.length;++t)if(!$util.isString(e.users[t]))return "users: string[] expected"}return null},e.fromObject=function(e){if(e instanceof $root.UnsubscribeUserStatus)return e;var t=new $root.UnsubscribeUserStatus;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),e.users){if(!Array.isArray(e.users))throw TypeError(".UnsubscribeUserStatus.users: array expected");t.users=[];for(var r=0;r<e.users.length;++r)t.users[r]=String(e.users[r]);}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.users=[]),t.defaults)if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),e.users&&e.users.length){r.users=[];for(var o=0;o<e.users.length;++o)r.users[o]=e.users[o];}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UserJoinNotice=$root.UserJoinNotice=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.instance=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.user="",e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.instance&&e.hasOwnProperty("instance")&&t.uint32(8).uint64(e.instance),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(16).uint64(e.seq),null!=e.user&&e.hasOwnProperty("user")&&t.uint32(26).string(e.user),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserJoinNotice;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.instance=e.uint64();break;case 2:n.seq=e.uint64();break;case 3:n.user=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.instance&&e.hasOwnProperty("instance")&&!($util.isInteger(e.instance)||e.instance&&$util.isInteger(e.instance.low)&&$util.isInteger(e.instance.high))?"instance: integer|Long expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.user&&e.hasOwnProperty("user")&&!$util.isString(e.user)?"user: string expected":null},e.fromObject=function(e){if(e instanceof $root.UserJoinNotice)return e;var t=new $root.UserJoinNotice;return null!=e.instance&&($util.Long?(t.instance=$util.Long.fromValue(e.instance)).unsigned=!0:"string"==typeof e.instance?t.instance=parseInt(e.instance,10):"number"==typeof e.instance?t.instance=e.instance:"object"===_typeof(e.instance)&&(t.instance=new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0))),null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.user&&(t.user=String(e.user)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.instance=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.instance=t.longs===String?"0":0;if($util.Long){var o=new $util.Long(0,0,!0);r.seq=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.seq=t.longs===String?"0":0;r.user="";}return null!=e.instance&&e.hasOwnProperty("instance")&&("number"==typeof e.instance?r.instance=t.longs===String?String(e.instance):e.instance:r.instance=t.longs===String?$util.Long.prototype.toString.call(e.instance):t.longs===Number?new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0):e.instance),null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.user&&e.hasOwnProperty("user")&&(r.user=e.user),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UserQuitNotice=$root.UserQuitNotice=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.instance=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.user="",e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.instance&&e.hasOwnProperty("instance")&&t.uint32(8).uint64(e.instance),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(16).uint64(e.seq),null!=e.user&&e.hasOwnProperty("user")&&t.uint32(26).string(e.user),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserQuitNotice;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.instance=e.uint64();break;case 2:n.seq=e.uint64();break;case 3:n.user=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.instance&&e.hasOwnProperty("instance")&&!($util.isInteger(e.instance)||e.instance&&$util.isInteger(e.instance.low)&&$util.isInteger(e.instance.high))?"instance: integer|Long expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.user&&e.hasOwnProperty("user")&&!$util.isString(e.user)?"user: string expected":null},e.fromObject=function(e){if(e instanceof $root.UserQuitNotice)return e;var t=new $root.UserQuitNotice;return null!=e.instance&&($util.Long?(t.instance=$util.Long.fromValue(e.instance)).unsigned=!0:"string"==typeof e.instance?t.instance=parseInt(e.instance,10):"number"==typeof e.instance?t.instance=e.instance:"object"===_typeof(e.instance)&&(t.instance=new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0))),null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.user&&(t.user=String(e.user)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.instance=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.instance=t.longs===String?"0":0;if($util.Long){var o=new $util.Long(0,0,!0);r.seq=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.seq=t.longs===String?"0":0;r.user="";}return null!=e.instance&&e.hasOwnProperty("instance")&&("number"==typeof e.instance?r.instance=t.longs===String?String(e.instance):e.instance:r.instance=t.longs===String?$util.Long.prototype.toString.call(e.instance):t.longs===Number?new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0):e.instance),null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.user&&e.hasOwnProperty("user")&&(r.user=e.user),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),UserWaitNotice=$root.UserWaitNotice=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.instance=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.user="",e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.instance&&e.hasOwnProperty("instance")&&t.uint32(8).uint64(e.instance),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(16).uint64(e.seq),null!=e.user&&e.hasOwnProperty("user")&&t.uint32(26).string(e.user),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.UserWaitNotice;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.instance=e.uint64();break;case 2:n.seq=e.uint64();break;case 3:n.user=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.instance&&e.hasOwnProperty("instance")&&!($util.isInteger(e.instance)||e.instance&&$util.isInteger(e.instance.low)&&$util.isInteger(e.instance.high))?"instance: integer|Long expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.user&&e.hasOwnProperty("user")&&!$util.isString(e.user)?"user: string expected":null},e.fromObject=function(e){if(e instanceof $root.UserWaitNotice)return e;var t=new $root.UserWaitNotice;return null!=e.instance&&($util.Long?(t.instance=$util.Long.fromValue(e.instance)).unsigned=!0:"string"==typeof e.instance?t.instance=parseInt(e.instance,10):"number"==typeof e.instance?t.instance=e.instance:"object"===_typeof(e.instance)&&(t.instance=new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0))),null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),null!=e.user&&(t.user=String(e.user)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util.Long){var n=new $util.Long(0,0,!0);r.instance=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.instance=t.longs===String?"0":0;if($util.Long){var o=new $util.Long(0,0,!0);r.seq=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.seq=t.longs===String?"0":0;r.user="";}return null!=e.instance&&e.hasOwnProperty("instance")&&("number"==typeof e.instance?r.instance=t.longs===String?String(e.instance):e.instance:r.instance=t.longs===String?$util.Long.prototype.toString.call(e.instance):t.longs===Number?new $util.LongBits(e.instance.low>>>0,e.instance.high>>>0).toNumber(!0):e.instance),null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),null!=e.user&&e.hasOwnProperty("user")&&(r.user=e.user),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),SubscribeResponse=$root.SubscribeResponse=function(){function e(e){if(this.errors=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.seq=$util.Long?$util.Long.fromBits(0,0,!0):0,e.prototype.errors=$util.emptyArray,e.encode=function(e,t){if(t||(t=$Writer.create()),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(8).uint64(e.seq),null!=e.errors&&e.errors.length)for(var r=0;r<e.errors.length;++r)$root.SubscribeResponse.SubscribeErrorsType.encode(e.errors[r],t.uint32(18).fork()).ldelim();return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.SubscribeResponse;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.seq=e.uint64();break;case 2:n.errors&&n.errors.length||(n.errors=[]),n.errors.push($root.SubscribeResponse.SubscribeErrorsType.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.seq&&e.hasOwnProperty("seq")&&!($util.isInteger(e.seq)||e.seq&&$util.isInteger(e.seq.low)&&$util.isInteger(e.seq.high)))return "seq: integer|Long expected";if(null!=e.errors&&e.hasOwnProperty("errors")){if(!Array.isArray(e.errors))return "errors: array expected";for(var t=0;t<e.errors.length;++t){var r=$root.SubscribeResponse.SubscribeErrorsType.verify(e.errors[t]);if(r)return "errors."+r}}return null},e.fromObject=function(e){if(e instanceof $root.SubscribeResponse)return e;var t=new $root.SubscribeResponse;if(null!=e.seq&&($util.Long?(t.seq=$util.Long.fromValue(e.seq)).unsigned=!0:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0))),e.errors){if(!Array.isArray(e.errors))throw TypeError(".SubscribeResponse.errors: array expected");t.errors=[];for(var r=0;r<e.errors.length;++r){if("object"!==_typeof(e.errors[r]))throw TypeError(".SubscribeResponse.errors: object expected");t.errors[r]=$root.SubscribeResponse.SubscribeErrorsType.fromObject(e.errors[r]);}}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.errors=[]),t.defaults)if($util.Long){var n=new $util.Long(0,0,!0);r.seq=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.seq=t.longs===String?"0":0;if(null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util.Long.prototype.toString.call(e.seq):t.longs===Number?new $util.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber(!0):e.seq),e.errors&&e.errors.length){r.errors=[];for(var o=0;o<e.errors.length;++o)r.errors[o]=$root.SubscribeResponse.SubscribeErrorsType.toObject(e.errors[o],t);}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e.SubscribeErrorsType=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.account="",e.prototype.code=0,e.encode=function(e,t){return t||(t=$Writer.create()),null!=e.account&&e.hasOwnProperty("account")&&t.uint32(10).string(e.account),null!=e.code&&e.hasOwnProperty("code")&&t.uint32(16).uint32(e.code),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader||(e=$Reader.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root.SubscribeResponse.SubscribeErrorsType;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.account=e.string();break;case 2:n.code=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader||(e=new $Reader(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.account&&e.hasOwnProperty("account")&&!$util.isString(e.account)?"account: string expected":null!=e.code&&e.hasOwnProperty("code")&&!$util.isInteger(e.code)?"code: integer expected":null},e.fromObject=function(e){if(e instanceof $root.SubscribeResponse.SubscribeErrorsType)return e;var t=new $root.SubscribeResponse.SubscribeErrorsType;return null!=e.account&&(t.account=String(e.account)),null!=e.code&&(t.code=e.code>>>0),t},e.toObject=function(e,t){t||(t={});var r={};return t.defaults&&(r.account="",r.code=0),null!=e.account&&e.hasOwnProperty("account")&&(r.account=e.account),null!=e.code&&e.hasOwnProperty("code")&&(r.code=e.code),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),e}(),ProtoPackets=Object.freeze({Wrapper:Wrapper$1,Ping:Ping,Pong:Pong,UserJoin:UserJoin,UserResp:UserResp,UserQuit:UserQuit,UserDrop:UserDrop,GroupEnter:GroupEnter,GroupLeave:GroupLeave,GroupReply:GroupReply,GroupLeaveNotice:GroupLeaveNotice,GroupEnterNotice:GroupEnterNotice,Message:Message,Ack:Ack,GroupAllUsersList:GroupAllUsersList,GroupAllUsersResult:GroupAllUsersResult,UserStatusList:UserStatusList,UserStatusResult:UserStatusResult,UserAttributeGet:UserAttributeGet,UserAttributeRet:UserAttributeRet,UserAttributeSet:UserAttributeSet,UserAttributeMod:UserAttributeMod,UserAttributeDel:UserAttributeDel,UserAttributeErr:UserAttributeErr,UserAttributeKeysGet:UserAttributeKeysGet,UserAttributeKeysRet:UserAttributeKeysRet,UserAttributeRsp:UserAttributeRsp,GroupStatusList:GroupStatusList,GroupStatusResult:GroupStatusResult,GroupCountNotice:GroupCountNotice,GroupAttributeGet:GroupAttributeGet,GroupAttributeRet:GroupAttributeRet,GroupAttributeSet:GroupAttributeSet,GroupAttributeMod:GroupAttributeMod,GroupAttributeDel:GroupAttributeDel,GroupAttributeAlt:GroupAttributeAlt,GroupAttributeRsp:GroupAttributeRsp,GroupAttributeErr:GroupAttributeErr,GroupAttributeKeysGet:GroupAttributeKeysGet,GroupAttributeKeysRet:GroupAttributeKeysRet,SubscribeUserStatus:SubscribeUserStatus,UnsubscribeUserStatus:UnsubscribeUserStatus,UserJoinNotice:UserJoinNotice,UserQuitNotice:UserQuitNotice,UserWaitNotice:UserWaitNotice,SubscribeResponse:SubscribeResponse,default:$root}),now=function(){return _root.Date.now()},now_1=now,NAN=NaN,reTrim=/^\s+|\s+$/g,reIsBadHex=/^[-+]0x[0-9a-f]+$/i,reIsBinary=/^0b[01]+$/i,reIsOctal=/^0o[0-7]+$/i,freeParseInt=parseInt;function toNumber$1(e){if("number"==typeof e)return e;if(isSymbol_1(e))return NAN;if(isObject_1(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=isObject_1(t)?t+"":t;}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(reTrim,"");var r=reIsBinary.test(e);return r||reIsOctal.test(e)?freeParseInt(e.slice(2),r?2:8):reIsBadHex.test(e)?NAN:+e}var toNumber_1=toNumber$1,FUNC_ERROR_TEXT$1="Expected a function",nativeMax$1=Math.max,nativeMin=Math.min;function debounce(e,t,r){var n,o,i,s,a,u,l=0,c=!1,p=!1,f=!0;if("function"!=typeof e)throw new TypeError(FUNC_ERROR_TEXT$1);function d(t){var r=n,i=o;return n=o=void 0,l=t,s=e.apply(i,r)}function g(e){var r=e-u;return void 0===u||r>=t||r<0||p&&e-l>=i}function h(){var e=now_1();if(g(e))return b(e);a=setTimeout(h,function(e){var r=t-(e-u);return p?nativeMin(r,i-(e-l)):r}(e));}function b(e){return a=void 0,f&&n?d(e):(n=o=void 0,s)}function _(){var e=now_1(),r=g(e);if(n=arguments,o=this,u=e,r){if(void 0===a)return function(e){return l=e,a=setTimeout(h,t),c?d(e):s}(u);if(p)return clearTimeout(a),a=setTimeout(h,t),d(u)}return void 0===a&&(a=setTimeout(h,t)),s}return t=toNumber_1(t)||0,isObject_1(r)&&(c=!!r.leading,i=(p="maxWait"in r)?nativeMax$1(toNumber_1(r.maxWait)||0,t):i,f="trailing"in r?!!r.trailing:f),_.cancel=function(){void 0!==a&&clearTimeout(a),l=0,n=u=o=a=void 0;},_.flush=function(){return void 0===a?s:b(now_1())},_}var debounce_1=debounce;_fixReWks("match",1,function(e,t,r,n){return [function(r){var n=e(this),o=null==r?void 0:r[t];return void 0!==o?o.call(r,n):new RegExp(r)[t](String(n))},function(e){var t=n(r,e,this);if(t.done)return t.value;var o=_anObject(e),i=String(this);if(!o.global)return _regexpExecAbstract(o,i);var s=o.unicode;o.lastIndex=0;for(var a,u=[],l=0;null!==(a=_regexpExecAbstract(o,i));){var c=String(a[0]);u[l]=c,""===c&&(o.lastIndex=_advanceStringIndex(i,_toLength(o.lastIndex),s)),l++;}return 0===l?null:u}]}),_export(_export.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,r,n=_toIobject(e),o=_objectGopd.f,i=_ownKeys(n),s={},a=0;i.length>a;)void 0!==(r=o(n,t=i[a++]))&&_createProperty(s,t,r);return s}});var isBufferBrowser=function(e){return e&&"object"===_typeof(e)&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8},inherits_browser=createCommonjsModule(function(e){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}});}:e.exports=function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e;};}),util=createCommonjsModule(function(e,t){var r=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++)r[t[n]]=Object.getOwnPropertyDescriptor(e,t[n]);return r},n=/%[sdj%]/g;t.format=function(e){if(!b(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(s(arguments[r]));return t.join(" ")}r=1;for(var o=arguments,i=o.length,a=String(e).replace(n,function(e){if("%%"===e)return "%";if(r>=i)return e;switch(e){case"%s":return String(o[r++]);case"%d":return Number(o[r++]);case"%j":try{return JSON.stringify(o[r++])}catch(e){return "[Circular]"}default:return e}}),u=o[r];r<i;u=o[++r])g(u)||!m(u)?a+=" "+u:a+=" "+s(u);return a},t.deprecate=function(e,r){if("undefined"!=typeof process&&!0===process.noDeprecation)return e;if("undefined"==typeof process)return function(){return t.deprecate(e,r).apply(this,arguments)};var n=!1;return function(){if(!n){if(process.throwDeprecation)throw new Error(r);process.traceDeprecation?console.trace(r):console.error(r),n=!0;}return e.apply(this,arguments)}};var o,i={};function s(e,r){var n={seen:[],stylize:u};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),d(r)?n.showHidden=r:r&&t._extend(n,r),_(n.showHidden)&&(n.showHidden=!1),_(n.depth)&&(n.depth=2),_(n.colors)&&(n.colors=!1),_(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=a),l(n,e,n.depth)}function a(e,t){var r=s.styles[t];return r?"["+s.colors[r][0]+"m"+e+"["+s.colors[r][1]+"m":e}function u(e,t){return e}function l(e,r,n){if(e.customInspect&&r&&E(r.inspect)&&r.inspect!==t.inspect&&(!r.constructor||r.constructor.prototype!==r)){var o=r.inspect(n,e);return b(o)||(o=l(e,o,n)),o}var i=function(e,t){if(_(t))return e.stylize("undefined","undefined");if(b(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}if(h(t))return e.stylize(""+t,"number");if(d(t))return e.stylize(""+t,"boolean");if(g(t))return e.stylize("null","null")}(e,r);if(i)return i;var s=Object.keys(r),a=function(e){var t={};return e.forEach(function(e,r){t[e]=!0;}),t}(s);if(e.showHidden&&(s=Object.getOwnPropertyNames(r)),$(r)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return c(r);if(0===s.length){if(E(r)){var u=r.name?": "+r.name:"";return e.stylize("[Function"+u+"]","special")}if(y(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(v(r))return e.stylize(Date.prototype.toString.call(r),"date");if($(r))return c(r)}var m,I="",S=!1,w=["{","}"];(f(r)&&(S=!0,w=["[","]"]),E(r))&&(I=" [Function"+(r.name?": "+r.name:"")+"]");return y(r)&&(I=" "+RegExp.prototype.toString.call(r)),v(r)&&(I=" "+Date.prototype.toUTCString.call(r)),$(r)&&(I=" "+c(r)),0!==s.length||S&&0!=r.length?n<0?y(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special"):(e.seen.push(r),m=S?function(e,t,r,n,o){for(var i=[],s=0,a=t.length;s<a;++s)O(t,String(s))?i.push(p(e,t,r,n,String(s),!0)):i.push("");return o.forEach(function(o){o.match(/^\d+$/)||i.push(p(e,t,r,n,o,!0));}),i}(e,r,n,a,s):s.map(function(t){return p(e,r,n,a,t,S)}),e.seen.pop(),function(e,t,r){if(e.reduce(function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1];return r[0]+t+" "+e.join(", ")+" "+r[1]}(m,I,w)):w[0]+I+w[1]}function c(e){return "["+Error.prototype.toString.call(e)+"]"}function p(e,t,r,n,o,i){var s,a,u;if((u=Object.getOwnPropertyDescriptor(t,o)||{value:t[o]}).get?a=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(a=e.stylize("[Setter]","special")),O(n,o)||(s="["+o+"]"),a||(e.seen.indexOf(u.value)<0?(a=g(r)?l(e,u.value,null):l(e,u.value,r-1)).indexOf("\n")>-1&&(a=i?a.split("\n").map(function(e){return "  "+e}).join("\n").substr(2):"\n"+a.split("\n").map(function(e){return "   "+e}).join("\n")):a=e.stylize("[Circular]","special")),_(s)){if(i&&o.match(/^\d+$/))return a;(s=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"));}return s+": "+a}function f(e){return Array.isArray(e)}function d(e){return "boolean"==typeof e}function g(e){return null===e}function h(e){return "number"==typeof e}function b(e){return "string"==typeof e}function _(e){return void 0===e}function y(e){return m(e)&&"[object RegExp]"===I(e)}function m(e){return "object"===_typeof(e)&&null!==e}function v(e){return m(e)&&"[object Date]"===I(e)}function $(e){return m(e)&&("[object Error]"===I(e)||e instanceof Error)}function E(e){return "function"==typeof e}function I(e){return Object.prototype.toString.call(e)}function S(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(_(o)&&(o=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!i[e])if(new RegExp("\\b"+e+"\\b","i").test(o)){var r=process.pid;i[e]=function(){var n=t.format.apply(t,arguments);console.error("%s %d: %s",e,r,n);};}else i[e]=function(){};return i[e]},t.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=f,t.isBoolean=d,t.isNull=g,t.isNullOrUndefined=function(e){return null==e},t.isNumber=h,t.isString=b,t.isSymbol=function(e){return "symbol"===_typeof(e)},t.isUndefined=_,t.isRegExp=y,t.isObject=m,t.isDate=v,t.isError=$,t.isFunction=E,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"===_typeof(e)||void 0===e},t.isBuffer=isBufferBrowser;var w=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function O(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){var e,r;console.log("%s - %s",(e=new Date,r=[S(e.getHours()),S(e.getMinutes()),S(e.getSeconds())].join(":"),[e.getDate(),w[e.getMonth()],r].join(" ")),t.format.apply(t,arguments));},t.inherits=inherits_browser,t._extend=function(e,t){if(!t||!m(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e};var R="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function T(e,t){if(!e){var r=new Error("Promise was rejected with a falsy value");r.reason=e,e=r;}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(R&&e[R]){var t;if("function"!=typeof(t=e[R]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,R,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,r,n=new Promise(function(e,n){t=e,r=n;}),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push(function(e,n){e?r(e):t(n);});try{e.apply(this,o);}catch(e){r(e);}return n}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),R&&Object.defineProperty(t,R,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,r(e))},t.promisify.custom=R,t.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function t(){for(var t=[],r=0;r<arguments.length;r++)t.push(arguments[r]);var n=t.pop();if("function"!=typeof n)throw new TypeError("The last argument must be of type Function");var o=this,i=function(){return n.apply(o,arguments)};e.apply(this,t).then(function(e){process.nextTick(i,null,e);},function(e){process.nextTick(T,e,i);});}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),Object.defineProperties(t,r(e)),t};}),util_1=util.format,util_2=util.deprecate,util_3=util.debuglog,util_4=util.inspect,util_5=util.isArray,util_6=util.isBoolean,util_7=util.isNull,util_8=util.isNullOrUndefined,util_9=util.isNumber,util_10=util.isString,util_11=util.isSymbol,util_12=util.isUndefined,util_13=util.isRegExp,util_14=util.isObject,util_15=util.isDate,util_16=util.isError,util_17=util.isFunction,util_18=util.isPrimitive,util_19=util.isBuffer,util_20=util.log,util_21=util.inherits,util_22=util._extend,util_23=util.promisify,util_24=util.callbackify;function asyncGeneratorStep$1(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value;}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o);}function _asyncToGenerator$1(e){return function(){var t=this,r=arguments;return new Promise(function(n,o){var i=e.apply(t,r);function s(e){asyncGeneratorStep$1(i,n,o,s,a,"next",e);}function a(e){asyncGeneratorStep$1(i,n,o,s,a,"throw",e);}s(void 0);})}}function _toConsumableArray$1(e){return _arrayWithoutHoles$1(e)||_iterableToArray$1(e)||_nonIterableSpread$1()}function _nonIterableSpread$1(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray$1(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles$1(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}var UINT32_MAX=4294967295;function getRandomInt(e,t){var r=Math.ceil(e),n=Math.floor(t);return Math.floor(Math.random()*(n-r+1))+e}function getRandomUInt64(){var e=getRandomInt(0,UINT32_MAX),t=getRandomInt(1,UINT32_MAX);return new long_1(e,t,!0)}function getSid(e){return e.toString().padEnd(32,"0")}function assertNever(e,t){return new TypeError("Unexpected ".concat(e,": ").concat(t))}function calIpDistance(e,t){var r=e.split(".").map(function(e){return Number(e)}),n=t.split(".").map(function(e){return Number(e)});return Math.sqrt(1e3*Math.pow(r[0]-n[0],2)+100*Math.pow(r[1]-n[1],2)+10*Math.pow(r[2]-n[2],2)+1*Math.pow(r[3]-n[3],2))}function longToStringIfNeeded(e){return e.lessThanOrEqual(Number.MAX_SAFE_INTEGER)?e.toNumber():e.toString()}var prefixSeqMap=new Map;function uniquePrefixedId(e,t){var r="".concat(e).concat(t||""),n=prefixSeqMap.get(r)||1;return prefixSeqMap.set(r,n+1),"".concat(e).concat(n)}var getUTCTimestamp=function(){var e=new Date;return "".concat(e.toISOString().split("T")[1].replace(/\..+/,""),".").concat(e.getMilliseconds())},getKeys=Object.keys,getEntries=Object.entries.bind(Object);function isLongNum(e){return "number"==typeof e||long_1.isLong(e)}var getName=function(e){return Object.keys(e)[0]},addPeriodIfNeeded=function(e){return "string"==typeof e?e.endsWith(".")?e:"".concat(e,"."):e};function genErrorMessage(e,t){return ("number"==typeof e?"Error Code ".concat(e,". "):"string"==typeof e?"[".concat(e,"] "):"")+("string"==typeof t&&t?addPeriodIfNeeded(t):Array.isArray(t)&&"string"==typeof t[0]&&t[0]?addPeriodIfNeeded(util_1.apply(void 0,[t[0]].concat(_toConsumableArray$1(t.slice(1))))):"")}function delay$1(e){return _delay.apply(this,arguments)}function _delay(){return (_delay=_asyncToGenerator$1(regenerator.mark(function e(t){return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise(function(e){setTimeout(function(){e();},t);}));case 1:case"end":return e.stop()}},e)}))).apply(this,arguments)}function post(e){return _post.apply(this,arguments)}function _post(){return (_post=_asyncToGenerator$1(regenerator.mark(function e(t){var r,n,o,i,s,a,u,l;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.url,n=t.body,o=t.headers,i=t.timeout,s=void 0===i?1e4:i,a=t.signal,(u=new XMLHttpRequest).timeout=s,u.open("POST",r,!0),u.setRequestHeader("Content-type","application/json; charset=utf-8"),o)for(l in o)"withCredentials"===l?u.withCredentials=!0:u.setRequestHeader(l,o[l]);return e.abrupt("return",new Promise(function(e,t){a.onabort=function(){u.abort();},u.onload=function(){e(u.responseText);},u.onerror=function(e){t(e);},u.onabort=function(){t(new DOMException("The request aborted.","AbortError"));},u.send(JSON.stringify(n));}));case 7:case"end":return e.stop()}},e)}))).apply(this,arguments)}var isProd=!0;function _typeof$1(e){return (_typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck$1(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn$1(e,t){return !t||"object"!==_typeof$1(t)&&"function"!=typeof t?_assertThisInitialized$1(e):t}function _assertThisInitialized$1(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _inherits$1(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf$1(e,t);}function _wrapNativeSuper$1(e){var t="function"==typeof Map?new Map:void 0;return (_wrapNativeSuper$1=function(e){if(null===e||!_isNativeFunction$1(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r);}function r(){return _construct$1(e,arguments,_getPrototypeOf$1(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf$1(r,e)})(e)}function isNativeReflectConstruct$1(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return !1}}function _construct$1(e,t,r){return (_construct$1=isNativeReflectConstruct$1()?Reflect.construct:function(e,t,r){var n=[null];n.push.apply(n,t);var o=new(Function.bind.apply(e,n));return r&&_setPrototypeOf$1(o,r.prototype),o}).apply(null,arguments)}function _isNativeFunction$1(e){return -1!==Function.toString.call(e).indexOf("[native code]")}function _setPrototypeOf$1(e,t){return (_setPrototypeOf$1=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _getPrototypeOf$1(e){return (_getPrototypeOf$1=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var RtmBaseError=function(e){function t(e,r,n){var o;return _classCallCheck$1(this,t),(o=_possibleConstructorReturn$1(this,_getPrototypeOf$1(t).call(this,genErrorMessage(r,e)))).code=r,n&&console.error(n),o}return _inherits$1(t,_wrapNativeSuper$1(Error)),t}(),RtmInternalError=function(e){function t(e,r){var n;return _classCallCheck$1(this,t),(n=_possibleConstructorReturn$1(this,_getPrototypeOf$1(t).call(this,genErrorMessage(r,e)))).code=r,n.name="RtmInternalError",n}return _inherits$1(t,_wrapNativeSuper$1(Error)),t}(),genError=function(){return function(e){function t(e){_classCallCheck$1(this,t);var r=Object.keys(e);return _possibleConstructorReturn$1(this,_getPrototypeOf$1(t).call(this,e[r[0]],r[0]))}return _inherits$1(t,RtmInternalError),t}()},CommonError=genError(),RtmTimeoutError=function(e){function t(e,r,n){var o;return _classCallCheck$1(this,t),(o=_possibleConstructorReturn$1(this,_getPrototypeOf$1(t).call(this,genErrorMessage(r,e)))).code=r,o.name="RtmTimeoutError",n&&console.error(n),o}return _inherits$1(t,RtmBaseError),t}(),RtmInvalidArgumentError=function(e){function t(){var e,r;_classCallCheck$1(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return (r=_possibleConstructorReturn$1(this,(e=_getPrototypeOf$1(t)).call.apply(e,[this].concat(o)))).name="RtmInvalidArgumentError",r}return _inherits$1(t,RtmBaseError),t}(),RtmInvalidStatusError=function(e){function t(){var e,r;_classCallCheck$1(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return (r=_possibleConstructorReturn$1(this,(e=_getPrototypeOf$1(t)).call.apply(e,[this].concat(o)))).name="RtmInvalidStatusError",r}return _inherits$1(t,RtmBaseError),t}(),RtmLimitExceededError=function(e){function t(){var e,r;_classCallCheck$1(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return (r=_possibleConstructorReturn$1(this,(e=_getPrototypeOf$1(t)).call.apply(e,[this].concat(o)))).name="RtmLimitExceededError",r}return _inherits$1(t,RtmBaseError),t}(),RtmInvokeTooOftenError=function(e){function t(){var e,r;_classCallCheck$1(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return (r=_possibleConstructorReturn$1(this,(e=_getPrototypeOf$1(t)).call.apply(e,[this].concat(o)))).name="RtmInvokeTooOftenError",r}return _inherits$1(t,RtmBaseError),t}(),RtmUnavailableError=function(e){function t(){var e,r;_classCallCheck$1(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return (r=_possibleConstructorReturn$1(this,(e=_getPrototypeOf$1(t)).call.apply(e,[this].concat(o)))).name="RtmUnavailableError",r.serverCode=void 0,r}return _inherits$1(t,RtmBaseError),t}(),RtmUnauthenticatedError=function(e){function t(){var e,r;_classCallCheck$1(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return (r=_possibleConstructorReturn$1(this,(e=_getPrototypeOf$1(t)).call.apply(e,[this].concat(o)))).name="RtmUnauthenticatedError",r.serverCode=void 0,r}return _inherits$1(t,RtmBaseError),t}(),RtmUnknownError=function(e){function t(){var e,r;_classCallCheck$1(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return (r=_possibleConstructorReturn$1(this,(e=_getPrototypeOf$1(t)).call.apply(e,[this].concat(o)))).name="RtmUnknownError",r}return _inherits$1(t,RtmBaseError),t}(),isTimeout=function(e){return e instanceof RtmTimeoutError||e instanceof TimeoutError},isRtmError=function(e){return e instanceof RtmBaseError||e instanceof RtmTimeoutError},invalidArgumentMessage="The %s in the arguments is invalid",genTimeoutMessage=function(e,t,r){return ['Executing "%s.%s" timed out after %ds',e,t,r/1e3]},merge$1=_createAssigner(function(e,t,r){_baseMerge(e,t,r);}),merge_1=merge$1,s=1e3,m=60*s,h=60*m,d=24*h,w=7*d,y=365.25*d,ms=function(e,t){t=t||{};var r=_typeof(e);if("string"===r&&e.length>0)return parse(e);if("number"===r&&!1===isNaN(e))return t.long?fmtLong(e):fmtShort(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function parse(e){if(!((e=String(e)).length>100)){var t=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var r=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*y;case"weeks":case"week":case"w":return r*w;case"days":case"day":case"d":return r*d;case"hours":case"hour":case"hrs":case"hr":case"h":return r*h;case"minutes":case"minute":case"mins":case"min":case"m":return r*m;case"seconds":case"second":case"secs":case"sec":case"s":return r*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}function fmtShort(e){var t=Math.abs(e);return t>=d?Math.round(e/d)+"d":t>=h?Math.round(e/h)+"h":t>=m?Math.round(e/m)+"m":t>=s?Math.round(e/s)+"s":e+"ms"}function fmtLong(e){var t=Math.abs(e);return t>=d?plural(e,t,d,"day"):t>=h?plural(e,t,h,"hour"):t>=m?plural(e,t,m,"minute"):t>=s?plural(e,t,s,"second"):e+" ms"}function plural(e,t,r,n){var o=t>=1.5*r;return Math.round(e/r)+" "+n+(o?"s":"")}function setup(e){function t(e){for(var t=0,n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){var i;function s(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];if(s.enabled){var o=s,a=Number(new Date),u=a-(i||a);o.diff=u,o.prev=i,o.curr=a,i=a,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");var l=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,function(e,n){if("%%"===e)return e;l++;var i=r.formatters[n];if("function"==typeof i){var s=t[l];e=i.call(o,s),t.splice(l,1),l--;}return e}),r.formatArgs.call(o,t),(o.log||r.log).apply(o,t);}}return s.namespace=e,s.enabled=r.enabled(e),s.useColors=r.useColors(),s.color=t(e),s.destroy=n,s.extend=o,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function n(){var e=r.instances.indexOf(this);return -1!==e&&(r.instances.splice(e,1),!0)}function o(e,t){var n=r(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},r.disable=function(){var e=[].concat(_toConsumableArray(r.names.map(i)),_toConsumableArray(r.skips.map(i).map(function(e){return "-"+e}))).join(",");return r.enable(""),e},r.enable=function(e){var t;r.save(e),r.names=[],r.skips=[];var n=("string"==typeof e?e:"").split(/[\s,]+/),o=n.length;for(t=0;t<o;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){var i=r.instances[t];i.enabled=r.enabled(i.namespace);}},r.enabled=function(e){if("*"===e[e.length-1])return !0;var t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return !1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return !0;return !1},r.humanize=ms,Object.keys(e).forEach(function(t){r[t]=e[t];}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}var common=setup,browser=createCommonjsModule(function(e,t){t.log=function(){var e;return "object"===("undefined"==typeof console?"undefined":_typeof(console))&&console.log&&(e=console).log.apply(e,arguments)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;var r="color: "+this.color;t.splice(1,0,r,"color: inherit");var n=0,o=0;t[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(n++,"%c"===e&&(o=n));}),t.splice(o,0,r);},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug");}catch(e){}},t.load=function(){var e;try{e=t.storage.getItem("debug");}catch(e){}!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return !0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return !1;return "undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=common(t),e.exports.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return "[UnexpectedJSONParseError]: "+e.message}};}),browser_1=browser.log,browser_2=browser.formatArgs,browser_3=browser.save,browser_4=browser.load,browser_5=browser.useColors,browser_6=browser.storage,browser_7=browser.colors,key$2="__global_unique_id__",gud=function(){return commonjsGlobal$1[key$2]=(commonjsGlobal$1[key$2]||0)+1},$values=_objectToArray(!1);_export(_export.S,"Object",{values:function(e){return $values(e)}}),_export(_export.S,"Reflect",{has:function(e,t){return t in e}});var umd=createCommonjsModule(function(e,t){!function(e){var t=function(e){return "undefined"!=typeof self&&self&&e in self?self[e]:"undefined"!=typeof window&&window&&e in window?window[e]:void 0!==commonjsGlobal$1&&commonjsGlobal$1&&e in commonjsGlobal$1?commonjsGlobal$1[e]:"undefined"!=typeof globalThis&&globalThis?globalThis[e]:void 0},r=t("document"),n=t("Headers"),o=t("Response"),i=t("ReadableStream"),s=t("fetch"),a=t("AbortController"),u=t("FormData"),l=function(e){return null!==e&&"object"===_typeof(e)},c="function"==typeof a,p="function"==typeof i,f="function"==typeof u,d=function e(){for(var t={},r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];for(var i=0,s=n;i<s.length;i++){var a=s[i];if(Array.isArray(a))Array.isArray(t)||(t=[]),t=[].concat(_toConsumableArray(t),_toConsumableArray(a));else if(l(a))for(var u=0,c=Object.entries(a);u<c.length;u++){var p=_slicedToArray(c[u],2),f=p[0],d=p[1];l(d)&&Reflect.has(t,f)&&(d=e(t[f],d)),t=_objectSpread2({},t,_defineProperty({},f,d));}}return t},g=["get","post","put","patch","head","delete"],h={json:"application/json",text:"text/*",formData:"multipart/form-data",arrayBuffer:"*/*",blob:"*/*"},b=new Set(["get","put","head","delete","options","trace"]),_=new Set([408,413,429,500,502,503,504]),y=new Set([413,429,503]),m=function(e){function t(e){var r;return _classCallCheck(this,t),(r=_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e.statusText))).name="HTTPError",r.response=e,r}return _inherits(t,e),t}(_wrapNativeSuper(Error)),v=function(e){function t(){var e;return _classCallCheck(this,t),(e=_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,"Request timed out"))).name="TimeoutError",e}return _inherits(t,e),t}(_wrapNativeSuper(Error)),$=function(e){return new Promise(function(t,r){e>2147483647?r(new RangeError("The `timeout` option cannot be greater than 2147483647")):setTimeout(t,e);})},E=function(e,t,r){return new Promise(function(n,o){e.then(n).catch(o),$(t).then(function(){c&&r.abort(),o(new v);}).catch(o);})},I=function(e){return g.includes(e)?e.toUpperCase():e},S=function(){function e(t,i){var s=this,l=i.timeout,g=void 0===l?1e4:l,_=i.hooks,y=i.throwHttpErrors,v=void 0===y||y,E=i.searchParams,S=i.json,w=_objectWithoutProperties(i,["timeout","hooks","throwHttpErrors","searchParams","json"]);if(_classCallCheck(this,e),this._retryCount=0,this._options=_objectSpread2({method:"get",credentials:"same-origin",retry:2},w),c&&(this.abortController=new a,this._options.signal&&this._options.signal.addEventListener("abort",function(){s.abortController.abort();}),this._options.signal=this.abortController.signal),this._options.method=I(this._options.method),this._options.prefixUrl=String(this._options.prefixUrl||""),this._input=String(t||""),this._options.prefixUrl&&this._input.startsWith("/"))throw new Error("`input` must not begin with a slash when using `prefixUrl`");if(this._options.prefixUrl&&!this._options.prefixUrl.endsWith("/")&&(this._options.prefixUrl+="/"),this._input=this._options.prefixUrl+this._input,E){var O=new URL(this._input,r&&r.baseURI);if("string"==typeof E||URLSearchParams&&E instanceof URLSearchParams)O.search=E;else {if(!Object.values(E).every(function(e){return "number"==typeof e||"string"==typeof e}))throw new Error("The `searchParams` option must be either a string, `URLSearchParams` instance or an object with string and number values");O.search=new URLSearchParams(E).toString();}this._input=O.toString();}this._timeout=g,this._hooks=d({beforeRequest:[],afterResponse:[]},_),this._throwHttpErrors=v;var R=new n(this._options.headers||{});if((f&&this._options.body instanceof u||this._options.body instanceof URLSearchParams)&&R.has("content-type"))throw new Error("The `content-type` header cannot be used with a ".concat(this._options.body.constructor.name," body. It will be set automatically."));if(S){if(this._options.body)throw new Error("The `json` option cannot be used with the `body` option");R.set("content-type","application/json"),this._options.body=JSON.stringify(S);}this._options.headers=R;for(var T,A=(T=_asyncToGenerator(regenerator.mark(function e(){var t,r,n,i,a,u,l;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,$(1);case 2:return e.next=4,s._fetch();case 4:t=e.sent,r=s._hooks.afterResponse,n=Array.isArray(r),i=0,r=n?r:r[Symbol.iterator]();case 6:if(!n){e.next=12;break}if(!(i>=r.length)){e.next=9;break}return e.abrupt("break",23);case 9:a=r[i++],e.next=16;break;case 12:if(!(i=r.next()).done){e.next=15;break}return e.abrupt("break",23);case 15:a=i.value;case 16:return u=a,e.next=19,u(t.clone());case 19:(l=e.sent)instanceof o&&(t=l);case 21:e.next=6;break;case 23:if(t.ok||!s._throwHttpErrors){e.next=25;break}throw new m(t);case 25:if(!s._options.onDownloadProgress){e.next=31;break}if("function"==typeof s._options.onDownloadProgress){e.next=28;break}throw new TypeError("The `onDownloadProgress` option must be a function");case 28:if(p){e.next=30;break}throw new Error("Streams are not supported in your environment. `ReadableStream` is missing.");case 30:return e.abrupt("return",s._stream(t.clone(),s._options.onDownloadProgress));case 31:return e.abrupt("return",t);case 32:case"end":return e.stop()}},e)})),function(){return T.apply(this,arguments)}),N=b.has(this._options.method.toLowerCase()),L=N?this._retry(A):A(),P=function(){var e=_slicedToArray(k[C],2),t=e[0],r=e[1];L[t]=_asyncToGenerator(regenerator.mark(function e(){return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return R.set("accept",r),e.next=3,L;case 3:return e.t0=t,e.abrupt("return",e.sent.clone()[e.t0]());case 5:case"end":return e.stop()}},e)}));},C=0,k=Object.entries(h);C<k.length;C++)P();return L}return _createClass(e,[{key:"_calculateRetryDelay",value:function(e){if(this._retryCount++,this._retryCount<this._options.retry&&!(e instanceof v)){if(e instanceof m){if(!_.has(e.response.status))return 0;var t=e.response.headers.get("Retry-After");if(t&&y.has(e.response.status)){var r=Number(t);return Number.isNaN(r)?r=Date.parse(t)-Date.now():r*=1e3,r}if(413===e.response.status)return 0}return .3*Math.pow(2,this._retryCount-1)*1e3}return 0}},{key:"_retry",value:(l=_asyncToGenerator(regenerator.mark(function e(t){var r;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,t();case 3:return e.abrupt("return",e.sent);case 6:if(e.prev=6,e.t0=e.catch(0),!(0!==(r=this._calculateRetryDelay(e.t0))&&this._retryCount>0)){e.next=13;break}return e.next=12,$(r);case 12:return e.abrupt("return",this._retry(t));case 13:if(!this._throwHttpErrors){e.next=15;break}throw e.t0;case 15:case"end":return e.stop()}},e,this,[[0,6]])})),function(e){return l.apply(this,arguments)})},{key:"_fetch",value:(t=_asyncToGenerator(regenerator.mark(function e(){var t,r,n,o,i;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:t=this._hooks.beforeRequest,r=Array.isArray(t),n=0,t=r?t:t[Symbol.iterator]();case 1:if(!r){e.next=7;break}if(!(n>=t.length)){e.next=4;break}return e.abrupt("break",16);case 4:o=t[n++],e.next=11;break;case 7:if(!(n=t.next()).done){e.next=10;break}return e.abrupt("break",16);case 10:o=n.value;case 11:return i=o,e.next=14,i(this._options);case 14:e.next=1;break;case 16:if(!1!==this._timeout){e.next=18;break}return e.abrupt("return",s(this._input,this._options));case 18:return e.abrupt("return",E(s(this._input,this._options),this._timeout,this.abortController));case 19:case"end":return e.stop()}},e,this)})),function(){return t.apply(this,arguments)})},{key:"_stream",value:function(e,t){var r=Number(e.headers.get("content-length"))||0,n=0;return new o(new i({start:function(o){var i=e.body.getReader();function s(){return a.apply(this,arguments)}function a(){return (a=_asyncToGenerator(regenerator.mark(function e(){var a,u,l;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,i.read();case 2:if(a=e.sent,u=a.done,l=a.value,!u){e.next=8;break}return o.close(),e.abrupt("return");case 8:t&&(n+=l.byteLength,t({percent:0===r?0:n/r,transferredBytes:n,totalBytes:r},l)),o.enqueue(l),s();case 11:case"end":return e.stop()}},e)}))).apply(this,arguments)}t&&t({percent:0,transferredBytes:0,totalBytes:r},new Uint8Array),s();}}))}}]),e;var t,l;}(),w=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];for(var n=0,o=t;n<o.length;n++){var i=o[n];if((!l(i)||Array.isArray(i))&&void 0!==i)throw new TypeError("The `options` argument must be an object")}return d.apply(void 0,[{}].concat(t))},O=function e(t){for(var r=function(e,r){return new S(e,w(t,r))},n=function(){var e=i[o];r[e]=function(r,n){return new S(r,w(t,n,{method:e}))};},o=0,i=g;o<i.length;o++)n();return r.create=function(t){return e(w(t))},r.extend=function(r){return e(w(t,r))},r}();e.HTTPError=m,e.TimeoutError=v,e.default=O,Object.defineProperty(e,"__esModule",{value:!0});}(t);}),ky=unwrapExports(umd),hasProp=Object.prototype.hasOwnProperty;function throwsMessage(e){return "[Throws: "+(e?e.message:"?")+"]"}function safeGetValueFromPropertyOnObject(e,t){if(hasProp.call(e,t))try{return e[t]}catch(e){return throwsMessage(e)}return e[t]}function ensureProperties(e){var t=[];return function e(r){if(null===r||"object"!==_typeof(r))return r;if(-1!==t.indexOf(r))return "[Circular]";if(t.push(r),"function"==typeof r.toJSON)try{var n=e(r.toJSON());return t.pop(),n}catch(e){return throwsMessage(e)}if(Array.isArray(r)){var o=r.map(e);return t.pop(),o}var i=Object.keys(r).reduce(function(t,n){return t[n]=e(safeGetValueFromPropertyOnObject(r,n)),t},{});return t.pop(),i}(e)}var safeJsonStringify=function(e,t,r){return JSON.stringify(ensureProperties(e),t,r)},ensureProperties_1=ensureProperties;safeJsonStringify.ensureProperties=ensureProperties_1;var AP_CONCURRENT_REQ_NUM=2,APP_ID_LENGTH=32,AP_REQUEST_TIMEOUT=1e4,SOCKET_KEEPALIVE_TIMEOUT=4500,KEEPALIVE_INTERVAL=1e3,SOCKET_RETRY_INTERVAL=1500,CLIENT_LOGIN_TIMEOUT=8e3,LOGIN_RESP_TIMEOUT=5e3,MESSAGE_MIN_COMPRESSION_LEN=128,MESSAGE_SEND_TIMEOUT=1e4,COMMON_REQUEST_TIMEOUT=1e4,DIALOGUE_EXPIRE_TIMEOUT=1e4,LRU_MAX_ITEMS=1e4,MESSAGE_RETRY_TIMEOUT=6e3,LOGOUT_SOCKET_CLOSE_TIMEOUT=5e3,LOGIN_QPS_LIMIT=2,MESSAGE_TEXT_MAX_BYTES=32768,ONLINE_MESSAGE_DEDUP_DELAY=750,OFFLINE_MESSAGE_DEDUP_DELAY=1500,MSG_DEDUP_MAX_LEN=200,LOG_UPLOAD_MAX_ITEMS=40,MAX_JOINED_CHANNELS=20,INVITATION_EXPIRE_TIMEOUT=6e4,INVITATION_EXTRA_MAX_BYTES=8192,REMOTE_INVITATION_WAIT_ACCEPT_ACK_TIMEOUT=5e3,REMOTE_INVITATION_ACCEPT_RESEND_INTERVAL=1e3,LOCAL_INVITATION_ACK_TIMEOUT=3e4,LOCAL_INVITATION_RESEND_INTERVAL=2e3,MEMBER_COUNT_UPDATED_EVENT_INTERVAL=1e3,CHANNEL_ATTRIBUTES_CACHE_MAX_LENGTH=1e4;function asyncGeneratorStep$2(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value;}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o);}function _asyncToGenerator$2(e){return function(){var t=this,r=arguments;return new Promise(function(n,o){var i=e.apply(t,r);function s(e){asyncGeneratorStep$2(i,n,o,s,a,"next",e);}function a(e){asyncGeneratorStep$2(i,n,o,s,a,"throw",e);}s(void 0);})}}function _classCallCheck$2(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$1(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function _createClass$1(e,t,r){return t&&_defineProperties$1(e.prototype,t),r&&_defineProperties$1(e,r),e}var uploadLog=browser("RTM:DEBUG"),UploadState;uploadLog.enabled=!isProd,function(e){e[e.Uploading=0]="Uploading",e[e.Free=1]="Free";}(UploadState||(UploadState={}));var LogUploader=function(){function e(t){_classCallCheck$2(this,e),this.uploadRequest=void 0,this.uploadState=void 0,this.uploadResendCount=void 0,this.LogCache=void 0,this.LogsToPost=void 0,this.processId=void 0,this.sdkVersion=void 0,this.logId=void 0,this.processId=t.processId,this.sdkVersion=t.sdkVersion,this.uploadRequest=t.uploadRequest,this.uploadState=UploadState.Free,this.uploadResendCount=0,this.LogCache=[],this.LogsToPost=[],this.logId=0;}return _createClass$1(e,[{key:"upload",value:function(e){this.LogCache.push(e),this.uploadState===UploadState.Free&&(this.LogsToPost=this.LogCache.length<LOG_UPLOAD_MAX_ITEMS?this.LogCache.splice(0,this.LogCache.length):this.LogCache.splice(0,LOG_UPLOAD_MAX_ITEMS),this.postLog(this.LogsToPost));}},{key:"postLog",value:function(e){var t=this;this.uploadState=UploadState.Uploading,setTimeout(_asyncToGenerator$2(regenerator.mark(function r(){var n,o;return regenerator.wrap(function(r){for(;;)switch(r.prev=r.next){case 0:return n={sdk_version:t.sdkVersion,process_id:t.processId,payload:JSON.stringify(e)},r.prev=1,r.next=4,t.uploadRequest(n);case 4:r.next=12;break;case 6:return r.prev=6,r.t0=r.catch(1),console.error(r.t0),o=t.uploadResendCount++<2?200:1e4,setTimeout(function(){return t.postLog(t.LogsToPost)},o),r.abrupt("return");case 12:if(uploadLog('The logs uploaded for "process-'.concat(processId,'"')),0!==t.LogCache.length){r.next=16;break}return t.uploadState=UploadState.Free,r.abrupt("return");case 16:t.uploadResendCount=0,t.LogsToPost=t.LogCache.length<LOG_UPLOAD_MAX_ITEMS?t.LogCache.splice(0,t.LogCache.length):t.LogCache.splice(0,LOG_UPLOAD_MAX_ITEMS),t.postLog(t.LogsToPost);case 19:case"end":return r.stop()}},r,null,[[1,6]])})),3e3);}}]),e}();function _classCallCheck$3(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn$2(e,t){return !t||"object"!==_typeof$2(t)&&"function"!=typeof t?_assertThisInitialized$2(e):t}function _getPrototypeOf$2(e){return (_getPrototypeOf$2=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _assertThisInitialized$2(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _inherits$2(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf$2(e,t);}function _setPrototypeOf$2(e,t){return (_setPrototypeOf$2=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _toConsumableArray$2(e){return _arrayWithoutHoles$2(e)||_iterableToArray$2(e)||_nonIterableSpread$2()}function _nonIterableSpread$2(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray$2(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles$2(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}function _typeof$2(e){return (_typeof$2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function asyncGeneratorStep$3(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value;}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o);}function _asyncToGenerator$3(e){return function(){var t=this,r=arguments;return new Promise(function(n,o){var i=e.apply(t,r);function s(e){asyncGeneratorStep$3(i,n,o,s,a,"next",e);}function a(e){asyncGeneratorStep$3(i,n,o,s,a,"throw",e);}s(void 0);})}}var LOG_SERVICE_MAIN_DOMAIN="logservice-rtm.agora.io",LOG_SERVICE_BACKUP_DOMAIN="logservice.agora.io",uploadRequest=function(){var e=_asyncToGenerator$3(regenerator.mark(function e(t){var r,n,o;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:e.next=2;break;case 2:return r={mode:"cors",cache:"no-cache",credentials:"include",headers:{"Content-Type":"application/json"},body:JSON.stringify(t),retry:1,timeout:1e4},e.prev=3,n="https://".concat(LOG_SERVICE_MAIN_DOMAIN,"/upload/v1"),e.next=7,ky.post(n,r);case 7:e.next=14;break;case 9:return e.prev=9,e.t0=e.catch(3),o="https://".concat(LOG_SERVICE_BACKUP_DOMAIN,"/upload/v1"),e.next=14,ky.post(o,r);case 14:case"end":return e.stop()}},e,null,[[3,9]])}));return function(t){return e.apply(this,arguments)}}(),logUploader=new LogUploader({processId:"process-".concat(processId),sdkVersion:"Agora_RTM_SDK_for_Web_".concat(BUILD),uploadRequest:uploadRequest}),blacklistedKeywords=["text","payload","rawMessage"],filterLogObject=function(e){return omit_1(e,blacklistedKeywords)},formatLogTextAndParameters=function(e,t){if(e instanceof Error)return e.message;if("string"!=typeof e)return JSON.stringify(filterLogObject(e));var r=t.map(function(e){if(e instanceof Error)return e.message;var t=function(e){return "object"===_typeof$2(e)?isPlainObject$1(e)?filterLogObject(e):e.constructor&&e.constructor.name:e};return "object"===_typeof$2(e)?safeJsonStringify(Array.isArray(e)?e.map(t):t(e)):e});return util_1.apply(void 0,[e.replace(/%[oO%]/g,function(e){return "%%"===e?"%":"%o"===e||"%O"===e?"%s":e})].concat(_toConsumableArray$2(r)))},logItemId=1,logAndUploadGenerator=function(e,t){var r=browser(e);r.useColors=!1;var n=function n(o){for(var i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++)s[a-1]=arguments[a];var u,l=addPeriodIfNeeded(o);t.logFilter.track=!0,u=formatLogTextAndParameters(l,s),t.enableLogUpload&&logUploader.upload({log_item_id:"".concat(logItemId++),log_level:e,payload_str:"[".concat(getUTCTimestamp(),"] ").concat(e," - ").concat(void 0===u?formatLogTextAndParameters(o,s):u)}),merge_1(r,n);var c=function(){return void 0===u?r.apply(void 0,[l].concat(s)):r(u)};switch(e){case"RTM:INFO":t.logFilter.info&&c();break;case"RTM:WARN":t.logFilter.warn&&c();break;case"RTM:ERROR":t.logFilter.error&&c();break;case"RTM:TRACK":t.logFilter.track&&c();break;case"RTM:MSG:RECV":case"RTM:MSG:SEND":case"RTM:DEBUG":t.logFilter.debug&&c();}};return merge_1(n,r),n},loggerId,prefixer=function(e){return function(t){var r=1===loggerId||void 0===e?"":"Ins#".concat(e," ");return "".concat(r).concat(t)}},loggerGenerator=function(e,t,r){var n=prefixer(loggerId),o=logAndUploadGenerator("RTM:".concat(t),r);return o.enabled=!0,o.log=function(t){for(var r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return e.apply(void 0,[n(t)].concat(o))},o},createEventBase=function(){return function(e){function t(e,r){var n,o=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(_classCallCheck$3(this,t),(n=_possibleConstructorReturn$2(this,_getPrototypeOf$2(t).call(this))).logger=e,n.name=r,n.logError=void 0,n.genTracker=void 0,n.info=void 0,n.warn=void 0,n.log=void 0,n.genLogger=void 0,n.loggerId=void 0,n.loggerId=e.loggerId,n.info=e.info,n.warn=e.warn,n.logError=e.logError,n.genLogger=e.genLogger,n.genTracker=e.genTracker,n.log=e.genLogger("RTM:DEBUG","<".concat(r,"> ")),o){var i=n.emit.bind(_assertThisInitialized$2(n));n.emit=function(){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];var s=t[0],a=t.slice(1);n.genTracker("Event").apply(void 0,["%s: ".concat(a.length>0?"%s emitted with args: ".concat(a.map(function(){return "%o"})):"%s emitted"),r,s].concat(_toConsumableArray$2(a)));try{i.apply(void 0,t);}catch(e){n.logError("Caught in the callback function of the event %s",s,e);}};}return n}return _inherits$2(t,events),t}()};function initLoggerId(){return loggerId=gud()}var genInfoLogger=function(e){return loggerGenerator(console.log,"INFO",e)},genWarnLogger=function(e){return loggerGenerator(console.warn,"WARN",e)},genErrorLogger=function(e){return loggerGenerator(console.error,"ERROR",e)},debugLoggerGenerator=function(e,t){return function(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",o=logAndUploadGenerator(r,t),i=prefixer(e),s=console.debug;return o.log=function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return s.apply(void 0,[i(e)].concat(r))},o.enabled=!0,function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),i=1;i<t;i++)r[i-1]=arguments[i];return o.apply(void 0,[n+e].concat(r))}}},trackLoggerGenerator=function(e,t){return function(r){return debugLoggerGenerator(e,t)("RTM:TRACK","[".concat(r,"] "))}};function logged(e,t,r){var n=r;void 0===n&&(n=Object.getOwnPropertyDescriptor(e,t));var o=n.value;return n.value=function(){for(var e=this,r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];this.genTracker("Invoke").apply(void 0,["%s: ".concat(n.length>0?"%s with args: ".concat(n.map(function(){return "%o"})):"%s"),this.name,t].concat(n));var s=o.apply(this,n),a=Date.now();return _asyncToGenerator$3(regenerator.mark(function r(){var n;return regenerator.wrap(function(r){for(;;)switch(r.prev=r.next){case 0:return r.prev=0,r.next=3,s;case 3:n=r.sent,r.next=10;break;case 6:return r.prev=6,r.t0=r.catch(0),e.logError(r.t0),r.abrupt("return");case 10:n!==s&&e.genTracker("Resolve")("%s resolves after %dms",t,Date.now()-a),void 0!==n&&e.genTracker("Result")("%s result is %o",t,n);case 12:case"end":return r.stop()}},r,null,[[0,6]])}))(),s},n}function _objectWithoutProperties$1(e,t){if(null==e)return {};var r,n,o=_objectWithoutPropertiesLoose$1(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r]);}return o}function _objectWithoutPropertiesLoose$1(e,t){if(null==e)return {};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}var URI=$root.URI,Wrapper$2=Wrapper$1,PacketsAndURI=_objectWithoutProperties$1(ProtoPackets,["Wrapper"]),Packets=omit_1(PacketsAndURI,"URI"),nameToUri=function(e){var t="".concat(e,"Uri"),r=URI[t];if("number"!=typeof r||0===r)throw new TypeError("Got Unknown URI Name");return r};function uriToPacketName(e){return URI[e].slice(0,-3)}function getWrappedByName(e,t){var r=nameToUri(e),n=Packets[e],o=n.verify(t);if(null!==o)throw new TypeError(o);var i=new n(t),s=n.encode(i).finish();return new Wrapper$2({uri:r,data:s})}var nativeFloor=Math.floor,nativeRandom=Math.random;function baseRandom(e,t){return e+nativeFloor(nativeRandom()*(t-e+1))}var _baseRandom=baseRandom;function shuffleSelf(e,t){var r=-1,n=e.length,o=n-1;for(t=void 0===t?n:t;++r<t;){var i=_baseRandom(r,o),s=e[i];e[i]=e[r],e[r]=s;}return e.length=t,e}var _shuffleSelf=shuffleSelf;function arrayShuffle(e){return _shuffleSelf(_copyArray(e))}var _arrayShuffle=arrayShuffle;function baseValues(e,t){return _arrayMap(t,function(t){return e[t]})}var _baseValues=baseValues;function values(e){return null==e?[]:_baseValues(e,keys_1(e))}var values_1=values;function baseShuffle(e){return _shuffleSelf(values_1(e))}var _baseShuffle=baseShuffle;function shuffle(e){return (isArray_1(e)?_arrayShuffle:_baseShuffle)(e)}var shuffle_1=shuffle;function _toConsumableArray$3(e){return _arrayWithoutHoles$3(e)||_iterableToArray$3(e)||_nonIterableSpread$3()}function _nonIterableSpread$3(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray$3(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles$3(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}var AP_DOMAINS_CN=["ap-web-1.agoraio.cn","ap-web-2.agoraio.cn","ap-web-3.agoraio.cn","ap-web-4.agoraio.cn"],AP_DOMAINS_IO=["ap-web-1.agora.io","ap-web-2.agora.io","ap-web-3.agora.io","ap-web-4.agora.io"],EDGE_ENV_PORT={0:9591,1:9593},getUrl=function(e){return "https://".concat(e,"/api/v1")};function getEdgeDomain(e,t){var r=t?"agoraio.cn":"agora.io";return "".concat(e.split(".").join("-"),".edge.").concat(r)}var cnUrl$=of.apply(void 0,_toConsumableArray$3(shuffle_1(AP_DOMAINS_CN.map(getUrl)))),ioUrl$=of.apply(void 0,_toConsumableArray$3(shuffle_1(AP_DOMAINS_IO.map(getUrl))));function isValidAppId(e){return /^[a-zA-Z0-9]{32}$/.test(e)}function isValidId(e){return "string"==typeof e&&/^[a-zA-Z0-9!#$%&()+\-:;<=.>?@[\]^_{}|~,\s]{1,64}$/.test(e)&&"null"!==e}function isValidIp(e){var t;try{t=e.split(".").map(function(e){return Number(e)});}catch(e){return !1}if(4!==t.length)return !1;if(0===t[0])return !1;var r=t,n=Array.isArray(r),o=0;for(r=n?r:r[Symbol.iterator]();;){var i;if(n){if(o>=r.length)break;i=r[o++];}else {if((o=r.next()).done)break;i=o.value;}var s=i;if(!Number.isInteger(s))return !1;if(s<0||s>255)return !1}return !0}function checkValidAttrGetByKeysArgs(e,t){if(!Array.isArray(t)||0===t.length||t.length>32||t.some(function(e){return 0===e.length||e.length>32}))throw new RtmInvalidArgumentError("arguments is not valid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);if(!isValidId(e))throw new RtmInvalidArgumentError("ID is invalid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT)}function _typeof$3(e){return (_typeof$3="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _slicedToArray$1(e,t){return _arrayWithHoles$1(e)||_iterableToArrayLimit$1(e,t)||_nonIterableRest$1()}function _nonIterableRest$1(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit$1(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e;}finally{try{n||null==a.return||a.return();}finally{if(o)throw i}}return r}function _arrayWithHoles$1(e){if(Array.isArray(e))return e}function _classCallCheck$4(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn$3(e,t){return !t||"object"!==_typeof$3(t)&&"function"!=typeof t?_assertThisInitialized$3(e):t}function _assertThisInitialized$3(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf$3(e){return (_getPrototypeOf$3=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _defineProperties$2(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function _createClass$2(e,t,r){return t&&_defineProperties$2(e.prototype,t),r&&_defineProperties$2(e,r),e}function _inherits$3(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf$3(e,t);}function _setPrototypeOf$3(e,t){return (_setPrototypeOf$3=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var SocketError=genError(),Socket=function(e){function t(e,r,n,o,i){var s;if(_classCallCheck$4(this,t),(s=_possibleConstructorReturn$3(this,_getPrototypeOf$3(t).call(this,i,uniquePrefixedId("Socket-",i.loggerId)))).ip=e,s.env=r,s.ticket=n,s.context=o,s.isSpoiled=!1,s.notLoggedIn=!0,s.receivedPacket=new Subject,s.open$=void 0,s.input$=new Subject,s.userJoin$=new Subject,s.attemptsSinceLastError=0,s.message$=new Subject,s.socket$=void 0,s.toClose=new Subject,s.toReconnect=new Subject,s.socketReconnector=function(e){var t=function(e){return s.attemptsSinceLastError+=1,s.warn("The %s of Env %d reconnecting %s",s.name,s.env,e.message),timer((s.attemptsSinceLastError-1)*SOCKET_RETRY_INTERVAL)};return e.pipe(catchError(function(e){return s.isSpoiled?EMPTY:(s.notLoggedIn=!0,s.emit("reconnect"),throwError(e))}),retryWhen(function(e){return e.pipe(switchMap(t))}),tap(function(){s.attemptsSinceLastError=0;}))},0!==r&&1!==r)throw new SocketError({ILLEGAL_RTM_ENV:"The env number is out of rtm env count"});if(!isValidIp(e))throw new SocketError({IP_NOT_VALID:"The ip from ap is not valid"});var a=EDGE_ENV_PORT[r],u=getEdgeDomain(e,"CN"===s.context.area),l="wss://".concat(u,":").concat(a);s.log("Opening websocket address %s for the Env %d",s.ip,s.env);var c=merge(s.input$,s.userJoin$.pipe(rateLimit(LOGIN_QPS_LIMIT)),s.message$).pipe(map$1(function(e){return Wrapper$1.encode(e).finish()}));return s.socket$=merge(makeWebSocketObservable(l,{protocols:[],makeWebSocket:function(e){var t=new WebSocket(e);return t.binaryType="arraybuffer",t}}),s.toReconnect).pipe(map$1(function(e){if(e instanceof Error)throw s.warn("Env_%d: Force reconnect the socket",s.env),e;return e(c).pipe(map$1(function(e){return Wrapper$1.decode(new Uint8Array(e))}))}),s.socketReconnector),s.open$=s.socket$.pipe(tap(function(e){s.log("Websocket opened",s.name),e.subscribe(function(e){var t=e.data,r=uriToPacketName(e.uri),n=Packets[r].decode(t),o=mergeWith_1({},omit_1(n,"toJSON"),function(e,t){return t instanceof long_1?longToStringIfNeeded(t):t}),i=!1;(n instanceof GroupEnterNotice||n instanceof GroupLeaveNotice)&&(n.instance.lessThanOrEqual(UINT32_MAX)&&(i=!0));if(n instanceof Message||n instanceof Ack){var a=n.instance,u=n.dialogue,l=n.sequence;(u.lessThanOrEqual(UINT32_MAX)||a.lessThanOrEqual(UINT32_MAX)||l.lessThan(1))&&(i=!0);}i?s.warn("Env_%d: Illegal %s, abandoned %o",s.env,r,o):("Pong"!==r&&s.genLogger("RTM:MSG:RECV")("Env_%d: %s %o",s.env,r,o),s.receivedPacket.next([r,n]));},function(){});}),mapTo(void 0),takeUntil(s.toClose),share()),s}return _inherits$3(t,createEventBase()),_createClass$2(t,[{key:"address",get:function(){return "".concat(this.ip,":").concat(EDGE_ENV_PORT[this.env])}}]),_createClass$2(t,[{key:"sendPacket",value:function(e,t){if("Ping"!==e){var r=mapValues_1(t,function(e){return e instanceof long_1?longToStringIfNeeded(e):e});this.genLogger("RTM:MSG:SEND")("Env_%d: %s %o",this.env,e,r);}var n=getWrappedByName(e,t);"UserJoin"===e?this.userJoin$.next(n):"Message"===e?this.message$.next(n):this.input$.next(n);}},{key:"close",value:function(){this.isSpoiled=!0,this.toClose.next();}},{key:"fromReceived",value:function(e){var t=this;return this.receivedPacket.pipe(tap(function(e){var r=_slicedToArray$1(e,2),n=r[0],o=r[1];"UserResp"===n&&(t.notLoggedIn=!1),"UserDrop"===n&&t.emit("socketUserDrop",o);}),filter(function(t){return _slicedToArray$1(t,1)[0]===e}),map$1(function(e){return _slicedToArray$1(e,2)[1]}))}},{key:"forceReconnect",value:function(){this.toReconnect.next(new SocketError({FORCE_RECONNECTING:"Connection seems broken, try force reconnecting"}));}}]),t}();function _typeof$4(e){return (_typeof$4="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function asyncGeneratorStep$4(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value;}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o);}function _asyncToGenerator$4(e){return function(){var t=this,r=arguments;return new Promise(function(n,o){var i=e.apply(t,r);function s(e){asyncGeneratorStep$4(i,n,o,s,a,"next",e);}function a(e){asyncGeneratorStep$4(i,n,o,s,a,"throw",e);}s(void 0);})}}function _toConsumableArray$4(e){return _arrayWithoutHoles$4(e)||_iterableToArray$4(e)||_nonIterableSpread$4()}function _nonIterableSpread$4(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray$4(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles$4(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}function _classCallCheck$5(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn$4(e,t){return !t||"object"!==_typeof$4(t)&&"function"!=typeof t?_assertThisInitialized$4(e):t}function _assertThisInitialized$4(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf$4(e){return (_getPrototypeOf$4=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits$4(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf$4(e,t);}function _setPrototypeOf$4(e,t){return (_setPrototypeOf$4=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ApResErrorMessage={INVALID_APP_ID:"Illegal App ID",NO_AUTHORIZED:"Signature verification failed",TOKEN_TIMEOUT:"Dynamic key expired",INVALID_TOKEN_UID:"UID in the security key(token) is not valid",APP_ID_NO_ACTIVATED:"The vendor is not activated",DYNAMIC_KEY_NOT_ENABLED:"The vendor did not enable the dynamic key, but uses the dynamic key",DYNAMIC_ENABLED_BUT_STATIC_KEY:"The vendor enabled the dynamic key, but uses the static key",TOKEN_EXPIRED:"The token has expired",INVALID_USER_ID:"The user ID to login does not match the token"},ApResErrorCode={5:"INVALID_APP_ID",7:"INVALID_USER_ID",9:"NO_AUTHORIZED",10:"TOKEN_TIMEOUT",11:"APP_ID_NO_ACTIVATED",12:"INVALID_TOKEN_UID",13:"TOKEN_EXPIRED",14:"DYNAMIC_KEY_NOT_ENABLED",15:"DYNAMIC_ENABLED_BUT_STATIC_KEY"},AccessPoint=function(e){function t(e,r){var n;return _classCallCheck$5(this,t),(n=_possibleConstructorReturn$4(this,_getPrototypeOf$4(t).call(this,r,"AccessPoint"))).context=e,n.apEdgeInfo$=void 0,n.apFinish$=new Subject,n.usedUrl=[],n.url$=zip(cnUrl$,ioUrl$).pipe(concatMap(function(e){return of.apply(void 0,_toConsumableArray$4(e))}),filter(function(e){return !some_1(n.usedUrl,function(t){return e[15]===t})}),tap(function(e){n.usedUrl.push(e[15]);}),take(AP_CONCURRENT_REQ_NUM),throwIfEmpty(function(){return t.runOutOfUrlSymbol}),catchError(function(e,r){return e===t.runOutOfUrlSymbol?(n.usedUrl=[],r):throwError(e)})),n.fetchAp=function(e,t){var r=uniquePrefixedId("AP-",n.loggerId);n.log("The AccessPoint requests %s(%s)",e,r);var o=new AbortController;return n.apFinish$.pipe(first()).subscribe(function(){return o.abort()}),defer$1(_asyncToGenerator$4(regenerator.mark(function r(){var i;return regenerator.wrap(function(r){for(;;)switch(r.prev=r.next){case 0:return i=getRandomInt(0,Number.MAX_SAFE_INTEGER),n.log("The AP-%d request uid param is %d",n.loggerId,i),r.abrupt("return",post({url:e,headers:{"Content-Type":"application/json","X-Packet-Service-Type":"0","X-Packet-URI":"69"},body:{flag:128,opid:1,key:t||n.context.key,cname:n.context.uid,detail:{},uid:i,sid:n.context.sid},signal:o.signal}));case 3:case"end":return r.stop()}},r)}))).pipe(catchError(function(t){return "AbortError"!==t.name&&(n.logError(t),n.warn("The AP server %s request failure",e)),EMPTY}),mergeMap(function(){var e=_asyncToGenerator$4(regenerator.mark(function e(t){var o,i,s,a,u,l,c,p,f,d,g,h,b,_,y,m,v;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(o=JSON.parse(t),n.log("The %s response is %o",r,o),s=(i=o).code,a=i.addresses,u=i.detail[9],0===s){e.next=30;break}if(l=s,s.toString().length>4&&(c=s.toString().padStart(8,"0"),p=c.slice(0,4),201===Number.parseInt(p,10)&&(l=Number.parseInt(c.slice(4,8),10))),f=l.toString(),Object.keys(ApResErrorCode).includes(f)){e.next=12;break}return (d=new RtmUnavailableError(["Login is rejected by the server. The response code is %d",s],LOGIN_ERR_REJECTED)).serverCode=l,e.abrupt("return",throwError(d));case 12:g=ApResErrorCode[f],h=ApResErrorMessage[g],e.t0=g,e.next="INVALID_APP_ID"===e.t0?17:"APP_ID_NO_ACTIVATED"===e.t0?17:"INVALID_USER_ID"===e.t0?20:"TOKEN_EXPIRED"===e.t0?23:"TOKEN_TIMEOUT"===e.t0?23:"NO_AUTHORIZED"===e.t0?26:"INVALID_TOKEN_UID"===e.t0?26:"DYNAMIC_KEY_NOT_ENABLED"===e.t0?26:"DYNAMIC_ENABLED_BUT_STATIC_KEY"===e.t0?26:29;break;case 17:return (b=new RtmUnauthenticatedError(h,LOGIN_ERR_INVALID_APP_ID)).serverCode=s,e.abrupt("return",throwError(b));case 20:return (_=new RtmUnauthenticatedError(h,LOGIN_ERR_INVALID_ARGUMENT)).serverCode=s,e.abrupt("return",throwError(_));case 23:return (y=new RtmUnauthenticatedError(h,LOGIN_ERR_TOKEN_EXPIRED)).serverCode=s,e.abrupt("return",throwError(y));case 26:return (m=new RtmUnauthenticatedError(h,LOGIN_ERR_INVALID_TOKEN)).serverCode=s,e.abrupt("return",throwError(m));case 29:return e.abrupt("return",throwError(assertNever("ApResErrType",g)));case 30:return v=a,n.context.area=u,e.abrupt("return",of.apply(void 0,_toConsumableArray$4(v).concat([queue$1])));case 35:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}()),mergeAll())},n.apEdgeInfo$=timer(0,2e3).pipe(take(6),takeUntil(n.apFinish$),mergeMap(function(){return n.url$}),mergeMap(function(e){return n.fetchAp(e)}),timeout(AP_REQUEST_TIMEOUT),catchError(function(e){return e instanceof TimeoutError&&n.warn("AP request timeout"),throwError(e)}),distinct(function(e){return e.ip})),n}return _inherits$4(t,createEventBase()),t}();function _typeof$5(e){return (_typeof$5="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _toConsumableArray$5(e){return _arrayWithoutHoles$5(e)||_iterableToArray$5(e)||_nonIterableSpread$5()}function _nonIterableSpread$5(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray$5(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles$5(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}function _classCallCheck$6(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$3(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function _createClass$3(e,t,r){return t&&_defineProperties$3(e.prototype,t),r&&_defineProperties$3(e,r),e}function _possibleConstructorReturn$5(e,t){return !t||"object"!==_typeof$5(t)&&"function"!=typeof t?_assertThisInitialized$5(e):t}function _assertThisInitialized$5(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf$5(e){return (_getPrototypeOf$5=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits$5(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf$5(e,t);}function _setPrototypeOf$5(e,t){return (_setPrototypeOf$5=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}AccessPoint.runOutOfUrlSymbol=Symbol("AP urls are used up");var ConnectionError=genError(),Connection=function(e){function t(e,r){var n;_classCallCheck$6(this,t),(n=_possibleConstructorReturn$5(this,_getPrototypeOf$5(t).call(this,r,"Connection"))).context=e,n.apClient=new AccessPoint(n.context,n.logger),n.lastOpenSockets=[new ReplaySubject(1),new ReplaySubject(1)],n.curOpenSockets=[void 0,void 0],n.socketOpeners=[void 0,void 0],n.openKeeperSubjects=[new Subject,new Subject],n.openKeeperSubs=[void 0,void 0],n.edgeInfoPool=[];var o=n.apClient.apEdgeInfo$.pipe(throwIfEmpty(function(){return new ConnectionError({AP_NO_AVAILABLE_EDGE:"No available edge address to connect"})}),filter(function(e){return !some_1(n.edgeInfoPool,e)}),tap(function(e){n.edgeInfoPool.push(e),n.log("An edge info got %o",e);}),tap({error:function(e){n.emit("connectionInitFailure",e);}}),shareReplay()),i="",s=Math.random()>=.5?1:0,a=1===s?0:1,u=o.pipe(mergeMap(function(e){var t=e.ip,o=e.ticket,i=new Socket(t,s,o,n.context,r);return n.apClient.apFinish$.next(void 0),i.open$.pipe(mapTo(i))}),tap(function(e){n.log("The websocket of ENV_%d opened to %s:%d",e.env,e.ip,EDGE_ENV_PORT[e.env]),n.curOpenSockets[s]=e,n.lastOpenSockets[s].next(e),i=e.ip;}),first(),share()),l=o.pipe(reduce(function(e,t){return [].concat(_toConsumableArray$5(e),[t])},[]),map$1(function(e){return sortBy_1(e,function(e){var t=e.ip;return calIpDistance(i,t)}).slice(-1)[0]}),first(),mergeMap(function(e){var t=e.ip,o=e.ticket,i=new Socket(t,a,o,n.context,r);return i.open$.pipe(tap(function(){n.lastOpenSockets[a].next(i),n.curOpenSockets[a]=i;}))}),share());return n.socketOpeners[s]=u.pipe(mergeMap(function(e){return e.open$.pipe(tap(function(){n.log("The websocket of first ENV_%d re-opened to %s:%d",e.env,e.ip,EDGE_ENV_PORT[e.env]),n.curOpenSockets[s]=e,n.lastOpenSockets[s].next(e);}))})),n.socketOpeners[a]=concat(u.pipe(skipLast(1),mapTo(void 0)),l),n.openKeeperSubjects.forEach(function(e,t){var r=e.pipe(switchAll());n.openKeeperSubs[t]=r.subscribe({error:n.logError});}),n}return _inherits$5(t,createEventBase()),_createClass$3(t,[{key:"initConnection",value:function(){var e=this;this.openKeeperSubjects.forEach(function(t,r){t.next(e.socketOpeners[r]);});}},{key:"closeSocket",value:function(e,t){if(![0,1].includes(e))throw new CommonError({INVALID_ENV:"The env argument is not 0 or 1"});var r=this.openKeeperSubs[e],n=this.curOpenSockets[e];this.openKeeperSubs[e]=void 0,this.curOpenSockets[e]=void 0,n&&(n.isSpoiled=!0,setTimeout(function(){n.close();},t)),r&&setTimeout(function(){r.unsubscribe();},t);}},{key:"waitClosing",value:function(e){var t=this;return e.isSpoiled=!0,e.open$.pipe(ignoreElements(),catchError(function(e){return e.message===lib_es5_1?EMPTY:throwError(e)}),timeout(LOGOUT_SOCKET_CLOSE_TIMEOUT),catchError(function(r){return r instanceof TimeoutError?(t.warn("Force closing the ENV_%d conneciton",e.env),EMPTY):throwError(r)}))}}]),t}(),$Reader$1=indexMinimal_4,$Writer$1=indexMinimal_2,$util$1=indexMinimal_6,$root$1=indexMinimal_8.default||(indexMinimal_8.default={}),Session=$root$1.Session=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.appId="",e.prototype.ver="",e.prototype.installId="",e.prototype.os=0,e.prototype.did="",e.prototype.index=null,e.prototype.token="",e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.appId&&e.hasOwnProperty("appId")&&t.uint32(42).string(e.appId),null!=e.ver&&e.hasOwnProperty("ver")&&t.uint32(50).string(e.ver),null!=e.installId&&e.hasOwnProperty("installId")&&t.uint32(66).string(e.installId),null!=e.os&&e.hasOwnProperty("os")&&t.uint32(128).int32(e.os),null!=e.did&&e.hasOwnProperty("did")&&t.uint32(138).string(e.did),null!=e.index&&e.hasOwnProperty("index")&&$root$1.Session.CommonIndex.encode(e.index,t.uint32(162).fork()).ldelim(),null!=e.token&&e.hasOwnProperty("token")&&t.uint32(170).string(e.token),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.Session;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 5:n.appId=e.string();break;case 6:n.ver=e.string();break;case 8:n.installId=e.string();break;case 16:n.os=e.int32();break;case 17:n.did=e.string();break;case 20:n.index=$root$1.Session.CommonIndex.decode(e,e.uint32());break;case 21:n.token=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid))return "sid: string expected";if(null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId))return "userId: string expected";if(null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high)))return "lts: integer|Long expected";if(null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high)))return "elapse: integer|Long expected";if(null!=e.appId&&e.hasOwnProperty("appId")&&!$util$1.isString(e.appId))return "appId: string expected";if(null!=e.ver&&e.hasOwnProperty("ver")&&!$util$1.isString(e.ver))return "ver: string expected";if(null!=e.installId&&e.hasOwnProperty("installId")&&!$util$1.isString(e.installId))return "installId: string expected";if(null!=e.os&&e.hasOwnProperty("os")&&!$util$1.isInteger(e.os))return "os: integer expected";if(null!=e.did&&e.hasOwnProperty("did")&&!$util$1.isString(e.did))return "did: string expected";if(null!=e.index&&e.hasOwnProperty("index")){var t=$root$1.Session.CommonIndex.verify(e.index);if(t)return "index."+t}return null!=e.token&&e.hasOwnProperty("token")&&!$util$1.isString(e.token)?"token: string expected":null},e.fromObject=function(e){if(e instanceof $root$1.Session)return e;var t=new $root$1.Session;if(null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.appId&&(t.appId=String(e.appId)),null!=e.ver&&(t.ver=String(e.ver)),null!=e.installId&&(t.installId=String(e.installId)),null!=e.os&&(t.os=0|e.os),null!=e.did&&(t.did=String(e.did)),null!=e.index){if("object"!==_typeof(e.index))throw TypeError(".Session.index: object expected");t.index=$root$1.Session.CommonIndex.fromObject(e.index);}return null!=e.token&&(t.token=String(e.token)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.appId="",r.ver="",r.installId="",r.os=0,r.did="",r.index=null,r.token="";}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.appId&&e.hasOwnProperty("appId")&&(r.appId=e.appId),null!=e.ver&&e.hasOwnProperty("ver")&&(r.ver=e.ver),null!=e.installId&&e.hasOwnProperty("installId")&&(r.installId=e.installId),null!=e.os&&e.hasOwnProperty("os")&&(r.os=e.os),null!=e.did&&e.hasOwnProperty("did")&&(r.did=e.did),null!=e.index&&e.hasOwnProperty("index")&&(r.index=$root$1.Session.CommonIndex.toObject(e.index,t)),null!=e.token&&e.hasOwnProperty("token")&&(r.token=e.token),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e.CommonIndex=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.index1="",e.prototype.index2="",e.prototype.index3="",e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.index1&&e.hasOwnProperty("index1")&&t.uint32(10).string(e.index1),null!=e.index2&&e.hasOwnProperty("index2")&&t.uint32(18).string(e.index2),null!=e.index3&&e.hasOwnProperty("index3")&&t.uint32(26).string(e.index3),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.Session.CommonIndex;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.index1=e.string();break;case 2:n.index2=e.string();break;case 3:n.index3=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.index1&&e.hasOwnProperty("index1")&&!$util$1.isString(e.index1)?"index1: string expected":null!=e.index2&&e.hasOwnProperty("index2")&&!$util$1.isString(e.index2)?"index2: string expected":null!=e.index3&&e.hasOwnProperty("index3")&&!$util$1.isString(e.index3)?"index3: string expected":null},e.fromObject=function(e){if(e instanceof $root$1.Session.CommonIndex)return e;var t=new $root$1.Session.CommonIndex;return null!=e.index1&&(t.index1=String(e.index1)),null!=e.index2&&(t.index2=String(e.index2)),null!=e.index3&&(t.index3=String(e.index3)),t},e.toObject=function(e,t){t||(t={});var r={};return t.defaults&&(r.index1="",r.index2="",r.index3=""),null!=e.index1&&e.hasOwnProperty("index1")&&(r.index1=e.index1),null!=e.index2&&e.hasOwnProperty("index2")&&(r.index2=e.index2),null!=e.index3&&e.hasOwnProperty("index3")&&(r.index3=e.index3),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),e}(),ApEvent=$root$1.ApEvent=function(){function e(e){if(this.linkServerList=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.apAddr="",e.prototype.linkServerList=$util$1.emptyArray,e.prototype.errCode=0,e.prototype.serverErrCode=0,e.prototype.isp="",e.prototype.opId=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.envId=0,e.prototype.flag=0,e.prototype.area="",e.prototype.responseTime=0,e.prototype.apLinkType="",e.encode=function(e,t){if(t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.apAddr&&e.hasOwnProperty("apAddr")&&t.uint32(50).string(e.apAddr),null!=e.linkServerList&&e.linkServerList.length)for(var r=0;r<e.linkServerList.length;++r)t.uint32(58).string(e.linkServerList[r]);return null!=e.errCode&&e.hasOwnProperty("errCode")&&t.uint32(72).int32(e.errCode),null!=e.serverErrCode&&e.hasOwnProperty("serverErrCode")&&t.uint32(80).int32(e.serverErrCode),null!=e.isp&&e.hasOwnProperty("isp")&&t.uint32(90).string(e.isp),null!=e.opId&&e.hasOwnProperty("opId")&&t.uint32(96).int64(e.opId),null!=e.envId&&e.hasOwnProperty("envId")&&t.uint32(104).int32(e.envId),null!=e.flag&&e.hasOwnProperty("flag")&&t.uint32(112).int32(e.flag),null!=e.area&&e.hasOwnProperty("area")&&t.uint32(122).string(e.area),null!=e.responseTime&&e.hasOwnProperty("responseTime")&&t.uint32(128).int32(e.responseTime),null!=e.apLinkType&&e.hasOwnProperty("apLinkType")&&t.uint32(138).string(e.apLinkType),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.ApEvent;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.apAddr=e.string();break;case 7:n.linkServerList&&n.linkServerList.length||(n.linkServerList=[]),n.linkServerList.push(e.string());break;case 9:n.errCode=e.int32();break;case 10:n.serverErrCode=e.int32();break;case 11:n.isp=e.string();break;case 12:n.opId=e.int64();break;case 13:n.envId=e.int32();break;case 14:n.flag=e.int32();break;case 15:n.area=e.string();break;case 16:n.responseTime=e.int32();break;case 17:n.apLinkType=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid))return "sid: string expected";if(null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId))return "userId: string expected";if(null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high)))return "lts: integer|Long expected";if(null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high)))return "elapse: integer|Long expected";if(null!=e.apAddr&&e.hasOwnProperty("apAddr")&&!$util$1.isString(e.apAddr))return "apAddr: string expected";if(null!=e.linkServerList&&e.hasOwnProperty("linkServerList")){if(!Array.isArray(e.linkServerList))return "linkServerList: array expected";for(var t=0;t<e.linkServerList.length;++t)if(!$util$1.isString(e.linkServerList[t]))return "linkServerList: string[] expected"}return null!=e.errCode&&e.hasOwnProperty("errCode")&&!$util$1.isInteger(e.errCode)?"errCode: integer expected":null!=e.serverErrCode&&e.hasOwnProperty("serverErrCode")&&!$util$1.isInteger(e.serverErrCode)?"serverErrCode: integer expected":null!=e.isp&&e.hasOwnProperty("isp")&&!$util$1.isString(e.isp)?"isp: string expected":null!=e.opId&&e.hasOwnProperty("opId")&&!($util$1.isInteger(e.opId)||e.opId&&$util$1.isInteger(e.opId.low)&&$util$1.isInteger(e.opId.high))?"opId: integer|Long expected":null!=e.envId&&e.hasOwnProperty("envId")&&!$util$1.isInteger(e.envId)?"envId: integer expected":null!=e.flag&&e.hasOwnProperty("flag")&&!$util$1.isInteger(e.flag)?"flag: integer expected":null!=e.area&&e.hasOwnProperty("area")&&!$util$1.isString(e.area)?"area: string expected":null!=e.responseTime&&e.hasOwnProperty("responseTime")&&!$util$1.isInteger(e.responseTime)?"responseTime: integer expected":null!=e.apLinkType&&e.hasOwnProperty("apLinkType")&&!$util$1.isString(e.apLinkType)?"apLinkType: string expected":null},e.fromObject=function(e){if(e instanceof $root$1.ApEvent)return e;var t=new $root$1.ApEvent;if(null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.apAddr&&(t.apAddr=String(e.apAddr)),e.linkServerList){if(!Array.isArray(e.linkServerList))throw TypeError(".ApEvent.linkServerList: array expected");t.linkServerList=[];for(var r=0;r<e.linkServerList.length;++r)t.linkServerList[r]=String(e.linkServerList[r]);}return null!=e.errCode&&(t.errCode=0|e.errCode),null!=e.serverErrCode&&(t.serverErrCode=0|e.serverErrCode),null!=e.isp&&(t.isp=String(e.isp)),null!=e.opId&&($util$1.Long?(t.opId=$util$1.Long.fromValue(e.opId)).unsigned=!1:"string"==typeof e.opId?t.opId=parseInt(e.opId,10):"number"==typeof e.opId?t.opId=e.opId:"object"===_typeof(e.opId)&&(t.opId=new $util$1.LongBits(e.opId.low>>>0,e.opId.high>>>0).toNumber())),null!=e.envId&&(t.envId=0|e.envId),null!=e.flag&&(t.flag=0|e.flag),null!=e.area&&(t.area=String(e.area)),null!=e.responseTime&&(t.responseTime=0|e.responseTime),null!=e.apLinkType&&(t.apLinkType=String(e.apLinkType)),t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.linkServerList=[]),t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;if(r.apAddr="",r.errCode=0,r.serverErrCode=0,r.isp="",$util$1.Long){var i=new $util$1.Long(0,0,!1);r.opId=t.longs===String?i.toString():t.longs===Number?i.toNumber():i;}else r.opId=t.longs===String?"0":0;r.envId=0,r.flag=0,r.area="",r.responseTime=0,r.apLinkType="";}if(null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.apAddr&&e.hasOwnProperty("apAddr")&&(r.apAddr=e.apAddr),e.linkServerList&&e.linkServerList.length){r.linkServerList=[];for(var s=0;s<e.linkServerList.length;++s)r.linkServerList[s]=e.linkServerList[s];}return null!=e.errCode&&e.hasOwnProperty("errCode")&&(r.errCode=e.errCode),null!=e.serverErrCode&&e.hasOwnProperty("serverErrCode")&&(r.serverErrCode=e.serverErrCode),null!=e.isp&&e.hasOwnProperty("isp")&&(r.isp=e.isp),null!=e.opId&&e.hasOwnProperty("opId")&&("number"==typeof e.opId?r.opId=t.longs===String?String(e.opId):e.opId:r.opId=t.longs===String?$util$1.Long.prototype.toString.call(e.opId):t.longs===Number?new $util$1.LongBits(e.opId.low>>>0,e.opId.high>>>0).toNumber():e.opId),null!=e.envId&&e.hasOwnProperty("envId")&&(r.envId=e.envId),null!=e.flag&&e.hasOwnProperty("flag")&&(r.flag=e.flag),null!=e.area&&e.hasOwnProperty("area")&&(r.area=e.area),null!=e.responseTime&&e.hasOwnProperty("responseTime")&&(r.responseTime=e.responseTime),null!=e.apLinkType&&e.hasOwnProperty("apLinkType")&&(r.apLinkType=e.apLinkType),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),Link=$root$1.Link=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.ec=0,e.prototype.sc=0,e.prototype.destServerIp="",e.prototype.ackedServerIp="",e.prototype.responseTime=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.ec&&e.hasOwnProperty("ec")&&t.uint32(40).int32(e.ec),null!=e.sc&&e.hasOwnProperty("sc")&&t.uint32(48).int32(e.sc),null!=e.destServerIp&&e.hasOwnProperty("destServerIp")&&t.uint32(58).string(e.destServerIp),null!=e.ackedServerIp&&e.hasOwnProperty("ackedServerIp")&&t.uint32(66).string(e.ackedServerIp),null!=e.responseTime&&e.hasOwnProperty("responseTime")&&t.uint32(72).int32(e.responseTime),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.Link;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 5:n.ec=e.int32();break;case 6:n.sc=e.int32();break;case 7:n.destServerIp=e.string();break;case 8:n.ackedServerIp=e.string();break;case 9:n.responseTime=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.ec&&e.hasOwnProperty("ec")&&!$util$1.isInteger(e.ec)?"ec: integer expected":null!=e.sc&&e.hasOwnProperty("sc")&&!$util$1.isInteger(e.sc)?"sc: integer expected":null!=e.destServerIp&&e.hasOwnProperty("destServerIp")&&!$util$1.isString(e.destServerIp)?"destServerIp: string expected":null!=e.ackedServerIp&&e.hasOwnProperty("ackedServerIp")&&!$util$1.isString(e.ackedServerIp)?"ackedServerIp: string expected":null!=e.responseTime&&e.hasOwnProperty("responseTime")&&!$util$1.isInteger(e.responseTime)?"responseTime: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.Link)return e;var t=new $root$1.Link;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.ec&&(t.ec=0|e.ec),null!=e.sc&&(t.sc=0|e.sc),null!=e.destServerIp&&(t.destServerIp=String(e.destServerIp)),null!=e.ackedServerIp&&(t.ackedServerIp=String(e.ackedServerIp)),null!=e.responseTime&&(t.responseTime=0|e.responseTime),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.ec=0,r.sc=0,r.destServerIp="",r.ackedServerIp="",r.responseTime=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.ec&&e.hasOwnProperty("ec")&&(r.ec=e.ec),null!=e.sc&&e.hasOwnProperty("sc")&&(r.sc=e.sc),null!=e.destServerIp&&e.hasOwnProperty("destServerIp")&&(r.destServerIp=e.destServerIp),null!=e.ackedServerIp&&e.hasOwnProperty("ackedServerIp")&&(r.ackedServerIp=e.ackedServerIp),null!=e.responseTime&&e.hasOwnProperty("responseTime")&&(r.responseTime=e.responseTime),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),Logout=$root$1.Logout=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.Logout;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null},e.fromObject=function(e){if(e instanceof $root$1.Logout)return e;var t=new $root$1.Logout;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),TxMessage=$root$1.TxMessage=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.insId=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.dialId=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.seq=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.srcId="",e.prototype.dstId="",e.prototype.dstType=0,e.prototype.payload="",e.prototype.messageId=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.isOfflineMessage=!1,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.insId&&e.hasOwnProperty("insId")&&t.uint32(48).int64(e.insId),null!=e.dialId&&e.hasOwnProperty("dialId")&&t.uint32(56).int64(e.dialId),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(64).int64(e.seq),null!=e.srcId&&e.hasOwnProperty("srcId")&&t.uint32(74).string(e.srcId),null!=e.dstId&&e.hasOwnProperty("dstId")&&t.uint32(82).string(e.dstId),null!=e.dstType&&e.hasOwnProperty("dstType")&&t.uint32(88).int32(e.dstType),null!=e.payload&&e.hasOwnProperty("payload")&&t.uint32(98).string(e.payload),null!=e.messageId&&e.hasOwnProperty("messageId")&&t.uint32(104).int64(e.messageId),null!=e.isOfflineMessage&&e.hasOwnProperty("isOfflineMessage")&&t.uint32(112).bool(e.isOfflineMessage),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.TxMessage;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.insId=e.int64();break;case 7:n.dialId=e.int64();break;case 8:n.seq=e.int64();break;case 9:n.srcId=e.string();break;case 10:n.dstId=e.string();break;case 11:n.dstType=e.int32();break;case 12:n.payload=e.string();break;case 13:n.messageId=e.int64();break;case 14:n.isOfflineMessage=e.bool();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.insId&&e.hasOwnProperty("insId")&&!($util$1.isInteger(e.insId)||e.insId&&$util$1.isInteger(e.insId.low)&&$util$1.isInteger(e.insId.high))?"insId: integer|Long expected":null!=e.dialId&&e.hasOwnProperty("dialId")&&!($util$1.isInteger(e.dialId)||e.dialId&&$util$1.isInteger(e.dialId.low)&&$util$1.isInteger(e.dialId.high))?"dialId: integer|Long expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util$1.isInteger(e.seq)||e.seq&&$util$1.isInteger(e.seq.low)&&$util$1.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.srcId&&e.hasOwnProperty("srcId")&&!$util$1.isString(e.srcId)?"srcId: string expected":null!=e.dstId&&e.hasOwnProperty("dstId")&&!$util$1.isString(e.dstId)?"dstId: string expected":null!=e.dstType&&e.hasOwnProperty("dstType")&&!$util$1.isInteger(e.dstType)?"dstType: integer expected":null!=e.payload&&e.hasOwnProperty("payload")&&!$util$1.isString(e.payload)?"payload: string expected":null!=e.messageId&&e.hasOwnProperty("messageId")&&!($util$1.isInteger(e.messageId)||e.messageId&&$util$1.isInteger(e.messageId.low)&&$util$1.isInteger(e.messageId.high))?"messageId: integer|Long expected":null!=e.isOfflineMessage&&e.hasOwnProperty("isOfflineMessage")&&"boolean"!=typeof e.isOfflineMessage?"isOfflineMessage: boolean expected":null},e.fromObject=function(e){if(e instanceof $root$1.TxMessage)return e;var t=new $root$1.TxMessage;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.insId&&($util$1.Long?(t.insId=$util$1.Long.fromValue(e.insId)).unsigned=!1:"string"==typeof e.insId?t.insId=parseInt(e.insId,10):"number"==typeof e.insId?t.insId=e.insId:"object"===_typeof(e.insId)&&(t.insId=new $util$1.LongBits(e.insId.low>>>0,e.insId.high>>>0).toNumber())),null!=e.dialId&&($util$1.Long?(t.dialId=$util$1.Long.fromValue(e.dialId)).unsigned=!1:"string"==typeof e.dialId?t.dialId=parseInt(e.dialId,10):"number"==typeof e.dialId?t.dialId=e.dialId:"object"===_typeof(e.dialId)&&(t.dialId=new $util$1.LongBits(e.dialId.low>>>0,e.dialId.high>>>0).toNumber())),null!=e.seq&&($util$1.Long?(t.seq=$util$1.Long.fromValue(e.seq)).unsigned=!1:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util$1.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber())),null!=e.srcId&&(t.srcId=String(e.srcId)),null!=e.dstId&&(t.dstId=String(e.dstId)),null!=e.dstType&&(t.dstType=0|e.dstType),null!=e.payload&&(t.payload=String(e.payload)),null!=e.messageId&&($util$1.Long?(t.messageId=$util$1.Long.fromValue(e.messageId)).unsigned=!1:"string"==typeof e.messageId?t.messageId=parseInt(e.messageId,10):"number"==typeof e.messageId?t.messageId=e.messageId:"object"===_typeof(e.messageId)&&(t.messageId=new $util$1.LongBits(e.messageId.low>>>0,e.messageId.high>>>0).toNumber())),null!=e.isOfflineMessage&&(t.isOfflineMessage=Boolean(e.isOfflineMessage)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;if($util$1.Long){var i=new $util$1.Long(0,0,!1);r.insId=t.longs===String?i.toString():t.longs===Number?i.toNumber():i;}else r.insId=t.longs===String?"0":0;if($util$1.Long){var s=new $util$1.Long(0,0,!1);r.dialId=t.longs===String?s.toString():t.longs===Number?s.toNumber():s;}else r.dialId=t.longs===String?"0":0;if($util$1.Long){var a=new $util$1.Long(0,0,!1);r.seq=t.longs===String?a.toString():t.longs===Number?a.toNumber():a;}else r.seq=t.longs===String?"0":0;if(r.srcId="",r.dstId="",r.dstType=0,r.payload="",$util$1.Long){var u=new $util$1.Long(0,0,!1);r.messageId=t.longs===String?u.toString():t.longs===Number?u.toNumber():u;}else r.messageId=t.longs===String?"0":0;r.isOfflineMessage=!1;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.insId&&e.hasOwnProperty("insId")&&("number"==typeof e.insId?r.insId=t.longs===String?String(e.insId):e.insId:r.insId=t.longs===String?$util$1.Long.prototype.toString.call(e.insId):t.longs===Number?new $util$1.LongBits(e.insId.low>>>0,e.insId.high>>>0).toNumber():e.insId),null!=e.dialId&&e.hasOwnProperty("dialId")&&("number"==typeof e.dialId?r.dialId=t.longs===String?String(e.dialId):e.dialId:r.dialId=t.longs===String?$util$1.Long.prototype.toString.call(e.dialId):t.longs===Number?new $util$1.LongBits(e.dialId.low>>>0,e.dialId.high>>>0).toNumber():e.dialId),null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util$1.Long.prototype.toString.call(e.seq):t.longs===Number?new $util$1.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber():e.seq),null!=e.srcId&&e.hasOwnProperty("srcId")&&(r.srcId=e.srcId),null!=e.dstId&&e.hasOwnProperty("dstId")&&(r.dstId=e.dstId),null!=e.dstType&&e.hasOwnProperty("dstType")&&(r.dstType=e.dstType),null!=e.payload&&e.hasOwnProperty("payload")&&(r.payload=e.payload),null!=e.messageId&&e.hasOwnProperty("messageId")&&("number"==typeof e.messageId?r.messageId=t.longs===String?String(e.messageId):e.messageId:r.messageId=t.longs===String?$util$1.Long.prototype.toString.call(e.messageId):t.longs===Number?new $util$1.LongBits(e.messageId.low>>>0,e.messageId.high>>>0).toNumber():e.messageId),null!=e.isOfflineMessage&&e.hasOwnProperty("isOfflineMessage")&&(r.isOfflineMessage=e.isOfflineMessage),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),RxMessage=$root$1.RxMessage=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.insId=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.dialId=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.seq=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.srcId="",e.prototype.dstId="",e.prototype.dstType=0,e.prototype.payload="",e.prototype.messageId=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.serverReceivedTs=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.isOfflineMessage=!1,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.insId&&e.hasOwnProperty("insId")&&t.uint32(48).int64(e.insId),null!=e.dialId&&e.hasOwnProperty("dialId")&&t.uint32(56).int64(e.dialId),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(64).int64(e.seq),null!=e.srcId&&e.hasOwnProperty("srcId")&&t.uint32(74).string(e.srcId),null!=e.dstId&&e.hasOwnProperty("dstId")&&t.uint32(82).string(e.dstId),null!=e.dstType&&e.hasOwnProperty("dstType")&&t.uint32(88).int32(e.dstType),null!=e.payload&&e.hasOwnProperty("payload")&&t.uint32(98).string(e.payload),null!=e.messageId&&e.hasOwnProperty("messageId")&&t.uint32(104).int64(e.messageId),null!=e.serverReceivedTs&&e.hasOwnProperty("serverReceivedTs")&&t.uint32(112).int64(e.serverReceivedTs),null!=e.isOfflineMessage&&e.hasOwnProperty("isOfflineMessage")&&t.uint32(120).bool(e.isOfflineMessage),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.RxMessage;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.insId=e.int64();break;case 7:n.dialId=e.int64();break;case 8:n.seq=e.int64();break;case 9:n.srcId=e.string();break;case 10:n.dstId=e.string();break;case 11:n.dstType=e.int32();break;case 12:n.payload=e.string();break;case 13:n.messageId=e.int64();break;case 14:n.serverReceivedTs=e.int64();break;case 15:n.isOfflineMessage=e.bool();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.insId&&e.hasOwnProperty("insId")&&!($util$1.isInteger(e.insId)||e.insId&&$util$1.isInteger(e.insId.low)&&$util$1.isInteger(e.insId.high))?"insId: integer|Long expected":null!=e.dialId&&e.hasOwnProperty("dialId")&&!($util$1.isInteger(e.dialId)||e.dialId&&$util$1.isInteger(e.dialId.low)&&$util$1.isInteger(e.dialId.high))?"dialId: integer|Long expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util$1.isInteger(e.seq)||e.seq&&$util$1.isInteger(e.seq.low)&&$util$1.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.srcId&&e.hasOwnProperty("srcId")&&!$util$1.isString(e.srcId)?"srcId: string expected":null!=e.dstId&&e.hasOwnProperty("dstId")&&!$util$1.isString(e.dstId)?"dstId: string expected":null!=e.dstType&&e.hasOwnProperty("dstType")&&!$util$1.isInteger(e.dstType)?"dstType: integer expected":null!=e.payload&&e.hasOwnProperty("payload")&&!$util$1.isString(e.payload)?"payload: string expected":null!=e.messageId&&e.hasOwnProperty("messageId")&&!($util$1.isInteger(e.messageId)||e.messageId&&$util$1.isInteger(e.messageId.low)&&$util$1.isInteger(e.messageId.high))?"messageId: integer|Long expected":null!=e.serverReceivedTs&&e.hasOwnProperty("serverReceivedTs")&&!($util$1.isInteger(e.serverReceivedTs)||e.serverReceivedTs&&$util$1.isInteger(e.serverReceivedTs.low)&&$util$1.isInteger(e.serverReceivedTs.high))?"serverReceivedTs: integer|Long expected":null!=e.isOfflineMessage&&e.hasOwnProperty("isOfflineMessage")&&"boolean"!=typeof e.isOfflineMessage?"isOfflineMessage: boolean expected":null},e.fromObject=function(e){if(e instanceof $root$1.RxMessage)return e;var t=new $root$1.RxMessage;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.insId&&($util$1.Long?(t.insId=$util$1.Long.fromValue(e.insId)).unsigned=!1:"string"==typeof e.insId?t.insId=parseInt(e.insId,10):"number"==typeof e.insId?t.insId=e.insId:"object"===_typeof(e.insId)&&(t.insId=new $util$1.LongBits(e.insId.low>>>0,e.insId.high>>>0).toNumber())),null!=e.dialId&&($util$1.Long?(t.dialId=$util$1.Long.fromValue(e.dialId)).unsigned=!1:"string"==typeof e.dialId?t.dialId=parseInt(e.dialId,10):"number"==typeof e.dialId?t.dialId=e.dialId:"object"===_typeof(e.dialId)&&(t.dialId=new $util$1.LongBits(e.dialId.low>>>0,e.dialId.high>>>0).toNumber())),null!=e.seq&&($util$1.Long?(t.seq=$util$1.Long.fromValue(e.seq)).unsigned=!1:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util$1.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber())),null!=e.srcId&&(t.srcId=String(e.srcId)),null!=e.dstId&&(t.dstId=String(e.dstId)),null!=e.dstType&&(t.dstType=0|e.dstType),null!=e.payload&&(t.payload=String(e.payload)),null!=e.messageId&&($util$1.Long?(t.messageId=$util$1.Long.fromValue(e.messageId)).unsigned=!1:"string"==typeof e.messageId?t.messageId=parseInt(e.messageId,10):"number"==typeof e.messageId?t.messageId=e.messageId:"object"===_typeof(e.messageId)&&(t.messageId=new $util$1.LongBits(e.messageId.low>>>0,e.messageId.high>>>0).toNumber())),null!=e.serverReceivedTs&&($util$1.Long?(t.serverReceivedTs=$util$1.Long.fromValue(e.serverReceivedTs)).unsigned=!1:"string"==typeof e.serverReceivedTs?t.serverReceivedTs=parseInt(e.serverReceivedTs,10):"number"==typeof e.serverReceivedTs?t.serverReceivedTs=e.serverReceivedTs:"object"===_typeof(e.serverReceivedTs)&&(t.serverReceivedTs=new $util$1.LongBits(e.serverReceivedTs.low>>>0,e.serverReceivedTs.high>>>0).toNumber())),null!=e.isOfflineMessage&&(t.isOfflineMessage=Boolean(e.isOfflineMessage)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;if($util$1.Long){var i=new $util$1.Long(0,0,!1);r.insId=t.longs===String?i.toString():t.longs===Number?i.toNumber():i;}else r.insId=t.longs===String?"0":0;if($util$1.Long){var s=new $util$1.Long(0,0,!1);r.dialId=t.longs===String?s.toString():t.longs===Number?s.toNumber():s;}else r.dialId=t.longs===String?"0":0;if($util$1.Long){var a=new $util$1.Long(0,0,!1);r.seq=t.longs===String?a.toString():t.longs===Number?a.toNumber():a;}else r.seq=t.longs===String?"0":0;if(r.srcId="",r.dstId="",r.dstType=0,r.payload="",$util$1.Long){var u=new $util$1.Long(0,0,!1);r.messageId=t.longs===String?u.toString():t.longs===Number?u.toNumber():u;}else r.messageId=t.longs===String?"0":0;if($util$1.Long){var l=new $util$1.Long(0,0,!1);r.serverReceivedTs=t.longs===String?l.toString():t.longs===Number?l.toNumber():l;}else r.serverReceivedTs=t.longs===String?"0":0;r.isOfflineMessage=!1;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.insId&&e.hasOwnProperty("insId")&&("number"==typeof e.insId?r.insId=t.longs===String?String(e.insId):e.insId:r.insId=t.longs===String?$util$1.Long.prototype.toString.call(e.insId):t.longs===Number?new $util$1.LongBits(e.insId.low>>>0,e.insId.high>>>0).toNumber():e.insId),null!=e.dialId&&e.hasOwnProperty("dialId")&&("number"==typeof e.dialId?r.dialId=t.longs===String?String(e.dialId):e.dialId:r.dialId=t.longs===String?$util$1.Long.prototype.toString.call(e.dialId):t.longs===Number?new $util$1.LongBits(e.dialId.low>>>0,e.dialId.high>>>0).toNumber():e.dialId),null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util$1.Long.prototype.toString.call(e.seq):t.longs===Number?new $util$1.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber():e.seq),null!=e.srcId&&e.hasOwnProperty("srcId")&&(r.srcId=e.srcId),null!=e.dstId&&e.hasOwnProperty("dstId")&&(r.dstId=e.dstId),null!=e.dstType&&e.hasOwnProperty("dstType")&&(r.dstType=e.dstType),null!=e.payload&&e.hasOwnProperty("payload")&&(r.payload=e.payload),null!=e.messageId&&e.hasOwnProperty("messageId")&&("number"==typeof e.messageId?r.messageId=t.longs===String?String(e.messageId):e.messageId:r.messageId=t.longs===String?$util$1.Long.prototype.toString.call(e.messageId):t.longs===Number?new $util$1.LongBits(e.messageId.low>>>0,e.messageId.high>>>0).toNumber():e.messageId),null!=e.serverReceivedTs&&e.hasOwnProperty("serverReceivedTs")&&("number"==typeof e.serverReceivedTs?r.serverReceivedTs=t.longs===String?String(e.serverReceivedTs):e.serverReceivedTs:r.serverReceivedTs=t.longs===String?$util$1.Long.prototype.toString.call(e.serverReceivedTs):t.longs===Number?new $util$1.LongBits(e.serverReceivedTs.low>>>0,e.serverReceivedTs.high>>>0).toNumber():e.serverReceivedTs),null!=e.isOfflineMessage&&e.hasOwnProperty("isOfflineMessage")&&(r.isOfflineMessage=e.isOfflineMessage),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),KickedOff=$root$1.KickedOff=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.linkId=0,e.prototype.code=0,e.prototype.server="",e.prototype.serverCode=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.linkId&&e.hasOwnProperty("linkId")&&t.uint32(48).int32(e.linkId),null!=e.code&&e.hasOwnProperty("code")&&t.uint32(56).int32(e.code),null!=e.server&&e.hasOwnProperty("server")&&t.uint32(66).string(e.server),null!=e.serverCode&&e.hasOwnProperty("serverCode")&&t.uint32(72).int32(e.serverCode),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.KickedOff;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.linkId=e.int32();break;case 7:n.code=e.int32();break;case 8:n.server=e.string();break;case 9:n.serverCode=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.linkId&&e.hasOwnProperty("linkId")&&!$util$1.isInteger(e.linkId)?"linkId: integer expected":null!=e.code&&e.hasOwnProperty("code")&&!$util$1.isInteger(e.code)?"code: integer expected":null!=e.server&&e.hasOwnProperty("server")&&!$util$1.isString(e.server)?"server: string expected":null!=e.serverCode&&e.hasOwnProperty("serverCode")&&!$util$1.isInteger(e.serverCode)?"serverCode: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.KickedOff)return e;var t=new $root$1.KickedOff;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.linkId&&(t.linkId=0|e.linkId),null!=e.code&&(t.code=0|e.code),null!=e.server&&(t.server=String(e.server)),null!=e.serverCode&&(t.serverCode=0|e.serverCode),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.linkId=0,r.code=0,r.server="",r.serverCode=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.linkId&&e.hasOwnProperty("linkId")&&(r.linkId=e.linkId),null!=e.code&&e.hasOwnProperty("code")&&(r.code=e.code),null!=e.server&&e.hasOwnProperty("server")&&(r.server=e.server),null!=e.serverCode&&e.hasOwnProperty("serverCode")&&(r.serverCode=e.serverCode),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),TxMessageRes=$root$1.TxMessageRes=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.insId=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.dialId=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.seq=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.srcId="",e.prototype.dstId="",e.prototype.dstType=0,e.prototype.messageId=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.errCode=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.insId&&e.hasOwnProperty("insId")&&t.uint32(48).int64(e.insId),null!=e.dialId&&e.hasOwnProperty("dialId")&&t.uint32(56).int64(e.dialId),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(64).int64(e.seq),null!=e.srcId&&e.hasOwnProperty("srcId")&&t.uint32(74).string(e.srcId),null!=e.dstId&&e.hasOwnProperty("dstId")&&t.uint32(82).string(e.dstId),null!=e.dstType&&e.hasOwnProperty("dstType")&&t.uint32(88).int32(e.dstType),null!=e.messageId&&e.hasOwnProperty("messageId")&&t.uint32(96).int64(e.messageId),null!=e.errCode&&e.hasOwnProperty("errCode")&&t.uint32(104).int32(e.errCode),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.TxMessageRes;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.insId=e.int64();break;case 7:n.dialId=e.int64();break;case 8:n.seq=e.int64();break;case 9:n.srcId=e.string();break;case 10:n.dstId=e.string();break;case 11:n.dstType=e.int32();break;case 12:n.messageId=e.int64();break;case 13:n.errCode=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.insId&&e.hasOwnProperty("insId")&&!($util$1.isInteger(e.insId)||e.insId&&$util$1.isInteger(e.insId.low)&&$util$1.isInteger(e.insId.high))?"insId: integer|Long expected":null!=e.dialId&&e.hasOwnProperty("dialId")&&!($util$1.isInteger(e.dialId)||e.dialId&&$util$1.isInteger(e.dialId.low)&&$util$1.isInteger(e.dialId.high))?"dialId: integer|Long expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util$1.isInteger(e.seq)||e.seq&&$util$1.isInteger(e.seq.low)&&$util$1.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.srcId&&e.hasOwnProperty("srcId")&&!$util$1.isString(e.srcId)?"srcId: string expected":null!=e.dstId&&e.hasOwnProperty("dstId")&&!$util$1.isString(e.dstId)?"dstId: string expected":null!=e.dstType&&e.hasOwnProperty("dstType")&&!$util$1.isInteger(e.dstType)?"dstType: integer expected":null!=e.messageId&&e.hasOwnProperty("messageId")&&!($util$1.isInteger(e.messageId)||e.messageId&&$util$1.isInteger(e.messageId.low)&&$util$1.isInteger(e.messageId.high))?"messageId: integer|Long expected":null!=e.errCode&&e.hasOwnProperty("errCode")&&!$util$1.isInteger(e.errCode)?"errCode: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.TxMessageRes)return e;var t=new $root$1.TxMessageRes;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.insId&&($util$1.Long?(t.insId=$util$1.Long.fromValue(e.insId)).unsigned=!1:"string"==typeof e.insId?t.insId=parseInt(e.insId,10):"number"==typeof e.insId?t.insId=e.insId:"object"===_typeof(e.insId)&&(t.insId=new $util$1.LongBits(e.insId.low>>>0,e.insId.high>>>0).toNumber())),null!=e.dialId&&($util$1.Long?(t.dialId=$util$1.Long.fromValue(e.dialId)).unsigned=!1:"string"==typeof e.dialId?t.dialId=parseInt(e.dialId,10):"number"==typeof e.dialId?t.dialId=e.dialId:"object"===_typeof(e.dialId)&&(t.dialId=new $util$1.LongBits(e.dialId.low>>>0,e.dialId.high>>>0).toNumber())),null!=e.seq&&($util$1.Long?(t.seq=$util$1.Long.fromValue(e.seq)).unsigned=!1:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util$1.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber())),null!=e.srcId&&(t.srcId=String(e.srcId)),null!=e.dstId&&(t.dstId=String(e.dstId)),null!=e.dstType&&(t.dstType=0|e.dstType),null!=e.messageId&&($util$1.Long?(t.messageId=$util$1.Long.fromValue(e.messageId)).unsigned=!1:"string"==typeof e.messageId?t.messageId=parseInt(e.messageId,10):"number"==typeof e.messageId?t.messageId=e.messageId:"object"===_typeof(e.messageId)&&(t.messageId=new $util$1.LongBits(e.messageId.low>>>0,e.messageId.high>>>0).toNumber())),null!=e.errCode&&(t.errCode=0|e.errCode),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;if($util$1.Long){var i=new $util$1.Long(0,0,!1);r.insId=t.longs===String?i.toString():t.longs===Number?i.toNumber():i;}else r.insId=t.longs===String?"0":0;if($util$1.Long){var s=new $util$1.Long(0,0,!1);r.dialId=t.longs===String?s.toString():t.longs===Number?s.toNumber():s;}else r.dialId=t.longs===String?"0":0;if($util$1.Long){var a=new $util$1.Long(0,0,!1);r.seq=t.longs===String?a.toString():t.longs===Number?a.toNumber():a;}else r.seq=t.longs===String?"0":0;if(r.srcId="",r.dstId="",r.dstType=0,$util$1.Long){var u=new $util$1.Long(0,0,!1);r.messageId=t.longs===String?u.toString():t.longs===Number?u.toNumber():u;}else r.messageId=t.longs===String?"0":0;r.errCode=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.insId&&e.hasOwnProperty("insId")&&("number"==typeof e.insId?r.insId=t.longs===String?String(e.insId):e.insId:r.insId=t.longs===String?$util$1.Long.prototype.toString.call(e.insId):t.longs===Number?new $util$1.LongBits(e.insId.low>>>0,e.insId.high>>>0).toNumber():e.insId),null!=e.dialId&&e.hasOwnProperty("dialId")&&("number"==typeof e.dialId?r.dialId=t.longs===String?String(e.dialId):e.dialId:r.dialId=t.longs===String?$util$1.Long.prototype.toString.call(e.dialId):t.longs===Number?new $util$1.LongBits(e.dialId.low>>>0,e.dialId.high>>>0).toNumber():e.dialId),null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util$1.Long.prototype.toString.call(e.seq):t.longs===Number?new $util$1.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber():e.seq),null!=e.srcId&&e.hasOwnProperty("srcId")&&(r.srcId=e.srcId),null!=e.dstId&&e.hasOwnProperty("dstId")&&(r.dstId=e.dstId),null!=e.dstType&&e.hasOwnProperty("dstType")&&(r.dstType=e.dstType),null!=e.messageId&&e.hasOwnProperty("messageId")&&("number"==typeof e.messageId?r.messageId=t.longs===String?String(e.messageId):e.messageId:r.messageId=t.longs===String?$util$1.Long.prototype.toString.call(e.messageId):t.longs===Number?new $util$1.LongBits(e.messageId.low>>>0,e.messageId.high>>>0).toNumber():e.messageId),null!=e.errCode&&e.hasOwnProperty("errCode")&&(r.errCode=e.errCode),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),ChnJoin=$root$1.ChnJoin=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.cname="",e.prototype.errCode=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&t.uint32(50).string(e.cname),null!=e.errCode&&e.hasOwnProperty("errCode")&&t.uint32(56).int32(e.errCode),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.ChnJoin;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.cname=e.string();break;case 7:n.errCode=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.cname&&e.hasOwnProperty("cname")&&!$util$1.isString(e.cname)?"cname: string expected":null!=e.errCode&&e.hasOwnProperty("errCode")&&!$util$1.isInteger(e.errCode)?"errCode: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.ChnJoin)return e;var t=new $root$1.ChnJoin;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.cname&&(t.cname=String(e.cname)),null!=e.errCode&&(t.errCode=0|e.errCode),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.cname="",r.errCode=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&(r.cname=e.cname),null!=e.errCode&&e.hasOwnProperty("errCode")&&(r.errCode=e.errCode),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),ChnJoinRes=$root$1.ChnJoinRes=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.cname="",e.prototype.errCode=0,e.prototype.serverErrCode=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&t.uint32(50).string(e.cname),null!=e.errCode&&e.hasOwnProperty("errCode")&&t.uint32(56).int32(e.errCode),null!=e.serverErrCode&&e.hasOwnProperty("serverErrCode")&&t.uint32(64).int32(e.serverErrCode),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.ChnJoinRes;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.cname=e.string();break;case 7:n.errCode=e.int32();break;case 8:n.serverErrCode=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.cname&&e.hasOwnProperty("cname")&&!$util$1.isString(e.cname)?"cname: string expected":null!=e.errCode&&e.hasOwnProperty("errCode")&&!$util$1.isInteger(e.errCode)?"errCode: integer expected":null!=e.serverErrCode&&e.hasOwnProperty("serverErrCode")&&!$util$1.isInteger(e.serverErrCode)?"serverErrCode: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.ChnJoinRes)return e;var t=new $root$1.ChnJoinRes;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.cname&&(t.cname=String(e.cname)),null!=e.errCode&&(t.errCode=0|e.errCode),null!=e.serverErrCode&&(t.serverErrCode=0|e.serverErrCode),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.cname="",r.errCode=0,r.serverErrCode=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&(r.cname=e.cname),null!=e.errCode&&e.hasOwnProperty("errCode")&&(r.errCode=e.errCode),null!=e.serverErrCode&&e.hasOwnProperty("serverErrCode")&&(r.serverErrCode=e.serverErrCode),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),ChnLeave=$root$1.ChnLeave=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.cname="",e.prototype.errCode=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&t.uint32(50).string(e.cname),null!=e.errCode&&e.hasOwnProperty("errCode")&&t.uint32(56).int32(e.errCode),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.ChnLeave;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.cname=e.string();break;case 7:n.errCode=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.cname&&e.hasOwnProperty("cname")&&!$util$1.isString(e.cname)?"cname: string expected":null!=e.errCode&&e.hasOwnProperty("errCode")&&!$util$1.isInteger(e.errCode)?"errCode: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.ChnLeave)return e;var t=new $root$1.ChnLeave;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.cname&&(t.cname=String(e.cname)),null!=e.errCode&&(t.errCode=0|e.errCode),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.cname="",r.errCode=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&(r.cname=e.cname),null!=e.errCode&&e.hasOwnProperty("errCode")&&(r.errCode=e.errCode),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),ChnGetMembers=$root$1.ChnGetMembers=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.cname="",e.prototype.errCode=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&t.uint32(50).string(e.cname),null!=e.errCode&&e.hasOwnProperty("errCode")&&t.uint32(56).int32(e.errCode),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.ChnGetMembers;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.cname=e.string();break;case 7:n.errCode=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.cname&&e.hasOwnProperty("cname")&&!$util$1.isString(e.cname)?"cname: string expected":null!=e.errCode&&e.hasOwnProperty("errCode")&&!$util$1.isInteger(e.errCode)?"errCode: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.ChnGetMembers)return e;var t=new $root$1.ChnGetMembers;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.cname&&(t.cname=String(e.cname)),null!=e.errCode&&(t.errCode=0|e.errCode),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.cname="",r.errCode=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&(r.cname=e.cname),null!=e.errCode&&e.hasOwnProperty("errCode")&&(r.errCode=e.errCode),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),ChnGetMembersRes=$root$1.ChnGetMembersRes=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.cname="",e.prototype.errCode=0,e.prototype.size=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&t.uint32(50).string(e.cname),null!=e.errCode&&e.hasOwnProperty("errCode")&&t.uint32(56).int32(e.errCode),null!=e.size&&e.hasOwnProperty("size")&&t.uint32(64).int32(e.size),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.ChnGetMembersRes;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.cname=e.string();break;case 7:n.errCode=e.int32();break;case 8:n.size=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.cname&&e.hasOwnProperty("cname")&&!$util$1.isString(e.cname)?"cname: string expected":null!=e.errCode&&e.hasOwnProperty("errCode")&&!$util$1.isInteger(e.errCode)?"errCode: integer expected":null!=e.size&&e.hasOwnProperty("size")&&!$util$1.isInteger(e.size)?"size: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.ChnGetMembersRes)return e;var t=new $root$1.ChnGetMembersRes;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.cname&&(t.cname=String(e.cname)),null!=e.errCode&&(t.errCode=0|e.errCode),null!=e.size&&(t.size=0|e.size),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.cname="",r.errCode=0,r.size=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&(r.cname=e.cname),null!=e.errCode&&e.hasOwnProperty("errCode")&&(r.errCode=e.errCode),null!=e.size&&e.hasOwnProperty("size")&&(r.size=e.size),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),ChnMemberJoined=$root$1.ChnMemberJoined=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.cname="",e.prototype.memberId="",e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&t.uint32(50).string(e.cname),null!=e.memberId&&e.hasOwnProperty("memberId")&&t.uint32(58).string(e.memberId),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.ChnMemberJoined;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.cname=e.string();break;case 7:n.memberId=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.cname&&e.hasOwnProperty("cname")&&!$util$1.isString(e.cname)?"cname: string expected":null!=e.memberId&&e.hasOwnProperty("memberId")&&!$util$1.isString(e.memberId)?"memberId: string expected":null},e.fromObject=function(e){if(e instanceof $root$1.ChnMemberJoined)return e;var t=new $root$1.ChnMemberJoined;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.cname&&(t.cname=String(e.cname)),null!=e.memberId&&(t.memberId=String(e.memberId)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.cname="",r.memberId="";}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&(r.cname=e.cname),null!=e.memberId&&e.hasOwnProperty("memberId")&&(r.memberId=e.memberId),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),ChnMemberLeft=$root$1.ChnMemberLeft=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.cname="",e.prototype.memberId="",e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&t.uint32(50).string(e.cname),null!=e.memberId&&e.hasOwnProperty("memberId")&&t.uint32(58).string(e.memberId),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.ChnMemberLeft;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.cname=e.string();break;case 7:n.memberId=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.cname&&e.hasOwnProperty("cname")&&!$util$1.isString(e.cname)?"cname: string expected":null!=e.memberId&&e.hasOwnProperty("memberId")&&!$util$1.isString(e.memberId)?"memberId: string expected":null},e.fromObject=function(e){if(e instanceof $root$1.ChnMemberLeft)return e;var t=new $root$1.ChnMemberLeft;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.cname&&(t.cname=String(e.cname)),null!=e.memberId&&(t.memberId=String(e.memberId)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.cname="",r.memberId="";}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&(r.cname=e.cname),null!=e.memberId&&e.hasOwnProperty("memberId")&&(r.memberId=e.memberId),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),QueryPeersOnlineStatus=$root$1.QueryPeersOnlineStatus=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.peerCount=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.peerCount&&e.hasOwnProperty("peerCount")&&t.uint32(48).int32(e.peerCount),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.QueryPeersOnlineStatus;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.peerCount=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.peerCount&&e.hasOwnProperty("peerCount")&&!$util$1.isInteger(e.peerCount)?"peerCount: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.QueryPeersOnlineStatus)return e;var t=new $root$1.QueryPeersOnlineStatus;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.peerCount&&(t.peerCount=0|e.peerCount),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.peerCount=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.peerCount&&e.hasOwnProperty("peerCount")&&(r.peerCount=e.peerCount),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),QueryPeersOnlineStatusRes=$root$1.QueryPeersOnlineStatusRes=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.peerCount=0,e.prototype.errCode=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.peerCount&&e.hasOwnProperty("peerCount")&&t.uint32(48).int32(e.peerCount),null!=e.errCode&&e.hasOwnProperty("errCode")&&t.uint32(56).int32(e.errCode),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.QueryPeersOnlineStatusRes;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.peerCount=e.int32();break;case 7:n.errCode=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.peerCount&&e.hasOwnProperty("peerCount")&&!$util$1.isInteger(e.peerCount)?"peerCount: integer expected":null!=e.errCode&&e.hasOwnProperty("errCode")&&!$util$1.isInteger(e.errCode)?"errCode: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.QueryPeersOnlineStatusRes)return e;var t=new $root$1.QueryPeersOnlineStatusRes;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.peerCount&&(t.peerCount=0|e.peerCount),null!=e.errCode&&(t.errCode=0|e.errCode),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.peerCount=0,r.errCode=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.peerCount&&e.hasOwnProperty("peerCount")&&(r.peerCount=e.peerCount),null!=e.errCode&&e.hasOwnProperty("errCode")&&(r.errCode=e.errCode),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),RenewToken=$root$1.RenewToken=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.cname="",e.prototype.token="",e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&t.uint32(50).string(e.cname),null!=e.token&&e.hasOwnProperty("token")&&t.uint32(58).string(e.token),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.RenewToken;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 6:n.cname=e.string();break;case 7:n.token=e.string();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.cname&&e.hasOwnProperty("cname")&&!$util$1.isString(e.cname)?"cname: string expected":null!=e.token&&e.hasOwnProperty("token")&&!$util$1.isString(e.token)?"token: string expected":null},e.fromObject=function(e){if(e instanceof $root$1.RenewToken)return e;var t=new $root$1.RenewToken;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.cname&&(t.cname=String(e.cname)),null!=e.token&&(t.token=String(e.token)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.cname="",r.token="";}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&(r.cname=e.cname),null!=e.token&&e.hasOwnProperty("token")&&(r.token=e.token),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),OperateAttribute=$root$1.OperateAttribute=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.cname="",e.prototype.destId="",e.prototype.attributeType=0,e.prototype.operationType=0,e.prototype.seq=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&t.uint32(42).string(e.cname),null!=e.destId&&e.hasOwnProperty("destId")&&t.uint32(50).string(e.destId),null!=e.attributeType&&e.hasOwnProperty("attributeType")&&t.uint32(56).int32(e.attributeType),null!=e.operationType&&e.hasOwnProperty("operationType")&&t.uint32(64).int32(e.operationType),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(72).int64(e.seq),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.OperateAttribute;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 5:n.cname=e.string();break;case 6:n.destId=e.string();break;case 7:n.attributeType=e.int32();break;case 8:n.operationType=e.int32();break;case 9:n.seq=e.int64();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.cname&&e.hasOwnProperty("cname")&&!$util$1.isString(e.cname)?"cname: string expected":null!=e.destId&&e.hasOwnProperty("destId")&&!$util$1.isString(e.destId)?"destId: string expected":null!=e.attributeType&&e.hasOwnProperty("attributeType")&&!$util$1.isInteger(e.attributeType)?"attributeType: integer expected":null!=e.operationType&&e.hasOwnProperty("operationType")&&!$util$1.isInteger(e.operationType)?"operationType: integer expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util$1.isInteger(e.seq)||e.seq&&$util$1.isInteger(e.seq.low)&&$util$1.isInteger(e.seq.high))?"seq: integer|Long expected":null},e.fromObject=function(e){if(e instanceof $root$1.OperateAttribute)return e;var t=new $root$1.OperateAttribute;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.cname&&(t.cname=String(e.cname)),null!=e.destId&&(t.destId=String(e.destId)),null!=e.attributeType&&(t.attributeType=0|e.attributeType),null!=e.operationType&&(t.operationType=0|e.operationType),null!=e.seq&&($util$1.Long?(t.seq=$util$1.Long.fromValue(e.seq)).unsigned=!1:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util$1.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber())),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;if(r.cname="",r.destId="",r.attributeType=0,r.operationType=0,$util$1.Long){var i=new $util$1.Long(0,0,!1);r.seq=t.longs===String?i.toString():t.longs===Number?i.toNumber():i;}else r.seq=t.longs===String?"0":0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&(r.cname=e.cname),null!=e.destId&&e.hasOwnProperty("destId")&&(r.destId=e.destId),null!=e.attributeType&&e.hasOwnProperty("attributeType")&&(r.attributeType=e.attributeType),null!=e.operationType&&e.hasOwnProperty("operationType")&&(r.operationType=e.operationType),null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util$1.Long.prototype.toString.call(e.seq):t.longs===Number?new $util$1.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber():e.seq),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),OperateAttributeRes=$root$1.OperateAttributeRes=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.cname="",e.prototype.destId="",e.prototype.attributeType=0,e.prototype.seq=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.code=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&t.uint32(42).string(e.cname),null!=e.destId&&e.hasOwnProperty("destId")&&t.uint32(50).string(e.destId),null!=e.attributeType&&e.hasOwnProperty("attributeType")&&t.uint32(56).int32(e.attributeType),null!=e.seq&&e.hasOwnProperty("seq")&&t.uint32(64).int64(e.seq),null!=e.code&&e.hasOwnProperty("code")&&t.uint32(72).int32(e.code),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.OperateAttributeRes;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 5:n.cname=e.string();break;case 6:n.destId=e.string();break;case 7:n.attributeType=e.int32();break;case 8:n.seq=e.int64();break;case 9:n.code=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.cname&&e.hasOwnProperty("cname")&&!$util$1.isString(e.cname)?"cname: string expected":null!=e.destId&&e.hasOwnProperty("destId")&&!$util$1.isString(e.destId)?"destId: string expected":null!=e.attributeType&&e.hasOwnProperty("attributeType")&&!$util$1.isInteger(e.attributeType)?"attributeType: integer expected":null!=e.seq&&e.hasOwnProperty("seq")&&!($util$1.isInteger(e.seq)||e.seq&&$util$1.isInteger(e.seq.low)&&$util$1.isInteger(e.seq.high))?"seq: integer|Long expected":null!=e.code&&e.hasOwnProperty("code")&&!$util$1.isInteger(e.code)?"code: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.OperateAttributeRes)return e;var t=new $root$1.OperateAttributeRes;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.cname&&(t.cname=String(e.cname)),null!=e.destId&&(t.destId=String(e.destId)),null!=e.attributeType&&(t.attributeType=0|e.attributeType),null!=e.seq&&($util$1.Long?(t.seq=$util$1.Long.fromValue(e.seq)).unsigned=!1:"string"==typeof e.seq?t.seq=parseInt(e.seq,10):"number"==typeof e.seq?t.seq=e.seq:"object"===_typeof(e.seq)&&(t.seq=new $util$1.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber())),null!=e.code&&(t.code=0|e.code),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;if(r.cname="",r.destId="",r.attributeType=0,$util$1.Long){var i=new $util$1.Long(0,0,!1);r.seq=t.longs===String?i.toString():t.longs===Number?i.toNumber():i;}else r.seq=t.longs===String?"0":0;r.code=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.cname&&e.hasOwnProperty("cname")&&(r.cname=e.cname),null!=e.destId&&e.hasOwnProperty("destId")&&(r.destId=e.destId),null!=e.attributeType&&e.hasOwnProperty("attributeType")&&(r.attributeType=e.attributeType),null!=e.seq&&e.hasOwnProperty("seq")&&("number"==typeof e.seq?r.seq=t.longs===String?String(e.seq):e.seq:r.seq=t.longs===String?$util$1.Long.prototype.toString.call(e.seq):t.longs===Number?new $util$1.LongBits(e.seq.low>>>0,e.seq.high>>>0).toNumber():e.seq),null!=e.code&&e.hasOwnProperty("code")&&(r.code=e.code),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),ApRequest=$root$1.ApRequest=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.apAddr="",e.prototype.opId=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.envId=0,e.prototype.flag=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.apAddr&&e.hasOwnProperty("apAddr")&&t.uint32(42).string(e.apAddr),null!=e.opId&&e.hasOwnProperty("opId")&&t.uint32(48).int64(e.opId),null!=e.envId&&e.hasOwnProperty("envId")&&t.uint32(56).int32(e.envId),null!=e.flag&&e.hasOwnProperty("flag")&&t.uint32(64).int32(e.flag),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.ApRequest;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 5:n.apAddr=e.string();break;case 6:n.opId=e.int64();break;case 7:n.envId=e.int32();break;case 8:n.flag=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.apAddr&&e.hasOwnProperty("apAddr")&&!$util$1.isString(e.apAddr)?"apAddr: string expected":null!=e.opId&&e.hasOwnProperty("opId")&&!($util$1.isInteger(e.opId)||e.opId&&$util$1.isInteger(e.opId.low)&&$util$1.isInteger(e.opId.high))?"opId: integer|Long expected":null!=e.envId&&e.hasOwnProperty("envId")&&!$util$1.isInteger(e.envId)?"envId: integer expected":null!=e.flag&&e.hasOwnProperty("flag")&&!$util$1.isInteger(e.flag)?"flag: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.ApRequest)return e;var t=new $root$1.ApRequest;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.apAddr&&(t.apAddr=String(e.apAddr)),null!=e.opId&&($util$1.Long?(t.opId=$util$1.Long.fromValue(e.opId)).unsigned=!1:"string"==typeof e.opId?t.opId=parseInt(e.opId,10):"number"==typeof e.opId?t.opId=e.opId:"object"===_typeof(e.opId)&&(t.opId=new $util$1.LongBits(e.opId.low>>>0,e.opId.high>>>0).toNumber())),null!=e.envId&&(t.envId=0|e.envId),null!=e.flag&&(t.flag=0|e.flag),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;if(r.apAddr="",$util$1.Long){var i=new $util$1.Long(0,0,!1);r.opId=t.longs===String?i.toString():t.longs===Number?i.toNumber():i;}else r.opId=t.longs===String?"0":0;r.envId=0,r.flag=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.apAddr&&e.hasOwnProperty("apAddr")&&(r.apAddr=e.apAddr),null!=e.opId&&e.hasOwnProperty("opId")&&("number"==typeof e.opId?r.opId=t.longs===String?String(e.opId):e.opId:r.opId=t.longs===String?$util$1.Long.prototype.toString.call(e.opId):t.longs===Number?new $util$1.LongBits(e.opId.low>>>0,e.opId.high>>>0).toNumber():e.opId),null!=e.envId&&e.hasOwnProperty("envId")&&(r.envId=e.envId),null!=e.flag&&e.hasOwnProperty("flag")&&(r.flag=e.flag),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),LinkTcpEvent=$root$1.LinkTcpEvent=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.destServerIp="",e.prototype.action="",e.prototype.code=0,e.prototype.responseTime=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.destServerIp&&e.hasOwnProperty("destServerIp")&&t.uint32(42).string(e.destServerIp),null!=e.action&&e.hasOwnProperty("action")&&t.uint32(50).string(e.action),null!=e.code&&e.hasOwnProperty("code")&&t.uint32(56).int32(e.code),null!=e.responseTime&&e.hasOwnProperty("responseTime")&&t.uint32(64).int32(e.responseTime),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.LinkTcpEvent;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 5:n.destServerIp=e.string();break;case 6:n.action=e.string();break;case 7:n.code=e.int32();break;case 8:n.responseTime=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.destServerIp&&e.hasOwnProperty("destServerIp")&&!$util$1.isString(e.destServerIp)?"destServerIp: string expected":null!=e.action&&e.hasOwnProperty("action")&&!$util$1.isString(e.action)?"action: string expected":null!=e.code&&e.hasOwnProperty("code")&&!$util$1.isInteger(e.code)?"code: integer expected":null!=e.responseTime&&e.hasOwnProperty("responseTime")&&!$util$1.isInteger(e.responseTime)?"responseTime: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.LinkTcpEvent)return e;var t=new $root$1.LinkTcpEvent;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.destServerIp&&(t.destServerIp=String(e.destServerIp)),null!=e.action&&(t.action=String(e.action)),null!=e.code&&(t.code=0|e.code),null!=e.responseTime&&(t.responseTime=0|e.responseTime),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.destServerIp="",r.action="",r.code=0,r.responseTime=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.destServerIp&&e.hasOwnProperty("destServerIp")&&(r.destServerIp=e.destServerIp),null!=e.action&&e.hasOwnProperty("action")&&(r.action=e.action),null!=e.code&&e.hasOwnProperty("code")&&(r.code=e.code),null!=e.responseTime&&e.hasOwnProperty("responseTime")&&(r.responseTime=e.responseTime),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),LinkLoginRequest=$root$1.LinkLoginRequest=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.destServerIp="",e.prototype.linkId=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.destServerIp&&e.hasOwnProperty("destServerIp")&&t.uint32(42).string(e.destServerIp),null!=e.linkId&&e.hasOwnProperty("linkId")&&t.uint32(48).int32(e.linkId),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.LinkLoginRequest;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 5:n.destServerIp=e.string();break;case 6:n.linkId=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.destServerIp&&e.hasOwnProperty("destServerIp")&&!$util$1.isString(e.destServerIp)?"destServerIp: string expected":null!=e.linkId&&e.hasOwnProperty("linkId")&&!$util$1.isInteger(e.linkId)?"linkId: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.LinkLoginRequest)return e;var t=new $root$1.LinkLoginRequest;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.destServerIp&&(t.destServerIp=String(e.destServerIp)),null!=e.linkId&&(t.linkId=0|e.linkId),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.destServerIp="",r.linkId=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.destServerIp&&e.hasOwnProperty("destServerIp")&&(r.destServerIp=e.destServerIp),null!=e.linkId&&e.hasOwnProperty("linkId")&&(r.linkId=e.linkId),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),ConnectionStateChange=$root$1.ConnectionStateChange=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.userId="",e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.oldState=0,e.prototype.newState=0,e.prototype.reason=0,e.prototype.reconnId=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&t.uint32(18).string(e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(24).int64(e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(32).int64(e.elapse),null!=e.oldState&&e.hasOwnProperty("oldState")&&t.uint32(40).int32(e.oldState),null!=e.newState&&e.hasOwnProperty("newState")&&t.uint32(48).int32(e.newState),null!=e.reason&&e.hasOwnProperty("reason")&&t.uint32(56).int32(e.reason),null!=e.reconnId&&e.hasOwnProperty("reconnId")&&t.uint32(64).int32(e.reconnId),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.ConnectionStateChange;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.userId=e.string();break;case 3:n.lts=e.int64();break;case 4:n.elapse=e.int64();break;case 5:n.oldState=e.int32();break;case 6:n.newState=e.int32();break;case 7:n.reason=e.int32();break;case 8:n.reconnId=e.int32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.userId&&e.hasOwnProperty("userId")&&!$util$1.isString(e.userId)?"userId: string expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.oldState&&e.hasOwnProperty("oldState")&&!$util$1.isInteger(e.oldState)?"oldState: integer expected":null!=e.newState&&e.hasOwnProperty("newState")&&!$util$1.isInteger(e.newState)?"newState: integer expected":null!=e.reason&&e.hasOwnProperty("reason")&&!$util$1.isInteger(e.reason)?"reason: integer expected":null!=e.reconnId&&e.hasOwnProperty("reconnId")&&!$util$1.isInteger(e.reconnId)?"reconnId: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.ConnectionStateChange)return e;var t=new $root$1.ConnectionStateChange;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.userId&&(t.userId=String(e.userId)),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.oldState&&(t.oldState=0|e.oldState),null!=e.newState&&(t.newState=0|e.newState),null!=e.reason&&(t.reason=0|e.reason),null!=e.reconnId&&(t.reconnId=0|e.reconnId),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.userId="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.elapse=t.longs===String?"0":0;r.oldState=0,r.newState=0,r.reason=0,r.reconnId=0;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.userId&&e.hasOwnProperty("userId")&&(r.userId=e.userId),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.oldState&&e.hasOwnProperty("oldState")&&(r.oldState=e.oldState),null!=e.newState&&e.hasOwnProperty("newState")&&(r.newState=e.newState),null!=e.reason&&e.hasOwnProperty("reason")&&(r.reason=e.reason),null!=e.reconnId&&e.hasOwnProperty("reconnId")&&(r.reconnId=e.reconnId),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),ApiExec=$root$1.ApiExec=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.cname="",e.prototype.cid=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.ip="",e.prototype.uid=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.success=!1,e.prototype.elapse=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.peer=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.apiPayload="",e.prototype.isCache=!1,e.prototype.isNotificationSuppressed=!1,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.cname&&e.hasOwnProperty("cname")&&t.uint32(18).string(e.cname),null!=e.cid&&e.hasOwnProperty("cid")&&t.uint32(24).int64(e.cid),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(32).int64(e.lts),null!=e.ip&&e.hasOwnProperty("ip")&&t.uint32(42).string(e.ip),null!=e.uid&&e.hasOwnProperty("uid")&&t.uint32(48).int64(e.uid),null!=e.success&&e.hasOwnProperty("success")&&t.uint32(56).bool(e.success),null!=e.elapse&&e.hasOwnProperty("elapse")&&t.uint32(64).int64(e.elapse),null!=e.peer&&e.hasOwnProperty("peer")&&t.uint32(72).int64(e.peer),null!=e.apiPayload&&e.hasOwnProperty("apiPayload")&&t.uint32(82).string(e.apiPayload),null!=e.isCache&&e.hasOwnProperty("isCache")&&t.uint32(88).bool(e.isCache),null!=e.isNotificationSuppressed&&e.hasOwnProperty("isNotificationSuppressed")&&t.uint32(96).bool(e.isNotificationSuppressed),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.ApiExec;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.cname=e.string();break;case 3:n.cid=e.int64();break;case 4:n.lts=e.int64();break;case 5:n.ip=e.string();break;case 6:n.uid=e.int64();break;case 7:n.success=e.bool();break;case 8:n.elapse=e.int64();break;case 9:n.peer=e.int64();break;case 10:n.apiPayload=e.string();break;case 11:n.isCache=e.bool();break;case 12:n.isNotificationSuppressed=e.bool();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid)?"sid: string expected":null!=e.cname&&e.hasOwnProperty("cname")&&!$util$1.isString(e.cname)?"cname: string expected":null!=e.cid&&e.hasOwnProperty("cid")&&!($util$1.isInteger(e.cid)||e.cid&&$util$1.isInteger(e.cid.low)&&$util$1.isInteger(e.cid.high))?"cid: integer|Long expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.ip&&e.hasOwnProperty("ip")&&!$util$1.isString(e.ip)?"ip: string expected":null!=e.uid&&e.hasOwnProperty("uid")&&!($util$1.isInteger(e.uid)||e.uid&&$util$1.isInteger(e.uid.low)&&$util$1.isInteger(e.uid.high))?"uid: integer|Long expected":null!=e.success&&e.hasOwnProperty("success")&&"boolean"!=typeof e.success?"success: boolean expected":null!=e.elapse&&e.hasOwnProperty("elapse")&&!($util$1.isInteger(e.elapse)||e.elapse&&$util$1.isInteger(e.elapse.low)&&$util$1.isInteger(e.elapse.high))?"elapse: integer|Long expected":null!=e.peer&&e.hasOwnProperty("peer")&&!($util$1.isInteger(e.peer)||e.peer&&$util$1.isInteger(e.peer.low)&&$util$1.isInteger(e.peer.high))?"peer: integer|Long expected":null!=e.apiPayload&&e.hasOwnProperty("apiPayload")&&!$util$1.isString(e.apiPayload)?"apiPayload: string expected":null!=e.isCache&&e.hasOwnProperty("isCache")&&"boolean"!=typeof e.isCache?"isCache: boolean expected":null!=e.isNotificationSuppressed&&e.hasOwnProperty("isNotificationSuppressed")&&"boolean"!=typeof e.isNotificationSuppressed?"isNotificationSuppressed: boolean expected":null},e.fromObject=function(e){if(e instanceof $root$1.ApiExec)return e;var t=new $root$1.ApiExec;return null!=e.sid&&(t.sid=String(e.sid)),null!=e.cname&&(t.cname=String(e.cname)),null!=e.cid&&($util$1.Long?(t.cid=$util$1.Long.fromValue(e.cid)).unsigned=!1:"string"==typeof e.cid?t.cid=parseInt(e.cid,10):"number"==typeof e.cid?t.cid=e.cid:"object"===_typeof(e.cid)&&(t.cid=new $util$1.LongBits(e.cid.low>>>0,e.cid.high>>>0).toNumber())),null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.ip&&(t.ip=String(e.ip)),null!=e.uid&&($util$1.Long?(t.uid=$util$1.Long.fromValue(e.uid)).unsigned=!1:"string"==typeof e.uid?t.uid=parseInt(e.uid,10):"number"==typeof e.uid?t.uid=e.uid:"object"===_typeof(e.uid)&&(t.uid=new $util$1.LongBits(e.uid.low>>>0,e.uid.high>>>0).toNumber())),null!=e.success&&(t.success=Boolean(e.success)),null!=e.elapse&&($util$1.Long?(t.elapse=$util$1.Long.fromValue(e.elapse)).unsigned=!1:"string"==typeof e.elapse?t.elapse=parseInt(e.elapse,10):"number"==typeof e.elapse?t.elapse=e.elapse:"object"===_typeof(e.elapse)&&(t.elapse=new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber())),null!=e.peer&&($util$1.Long?(t.peer=$util$1.Long.fromValue(e.peer)).unsigned=!1:"string"==typeof e.peer?t.peer=parseInt(e.peer,10):"number"==typeof e.peer?t.peer=e.peer:"object"===_typeof(e.peer)&&(t.peer=new $util$1.LongBits(e.peer.low>>>0,e.peer.high>>>0).toNumber())),null!=e.apiPayload&&(t.apiPayload=String(e.apiPayload)),null!=e.isCache&&(t.isCache=Boolean(e.isCache)),null!=e.isNotificationSuppressed&&(t.isNotificationSuppressed=Boolean(e.isNotificationSuppressed)),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if(r.sid="",r.cname="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.cid=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.cid=t.longs===String?"0":0;if($util$1.Long){var o=new $util$1.Long(0,0,!1);r.lts=t.longs===String?o.toString():t.longs===Number?o.toNumber():o;}else r.lts=t.longs===String?"0":0;if(r.ip="",$util$1.Long){var i=new $util$1.Long(0,0,!1);r.uid=t.longs===String?i.toString():t.longs===Number?i.toNumber():i;}else r.uid=t.longs===String?"0":0;if(r.success=!1,$util$1.Long){var s=new $util$1.Long(0,0,!1);r.elapse=t.longs===String?s.toString():t.longs===Number?s.toNumber():s;}else r.elapse=t.longs===String?"0":0;if($util$1.Long){var a=new $util$1.Long(0,0,!1);r.peer=t.longs===String?a.toString():t.longs===Number?a.toNumber():a;}else r.peer=t.longs===String?"0":0;r.apiPayload="",r.isCache=!1,r.isNotificationSuppressed=!1;}return null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.cname&&e.hasOwnProperty("cname")&&(r.cname=e.cname),null!=e.cid&&e.hasOwnProperty("cid")&&("number"==typeof e.cid?r.cid=t.longs===String?String(e.cid):e.cid:r.cid=t.longs===String?$util$1.Long.prototype.toString.call(e.cid):t.longs===Number?new $util$1.LongBits(e.cid.low>>>0,e.cid.high>>>0).toNumber():e.cid),null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.ip&&e.hasOwnProperty("ip")&&(r.ip=e.ip),null!=e.uid&&e.hasOwnProperty("uid")&&("number"==typeof e.uid?r.uid=t.longs===String?String(e.uid):e.uid:r.uid=t.longs===String?$util$1.Long.prototype.toString.call(e.uid):t.longs===Number?new $util$1.LongBits(e.uid.low>>>0,e.uid.high>>>0).toNumber():e.uid),null!=e.success&&e.hasOwnProperty("success")&&(r.success=e.success),null!=e.elapse&&e.hasOwnProperty("elapse")&&("number"==typeof e.elapse?r.elapse=t.longs===String?String(e.elapse):e.elapse:r.elapse=t.longs===String?$util$1.Long.prototype.toString.call(e.elapse):t.longs===Number?new $util$1.LongBits(e.elapse.low>>>0,e.elapse.high>>>0).toNumber():e.elapse),null!=e.peer&&e.hasOwnProperty("peer")&&("number"==typeof e.peer?r.peer=t.longs===String?String(e.peer):e.peer:r.peer=t.longs===String?$util$1.Long.prototype.toString.call(e.peer):t.longs===Number?new $util$1.LongBits(e.peer.low>>>0,e.peer.high>>>0).toNumber():e.peer),null!=e.apiPayload&&e.hasOwnProperty("apiPayload")&&(r.apiPayload=e.apiPayload),null!=e.isCache&&e.hasOwnProperty("isCache")&&(r.isCache=e.isCache),null!=e.isNotificationSuppressed&&e.hasOwnProperty("isNotificationSuppressed")&&(r.isNotificationSuppressed=e.isNotificationSuppressed),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),Counter=$root$1.Counter=function(){function e(e){if(this.items=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.sid="",e.prototype.peer=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.items=$util$1.emptyArray,e.encode=function(e,t){if(t||(t=$Writer$1.create()),null!=e.sid&&e.hasOwnProperty("sid")&&t.uint32(10).string(e.sid),null!=e.peer&&e.hasOwnProperty("peer")&&t.uint32(16).int64(e.peer),null!=e.items&&e.items.length)for(var r=0;r<e.items.length;++r)$root$1.Counter.CounterItem.encode(e.items[r],t.uint32(26).fork()).ldelim();return t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.Counter;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.sid=e.string();break;case 2:n.peer=e.int64();break;case 3:n.items&&n.items.length||(n.items=[]),n.items.push($root$1.Counter.CounterItem.decode(e,e.uint32()));break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){if("object"!==_typeof(e)||null===e)return "object expected";if(null!=e.sid&&e.hasOwnProperty("sid")&&!$util$1.isString(e.sid))return "sid: string expected";if(null!=e.peer&&e.hasOwnProperty("peer")&&!($util$1.isInteger(e.peer)||e.peer&&$util$1.isInteger(e.peer.low)&&$util$1.isInteger(e.peer.high)))return "peer: integer|Long expected";if(null!=e.items&&e.hasOwnProperty("items")){if(!Array.isArray(e.items))return "items: array expected";for(var t=0;t<e.items.length;++t){var r=$root$1.Counter.CounterItem.verify(e.items[t]);if(r)return "items."+r}}return null},e.fromObject=function(e){if(e instanceof $root$1.Counter)return e;var t=new $root$1.Counter;if(null!=e.sid&&(t.sid=String(e.sid)),null!=e.peer&&($util$1.Long?(t.peer=$util$1.Long.fromValue(e.peer)).unsigned=!1:"string"==typeof e.peer?t.peer=parseInt(e.peer,10):"number"==typeof e.peer?t.peer=e.peer:"object"===_typeof(e.peer)&&(t.peer=new $util$1.LongBits(e.peer.low>>>0,e.peer.high>>>0).toNumber())),e.items){if(!Array.isArray(e.items))throw TypeError(".Counter.items: array expected");t.items=[];for(var r=0;r<e.items.length;++r){if("object"!==_typeof(e.items[r]))throw TypeError(".Counter.items: object expected");t.items[r]=$root$1.Counter.CounterItem.fromObject(e.items[r]);}}return t},e.toObject=function(e,t){t||(t={});var r={};if((t.arrays||t.defaults)&&(r.items=[]),t.defaults)if(r.sid="",$util$1.Long){var n=new $util$1.Long(0,0,!1);r.peer=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.peer=t.longs===String?"0":0;if(null!=e.sid&&e.hasOwnProperty("sid")&&(r.sid=e.sid),null!=e.peer&&e.hasOwnProperty("peer")&&("number"==typeof e.peer?r.peer=t.longs===String?String(e.peer):e.peer:r.peer=t.longs===String?$util$1.Long.prototype.toString.call(e.peer):t.longs===Number?new $util$1.LongBits(e.peer.low>>>0,e.peer.high>>>0).toNumber():e.peer),e.items&&e.items.length){r.items=[];for(var o=0;o<e.items.length;++o)r.items[o]=$root$1.Counter.CounterItem.toObject(e.items[o],t);}return r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e.CounterItem=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]]);}return e.prototype.lts=$util$1.Long?$util$1.Long.fromBits(0,0,!1):0,e.prototype.id=0,e.prototype.value=0,e.prototype.tagErrorCode=0,e.prototype.streamId=0,e.encode=function(e,t){return t||(t=$Writer$1.create()),null!=e.lts&&e.hasOwnProperty("lts")&&t.uint32(8).int64(e.lts),null!=e.id&&e.hasOwnProperty("id")&&t.uint32(16).int32(e.id),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(24).int32(e.value),null!=e.tagErrorCode&&e.hasOwnProperty("tagErrorCode")&&t.uint32(32).int32(e.tagErrorCode),null!=e.streamId&&e.hasOwnProperty("streamId")&&t.uint32(40).uint32(e.streamId),t},e.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},e.decode=function(e,t){e instanceof $Reader$1||(e=$Reader$1.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new $root$1.Counter.CounterItem;e.pos<r;){var o=e.uint32();switch(o>>>3){case 1:n.lts=e.int64();break;case 2:n.id=e.int32();break;case 3:n.value=e.int32();break;case 4:n.tagErrorCode=e.int32();break;case 5:n.streamId=e.uint32();break;default:e.skipType(7&o);}}return n},e.decodeDelimited=function(e){return e instanceof $Reader$1||(e=new $Reader$1(e)),this.decode(e,e.uint32())},e.verify=function(e){return "object"!==_typeof(e)||null===e?"object expected":null!=e.lts&&e.hasOwnProperty("lts")&&!($util$1.isInteger(e.lts)||e.lts&&$util$1.isInteger(e.lts.low)&&$util$1.isInteger(e.lts.high))?"lts: integer|Long expected":null!=e.id&&e.hasOwnProperty("id")&&!$util$1.isInteger(e.id)?"id: integer expected":null!=e.value&&e.hasOwnProperty("value")&&!$util$1.isInteger(e.value)?"value: integer expected":null!=e.tagErrorCode&&e.hasOwnProperty("tagErrorCode")&&!$util$1.isInteger(e.tagErrorCode)?"tagErrorCode: integer expected":null!=e.streamId&&e.hasOwnProperty("streamId")&&!$util$1.isInteger(e.streamId)?"streamId: integer expected":null},e.fromObject=function(e){if(e instanceof $root$1.Counter.CounterItem)return e;var t=new $root$1.Counter.CounterItem;return null!=e.lts&&($util$1.Long?(t.lts=$util$1.Long.fromValue(e.lts)).unsigned=!1:"string"==typeof e.lts?t.lts=parseInt(e.lts,10):"number"==typeof e.lts?t.lts=e.lts:"object"===_typeof(e.lts)&&(t.lts=new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber())),null!=e.id&&(t.id=0|e.id),null!=e.value&&(t.value=0|e.value),null!=e.tagErrorCode&&(t.tagErrorCode=0|e.tagErrorCode),null!=e.streamId&&(t.streamId=e.streamId>>>0),t},e.toObject=function(e,t){t||(t={});var r={};if(t.defaults){if($util$1.Long){var n=new $util$1.Long(0,0,!1);r.lts=t.longs===String?n.toString():t.longs===Number?n.toNumber():n;}else r.lts=t.longs===String?"0":0;r.id=0,r.value=0,r.tagErrorCode=0,r.streamId=0;}return null!=e.lts&&e.hasOwnProperty("lts")&&("number"==typeof e.lts?r.lts=t.longs===String?String(e.lts):e.lts:r.lts=t.longs===String?$util$1.Long.prototype.toString.call(e.lts):t.longs===Number?new $util$1.LongBits(e.lts.low>>>0,e.lts.high>>>0).toNumber():e.lts),null!=e.id&&e.hasOwnProperty("id")&&(r.id=e.id),null!=e.value&&e.hasOwnProperty("value")&&(r.value=e.value),null!=e.tagErrorCode&&e.hasOwnProperty("tagErrorCode")&&(r.tagErrorCode=e.tagErrorCode),null!=e.streamId&&e.hasOwnProperty("streamId")&&(r.streamId=e.streamId),r},e.prototype.toJSON=function(){return this.constructor.toObject(this,indexMinimal_6.toJSONOptions)},e}(),e}(),ProtoPackets$1=Object.freeze({Session:Session,ApEvent:ApEvent,Link:Link,Logout:Logout,TxMessage:TxMessage,RxMessage:RxMessage,KickedOff:KickedOff,TxMessageRes:TxMessageRes,ChnJoin:ChnJoin,ChnJoinRes:ChnJoinRes,ChnLeave:ChnLeave,ChnGetMembers:ChnGetMembers,ChnGetMembersRes:ChnGetMembersRes,ChnMemberJoined:ChnMemberJoined,ChnMemberLeft:ChnMemberLeft,QueryPeersOnlineStatus:QueryPeersOnlineStatus,QueryPeersOnlineStatusRes:QueryPeersOnlineStatusRes,RenewToken:RenewToken,OperateAttribute:OperateAttribute,OperateAttributeRes:OperateAttributeRes,ApRequest:ApRequest,LinkTcpEvent:LinkTcpEvent,LinkLoginRequest:LinkLoginRequest,ConnectionStateChange:ConnectionStateChange,ApiExec:ApiExec,Counter:Counter,default:$root$1}),Counter$1=1,ApiExec$1=154,Session$1=164,ApEvent$1=165,Link$1=166,Logout$1=167,TxMessage$1=168,RxMessage$1=169,KickedOff$1=170,TxMessageRes$1=171,ChnJoin$1=172,ChnJoinRes$1=173,ChnLeave$1=174,ChnGetMembers$1=175,ChnGetMembersRes$1=176,ChnMemberJoined$1=177,ChnMemberLeft$1=178,QueryPeersOnlineStatus$1=179,QueryPeersOnlineStatusRes$1=180,RenewToken$1=181,OperateAttribute$1=186,OperateAttributeRes$1=187,ApRequest$1=188,LinkTcpEvent$1=189,LinkLoginRequest$1=190,ConnectionStateChange$1=191,reportId={Counter:Counter$1,ApiExec:ApiExec$1,Session:Session$1,ApEvent:ApEvent$1,Link:Link$1,Logout:Logout$1,TxMessage:TxMessage$1,RxMessage:RxMessage$1,KickedOff:KickedOff$1,TxMessageRes:TxMessageRes$1,ChnJoin:ChnJoin$1,ChnJoinRes:ChnJoinRes$1,ChnLeave:ChnLeave$1,ChnGetMembers:ChnGetMembers$1,ChnGetMembersRes:ChnGetMembersRes$1,ChnMemberJoined:ChnMemberJoined$1,ChnMemberLeft:ChnMemberLeft$1,QueryPeersOnlineStatus:QueryPeersOnlineStatus$1,QueryPeersOnlineStatusRes:QueryPeersOnlineStatusRes$1,RenewToken:RenewToken$1,OperateAttribute:OperateAttribute$1,OperateAttributeRes:OperateAttributeRes$1,ApRequest:ApRequest$1,LinkTcpEvent:LinkTcpEvent$1,LinkLoginRequest:LinkLoginRequest$1,ConnectionStateChange:ConnectionStateChange$1},ReportId=Object.freeze({Counter:Counter$1,ApiExec:ApiExec$1,Session:Session$1,ApEvent:ApEvent$1,Link:Link$1,Logout:Logout$1,TxMessage:TxMessage$1,RxMessage:RxMessage$1,KickedOff:KickedOff$1,TxMessageRes:TxMessageRes$1,ChnJoin:ChnJoin$1,ChnJoinRes:ChnJoinRes$1,ChnLeave:ChnLeave$1,ChnGetMembers:ChnGetMembers$1,ChnGetMembersRes:ChnGetMembersRes$1,ChnMemberJoined:ChnMemberJoined$1,ChnMemberLeft:ChnMemberLeft$1,QueryPeersOnlineStatus:QueryPeersOnlineStatus$1,QueryPeersOnlineStatusRes:QueryPeersOnlineStatusRes$1,RenewToken:RenewToken$1,OperateAttribute:OperateAttribute$1,OperateAttributeRes:OperateAttributeRes$1,ApRequest:ApRequest$1,LinkTcpEvent:LinkTcpEvent$1,LinkLoginRequest:LinkLoginRequest$1,ConnectionStateChange:ConnectionStateChange$1,default:reportId});function asyncGeneratorStep$5(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value;}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o);}function _asyncToGenerator$5(e){return function(){var t=this,r=arguments;return new Promise(function(n,o){var i=e.apply(t,r);function s(e){asyncGeneratorStep$5(i,n,o,s,a,"next",e);}function a(e){asyncGeneratorStep$5(i,n,o,s,a,"throw",e);}s(void 0);})}}var EVENT_REPORT_DOMAIN="webcollector-rtm.agora.io",EVENT_REPORT_BACKUP_DOMAIN="webcollector-2.agoraio.cn";function sendReport(e,t){return _sendReport.apply(this,arguments)}function _sendReport(){return (_sendReport=_asyncToGenerator$5(regenerator.mark(function e(t,r){var n,o,i;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:e.next=2;break;case 2:return n=ProtoPackets$1[t].encode(r).finish(),(o=new URLSearchParams).append("sentTs",Math.ceil(Date.now()/1e3).toString()),o.append("id",ReportId[t].toString()),i=function(e){return ky.post("https://".concat(e,":6443/events/proto-raw"),{body:n,retry:1,timeout:1e4,searchParams:o,headers:{"Content-Type":"application/octet-stream"},mode:"cors",cache:"no-cache",credentials:"same-origin"})},e.prev=7,e.next=10,i(EVENT_REPORT_DOMAIN);case 10:e.next=16;break;case 12:return e.prev=12,e.t0=e.catch(7),e.next=16,i(EVENT_REPORT_BACKUP_DOMAIN);case 16:case"end":return e.stop()}},e,null,[[7,12]])}))).apply(this,arguments)}function getElapse(e){return void 0===e?long_1.fromNumber(0):long_1.fromNumber(Date.now()-e)}function _typeof$6(e){return (_typeof$6="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck$7(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$4(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function _createClass$4(e,t,r){return t&&_defineProperties$4(e.prototype,t),r&&_defineProperties$4(e,r),e}function _possibleConstructorReturn$6(e,t){return !t||"object"!==_typeof$6(t)&&"function"!=typeof t?_assertThisInitialized$6(e):t}function _assertThisInitialized$6(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf$6(e){return (_getPrototypeOf$6=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits$6(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf$6(e,t);}function _setPrototypeOf$6(e,t){return (_setPrototypeOf$6=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Context=function(e){function t(e,r){var n;return _classCallCheck$7(this,t),(n=_possibleConstructorReturn$6(this,_getPrototypeOf$6(t).call(this,r,"Context"))).appId=e,n._token=void 0,n._uid=void 0,n._sid=void 0,n._area=void 0,n}return _inherits$6(t,createEventBase()),_createClass$4(t,[{key:"token",set:function(e){this.log("The token is set to %s",e),this._token="string"==typeof e&&e?e:void 0;}},{key:"uid",set:function(e){if(this.log("The user ID is set to %s",e),!isValidId(e))throw new RtmInternalError;this._uid=e;},get:function(){if("string"==typeof this._uid&&this._uid)return this._uid;throw new RtmInternalError("Cannot get illegal uid")}},{key:"key",get:function(){if("string"==typeof this._token&&this._token)return this._token;if("string"==typeof this.appId&&this.appId)return this.appId;throw new RtmInternalError("Cannot get illegal key")}},{key:"sid",get:function(){if("string"==typeof this._sid&&this._sid)return this._sid;throw new RtmInternalError("Cannot get illegal sid")},set:function(e){if(this.log("sid is set to %s",e),"string"!=typeof e||!e)throw new RtmInternalError;this._sid=e;}},{key:"area",get:function(){if("string"==typeof this._area&&this._area)return this._area;throw new RtmInternalError("Cannot get illegal area")},set:function(e){if(this.log("area is set to %s",e),"string"!=typeof e||!e)throw new RtmInternalError("The area is illegal");this._area=e;}}]),t}();function compact(e){for(var t=-1,r=null==e?0:e.length,n=0,o=[];++t<r;){var i=e[t];i&&(o[n++]=i);}return o}var compact_1=compact,common$1=createCommonjsModule(function(e,t){var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function n(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!==_typeof(r))throw new TypeError(r+"must be non-object");for(var o in r)n(r,o)&&(e[o]=r[o]);}}return e},t.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var o={arraySet:function(e,t,r,n,o){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),o);else for(var i=0;i<n;i++)e[o+i]=t[r+i];},flattenChunks:function(e){var t,r,n,o,i,s;for(n=0,t=0,r=e.length;t<r;t++)n+=e[t].length;for(s=new Uint8Array(n),o=0,t=0,r=e.length;t<r;t++)i=e[t],s.set(i,o),o+=i.length;return s}},i={arraySet:function(e,t,r,n,o){for(var i=0;i<n;i++)e[o+i]=t[r+i];},flattenChunks:function(e){return [].concat.apply([],e)}};t.setTyped=function(e){e?(t.Buf8=Uint8Array,t.Buf16=Uint16Array,t.Buf32=Int32Array,t.assign(t,o)):(t.Buf8=Array,t.Buf16=Array,t.Buf32=Array,t.assign(t,i));},t.setTyped(r);}),common_1=common$1.assign,common_2=common$1.shrinkBuf,common_3=common$1.setTyped,common_4=common$1.Buf8,common_5=common$1.Buf16,common_6=common$1.Buf32,Z_FIXED=4,Z_BINARY=0,Z_TEXT=1,Z_UNKNOWN=2;function zero$1(e){for(var t=e.length;--t>=0;)e[t]=0;}var STORED_BLOCK=0,STATIC_TREES=1,DYN_TREES=2,MIN_MATCH=3,MAX_MATCH=258,LENGTH_CODES=29,LITERALS=256,L_CODES=LITERALS+1+LENGTH_CODES,D_CODES=30,BL_CODES=19,HEAP_SIZE=2*L_CODES+1,MAX_BITS=15,Buf_size=16,MAX_BL_BITS=7,END_BLOCK=256,REP_3_6=16,REPZ_3_10=17,REPZ_11_138=18,extra_lbits=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],extra_dbits=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],extra_blbits=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],bl_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],DIST_CODE_LEN=512,static_ltree=new Array(2*(L_CODES+2));zero$1(static_ltree);var static_dtree=new Array(2*D_CODES);zero$1(static_dtree);var _dist_code=new Array(DIST_CODE_LEN);zero$1(_dist_code);var _length_code=new Array(MAX_MATCH-MIN_MATCH+1);zero$1(_length_code);var base_length=new Array(LENGTH_CODES);zero$1(base_length);var base_dist=new Array(D_CODES),static_l_desc,static_d_desc,static_bl_desc;function StaticTreeDesc(e,t,r,n,o){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=o,this.has_stree=e&&e.length;}function TreeDesc(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t;}function d_code(e){return e<256?_dist_code[e]:_dist_code[256+(e>>>7)]}function put_short(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255;}function send_bits(e,t,r){e.bi_valid>Buf_size-r?(e.bi_buf|=t<<e.bi_valid&65535,put_short(e,e.bi_buf),e.bi_buf=t>>Buf_size-e.bi_valid,e.bi_valid+=r-Buf_size):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r);}function send_code(e,t,r){send_bits(e,r[2*t],r[2*t+1]);}function bi_reverse(e,t){var r=0;do{r|=1&e,e>>>=1,r<<=1;}while(--t>0);return r>>>1}function bi_flush(e){16===e.bi_valid?(put_short(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8);}function gen_bitlen(e,t){var r,n,o,i,s,a,u=t.dyn_tree,l=t.max_code,c=t.stat_desc.static_tree,p=t.stat_desc.has_stree,f=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,g=t.stat_desc.max_length,h=0;for(i=0;i<=MAX_BITS;i++)e.bl_count[i]=0;for(u[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<HEAP_SIZE;r++)(i=u[2*u[2*(n=e.heap[r])+1]+1]+1)>g&&(i=g,h++),u[2*n+1]=i,n>l||(e.bl_count[i]++,s=0,n>=d&&(s=f[n-d]),a=u[2*n],e.opt_len+=a*(i+s),p&&(e.static_len+=a*(c[2*n+1]+s)));if(0!==h){do{for(i=g-1;0===e.bl_count[i];)i--;e.bl_count[i]--,e.bl_count[i+1]+=2,e.bl_count[g]--,h-=2;}while(h>0);for(i=g;0!==i;i--)for(n=e.bl_count[i];0!==n;)(o=e.heap[--r])>l||(u[2*o+1]!==i&&(e.opt_len+=(i-u[2*o+1])*u[2*o],u[2*o+1]=i),n--);}}function gen_codes(e,t,r){var n,o,i=new Array(MAX_BITS+1),s=0;for(n=1;n<=MAX_BITS;n++)i[n]=s=s+r[n-1]<<1;for(o=0;o<=t;o++){var a=e[2*o+1];0!==a&&(e[2*o]=bi_reverse(i[a]++,a));}}function tr_static_init(){var e,t,r,n,o,i=new Array(MAX_BITS+1);for(r=0,n=0;n<LENGTH_CODES-1;n++)for(base_length[n]=r,e=0;e<1<<extra_lbits[n];e++)_length_code[r++]=n;for(_length_code[r-1]=n,o=0,n=0;n<16;n++)for(base_dist[n]=o,e=0;e<1<<extra_dbits[n];e++)_dist_code[o++]=n;for(o>>=7;n<D_CODES;n++)for(base_dist[n]=o<<7,e=0;e<1<<extra_dbits[n]-7;e++)_dist_code[256+o++]=n;for(t=0;t<=MAX_BITS;t++)i[t]=0;for(e=0;e<=143;)static_ltree[2*e+1]=8,e++,i[8]++;for(;e<=255;)static_ltree[2*e+1]=9,e++,i[9]++;for(;e<=279;)static_ltree[2*e+1]=7,e++,i[7]++;for(;e<=287;)static_ltree[2*e+1]=8,e++,i[8]++;for(gen_codes(static_ltree,L_CODES+1,i),e=0;e<D_CODES;e++)static_dtree[2*e+1]=5,static_dtree[2*e]=bi_reverse(e,5);static_l_desc=new StaticTreeDesc(static_ltree,extra_lbits,LITERALS+1,L_CODES,MAX_BITS),static_d_desc=new StaticTreeDesc(static_dtree,extra_dbits,0,D_CODES,MAX_BITS),static_bl_desc=new StaticTreeDesc(new Array(0),extra_blbits,0,BL_CODES,MAX_BL_BITS);}function init_block(e){var t;for(t=0;t<L_CODES;t++)e.dyn_ltree[2*t]=0;for(t=0;t<D_CODES;t++)e.dyn_dtree[2*t]=0;for(t=0;t<BL_CODES;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*END_BLOCK]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0;}function bi_windup(e){e.bi_valid>8?put_short(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0;}function copy_block(e,t,r,n){bi_windup(e),n&&(put_short(e,r),put_short(e,~r)),common$1.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r;}function smaller(e,t,r,n){var o=2*t,i=2*r;return e[o]<e[i]||e[o]===e[i]&&n[t]<=n[r]}function pqdownheap(e,t,r){for(var n=e.heap[r],o=r<<1;o<=e.heap_len&&(o<e.heap_len&&smaller(t,e.heap[o+1],e.heap[o],e.depth)&&o++,!smaller(t,n,e.heap[o],e.depth));)e.heap[r]=e.heap[o],r=o,o<<=1;e.heap[r]=n;}function compress_block(e,t,r){var n,o,i,s,a=0;if(0!==e.last_lit)do{n=e.pending_buf[e.d_buf+2*a]<<8|e.pending_buf[e.d_buf+2*a+1],o=e.pending_buf[e.l_buf+a],a++,0===n?send_code(e,o,t):(send_code(e,(i=_length_code[o])+LITERALS+1,t),0!==(s=extra_lbits[i])&&send_bits(e,o-=base_length[i],s),send_code(e,i=d_code(--n),r),0!==(s=extra_dbits[i])&&send_bits(e,n-=base_dist[i],s));}while(a<e.last_lit);send_code(e,END_BLOCK,t);}function build_tree(e,t){var r,n,o,i=t.dyn_tree,s=t.stat_desc.static_tree,a=t.stat_desc.has_stree,u=t.stat_desc.elems,l=-1;for(e.heap_len=0,e.heap_max=HEAP_SIZE,r=0;r<u;r++)0!==i[2*r]?(e.heap[++e.heap_len]=l=r,e.depth[r]=0):i[2*r+1]=0;for(;e.heap_len<2;)i[2*(o=e.heap[++e.heap_len]=l<2?++l:0)]=1,e.depth[o]=0,e.opt_len--,a&&(e.static_len-=s[2*o+1]);for(t.max_code=l,r=e.heap_len>>1;r>=1;r--)pqdownheap(e,i,r);o=u;do{r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],pqdownheap(e,i,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,i[2*o]=i[2*r]+i[2*n],e.depth[o]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,i[2*r+1]=i[2*n+1]=o,e.heap[1]=o++,pqdownheap(e,i,1);}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],gen_bitlen(e,t),gen_codes(i,l,e.bl_count);}function scan_tree(e,t,r){var n,o,i=-1,s=t[1],a=0,u=7,l=4;for(0===s&&(u=138,l=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)o=s,s=t[2*(n+1)+1],++a<u&&o===s||(a<l?e.bl_tree[2*o]+=a:0!==o?(o!==i&&e.bl_tree[2*o]++,e.bl_tree[2*REP_3_6]++):a<=10?e.bl_tree[2*REPZ_3_10]++:e.bl_tree[2*REPZ_11_138]++,a=0,i=o,0===s?(u=138,l=3):o===s?(u=6,l=3):(u=7,l=4));}function send_tree(e,t,r){var n,o,i=-1,s=t[1],a=0,u=7,l=4;for(0===s&&(u=138,l=3),n=0;n<=r;n++)if(o=s,s=t[2*(n+1)+1],!(++a<u&&o===s)){if(a<l)do{send_code(e,o,e.bl_tree);}while(0!=--a);else 0!==o?(o!==i&&(send_code(e,o,e.bl_tree),a--),send_code(e,REP_3_6,e.bl_tree),send_bits(e,a-3,2)):a<=10?(send_code(e,REPZ_3_10,e.bl_tree),send_bits(e,a-3,3)):(send_code(e,REPZ_11_138,e.bl_tree),send_bits(e,a-11,7));a=0,i=o,0===s?(u=138,l=3):o===s?(u=6,l=3):(u=7,l=4);}}function build_bl_tree(e){var t;for(scan_tree(e,e.dyn_ltree,e.l_desc.max_code),scan_tree(e,e.dyn_dtree,e.d_desc.max_code),build_tree(e,e.bl_desc),t=BL_CODES-1;t>=3&&0===e.bl_tree[2*bl_order[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}function send_all_trees(e,t,r,n){var o;for(send_bits(e,t-257,5),send_bits(e,r-1,5),send_bits(e,n-4,4),o=0;o<n;o++)send_bits(e,e.bl_tree[2*bl_order[o]+1],3);send_tree(e,e.dyn_ltree,t-1),send_tree(e,e.dyn_dtree,r-1);}function detect_data_type(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return Z_BINARY;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return Z_TEXT;for(t=32;t<LITERALS;t++)if(0!==e.dyn_ltree[2*t])return Z_TEXT;return Z_BINARY}zero$1(base_dist);var static_init_done=!1;function _tr_init(e){static_init_done||(tr_static_init(),static_init_done=!0),e.l_desc=new TreeDesc(e.dyn_ltree,static_l_desc),e.d_desc=new TreeDesc(e.dyn_dtree,static_d_desc),e.bl_desc=new TreeDesc(e.bl_tree,static_bl_desc),e.bi_buf=0,e.bi_valid=0,init_block(e);}function _tr_stored_block(e,t,r,n){send_bits(e,(STORED_BLOCK<<1)+(n?1:0),3),copy_block(e,t,r,!0);}function _tr_align(e){send_bits(e,STATIC_TREES<<1,3),send_code(e,END_BLOCK,static_ltree),bi_flush(e);}function _tr_flush_block(e,t,r,n){var o,i,s=0;e.level>0?(e.strm.data_type===Z_UNKNOWN&&(e.strm.data_type=detect_data_type(e)),build_tree(e,e.l_desc),build_tree(e,e.d_desc),s=build_bl_tree(e),o=e.opt_len+3+7>>>3,(i=e.static_len+3+7>>>3)<=o&&(o=i)):o=i=r+5,r+4<=o&&-1!==t?_tr_stored_block(e,t,r,n):e.strategy===Z_FIXED||i===o?(send_bits(e,(STATIC_TREES<<1)+(n?1:0),3),compress_block(e,static_ltree,static_dtree)):(send_bits(e,(DYN_TREES<<1)+(n?1:0),3),send_all_trees(e,e.l_desc.max_code+1,e.d_desc.max_code+1,s+1),compress_block(e,e.dyn_ltree,e.dyn_dtree)),init_block(e),n&&bi_windup(e);}function _tr_tally(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(_length_code[r]+LITERALS+1)]++,e.dyn_dtree[2*d_code(t)]++),e.last_lit===e.lit_bufsize-1}var _tr_init_1=_tr_init,_tr_stored_block_1=_tr_stored_block,_tr_flush_block_1=_tr_flush_block,_tr_tally_1=_tr_tally,_tr_align_1=_tr_align,trees={_tr_init:_tr_init_1,_tr_stored_block:_tr_stored_block_1,_tr_flush_block:_tr_flush_block_1,_tr_tally:_tr_tally_1,_tr_align:_tr_align_1};function adler32(e,t,r,n){for(var o=65535&e|0,i=e>>>16&65535|0,s=0;0!==r;){r-=s=r>2e3?2e3:r;do{i=i+(o=o+t[n++]|0)|0;}while(--s);o%=65521,i%=65521;}return o|i<<16|0}var adler32_1=adler32;function makeTable(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e;}return t}var crcTable=makeTable();function crc32(e,t,r,n){var o=crcTable,i=n+r;e^=-1;for(var s=n;s<i;s++)e=e>>>8^o[255&(e^t[s])];return -1^e}var crc32_1=crc32,messages={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Z_NO_FLUSH=0,Z_PARTIAL_FLUSH=1,Z_FULL_FLUSH=3,Z_FINISH=4,Z_BLOCK=5,Z_OK=0,Z_STREAM_END=1,Z_STREAM_ERROR=-2,Z_DATA_ERROR=-3,Z_BUF_ERROR=-5,Z_DEFAULT_COMPRESSION=-1,Z_FILTERED=1,Z_HUFFMAN_ONLY=2,Z_RLE=3,Z_FIXED$1=4,Z_DEFAULT_STRATEGY=0,Z_UNKNOWN$1=2,Z_DEFLATED=8,MAX_MEM_LEVEL=9,MAX_WBITS=15,DEF_MEM_LEVEL=8,LENGTH_CODES$1=29,LITERALS$1=256,L_CODES$1=LITERALS$1+1+LENGTH_CODES$1,D_CODES$1=30,BL_CODES$1=19,HEAP_SIZE$1=2*L_CODES$1+1,MAX_BITS$1=15,MIN_MATCH$1=3,MAX_MATCH$1=258,MIN_LOOKAHEAD=MAX_MATCH$1+MIN_MATCH$1+1,PRESET_DICT=32,INIT_STATE=42,EXTRA_STATE=69,NAME_STATE=73,COMMENT_STATE=91,HCRC_STATE=103,BUSY_STATE=113,FINISH_STATE=666,BS_NEED_MORE=1,BS_BLOCK_DONE=2,BS_FINISH_STARTED=3,BS_FINISH_DONE=4,OS_CODE=3,configuration_table;function err(e,t){return e.msg=messages[t],t}function rank(e){return (e<<1)-(e>4?9:0)}function zero$2(e){for(var t=e.length;--t>=0;)e[t]=0;}function flush_pending(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(common$1.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0));}function flush_block_only(e,t){trees._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,flush_pending(e.strm);}function put_byte(e,t){e.pending_buf[e.pending++]=t;}function putShortMSB(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t;}function read_buf(e,t,r,n){var o=e.avail_in;return o>n&&(o=n),0===o?0:(e.avail_in-=o,common$1.arraySet(t,e.input,e.next_in,o,r),1===e.state.wrap?e.adler=adler32_1(e.adler,t,o,r):2===e.state.wrap&&(e.adler=crc32_1(e.adler,t,o,r)),e.next_in+=o,e.total_in+=o,o)}function longest_match(e,t){var r,n,o=e.max_chain_length,i=e.strstart,s=e.prev_length,a=e.nice_match,u=e.strstart>e.w_size-MIN_LOOKAHEAD?e.strstart-(e.w_size-MIN_LOOKAHEAD):0,l=e.window,c=e.w_mask,p=e.prev,f=e.strstart+MAX_MATCH$1,d=l[i+s-1],g=l[i+s];e.prev_length>=e.good_match&&(o>>=2),a>e.lookahead&&(a=e.lookahead);do{if(l[(r=t)+s]===g&&l[r+s-1]===d&&l[r]===l[i]&&l[++r]===l[i+1]){i+=2,r++;do{}while(l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&l[++i]===l[++r]&&i<f);if(n=MAX_MATCH$1-(f-i),i=f-MAX_MATCH$1,n>s){if(e.match_start=t,s=n,n>=a)break;d=l[i+s-1],g=l[i+s];}}}while((t=p[t&c])>u&&0!=--o);return s<=e.lookahead?s:e.lookahead}function fill_window(e){var t,r,n,o,i,s=e.w_size;do{if(o=e.window_size-e.lookahead-e.strstart,e.strstart>=s+(s-MIN_LOOKAHEAD)){common$1.arraySet(e.window,e.window,s,s,0),e.match_start-=s,e.strstart-=s,e.block_start-=s,t=r=e.hash_size;do{n=e.head[--t],e.head[t]=n>=s?n-s:0;}while(--r);t=r=s;do{n=e.prev[--t],e.prev[t]=n>=s?n-s:0;}while(--r);o+=s;}if(0===e.strm.avail_in)break;if(r=read_buf(e.strm,e.window,e.strstart+e.lookahead,o),e.lookahead+=r,e.lookahead+e.insert>=MIN_MATCH$1)for(i=e.strstart-e.insert,e.ins_h=e.window[i],e.ins_h=(e.ins_h<<e.hash_shift^e.window[i+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[i+MIN_MATCH$1-1])&e.hash_mask,e.prev[i&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=i,i++,e.insert--,!(e.lookahead+e.insert<MIN_MATCH$1)););}while(e.lookahead<MIN_LOOKAHEAD&&0!==e.strm.avail_in)}function deflate_stored(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(fill_window(e),0===e.lookahead&&t===Z_NO_FLUSH)return BS_NEED_MORE;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,flush_block_only(e,!1),0===e.strm.avail_out))return BS_NEED_MORE;if(e.strstart-e.block_start>=e.w_size-MIN_LOOKAHEAD&&(flush_block_only(e,!1),0===e.strm.avail_out))return BS_NEED_MORE}return e.insert=0,t===Z_FINISH?(flush_block_only(e,!0),0===e.strm.avail_out?BS_FINISH_STARTED:BS_FINISH_DONE):(e.strstart>e.block_start&&(flush_block_only(e,!1),e.strm.avail_out),BS_NEED_MORE)}function deflate_fast(e,t){for(var r,n;;){if(e.lookahead<MIN_LOOKAHEAD){if(fill_window(e),e.lookahead<MIN_LOOKAHEAD&&t===Z_NO_FLUSH)return BS_NEED_MORE;if(0===e.lookahead)break}if(r=0,e.lookahead>=MIN_MATCH$1&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+MIN_MATCH$1-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-MIN_LOOKAHEAD&&(e.match_length=longest_match(e,r)),e.match_length>=MIN_MATCH$1)if(n=trees._tr_tally(e,e.strstart-e.match_start,e.match_length-MIN_MATCH$1),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=MIN_MATCH$1){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+MIN_MATCH$1-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart;}while(0!=--e.match_length);e.strstart++;}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=trees._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(flush_block_only(e,!1),0===e.strm.avail_out))return BS_NEED_MORE}return e.insert=e.strstart<MIN_MATCH$1-1?e.strstart:MIN_MATCH$1-1,t===Z_FINISH?(flush_block_only(e,!0),0===e.strm.avail_out?BS_FINISH_STARTED:BS_FINISH_DONE):e.last_lit&&(flush_block_only(e,!1),0===e.strm.avail_out)?BS_NEED_MORE:BS_BLOCK_DONE}function deflate_slow(e,t){for(var r,n,o;;){if(e.lookahead<MIN_LOOKAHEAD){if(fill_window(e),e.lookahead<MIN_LOOKAHEAD&&t===Z_NO_FLUSH)return BS_NEED_MORE;if(0===e.lookahead)break}if(r=0,e.lookahead>=MIN_MATCH$1&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+MIN_MATCH$1-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=MIN_MATCH$1-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-MIN_LOOKAHEAD&&(e.match_length=longest_match(e,r),e.match_length<=5&&(e.strategy===Z_FILTERED||e.match_length===MIN_MATCH$1&&e.strstart-e.match_start>4096)&&(e.match_length=MIN_MATCH$1-1)),e.prev_length>=MIN_MATCH$1&&e.match_length<=e.prev_length){o=e.strstart+e.lookahead-MIN_MATCH$1,n=trees._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-MIN_MATCH$1),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=o&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+MIN_MATCH$1-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart);}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=MIN_MATCH$1-1,e.strstart++,n&&(flush_block_only(e,!1),0===e.strm.avail_out))return BS_NEED_MORE}else if(e.match_available){if((n=trees._tr_tally(e,0,e.window[e.strstart-1]))&&flush_block_only(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return BS_NEED_MORE}else e.match_available=1,e.strstart++,e.lookahead--;}return e.match_available&&(n=trees._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<MIN_MATCH$1-1?e.strstart:MIN_MATCH$1-1,t===Z_FINISH?(flush_block_only(e,!0),0===e.strm.avail_out?BS_FINISH_STARTED:BS_FINISH_DONE):e.last_lit&&(flush_block_only(e,!1),0===e.strm.avail_out)?BS_NEED_MORE:BS_BLOCK_DONE}function deflate_rle(e,t){for(var r,n,o,i,s=e.window;;){if(e.lookahead<=MAX_MATCH$1){if(fill_window(e),e.lookahead<=MAX_MATCH$1&&t===Z_NO_FLUSH)return BS_NEED_MORE;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=MIN_MATCH$1&&e.strstart>0&&(n=s[o=e.strstart-1])===s[++o]&&n===s[++o]&&n===s[++o]){i=e.strstart+MAX_MATCH$1;do{}while(n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&n===s[++o]&&o<i);e.match_length=MAX_MATCH$1-(i-o),e.match_length>e.lookahead&&(e.match_length=e.lookahead);}if(e.match_length>=MIN_MATCH$1?(r=trees._tr_tally(e,1,e.match_length-MIN_MATCH$1),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=trees._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(flush_block_only(e,!1),0===e.strm.avail_out))return BS_NEED_MORE}return e.insert=0,t===Z_FINISH?(flush_block_only(e,!0),0===e.strm.avail_out?BS_FINISH_STARTED:BS_FINISH_DONE):e.last_lit&&(flush_block_only(e,!1),0===e.strm.avail_out)?BS_NEED_MORE:BS_BLOCK_DONE}function deflate_huff(e,t){for(var r;;){if(0===e.lookahead&&(fill_window(e),0===e.lookahead)){if(t===Z_NO_FLUSH)return BS_NEED_MORE;break}if(e.match_length=0,r=trees._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(flush_block_only(e,!1),0===e.strm.avail_out))return BS_NEED_MORE}return e.insert=0,t===Z_FINISH?(flush_block_only(e,!0),0===e.strm.avail_out?BS_FINISH_STARTED:BS_FINISH_DONE):e.last_lit&&(flush_block_only(e,!1),0===e.strm.avail_out)?BS_NEED_MORE:BS_BLOCK_DONE}function Config(e,t,r,n,o){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=o;}function lm_init(e){e.window_size=2*e.w_size,zero$2(e.head),e.max_lazy_match=configuration_table[e.level].max_lazy,e.good_match=configuration_table[e.level].good_length,e.nice_match=configuration_table[e.level].nice_length,e.max_chain_length=configuration_table[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=MIN_MATCH$1-1,e.match_available=0,e.ins_h=0;}function DeflateState(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=Z_DEFLATED,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new common$1.Buf16(2*HEAP_SIZE$1),this.dyn_dtree=new common$1.Buf16(2*(2*D_CODES$1+1)),this.bl_tree=new common$1.Buf16(2*(2*BL_CODES$1+1)),zero$2(this.dyn_ltree),zero$2(this.dyn_dtree),zero$2(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new common$1.Buf16(MAX_BITS$1+1),this.heap=new common$1.Buf16(2*L_CODES$1+1),zero$2(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new common$1.Buf16(2*L_CODES$1+1),zero$2(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0;}function deflateResetKeep(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=Z_UNKNOWN$1,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?INIT_STATE:BUSY_STATE,e.adler=2===t.wrap?0:1,t.last_flush=Z_NO_FLUSH,trees._tr_init(t),Z_OK):err(e,Z_STREAM_ERROR)}function deflateReset(e){var t=deflateResetKeep(e);return t===Z_OK&&lm_init(e.state),t}function deflateSetHeader(e,t){return e&&e.state?2!==e.state.wrap?Z_STREAM_ERROR:(e.state.gzhead=t,Z_OK):Z_STREAM_ERROR}function deflateInit2(e,t,r,n,o,i){if(!e)return Z_STREAM_ERROR;var s=1;if(t===Z_DEFAULT_COMPRESSION&&(t=6),n<0?(s=0,n=-n):n>15&&(s=2,n-=16),o<1||o>MAX_MEM_LEVEL||r!==Z_DEFLATED||n<8||n>15||t<0||t>9||i<0||i>Z_FIXED$1)return err(e,Z_STREAM_ERROR);8===n&&(n=9);var a=new DeflateState;return e.state=a,a.strm=e,a.wrap=s,a.gzhead=null,a.w_bits=n,a.w_size=1<<a.w_bits,a.w_mask=a.w_size-1,a.hash_bits=o+7,a.hash_size=1<<a.hash_bits,a.hash_mask=a.hash_size-1,a.hash_shift=~~((a.hash_bits+MIN_MATCH$1-1)/MIN_MATCH$1),a.window=new common$1.Buf8(2*a.w_size),a.head=new common$1.Buf16(a.hash_size),a.prev=new common$1.Buf16(a.w_size),a.lit_bufsize=1<<o+6,a.pending_buf_size=4*a.lit_bufsize,a.pending_buf=new common$1.Buf8(a.pending_buf_size),a.d_buf=1*a.lit_bufsize,a.l_buf=3*a.lit_bufsize,a.level=t,a.strategy=i,a.method=r,deflateReset(e)}function deflateInit(e,t){return deflateInit2(e,t,Z_DEFLATED,MAX_WBITS,DEF_MEM_LEVEL,Z_DEFAULT_STRATEGY)}function deflate(e,t){var r,n,o,i;if(!e||!e.state||t>Z_BLOCK||t<0)return e?err(e,Z_STREAM_ERROR):Z_STREAM_ERROR;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||n.status===FINISH_STATE&&t!==Z_FINISH)return err(e,0===e.avail_out?Z_BUF_ERROR:Z_STREAM_ERROR);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===INIT_STATE)if(2===n.wrap)e.adler=0,put_byte(n,31),put_byte(n,139),put_byte(n,8),n.gzhead?(put_byte(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),put_byte(n,255&n.gzhead.time),put_byte(n,n.gzhead.time>>8&255),put_byte(n,n.gzhead.time>>16&255),put_byte(n,n.gzhead.time>>24&255),put_byte(n,9===n.level?2:n.strategy>=Z_HUFFMAN_ONLY||n.level<2?4:0),put_byte(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(put_byte(n,255&n.gzhead.extra.length),put_byte(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=crc32_1(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=EXTRA_STATE):(put_byte(n,0),put_byte(n,0),put_byte(n,0),put_byte(n,0),put_byte(n,0),put_byte(n,9===n.level?2:n.strategy>=Z_HUFFMAN_ONLY||n.level<2?4:0),put_byte(n,OS_CODE),n.status=BUSY_STATE);else {var s=Z_DEFLATED+(n.w_bits-8<<4)<<8;s|=(n.strategy>=Z_HUFFMAN_ONLY||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(s|=PRESET_DICT),s+=31-s%31,n.status=BUSY_STATE,putShortMSB(n,s),0!==n.strstart&&(putShortMSB(n,e.adler>>>16),putShortMSB(n,65535&e.adler)),e.adler=1;}if(n.status===EXTRA_STATE)if(n.gzhead.extra){for(o=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>o&&(e.adler=crc32_1(e.adler,n.pending_buf,n.pending-o,o)),flush_pending(e),o=n.pending,n.pending!==n.pending_buf_size));)put_byte(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>o&&(e.adler=crc32_1(e.adler,n.pending_buf,n.pending-o,o)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=NAME_STATE);}else n.status=NAME_STATE;if(n.status===NAME_STATE)if(n.gzhead.name){o=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>o&&(e.adler=crc32_1(e.adler,n.pending_buf,n.pending-o,o)),flush_pending(e),o=n.pending,n.pending===n.pending_buf_size)){i=1;break}i=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,put_byte(n,i);}while(0!==i);n.gzhead.hcrc&&n.pending>o&&(e.adler=crc32_1(e.adler,n.pending_buf,n.pending-o,o)),0===i&&(n.gzindex=0,n.status=COMMENT_STATE);}else n.status=COMMENT_STATE;if(n.status===COMMENT_STATE)if(n.gzhead.comment){o=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>o&&(e.adler=crc32_1(e.adler,n.pending_buf,n.pending-o,o)),flush_pending(e),o=n.pending,n.pending===n.pending_buf_size)){i=1;break}i=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,put_byte(n,i);}while(0!==i);n.gzhead.hcrc&&n.pending>o&&(e.adler=crc32_1(e.adler,n.pending_buf,n.pending-o,o)),0===i&&(n.status=HCRC_STATE);}else n.status=HCRC_STATE;if(n.status===HCRC_STATE&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&flush_pending(e),n.pending+2<=n.pending_buf_size&&(put_byte(n,255&e.adler),put_byte(n,e.adler>>8&255),e.adler=0,n.status=BUSY_STATE)):n.status=BUSY_STATE),0!==n.pending){if(flush_pending(e),0===e.avail_out)return n.last_flush=-1,Z_OK}else if(0===e.avail_in&&rank(t)<=rank(r)&&t!==Z_FINISH)return err(e,Z_BUF_ERROR);if(n.status===FINISH_STATE&&0!==e.avail_in)return err(e,Z_BUF_ERROR);if(0!==e.avail_in||0!==n.lookahead||t!==Z_NO_FLUSH&&n.status!==FINISH_STATE){var a=n.strategy===Z_HUFFMAN_ONLY?deflate_huff(n,t):n.strategy===Z_RLE?deflate_rle(n,t):configuration_table[n.level].func(n,t);if(a!==BS_FINISH_STARTED&&a!==BS_FINISH_DONE||(n.status=FINISH_STATE),a===BS_NEED_MORE||a===BS_FINISH_STARTED)return 0===e.avail_out&&(n.last_flush=-1),Z_OK;if(a===BS_BLOCK_DONE&&(t===Z_PARTIAL_FLUSH?trees._tr_align(n):t!==Z_BLOCK&&(trees._tr_stored_block(n,0,0,!1),t===Z_FULL_FLUSH&&(zero$2(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),flush_pending(e),0===e.avail_out))return n.last_flush=-1,Z_OK}return t!==Z_FINISH?Z_OK:n.wrap<=0?Z_STREAM_END:(2===n.wrap?(put_byte(n,255&e.adler),put_byte(n,e.adler>>8&255),put_byte(n,e.adler>>16&255),put_byte(n,e.adler>>24&255),put_byte(n,255&e.total_in),put_byte(n,e.total_in>>8&255),put_byte(n,e.total_in>>16&255),put_byte(n,e.total_in>>24&255)):(putShortMSB(n,e.adler>>>16),putShortMSB(n,65535&e.adler)),flush_pending(e),n.wrap>0&&(n.wrap=-n.wrap),0!==n.pending?Z_OK:Z_STREAM_END)}function deflateEnd(e){var t;return e&&e.state?(t=e.state.status)!==INIT_STATE&&t!==EXTRA_STATE&&t!==NAME_STATE&&t!==COMMENT_STATE&&t!==HCRC_STATE&&t!==BUSY_STATE&&t!==FINISH_STATE?err(e,Z_STREAM_ERROR):(e.state=null,t===BUSY_STATE?err(e,Z_DATA_ERROR):Z_OK):Z_STREAM_ERROR}function deflateSetDictionary(e,t){var r,n,o,i,s,a,u,l,c=t.length;if(!e||!e.state)return Z_STREAM_ERROR;if(2===(i=(r=e.state).wrap)||1===i&&r.status!==INIT_STATE||r.lookahead)return Z_STREAM_ERROR;for(1===i&&(e.adler=adler32_1(e.adler,t,c,0)),r.wrap=0,c>=r.w_size&&(0===i&&(zero$2(r.head),r.strstart=0,r.block_start=0,r.insert=0),l=new common$1.Buf8(r.w_size),common$1.arraySet(l,t,c-r.w_size,r.w_size,0),t=l,c=r.w_size),s=e.avail_in,a=e.next_in,u=e.input,e.avail_in=c,e.next_in=0,e.input=t,fill_window(r);r.lookahead>=MIN_MATCH$1;){n=r.strstart,o=r.lookahead-(MIN_MATCH$1-1);do{r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+MIN_MATCH$1-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++;}while(--o);r.strstart=n,r.lookahead=MIN_MATCH$1-1,fill_window(r);}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=MIN_MATCH$1-1,r.match_available=0,e.next_in=a,e.input=u,e.avail_in=s,r.wrap=i,Z_OK}configuration_table=[new Config(0,0,0,0,deflate_stored),new Config(4,4,8,4,deflate_fast),new Config(4,5,16,8,deflate_fast),new Config(4,6,32,32,deflate_fast),new Config(4,4,16,16,deflate_slow),new Config(8,16,32,32,deflate_slow),new Config(8,16,128,128,deflate_slow),new Config(8,32,128,256,deflate_slow),new Config(32,128,258,1024,deflate_slow),new Config(32,258,258,4096,deflate_slow)];var deflateInit_1=deflateInit,deflateInit2_1=deflateInit2,deflateReset_1=deflateReset,deflateResetKeep_1=deflateResetKeep,deflateSetHeader_1=deflateSetHeader,deflate_2=deflate,deflateEnd_1=deflateEnd,deflateSetDictionary_1=deflateSetDictionary,deflateInfo="pako deflate (from Nodeca project)",deflate_1={deflateInit:deflateInit_1,deflateInit2:deflateInit2_1,deflateReset:deflateReset_1,deflateResetKeep:deflateResetKeep_1,deflateSetHeader:deflateSetHeader_1,deflate:deflate_2,deflateEnd:deflateEnd_1,deflateSetDictionary:deflateSetDictionary_1,deflateInfo:deflateInfo},STR_APPLY_OK=!0,STR_APPLY_UIA_OK=!0;try{String.fromCharCode.apply(null,[0]);}catch(e){STR_APPLY_OK=!1;}try{String.fromCharCode.apply(null,new Uint8Array(1));}catch(e){STR_APPLY_UIA_OK=!1;}for(var _utf8len=new common$1.Buf8(256),q=0;q<256;q++)_utf8len[q]=q>=252?6:q>=248?5:q>=240?4:q>=224?3:q>=192?2:1;_utf8len[254]=_utf8len[254]=1;var string2buf=function(e){var t,r,n,o,i,s=e.length,a=0;for(o=0;o<s;o++)55296==(64512&(r=e.charCodeAt(o)))&&o+1<s&&56320==(64512&(n=e.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(n-56320),o++),a+=r<128?1:r<2048?2:r<65536?3:4;for(t=new common$1.Buf8(a),i=0,o=0;i<a;o++)55296==(64512&(r=e.charCodeAt(o)))&&o+1<s&&56320==(64512&(n=e.charCodeAt(o+1)))&&(r=65536+(r-55296<<10)+(n-56320),o++),r<128?t[i++]=r:r<2048?(t[i++]=192|r>>>6,t[i++]=128|63&r):r<65536?(t[i++]=224|r>>>12,t[i++]=128|r>>>6&63,t[i++]=128|63&r):(t[i++]=240|r>>>18,t[i++]=128|r>>>12&63,t[i++]=128|r>>>6&63,t[i++]=128|63&r);return t};function buf2binstring(e,t){if(t<65534&&(e.subarray&&STR_APPLY_UIA_OK||!e.subarray&&STR_APPLY_OK))return String.fromCharCode.apply(null,common$1.shrinkBuf(e,t));for(var r="",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}var buf2binstring_1=function(e){return buf2binstring(e,e.length)},binstring2buf=function(e){for(var t=new common$1.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},buf2string=function(e,t){var r,n,o,i,s=t||e.length,a=new Array(2*s);for(n=0,r=0;r<s;)if((o=e[r++])<128)a[n++]=o;else if((i=_utf8len[o])>4)a[n++]=65533,r+=i-1;else {for(o&=2===i?31:3===i?15:7;i>1&&r<s;)o=o<<6|63&e[r++],i--;i>1?a[n++]=65533:o<65536?a[n++]=o:(o-=65536,a[n++]=55296|o>>10&1023,a[n++]=56320|1023&o);}return buf2binstring(a,n)},utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;r>=0&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+_utf8len[e[r]]>t?r:t},strings={string2buf:string2buf,buf2binstring:buf2binstring_1,binstring2buf:binstring2buf,buf2string:buf2string,utf8border:utf8border};function ZStream(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0;}var zstream=ZStream,toString$3=Object.prototype.toString,Z_NO_FLUSH$1=0,Z_FINISH$1=4,Z_OK$1=0,Z_STREAM_END$1=1,Z_SYNC_FLUSH=2,Z_DEFAULT_COMPRESSION$1=-1,Z_DEFAULT_STRATEGY$1=0,Z_DEFLATED$1=8;function Deflate(e){if(!(this instanceof Deflate))return new Deflate(e);this.options=common$1.assign({level:Z_DEFAULT_COMPRESSION$1,method:Z_DEFLATED$1,chunkSize:16384,windowBits:15,memLevel:8,strategy:Z_DEFAULT_STRATEGY$1,to:""},e||{});var t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new zstream,this.strm.avail_out=0;var r=deflate_1.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==Z_OK$1)throw new Error(messages[r]);if(t.header&&deflate_1.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n="string"==typeof t.dictionary?strings.string2buf(t.dictionary):"[object ArrayBuffer]"===toString$3.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=deflate_1.deflateSetDictionary(this.strm,n))!==Z_OK$1)throw new Error(messages[r]);this._dict_set=!0;}}function deflate$1(e,t){var r=new Deflate(t);if(r.push(e,!0),r.err)throw r.msg||messages[r.err];return r.result}function deflateRaw(e,t){return (t=t||{}).raw=!0,deflate$1(e,t)}function gzip(e,t){return (t=t||{}).gzip=!0,deflate$1(e,t)}Deflate.prototype.push=function(e,t){var r,n,o=this.strm,i=this.options.chunkSize;if(this.ended)return !1;n=t===~~t?t:!0===t?Z_FINISH$1:Z_NO_FLUSH$1,"string"==typeof e?o.input=strings.string2buf(e):"[object ArrayBuffer]"===toString$3.call(e)?o.input=new Uint8Array(e):o.input=e,o.next_in=0,o.avail_in=o.input.length;do{if(0===o.avail_out&&(o.output=new common$1.Buf8(i),o.next_out=0,o.avail_out=i),(r=deflate_1.deflate(o,n))!==Z_STREAM_END$1&&r!==Z_OK$1)return this.onEnd(r),this.ended=!0,!1;0!==o.avail_out&&(0!==o.avail_in||n!==Z_FINISH$1&&n!==Z_SYNC_FLUSH)||("string"===this.options.to?this.onData(strings.buf2binstring(common$1.shrinkBuf(o.output,o.next_out))):this.onData(common$1.shrinkBuf(o.output,o.next_out)));}while((o.avail_in>0||0===o.avail_out)&&r!==Z_STREAM_END$1);return n===Z_FINISH$1?(r=deflate_1.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===Z_OK$1):n!==Z_SYNC_FLUSH||(this.onEnd(Z_OK$1),o.avail_out=0,!0)},Deflate.prototype.onData=function(e){this.chunks.push(e);},Deflate.prototype.onEnd=function(e){e===Z_OK$1&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=common$1.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg;};var Deflate_1=Deflate,deflate_2$1=deflate$1,deflateRaw_1=deflateRaw,gzip_1=gzip,deflate_1$1={Deflate:Deflate_1,deflate:deflate_2$1,deflateRaw:deflateRaw_1,gzip:gzip_1},BAD=30,TYPE=12,inffast=function(e,t){var r,n,o,i,s,a,u,l,c,p,f,d,g,h,b,_,y,m,v,$,E,I,S,w,O;r=e.state,n=e.next_in,w=e.input,o=n+(e.avail_in-5),i=e.next_out,O=e.output,s=i-(t-e.avail_out),a=i+(e.avail_out-257),u=r.dmax,l=r.wsize,c=r.whave,p=r.wnext,f=r.window,d=r.hold,g=r.bits,h=r.lencode,b=r.distcode,_=(1<<r.lenbits)-1,y=(1<<r.distbits)-1;e:do{g<15&&(d+=w[n++]<<g,g+=8,d+=w[n++]<<g,g+=8),m=h[d&_];t:for(;;){if(d>>>=v=m>>>24,g-=v,0===(v=m>>>16&255))O[i++]=65535&m;else {if(!(16&v)){if(0==(64&v)){m=h[(65535&m)+(d&(1<<v)-1)];continue t}if(32&v){r.mode=TYPE;break e}e.msg="invalid literal/length code",r.mode=BAD;break e}$=65535&m,(v&=15)&&(g<v&&(d+=w[n++]<<g,g+=8),$+=d&(1<<v)-1,d>>>=v,g-=v),g<15&&(d+=w[n++]<<g,g+=8,d+=w[n++]<<g,g+=8),m=b[d&y];r:for(;;){if(d>>>=v=m>>>24,g-=v,!(16&(v=m>>>16&255))){if(0==(64&v)){m=b[(65535&m)+(d&(1<<v)-1)];continue r}e.msg="invalid distance code",r.mode=BAD;break e}if(E=65535&m,g<(v&=15)&&(d+=w[n++]<<g,(g+=8)<v&&(d+=w[n++]<<g,g+=8)),(E+=d&(1<<v)-1)>u){e.msg="invalid distance too far back",r.mode=BAD;break e}if(d>>>=v,g-=v,E>(v=i-s)){if((v=E-v)>c&&r.sane){e.msg="invalid distance too far back",r.mode=BAD;break e}if(I=0,S=f,0===p){if(I+=l-v,v<$){$-=v;do{O[i++]=f[I++];}while(--v);I=i-E,S=O;}}else if(p<v){if(I+=l+p-v,(v-=p)<$){$-=v;do{O[i++]=f[I++];}while(--v);if(I=0,p<$){$-=v=p;do{O[i++]=f[I++];}while(--v);I=i-E,S=O;}}}else if(I+=p-v,v<$){$-=v;do{O[i++]=f[I++];}while(--v);I=i-E,S=O;}for(;$>2;)O[i++]=S[I++],O[i++]=S[I++],O[i++]=S[I++],$-=3;$&&(O[i++]=S[I++],$>1&&(O[i++]=S[I++]));}else {I=i-E;do{O[i++]=O[I++],O[i++]=O[I++],O[i++]=O[I++],$-=3;}while($>2);$&&(O[i++]=O[I++],$>1&&(O[i++]=O[I++]));}break}}break}}while(n<o&&i<a);n-=$=g>>3,d&=(1<<(g-=$<<3))-1,e.next_in=n,e.next_out=i,e.avail_in=n<o?o-n+5:5-(n-o),e.avail_out=i<a?a-i+257:257-(i-a),r.hold=d,r.bits=g;},MAXBITS=15,ENOUGH_LENS=852,ENOUGH_DISTS=592,CODES=0,LENS=1,DISTS=2,lbase=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],lext=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],dbase=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],dext=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64],inftrees=function(e,t,r,n,o,i,s,a){var u,l,c,p,f,d,g,h,b,_=a.bits,y=0,m=0,v=0,$=0,E=0,I=0,S=0,w=0,O=0,R=0,T=null,A=0,N=new common$1.Buf16(MAXBITS+1),L=new common$1.Buf16(MAXBITS+1),P=null,C=0;for(y=0;y<=MAXBITS;y++)N[y]=0;for(m=0;m<n;m++)N[t[r+m]]++;for(E=_,$=MAXBITS;$>=1&&0===N[$];$--);if(E>$&&(E=$),0===$)return o[i++]=20971520,o[i++]=20971520,a.bits=1,0;for(v=1;v<$&&0===N[v];v++);for(E<v&&(E=v),w=1,y=1;y<=MAXBITS;y++)if(w<<=1,(w-=N[y])<0)return -1;if(w>0&&(e===CODES||1!==$))return -1;for(L[1]=0,y=1;y<MAXBITS;y++)L[y+1]=L[y]+N[y];for(m=0;m<n;m++)0!==t[r+m]&&(s[L[t[r+m]]++]=m);if(e===CODES?(T=P=s,d=19):e===LENS?(T=lbase,A-=257,P=lext,C-=257,d=256):(T=dbase,P=dext,d=-1),R=0,m=0,y=v,f=i,I=E,S=0,c=-1,p=(O=1<<E)-1,e===LENS&&O>ENOUGH_LENS||e===DISTS&&O>ENOUGH_DISTS)return 1;for(;;){g=y-S,s[m]<d?(h=0,b=s[m]):s[m]>d?(h=P[C+s[m]],b=T[A+s[m]]):(h=96,b=0),u=1<<y-S,v=l=1<<I;do{o[f+(R>>S)+(l-=u)]=g<<24|h<<16|b|0;}while(0!==l);for(u=1<<y-1;R&u;)u>>=1;if(0!==u?(R&=u-1,R+=u):R=0,m++,0==--N[y]){if(y===$)break;y=t[r+s[m]];}if(y>E&&(R&p)!==c){for(0===S&&(S=E),f+=v,w=1<<(I=y-S);I+S<$&&!((w-=N[I+S])<=0);)I++,w<<=1;if(O+=1<<I,e===LENS&&O>ENOUGH_LENS||e===DISTS&&O>ENOUGH_DISTS)return 1;o[c=R&p]=E<<24|I<<16|f-i|0;}}return 0!==R&&(o[f+R]=y-S<<24|64<<16|0),a.bits=E,0},CODES$1=0,LENS$1=1,DISTS$1=2,Z_FINISH$2=4,Z_BLOCK$1=5,Z_TREES=6,Z_OK$2=0,Z_STREAM_END$2=1,Z_NEED_DICT=2,Z_STREAM_ERROR$1=-2,Z_DATA_ERROR$1=-3,Z_MEM_ERROR=-4,Z_BUF_ERROR$1=-5,Z_DEFLATED$2=8,HEAD=1,FLAGS=2,TIME=3,OS=4,EXLEN=5,EXTRA=6,NAME$2=7,COMMENT=8,HCRC=9,DICTID=10,DICT=11,TYPE$1=12,TYPEDO=13,STORED=14,COPY_=15,COPY=16,TABLE=17,LENLENS=18,CODELENS=19,LEN_=20,LEN=21,LENEXT=22,DIST=23,DISTEXT=24,MATCH$2=25,LIT=26,CHECK=27,LENGTH$1=28,DONE=29,BAD$1=30,MEM=31,SYNC=32,ENOUGH_LENS$1=852,ENOUGH_DISTS$1=592,MAX_WBITS$1=15,DEF_WBITS=MAX_WBITS$1;function zswap32(e){return (e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function InflateState(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new common$1.Buf16(320),this.work=new common$1.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0;}function inflateResetKeep(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=HEAD,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new common$1.Buf32(ENOUGH_LENS$1),t.distcode=t.distdyn=new common$1.Buf32(ENOUGH_DISTS$1),t.sane=1,t.back=-1,Z_OK$2):Z_STREAM_ERROR$1}function inflateReset(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,inflateResetKeep(e)):Z_STREAM_ERROR$1}function inflateReset2(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?Z_STREAM_ERROR$1:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,inflateReset(e))):Z_STREAM_ERROR$1}function inflateInit2(e,t){var r,n;return e?(n=new InflateState,e.state=n,n.window=null,(r=inflateReset2(e,t))!==Z_OK$2&&(e.state=null),r):Z_STREAM_ERROR$1}function inflateInit(e){return inflateInit2(e,DEF_WBITS)}var virgin=!0,lenfix,distfix;function fixedtables(e){if(virgin){var t;for(lenfix=new common$1.Buf32(512),distfix=new common$1.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(inftrees(LENS$1,e.lens,0,288,lenfix,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;inftrees(DISTS$1,e.lens,0,32,distfix,0,e.work,{bits:5}),virgin=!1;}e.lencode=lenfix,e.lenbits=9,e.distcode=distfix,e.distbits=5;}function updatewindow(e,t,r,n){var o,i=e.state;return null===i.window&&(i.wsize=1<<i.wbits,i.wnext=0,i.whave=0,i.window=new common$1.Buf8(i.wsize)),n>=i.wsize?(common$1.arraySet(i.window,t,r-i.wsize,i.wsize,0),i.wnext=0,i.whave=i.wsize):((o=i.wsize-i.wnext)>n&&(o=n),common$1.arraySet(i.window,t,r-n,o,i.wnext),(n-=o)?(common$1.arraySet(i.window,t,r-n,n,0),i.wnext=n,i.whave=i.wsize):(i.wnext+=o,i.wnext===i.wsize&&(i.wnext=0),i.whave<i.wsize&&(i.whave+=o))),0}function inflate(e,t){var r,n,o,i,s,a,u,l,c,p,f,d,g,h,b,_,y,m,v,$,E,I,S,w,O=0,R=new common$1.Buf8(4),T=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return Z_STREAM_ERROR$1;(r=e.state).mode===TYPE$1&&(r.mode=TYPEDO),s=e.next_out,o=e.output,u=e.avail_out,i=e.next_in,n=e.input,a=e.avail_in,l=r.hold,c=r.bits,p=a,f=u,I=Z_OK$2;e:for(;;)switch(r.mode){case HEAD:if(0===r.wrap){r.mode=TYPEDO;break}for(;c<16;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}if(2&r.wrap&&35615===l){r.check=0,R[0]=255&l,R[1]=l>>>8&255,r.check=crc32_1(r.check,R,2,0),l=0,c=0,r.mode=FLAGS;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&l)<<8)+(l>>8))%31){e.msg="incorrect header check",r.mode=BAD$1;break}if((15&l)!==Z_DEFLATED$2){e.msg="unknown compression method",r.mode=BAD$1;break}if(c-=4,E=8+(15&(l>>>=4)),0===r.wbits)r.wbits=E;else if(E>r.wbits){e.msg="invalid window size",r.mode=BAD$1;break}r.dmax=1<<E,e.adler=r.check=1,r.mode=512&l?DICTID:TYPE$1,l=0,c=0;break;case FLAGS:for(;c<16;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}if(r.flags=l,(255&r.flags)!==Z_DEFLATED$2){e.msg="unknown compression method",r.mode=BAD$1;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=BAD$1;break}r.head&&(r.head.text=l>>8&1),512&r.flags&&(R[0]=255&l,R[1]=l>>>8&255,r.check=crc32_1(r.check,R,2,0)),l=0,c=0,r.mode=TIME;case TIME:for(;c<32;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}r.head&&(r.head.time=l),512&r.flags&&(R[0]=255&l,R[1]=l>>>8&255,R[2]=l>>>16&255,R[3]=l>>>24&255,r.check=crc32_1(r.check,R,4,0)),l=0,c=0,r.mode=OS;case OS:for(;c<16;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}r.head&&(r.head.xflags=255&l,r.head.os=l>>8),512&r.flags&&(R[0]=255&l,R[1]=l>>>8&255,r.check=crc32_1(r.check,R,2,0)),l=0,c=0,r.mode=EXLEN;case EXLEN:if(1024&r.flags){for(;c<16;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}r.length=l,r.head&&(r.head.extra_len=l),512&r.flags&&(R[0]=255&l,R[1]=l>>>8&255,r.check=crc32_1(r.check,R,2,0)),l=0,c=0;}else r.head&&(r.head.extra=null);r.mode=EXTRA;case EXTRA:if(1024&r.flags&&((d=r.length)>a&&(d=a),d&&(r.head&&(E=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),common$1.arraySet(r.head.extra,n,i,d,E)),512&r.flags&&(r.check=crc32_1(r.check,n,d,i)),a-=d,i+=d,r.length-=d),r.length))break e;r.length=0,r.mode=NAME$2;case NAME$2:if(2048&r.flags){if(0===a)break e;d=0;do{E=n[i+d++],r.head&&E&&r.length<65536&&(r.head.name+=String.fromCharCode(E));}while(E&&d<a);if(512&r.flags&&(r.check=crc32_1(r.check,n,d,i)),a-=d,i+=d,E)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=COMMENT;case COMMENT:if(4096&r.flags){if(0===a)break e;d=0;do{E=n[i+d++],r.head&&E&&r.length<65536&&(r.head.comment+=String.fromCharCode(E));}while(E&&d<a);if(512&r.flags&&(r.check=crc32_1(r.check,n,d,i)),a-=d,i+=d,E)break e}else r.head&&(r.head.comment=null);r.mode=HCRC;case HCRC:if(512&r.flags){for(;c<16;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}if(l!==(65535&r.check)){e.msg="header crc mismatch",r.mode=BAD$1;break}l=0,c=0;}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=TYPE$1;break;case DICTID:for(;c<32;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}e.adler=r.check=zswap32(l),l=0,c=0,r.mode=DICT;case DICT:if(0===r.havedict)return e.next_out=s,e.avail_out=u,e.next_in=i,e.avail_in=a,r.hold=l,r.bits=c,Z_NEED_DICT;e.adler=r.check=1,r.mode=TYPE$1;case TYPE$1:if(t===Z_BLOCK$1||t===Z_TREES)break e;case TYPEDO:if(r.last){l>>>=7&c,c-=7&c,r.mode=CHECK;break}for(;c<3;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}switch(r.last=1&l,c-=1,3&(l>>>=1)){case 0:r.mode=STORED;break;case 1:if(fixedtables(r),r.mode=LEN_,t===Z_TREES){l>>>=2,c-=2;break e}break;case 2:r.mode=TABLE;break;case 3:e.msg="invalid block type",r.mode=BAD$1;}l>>>=2,c-=2;break;case STORED:for(l>>>=7&c,c-=7&c;c<32;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}if((65535&l)!=(l>>>16^65535)){e.msg="invalid stored block lengths",r.mode=BAD$1;break}if(r.length=65535&l,l=0,c=0,r.mode=COPY_,t===Z_TREES)break e;case COPY_:r.mode=COPY;case COPY:if(d=r.length){if(d>a&&(d=a),d>u&&(d=u),0===d)break e;common$1.arraySet(o,n,i,d,s),a-=d,i+=d,u-=d,s+=d,r.length-=d;break}r.mode=TYPE$1;break;case TABLE:for(;c<14;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}if(r.nlen=257+(31&l),l>>>=5,c-=5,r.ndist=1+(31&l),l>>>=5,c-=5,r.ncode=4+(15&l),l>>>=4,c-=4,r.nlen>286||r.ndist>30){e.msg="too many length or distance symbols",r.mode=BAD$1;break}r.have=0,r.mode=LENLENS;case LENLENS:for(;r.have<r.ncode;){for(;c<3;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}r.lens[T[r.have++]]=7&l,l>>>=3,c-=3;}for(;r.have<19;)r.lens[T[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},I=inftrees(CODES$1,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,I){e.msg="invalid code lengths set",r.mode=BAD$1;break}r.have=0,r.mode=CODELENS;case CODELENS:for(;r.have<r.nlen+r.ndist;){for(;_=(O=r.lencode[l&(1<<r.lenbits)-1])>>>16&255,y=65535&O,!((b=O>>>24)<=c);){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}if(y<16)l>>>=b,c-=b,r.lens[r.have++]=y;else {if(16===y){for(w=b+2;c<w;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}if(l>>>=b,c-=b,0===r.have){e.msg="invalid bit length repeat",r.mode=BAD$1;break}E=r.lens[r.have-1],d=3+(3&l),l>>>=2,c-=2;}else if(17===y){for(w=b+3;c<w;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}c-=b,E=0,d=3+(7&(l>>>=b)),l>>>=3,c-=3;}else {for(w=b+7;c<w;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}c-=b,E=0,d=11+(127&(l>>>=b)),l>>>=7,c-=7;}if(r.have+d>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=BAD$1;break}for(;d--;)r.lens[r.have++]=E;}}if(r.mode===BAD$1)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=BAD$1;break}if(r.lenbits=9,S={bits:r.lenbits},I=inftrees(LENS$1,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,I){e.msg="invalid literal/lengths set",r.mode=BAD$1;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},I=inftrees(DISTS$1,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,I){e.msg="invalid distances set",r.mode=BAD$1;break}if(r.mode=LEN_,t===Z_TREES)break e;case LEN_:r.mode=LEN;case LEN:if(a>=6&&u>=258){e.next_out=s,e.avail_out=u,e.next_in=i,e.avail_in=a,r.hold=l,r.bits=c,inffast(e,f),s=e.next_out,o=e.output,u=e.avail_out,i=e.next_in,n=e.input,a=e.avail_in,l=r.hold,c=r.bits,r.mode===TYPE$1&&(r.back=-1);break}for(r.back=0;_=(O=r.lencode[l&(1<<r.lenbits)-1])>>>16&255,y=65535&O,!((b=O>>>24)<=c);){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}if(_&&0==(240&_)){for(m=b,v=_,$=y;_=(O=r.lencode[$+((l&(1<<m+v)-1)>>m)])>>>16&255,y=65535&O,!(m+(b=O>>>24)<=c);){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}l>>>=m,c-=m,r.back+=m;}if(l>>>=b,c-=b,r.back+=b,r.length=y,0===_){r.mode=LIT;break}if(32&_){r.back=-1,r.mode=TYPE$1;break}if(64&_){e.msg="invalid literal/length code",r.mode=BAD$1;break}r.extra=15&_,r.mode=LENEXT;case LENEXT:if(r.extra){for(w=r.extra;c<w;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}r.length+=l&(1<<r.extra)-1,l>>>=r.extra,c-=r.extra,r.back+=r.extra;}r.was=r.length,r.mode=DIST;case DIST:for(;_=(O=r.distcode[l&(1<<r.distbits)-1])>>>16&255,y=65535&O,!((b=O>>>24)<=c);){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}if(0==(240&_)){for(m=b,v=_,$=y;_=(O=r.distcode[$+((l&(1<<m+v)-1)>>m)])>>>16&255,y=65535&O,!(m+(b=O>>>24)<=c);){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}l>>>=m,c-=m,r.back+=m;}if(l>>>=b,c-=b,r.back+=b,64&_){e.msg="invalid distance code",r.mode=BAD$1;break}r.offset=y,r.extra=15&_,r.mode=DISTEXT;case DISTEXT:if(r.extra){for(w=r.extra;c<w;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}r.offset+=l&(1<<r.extra)-1,l>>>=r.extra,c-=r.extra,r.back+=r.extra;}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=BAD$1;break}r.mode=MATCH$2;case MATCH$2:if(0===u)break e;if(d=f-u,r.offset>d){if((d=r.offset-d)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=BAD$1;break}d>r.wnext?(d-=r.wnext,g=r.wsize-d):g=r.wnext-d,d>r.length&&(d=r.length),h=r.window;}else h=o,g=s-r.offset,d=r.length;d>u&&(d=u),u-=d,r.length-=d;do{o[s++]=h[g++];}while(--d);0===r.length&&(r.mode=LEN);break;case LIT:if(0===u)break e;o[s++]=r.length,u--,r.mode=LEN;break;case CHECK:if(r.wrap){for(;c<32;){if(0===a)break e;a--,l|=n[i++]<<c,c+=8;}if(f-=u,e.total_out+=f,r.total+=f,f&&(e.adler=r.check=r.flags?crc32_1(r.check,o,f,s-f):adler32_1(r.check,o,f,s-f)),f=u,(r.flags?l:zswap32(l))!==r.check){e.msg="incorrect data check",r.mode=BAD$1;break}l=0,c=0;}r.mode=LENGTH$1;case LENGTH$1:if(r.wrap&&r.flags){for(;c<32;){if(0===a)break e;a--,l+=n[i++]<<c,c+=8;}if(l!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=BAD$1;break}l=0,c=0;}r.mode=DONE;case DONE:I=Z_STREAM_END$2;break e;case BAD$1:I=Z_DATA_ERROR$1;break e;case MEM:return Z_MEM_ERROR;case SYNC:default:return Z_STREAM_ERROR$1}return e.next_out=s,e.avail_out=u,e.next_in=i,e.avail_in=a,r.hold=l,r.bits=c,(r.wsize||f!==e.avail_out&&r.mode<BAD$1&&(r.mode<CHECK||t!==Z_FINISH$2))&&updatewindow(e,e.output,e.next_out,f-e.avail_out),p-=e.avail_in,f-=e.avail_out,e.total_in+=p,e.total_out+=f,r.total+=f,r.wrap&&f&&(e.adler=r.check=r.flags?crc32_1(r.check,o,f,e.next_out-f):adler32_1(r.check,o,f,e.next_out-f)),e.data_type=r.bits+(r.last?64:0)+(r.mode===TYPE$1?128:0)+(r.mode===LEN_||r.mode===COPY_?256:0),(0===p&&0===f||t===Z_FINISH$2)&&I===Z_OK$2&&(I=Z_BUF_ERROR$1),I}function inflateEnd(e){if(!e||!e.state)return Z_STREAM_ERROR$1;var t=e.state;return t.window&&(t.window=null),e.state=null,Z_OK$2}function inflateGetHeader(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?Z_STREAM_ERROR$1:(r.head=t,t.done=!1,Z_OK$2):Z_STREAM_ERROR$1}function inflateSetDictionary(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&r.mode!==DICT?Z_STREAM_ERROR$1:r.mode===DICT&&adler32_1(1,t,n,0)!==r.check?Z_DATA_ERROR$1:updatewindow(e,t,n,n)?(r.mode=MEM,Z_MEM_ERROR):(r.havedict=1,Z_OK$2):Z_STREAM_ERROR$1}var inflateReset_1=inflateReset,inflateReset2_1=inflateReset2,inflateResetKeep_1=inflateResetKeep,inflateInit_1=inflateInit,inflateInit2_1=inflateInit2,inflate_2=inflate,inflateEnd_1=inflateEnd,inflateGetHeader_1=inflateGetHeader,inflateSetDictionary_1=inflateSetDictionary,inflateInfo="pako inflate (from Nodeca project)",inflate_1={inflateReset:inflateReset_1,inflateReset2:inflateReset2_1,inflateResetKeep:inflateResetKeep_1,inflateInit:inflateInit_1,inflateInit2:inflateInit2_1,inflate:inflate_2,inflateEnd:inflateEnd_1,inflateGetHeader:inflateGetHeader_1,inflateSetDictionary:inflateSetDictionary_1,inflateInfo:inflateInfo},constants={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};function GZheader(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1;}var gzheader=GZheader,toString$4=Object.prototype.toString;function Inflate(e){if(!(this instanceof Inflate))return new Inflate(e);this.options=common$1.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new zstream,this.strm.avail_out=0;var r=inflate_1.inflateInit2(this.strm,t.windowBits);if(r!==constants.Z_OK)throw new Error(messages[r]);if(this.header=new gzheader,inflate_1.inflateGetHeader(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=strings.string2buf(t.dictionary):"[object ArrayBuffer]"===toString$4.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(r=inflate_1.inflateSetDictionary(this.strm,t.dictionary))!==constants.Z_OK))throw new Error(messages[r])}function inflate$1(e,t){var r=new Inflate(t);if(r.push(e,!0),r.err)throw r.msg||messages[r.err];return r.result}function inflateRaw(e,t){return (t=t||{}).raw=!0,inflate$1(e,t)}Inflate.prototype.push=function(e,t){var r,n,o,i,s,a=this.strm,u=this.options.chunkSize,l=this.options.dictionary,c=!1;if(this.ended)return !1;n=t===~~t?t:!0===t?constants.Z_FINISH:constants.Z_NO_FLUSH,"string"==typeof e?a.input=strings.binstring2buf(e):"[object ArrayBuffer]"===toString$4.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new common$1.Buf8(u),a.next_out=0,a.avail_out=u),(r=inflate_1.inflate(a,constants.Z_NO_FLUSH))===constants.Z_NEED_DICT&&l&&(r=inflate_1.inflateSetDictionary(this.strm,l)),r===constants.Z_BUF_ERROR&&!0===c&&(r=constants.Z_OK,c=!1),r!==constants.Z_STREAM_END&&r!==constants.Z_OK)return this.onEnd(r),this.ended=!0,!1;a.next_out&&(0!==a.avail_out&&r!==constants.Z_STREAM_END&&(0!==a.avail_in||n!==constants.Z_FINISH&&n!==constants.Z_SYNC_FLUSH)||("string"===this.options.to?(o=strings.utf8border(a.output,a.next_out),i=a.next_out-o,s=strings.buf2string(a.output,o),a.next_out=i,a.avail_out=u-i,i&&common$1.arraySet(a.output,a.output,o,i,0),this.onData(s)):this.onData(common$1.shrinkBuf(a.output,a.next_out)))),0===a.avail_in&&0===a.avail_out&&(c=!0);}while((a.avail_in>0||0===a.avail_out)&&r!==constants.Z_STREAM_END);return r===constants.Z_STREAM_END&&(n=constants.Z_FINISH),n===constants.Z_FINISH?(r=inflate_1.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===constants.Z_OK):n!==constants.Z_SYNC_FLUSH||(this.onEnd(constants.Z_OK),a.avail_out=0,!0)},Inflate.prototype.onData=function(e){this.chunks.push(e);},Inflate.prototype.onEnd=function(e){e===constants.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=common$1.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg;};var Inflate_1=Inflate,inflate_2$1=inflate$1,inflateRaw_1=inflateRaw,ungzip=inflate$1,inflate_1$1={Inflate:Inflate_1,inflate:inflate_2$1,inflateRaw:inflateRaw_1,ungzip:ungzip},assign=common$1.assign,pako={};assign(pako,deflate_1$1,inflate_1$1,constants);var pako_1=pako,pako_2=pako_1.deflate,pako_3=pako_1.inflate;function createFind(e){return function(t,r,n){var o=Object(t);if(!isArrayLike_1(t)){var i=_baseIteratee(r);t=keys_1(t),r=function(e){return i(o[e],e,o)};}var s=e(t,r,n);return s>-1?o[i?t[s]:s]:void 0}}var _createFind=createFind,INFINITY$3=1/0,MAX_INTEGER=1.7976931348623157e308;function toFinite(e){return e?(e=toNumber_1(e))===INFINITY$3||e===-INFINITY$3?(e<0?-1:1)*MAX_INTEGER:e==e?e:0:0===e?e:0}var toFinite_1=toFinite;function toInteger(e){var t=toFinite_1(e),r=t%1;return t==t?r?t-r:t:0}var toInteger_1=toInteger,nativeMax$2=Math.max;function findIndex(e,t,r){var n=null==e?0:e.length;if(!n)return -1;var o=null==r?0:toInteger_1(r);return o<0&&(o=nativeMax$2(n+o,0)),_baseFindIndex(e,_baseIteratee(t),o)}var findIndex_1=findIndex,find=_createFind(findIndex_1),find_1=find;function uniqWith(e,t){return t="function"==typeof t?t:void 0,e&&e.length?_baseUniq(e,void 0,t):[]}var uniqWith_1=uniqWith;function _slicedToArray$2(e,t){return _arrayWithHoles$2(e)||_iterableToArrayLimit$2(e,t)||_nonIterableRest$2()}function _nonIterableRest$2(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit$2(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e;}finally{try{n||null==a.return||a.return();}finally{if(o)throw i}}return r}function _arrayWithHoles$2(e){if(Array.isArray(e))return e}function _classCallCheck$8(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$5(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function _createClass$5(e,t,r){return t&&_defineProperties$5(e.prototype,t),r&&_defineProperties$5(e,r),e}function comparator(e,t){return long_1.fromValue(e).eq(t)}function validateField(e,t){var r=void 0===t?e.val:t,n=e.isBoolean,o=e.isNumber,i=e.oneof,s=e.len;if(2!==[n,o,i].filter(function(e){return !e}).length)throw new TypeError("invalid field type");if(void 0!==r){var a=!1;if(void 0!==i){var u=values_1(i);uniqWith_1(u,comparator).length===u.length&&void 0!==find_1(u,function(e){return comparator(r,e)})&&(a=!0);}var l=void 0!==n&&(0===r||1===r)&&1===s,c=void 0!==o&&r.toString(2).length<=s;if(!(a||l||c))throw new Error("invalid field value")}}var Struct=function(){function e(){_classCallCheck$8(this,e),this.size=0,this.fields=new Map;}return _createClass$5(e,[{key:"define",value:function(e,t,r){if(this.size+=r,this.size>64)throw new RangeError("the struct over 64 bits is not supported");var n={val:0,isNumber:"number"===t,isBoolean:"boolean"===t,oneof:"number"===t||"boolean"===t?void 0:t,len:r};validateField(n),this.fields.set(e,n);}},{key:"set",value:function(e,t){var r=this.fields.get(e);if(!r)throw new Error("field not found");var n,o=r.oneof;if(long_1.isLong(t)||"number"==typeof t)n=t;else if("boolean"==typeof t)n=t?1:0;else {if(void 0===o)throw new Error("invalid field type");var i=o[t];if(void 0===i)throw new Error("field type not found");n=i;}validateField(r,n),r.val=n;}},{key:"toNumber",value:function(){var e=0,t=0,r=this.fields,n=Array.isArray(r),o=0;for(r=n?r:r[Symbol.iterator]();;){var i;if(n){if(o>=r.length)break;i=r[o++];}else {if((o=r.next()).done)break;i=o.value;}var s=_slicedToArray$2(i,2)[1],a=s.len,u=s.val;void 0!==u&&(e+=long_1.fromValue(u).shiftLeft(t).toNumber(),t+=a);}return e}},{key:"toLong",value:function(){var e=long_1.fromNumber(0,!0),t=0,r=this.fields,n=Array.isArray(r),o=0;for(r=n?r:r[Symbol.iterator]();;){var i;if(n){if(o>=r.length)break;i=r[o++];}else {if((o=r.next()).done)break;i=o.value;}var s=_slicedToArray$2(i,2)[1],a=s.len,u=s.val;void 0!==u&&(e=long_1.fromValue(u).shiftLeft(t).add(e),t+=a);}return e}},{key:"assert",value:function(e,t){var r=this.fields.get(e);if(!r)throw new Error("field not found");var n,o=r.oneof;if(long_1.isLong(t)||"number"==typeof t)n=t;else if("boolean"==typeof t)n=t?1:0;else {if(void 0===o)throw new Error("invalid field type");var i=o[t];if(void 0===i)throw new Error("field type not found");n=i;}return validateField(r,n),comparator(n,r.val)}},{key:"from",value:function(e){var t=long_1.fromValue(e),r=0,n=this.fields,o=Array.isArray(n),i=0;for(n=o?n:n[Symbol.iterator]();;){var s;if(o){if(i>=n.length)break;s=n[i++];}else {if((i=n.next()).done)break;s=i.value;}var a=_slicedToArray$2(s,2)[1],u=a.len,l=long_1.fromNumber(Math.pow(2,u)-1,!0).shiftLeft(r),c=t.and(l).shiftRightUnsigned(r);validateField(a,c),a.val=c,r+=u;}}},{key:"typeOf",value:function(e){var t=this.fields.get(e);if(void 0!==t){var r=t.oneof,n=t.val;if(void 0!==r)for(var o=0,i=Object.entries(r);o<i.length;o++){var s=_slicedToArray$2(i[o],2),a=s[0];if(comparator(n,s[1]))return a}}throw new TypeError("can only get type of oneof type")}}]),e}();function _typeof$7(e){return (_typeof$7="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck$9(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn$7(e,t){return !t||"object"!==_typeof$7(t)&&"function"!=typeof t?_assertThisInitialized$7(e):t}function _assertThisInitialized$7(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf$7(e){return (_getPrototypeOf$7=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits$7(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf$7(e,t);}function _setPrototypeOf$7(e,t){return (_setPrototypeOf$7=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var UserJoinOptions=function(e){function t(e){var r;return _classCallCheck$9(this,t),(r=_possibleConstructorReturn$7(this,_getPrototypeOf$7(t).call(this))).define("Rejoin","boolean",1),r.define("Unused","number",31),r.define("Platform","number",8),r.define("Version","number",12),r.define("Subversion","number",12),r.set("Platform",WEB_PLATFORM_TYPE),r.set("Version",VERSION_NO),r.set("Subversion",SUBVERSION),r.set("Rejoin",e),r}return _inherits$7(t,Struct),t}();function _typeof$8(e){return (_typeof$8="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _slicedToArray$3(e,t){return _arrayWithHoles$3(e)||_iterableToArrayLimit$3(e,t)||_nonIterableRest$3()}function _nonIterableRest$3(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit$3(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e;}finally{try{n||null==a.return||a.return();}finally{if(o)throw i}}return r}function _arrayWithHoles$3(e){if(Array.isArray(e))return e}function _classCallCheck$a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$6(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function _createClass$6(e,t,r){return t&&_defineProperties$6(e.prototype,t),r&&_defineProperties$6(e,r),e}function _possibleConstructorReturn$8(e,t){return !t||"object"!==_typeof$8(t)&&"function"!=typeof t?_assertThisInitialized$8(e):t}function _assertThisInitialized$8(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf$8(e){return (_getPrototypeOf$8=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits$8(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf$8(e,t);}function _setPrototypeOf$8(e,t){return (_setPrototypeOf$8=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ownKeys$1(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n);}return r}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ownKeys$1(r,!0).forEach(function(t){_defineProperty$2(e,t,r[t]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ownKeys$1(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t));});}return e}function _defineProperty$2(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var MessageDstType={PeerToPeerMessage:0,ChannelMessage:1,PeerRawMessage:3,ChannelRawMessage:4},InvitationType={CallInvite:101,CallAccept:102,CallReject:103,CallCancel:104},MessageType=_objectSpread({},MessageDstType,{},InvitationType),CompressionMethod={Uncompressed:0,Zlib:1},MessageOption=function(e){function t(e){var r;if(_classCallCheck$a(this,t),(r=_possibleConstructorReturn$8(this,_getPrototypeOf$8(t).call(this))).define("MessageType",MessageType,8),r.define("BroadcastJumps","number",2),r.define("ToCache","boolean",1),r.define("FromCache","boolean",1),r.define("CompressionMethod",CompressionMethod,2),r.define("IterationNumber","number",4),r.define("BufferedMessage","boolean",1),r.define("ToArchive","boolean",1),isLongNum(e))r.from(e);else if(void 0!==e){var n=getEntries(e),o=Array.isArray(n),i=0;for(n=o?n:n[Symbol.iterator]();;){var s;if(o){if(i>=n.length)break;s=n[i++];}else {if((i=n.next()).done)break;s=i.value;}var a=_slicedToArray$3(s,2),u=a[0],l=a[1];r.set(u,l);}}return r}return _inherits$8(t,Struct),_createClass$6(t,[{key:"isTextMessage",value:function(){return this.assert("MessageType","ChannelMessage")||this.assert("MessageType","PeerToPeerMessage")}},{key:"isRawMessage",value:function(){return this.assert("MessageType","ChannelRawMessage")||this.assert("MessageType","PeerRawMessage")}},{key:"isRawPeerMessage",value:function(){return this.assert("MessageType","PeerRawMessage")}},{key:"isRawChannelMessage",value:function(){return this.assert("MessageType","ChannelRawMessage")}},{key:"isPeerToPeerMessage",value:function(){return this.assert("MessageType","PeerToPeerMessage")}},{key:"isChannelMessage",value:function(){return this.assert("MessageType","ChannelMessage")}},{key:"isInvitation",value:function(e){var t=this;return void 0!==e?this.assert("MessageType",e):getKeys(InvitationType).some(function(e){return t.assert("MessageType",e)})}},{key:"isZlibCompressed",value:function(){return this.assert("CompressionMethod","Zlib")}},{key:"isFromCache",value:function(){return this.assert("FromCache",!0)}},{key:"isBufferedMessage",value:function(){return this.assert("BufferedMessage",!0)}},{key:"getInvitationType",value:function(){if(!this.isInvitation())throw new TypeError("cannot get InvitationType of a normal message type");return this.typeOf("MessageType")}}]),t}();function _typeof$9(e){return (_typeof$9="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck$b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$7(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function _createClass$7(e,t,r){return t&&_defineProperties$7(e.prototype,t),r&&_defineProperties$7(e,r),e}function _possibleConstructorReturn$9(e,t){return !t||"object"!==_typeof$9(t)&&"function"!=typeof t?_assertThisInitialized$9(e):t}function _assertThisInitialized$9(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf$9(e){return (_getPrototypeOf$9=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits$9(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf$9(e,t);}function _setPrototypeOf$9(e,t){return (_setPrototypeOf$9=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ChatManager=function(e){function t(e){var r;return _classCallCheck$b(this,t),(r=_possibleConstructorReturn$9(this,_getPrototypeOf$9(t).call(this,e,"ChatManager"))).dialogueLru=new TLRUCache(void 0,{maxlen:LRU_MAX_ITEMS,ttl:DIALOGUE_EXPIRE_TIMEOUT}),r}return _inherits$9(t,createEventBase()),_createClass$7(t,[{key:"getChatInfo",value:function(e){var t=this.dialogueLru.get(e);if(this.dialogueLru.prune(),t){var r=t.dialogue,n=t.sequence.add(1),o={dialogue:r,sequence:n};return this.dialogueLru.set(e,{dialogue:r,sequence:n}),o}var i={dialogue:getRandomUInt64(),sequence:long_1.fromNumber(1,!0)};return this.dialogueLru.set(e,i),i}}]),t}();function _typeof$a(e){return (_typeof$a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys$2(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n);}return r}function _objectSpread$1(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ownKeys$2(r,!0).forEach(function(t){_defineProperty$3(e,t,r[t]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ownKeys$2(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t));});}return e}function _defineProperty$3(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _objectWithoutProperties$2(e,t){if(null==e)return {};var r,n,o=_objectWithoutPropertiesLoose$2(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r]);}return o}function _objectWithoutPropertiesLoose$2(e,t){if(null==e)return {};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}function _slicedToArray$4(e,t){return _arrayWithHoles$4(e)||_iterableToArrayLimit$4(e,t)||_nonIterableRest$4()}function _nonIterableRest$4(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit$4(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e;}finally{try{n||null==a.return||a.return();}finally{if(o)throw i}}return r}function _arrayWithHoles$4(e){if(Array.isArray(e))return e}function _toConsumableArray$6(e){return _arrayWithoutHoles$6(e)||_iterableToArray$6(e)||_nonIterableSpread$6()}function _nonIterableSpread$6(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray$6(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles$6(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}function asyncGeneratorStep$6(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value;}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o);}function _asyncToGenerator$6(e){return function(){var t=this,r=arguments;return new Promise(function(n,o){var i=e.apply(t,r);function s(e){asyncGeneratorStep$6(i,n,o,s,a,"next",e);}function a(e){asyncGeneratorStep$6(i,n,o,s,a,"throw",e);}s(void 0);})}}function _classCallCheck$c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn$a(e,t){return !t||"object"!==_typeof$a(t)&&"function"!=typeof t?_assertThisInitialized$a(e):t}function _assertThisInitialized$a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf$a(e){return (_getPrototypeOf$a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _defineProperties$8(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function _createClass$8(e,t,r){return t&&_defineProperties$8(e.prototype,t),r&&_defineProperties$8(e,r),e}function _inherits$a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf$a(e,t);}function _setPrototypeOf$a(e,t){return (_setPrototypeOf$a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Session$2=function(e){function t(e,r,n,o){var i;return _classCallCheck$c(this,t),(i=_possibleConstructorReturn$a(this,_getPrototypeOf$a(t).call(this,o,"Session"))).context=e,i.connection=r,i.instanceId=n,i.chatManager=new ChatManager(i.logger),i.joinedChannels=new Set,i.msgDedupLru=new LRUCache(void 0,{maxlen:MSG_DEDUP_MAX_LEN}),i.startTime=Date.now(),i.seq=long_1.fromNumber(1,!0),i.seqSentStatuses=[!1,!1],i.dialogueSequenceLru=new LRUCache(void 0,{maxlen:LRU_MAX_ITEMS}),i.curLoginSockets=[void 0,void 0],i.loginSocketSubs=[[],[]],i.lastLoginSockets=[new ReplaySubject(1),new ReplaySubject(1)],i.dialPendingMsgSubjectMaps=[new Map,new Map],i.log("The instanceId is %s",i.instanceId.toString()),i}return _inherits$a(t,createEventBase()),_createClass$8(t,null,[{key:"sendMessageAck",value:function(e,t){var r=new MessageOption(e.options);(r.isInvitation()||r.isPeerToPeerMessage()||r.isRawPeerMessage())&&t.sendPacket("Ack",{code:0,dialogue:e.dialogue,instance:e.instance,sequence:e.sequence});}}]),_createClass$8(t,[{key:"loginHandler",value:function(){var e=_asyncToGenerator$6(regenerator.mark(function e(){var t,r,n,o=this;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return this.connection.initConnection(),t=this.seq,r=this.getSocketLoginObservables(this.connection.lastOpenSockets,t),n=Date.now(),r.forEach(function(e,t){o.loginSocketSubs[t].push(e.pipe(tap(function(){var e=_asyncToGenerator$6(regenerator.mark(function e(r){var i;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:o.curLoginSockets[t]=r,i=Date.now(),sendReport("Link",{ackedServerIp:r.address,destServerIp:r.ip,ec:0,sc:0,elapse:getElapse(o.startTime),lts:long_1.fromNumber(i),responseTime:n-i,sid:getSid(o.instanceId),userId:o.context.uid}),o.emit("userJoined",r.env);case 4:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}())).subscribe(o.lastLoginSockets[t]));}),this.initKeepAliveSender(),this.initKeepAliveReconnector(),this.initLoginReceiver(),e.abrupt("return",merge.apply(void 0,_toConsumableArray$6(r).concat([fromEvent(this.connection,"connectionInitFailure").pipe(tap(function(e){if(isRtmError(e)||isTimeout(e))throw e;throw new RtmUnknownError("Login failure",LOGIN_ERR_UNKNOWN,e)}))])).pipe(first(),timeout(CLIENT_LOGIN_TIMEOUT),catchError(function(e){return e instanceof TimeoutError&&o.warn("Client login timeout"),o.clearSockets(),throwError(e)}),finalize(function(){o.connection.apClient.apFinish$.next(void 0);})).toPromise());case 9:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"logoutHandler",value:function(){var e=_asyncToGenerator$6(regenerator.mark(function e(){var t,r,n,o=this;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=this.getLoginSockets(),r=t.map(function(e){return e.sendPacket("UserQuit",{}),o.connection.waitClosing(e)}),this.clearSockets(LOGOUT_SOCKET_CLOSE_TIMEOUT),n=t.map(function(e){return e.env}),[0,1].filter(function(e){return !n.includes(e)}).forEach(function(e){o.connection.closeSocket(e,0);}),e.abrupt("return",merge.apply(void 0,_toConsumableArray$6(r)).toPromise());case 7:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"requestChannelJoin",value:function(){var e=_asyncToGenerator$6(regenerator.mark(function e(t,r){var n,o,i,s=this;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(0!==this.getLoginSockets().length){e.next=2;break}throw new RtmInvalidStatusError("Client is not logged in. Cannot join the channel",JOIN_CHANNEL_ERR_USER_NOT_LOGGED_IN);case 2:return n=fromEvent(this,"channelLeft").pipe(filter(function(e){return e===t}),first()),o=this.incGetSeq(),(i=this.lastLoginSockets.map(function(e){return e.pipe(switchMap(function(e,t){0!==t&&s.incSeqIfNeeded(e.env);var n=0===t?o:s.seq;return e.sendPacket("GroupEnter",{account:r,seq:n}),e.fromReceived("GroupReply").pipe(first(function(e){var t=e.seq;return n.eq(t)}),tap(function(e){var t=e.code;if(0!==t)throw new RtmUnavailableError(["Channel join failure. The response code is %d",t],JOIN_CHANNEL_ERR_FAILURE)}))}),takeUntil(n),share())})).forEach(function(e,t){return s.loginSocketSubs[t].push(e.subscribe({error:function(){}}))}),e.next=8,merge.apply(void 0,_toConsumableArray$6(i)).pipe(first(),timeout(COMMON_REQUEST_TIMEOUT),catchError(function(e){return e instanceof TimeoutError&&s.warn("Channel join timeout"),throwError(e)})).toPromise();case 8:this.joinedChannels.add(t);case 9:case"end":return e.stop()}},e,this)}));return function(t,r){return e.apply(this,arguments)}}()},{key:"requestChannelLeave",value:function(e,t){this.emit("channelLeft",e),this.joinedChannels.delete(e),this.getLoginSockets().forEach(function(e){e.sendPacket("GroupLeave",{account:t});});}},{key:"requestChannelMemberList",value:function(e){var r=this.getLoginSockets();if(0===r.length)throw new RtmInvalidStatusError("Client is not logged in. Cannot get the channel members",GET_MEMBERS_ERR_REJECTED);var n=this.incGetSeq();return r.forEach(function(t){t.sendPacket("GroupAllUsersList",{group:e,pageNumber:0,pageSize:200,seq:n});}),race.apply(void 0,[t.genTimeoutError(GET_CHANNEL_MEMBER_COUNT_ERR_TIMEOUT)].concat(_toConsumableArray$6(r.map(function(t){return t.fromReceived("GroupAllUsersResult").pipe(first(function(t){var r=t.group,o=t.seq;return r===e&&n.eq(o)}))}))))}},{key:"requestPeersOnlineStatus",value:function(e){var r=this.getLoginSockets();if(0===r.length)throw new RtmInvalidStatusError("Client is not logged in");var n=this.incGetSeq();return r.forEach(function(t){t.sendPacket("UserStatusList",{users:e,seq:n});}),race.apply(void 0,[t.genTimeoutError(QUERY_PEERS_ONLINE_STATUS_ERR_TIMEOUT)].concat(_toConsumableArray$6(r.map(function(e){return e.fromReceived("UserStatusResult").pipe(first(function(e){var t=e.seq;return n.eq(t)}))}))))}},{key:"requestSetLocalUserAttributes",value:function(e,r){var n=this,o=this.getLoginSockets();if(0===o.length)throw new RtmInvalidStatusError("Client is not logged in");var i=this.incGetSeq();return o.forEach(function(t,o){void 0!==r&&o!==r||t.sendPacket("UserAttributeSet",{account:n.context.uid,attributeInfos:Object.entries(e).map(function(e){var t=_slicedToArray$4(e,2);return {key:t[0],value:t[1]}}),seq:i});}),race.apply(void 0,_toConsumableArray$6(o.map(function(e){return e.fromReceived("UserAttributeErr").pipe(first(function(e){var t=e.seq;return i.eq(t)}),map$1(function(){throw new RtmUnavailableError("The user attributes set failure",ATTRIBUTE_OPERATION_ERR_FAILURE)}))})).concat([t.genTimeoutError(ATTRIBUTE_OPERATION_ERR_TIMEOUT)],_toConsumableArray$6(o.map(function(e){return e.fromReceived("UserAttributeRsp").pipe(first(function(e){var t=e.seq;return i.eq(t)}))}))))}},{key:"requestSetChannelAttributes",value:function(e,r,n){var o=this.getLoginSockets();if(0===o.length)throw new RtmInvalidStatusError("Client is not logged in");var i=this.incGetSeq();return o.forEach(function(t){t.sendPacket("GroupAttributeSet",{broadcast:n,group:e,attributeInfos:Object.entries(r).map(function(e){var t=_slicedToArray$4(e,2);return {key:t[0],value:t[1]}}),seq:i});}),race.apply(void 0,_toConsumableArray$6(o.map(function(e){return e.fromReceived("GroupAttributeErr").pipe(first(function(e){var t=e.seq;return i.eq(t)}),map$1(function(){throw new RtmUnavailableError("The group attributes set failure",ATTRIBUTE_OPERATION_ERR_FAILURE)}))})).concat([t.genTimeoutError(ATTRIBUTE_OPERATION_ERR_TIMEOUT)],_toConsumableArray$6(o.map(function(e){return e.fromReceived("GroupAttributeRsp").pipe(first(function(e){var t=e.seq;return i.eq(t)}))}))))}},{key:"requestAddOrUpdateLocalUserAttributes",value:function(e){var r=this,n=this.getLoginSockets();if(0===n.length)throw new RtmInvalidStatusError("Client is not logged in");var o=this.incGetSeq();return n.forEach(function(t){t.sendPacket("UserAttributeMod",{account:r.context.uid,attributeInfos:Object.entries(e).map(function(e){var t=_slicedToArray$4(e,2);return {key:t[0],value:t[1]}}),seq:o});}),race.apply(void 0,_toConsumableArray$6(n.map(function(e){return e.fromReceived("UserAttributeErr").pipe(first(function(e){var t=e.seq;return o.eq(t)}),map$1(function(){throw new RtmUnavailableError("The user attributes add or update failure",ATTRIBUTE_OPERATION_ERR_FAILURE)}))})).concat([t.genTimeoutError(ATTRIBUTE_OPERATION_ERR_TIMEOUT)],_toConsumableArray$6(n.map(function(e){return e.fromReceived("UserAttributeRsp").pipe(first(function(e){var t=e.seq;return o.eq(t)}))}))))}},{key:"requestAddOrUpdateChannelAttributes",value:function(e,r,n){var o=this.getLoginSockets();if(0===o.length)throw new RtmInvalidStatusError("Client is not logged in");var i=this.incGetSeq();return o.forEach(function(t){t.sendPacket("GroupAttributeMod",{broadcast:n,group:e,attributeInfos:Object.entries(r).map(function(e){var t=_slicedToArray$4(e,2);return {key:t[0],value:t[1]}}),seq:i});}),race.apply(void 0,_toConsumableArray$6(o.map(function(e){return e.fromReceived("GroupAttributeErr").pipe(first(function(e){var t=e.seq;return i.eq(t)}),map$1(function(){throw new RtmUnavailableError("The group attributes add or update failure",ATTRIBUTE_OPERATION_ERR_FAILURE)}))})).concat([t.genTimeoutError(ATTRIBUTE_OPERATION_ERR_TIMEOUT)],_toConsumableArray$6(o.map(function(e){return e.fromReceived("GroupAttributeRsp").pipe(first(function(e){var t=e.seq;return i.eq(t)}))}))))}},{key:"requestDeleteLocalUserAttributesByKeys",value:function(e){var r=this,n=this.getLoginSockets();if(0===n.length)throw new RtmInvalidStatusError("Client is not logged in");var o=this.incGetSeq();return n.forEach(function(t){t.sendPacket("UserAttributeDel",{account:r.context.uid,attributes:e,seq:o});}),race.apply(void 0,_toConsumableArray$6(n.map(function(e){return e.fromReceived("UserAttributeErr").pipe(first(function(e){var t=e.seq;return o.eq(t)}),map$1(function(){throw new RtmUnavailableError("The user attributes delete failure",ATTRIBUTE_OPERATION_ERR_FAILURE)}))})).concat([t.genTimeoutError(ATTRIBUTE_OPERATION_ERR_TIMEOUT)],_toConsumableArray$6(n.map(function(e){return e.fromReceived("UserAttributeRsp").pipe(first(function(e){var t=e.seq;return o.eq(t)}))}))))}},{key:"requestDeleteChannelAttributesByKeys",value:function(e,r,n){var o=this.getLoginSockets();if(0===o.length)throw new RtmInvalidStatusError("Client is not logged in");var i=this.incGetSeq();return o.forEach(function(t){t.sendPacket("GroupAttributeDel",{group:e,broadcast:n,attributes:r,seq:i});}),race.apply(void 0,_toConsumableArray$6(o.map(function(e){return e.fromReceived("GroupAttributeErr").pipe(first(function(e){var t=e.seq;return i.eq(t)}),map$1(function(){throw new RtmUnavailableError("The channel attributes delete failure",ATTRIBUTE_OPERATION_ERR_FAILURE)}))})).concat([t.genTimeoutError(ATTRIBUTE_OPERATION_ERR_TIMEOUT)],_toConsumableArray$6(o.map(function(e){return e.fromReceived("GroupAttributeRsp").pipe(first(function(e){var t=e.seq;return i.eq(t)}))}))))}},{key:"requestClearLocalUserAttributes",value:function(){var e=this,r=this.getLoginSockets();if(0===r.length)throw new RtmInvalidStatusError("Client is not logged in");var n=this.incGetSeq();return r.forEach(function(t){t.sendPacket("UserAttributeSet",{account:e.context.uid,seq:n,attributeInfos:[]});}),race.apply(void 0,_toConsumableArray$6(r.map(function(e){return e.fromReceived("UserAttributeErr").pipe(first(function(e){var t=e.seq;return n.eq(t)}),map$1(function(){throw new RtmUnavailableError("The user attributes clear failure",ATTRIBUTE_OPERATION_ERR_FAILURE)}))})).concat([t.genTimeoutError(ATTRIBUTE_OPERATION_ERR_TIMEOUT)],_toConsumableArray$6(r.map(function(e){return e.fromReceived("UserAttributeRsp").pipe(first(function(e){var t=e.seq;return n.eq(t)}))}))))}},{key:"requestClearChannelAttributes",value:function(e,r){var n=this.getLoginSockets();if(0===n.length)throw new RtmInvalidStatusError("Client is not logged in");var o=this.incGetSeq();return n.forEach(function(t){t.sendPacket("GroupAttributeSet",{group:e,seq:o,attributeInfos:[],broadcast:r});}),race.apply(void 0,_toConsumableArray$6(n.map(function(e){return e.fromReceived("GroupAttributeErr").pipe(first(function(e){var t=e.seq;return o.eq(t)}),map$1(function(){throw new RtmUnavailableError("The channel attributes clear failure",ATTRIBUTE_OPERATION_ERR_FAILURE)}))})).concat([t.genTimeoutError(ATTRIBUTE_OPERATION_ERR_TIMEOUT)],_toConsumableArray$6(n.map(function(e){return e.fromReceived("GroupAttributeRsp").pipe(first(function(e){var t=e.seq;return o.eq(t)}))}))))}},{key:"requestGetUserAttributesByKeys",value:function(e,r){var n=this.getLoginSockets();if(0===n.length)throw new RtmInvalidStatusError("Client is not logged in");var o=this.incGetSeq();return n.forEach(function(t){t.sendPacket("UserAttributeGet",{account:e,seq:o,attributes:r});}),race.apply(void 0,[t.genTimeoutError(ATTRIBUTE_OPERATION_ERR_TIMEOUT)].concat(_toConsumableArray$6(n.map(function(e){return e.fromReceived("UserAttributeErr").pipe(first(function(e){var t=e.seq;return o.eq(t)}),map$1(function(e){var t=e.code;if(10008===t)throw new RtmUnavailableError("The user requested is not online",ATTRIBUTE_OPERATION_ERR_USER_NOT_FOUND);throw new RtmUnknownError(["User attribute operation unknown error code: %d",t],ATTRIBUTE_OPERATION_ERR_FAILURE)}))})),_toConsumableArray$6(n.map(function(e){return e.fromReceived("UserAttributeRet").pipe(first(function(e){var t=e.seq;return o.eq(t)}))}))))}},{key:"requestGetChannelAttributesByKeys",value:function(e,r){var n=this.getLoginSockets();if(0===n.length)throw new RtmInvalidStatusError("Client is not logged in");var o=this.incGetSeq();return n.forEach(function(t){t.sendPacket("GroupAttributeGet",{group:e,seq:o,attributes:r});}),race.apply(void 0,[t.genTimeoutError(ATTRIBUTE_OPERATION_ERR_TIMEOUT)].concat(_toConsumableArray$6(n.map(function(e){return e.fromReceived("GroupAttributeErr").pipe(first(function(e){var t=e.seq;return o.eq(t)}),map$1(function(){throw new RtmUnavailableError("The channel attributes get failure",ATTRIBUTE_OPERATION_ERR_FAILURE)}))})),_toConsumableArray$6(n.map(function(e){return e.fromReceived("GroupAttributeRet").pipe(first(function(e){var t=e.seq;return o.eq(t)}))}))))}},{key:"requestGetUserAttributeKeys",value:function(e){var r=this.getLoginSockets();if(0===r.length)throw new RtmInvalidStatusError("Client is not logged in");var n=this.incGetSeq();return r.forEach(function(t){t.sendPacket("UserAttributeKeysGet",{account:e,seq:n});}),race.apply(void 0,[t.genTimeoutError(ATTRIBUTE_OPERATION_ERR_TIMEOUT)].concat(_toConsumableArray$6(r.map(function(e){return e.fromReceived("UserAttributeErr").pipe(first(function(e){var t=e.seq;return n.eq(t)}),map$1(function(e){var t=e.code;if(10008===t)throw new RtmUnavailableError("The user requested is not online",ATTRIBUTE_OPERATION_ERR_USER_NOT_FOUND);throw new RtmUnknownError(["User attribute operation unknown error code: %d",t],ATTRIBUTE_OPERATION_ERR_FAILURE)}))})),_toConsumableArray$6(r.map(function(e){return e.fromReceived("UserAttributeKeysRet").pipe(first(function(e){var t=e.seq;return n.eq(t)}))}))))}},{key:"requestGetChannelAttributesKeys",value:function(e){var r=this.getLoginSockets();if(0===r.length)throw new RtmInvalidStatusError("Client is not logged in");var n=this.incGetSeq();return r.forEach(function(t){t.sendPacket("GroupAttributeKeysGet",{group:e,seq:n});}),race.apply(void 0,[t.genTimeoutError(ATTRIBUTE_OPERATION_ERR_TIMEOUT)].concat(_toConsumableArray$6(r.map(function(e){return e.fromReceived("GroupAttributeErr").pipe(first(function(e){var t=e.seq;return n.eq(t)}),map$1(function(e){var t=e.code;throw new RtmUnknownError(["Channel attribute operation unknown error code: %d",t],ATTRIBUTE_OPERATION_ERR_FAILURE)}))})),_toConsumableArray$6(r.map(function(e){return e.fromReceived("GroupAttributeKeysRet").pipe(first(function(e){var t=e.seq;return n.eq(t)}))}))))}},{key:"requestGetChannelMemberCount",value:function(e){var r=this.getLoginSockets();if(0===r.length)throw new RtmInvalidStatusError("Client is not logged in");var n=this.incGetSeq();return r.forEach(function(t){t.sendPacket("GroupStatusList",{groups:e,seq:n});}),race.apply(void 0,[t.genTimeoutError(GET_CHANNEL_MEMBER_COUNT_ERR_TIMEOUT)].concat(_toConsumableArray$6(r.map(function(e){return e.fromReceived("GroupStatusResult").pipe(first(function(e){var t=e.seq;return n.eq(t)}))}))))}},{key:"requestSubscribePeersOnlineStatus",value:function(e){var r=this.getLoginSockets();if(0===r.length)throw new RtmInvalidStatusError("Client is not logged in");var n=this.incGetSeq();return r.forEach(function(t){t.sendPacket("SubscribeUserStatus",{seq:n,users:e});}),race.apply(void 0,[t.genTimeoutError(PEER_SUBSCRIPTION_STATUS_ERR_TIMEOUT)].concat(_toConsumableArray$6(r.map(function(e){return e.fromReceived("SubscribeResponse").pipe(first(function(e){var t=e.seq;return n.eq(t)}))}))))}},{key:"requestUnsubscribePeersOnlineStatus",value:function(e){var t=this.getLoginSockets();if(0===t.length)throw new RtmInvalidStatusError("Client is not logged in");var r=this.incGetSeq();t.forEach(function(t){t.sendPacket("UnsubscribeUserStatus",{seq:r,users:e});});}},{key:"sendInvitationMessage",value:function(){var e=_asyncToGenerator$6(regenerator.mark(function e(t){var r,n,o,i,s,a,u,l,c,p,f,d,g=this;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.peerId,n=t.callId,o=t.extra,i=t.isAcceptAck,s=t.channelId,a=t.type,u={callId:n},void 0===i){e.next=6;break}if("CallAccept"===a){e.next=5;break}throw new Error("invalid invitation type");case 5:u.type=i?"ack":"request";case 6:return u.channel=s,("CallInvite"===a||"CallCancel"===a||"CallReject"===a||"CallAccept"===a&&!1===i)&&void 0!==o&&(u.extra=o),l=getRandomUInt64(),this.log("The sent invitation body is %o",u),c=function(e){return {MiscMap:{},sequence:long_1.fromNumber(1),dialogue:l,instance:g.instanceId,dst:r,ms:long_1.fromNumber(Date.now(),!0),options:new MessageOption({IterationNumber:e,MessageType:a}).toLong(),payload:(new TextEncoder).encode(JSON.stringify(u)),src:g.context.uid}},e.next=14,from(this.sendMessageToRetry(c,!0)).pipe(timeout(MESSAGE_SEND_TIMEOUT),catchError(function(e){return e instanceof TimeoutError&&g.warn("Send invitation timeout"),throwError(e)})).toPromise();case 14:return p=e.sent,f=p.code,d=p.retryTimes,e.abrupt("return",{hasPeerReceived:0===f,hasReSent:0!==d});case 18:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"sendRawMessage",value:function(){var e=_asyncToGenerator$6(regenerator.mark(function e(t,r,n,o,i,s){var a,u,l,c,p,f,d,g,h,b,_=this;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(a=i.enableOfflineMessaging,u=i.enableHistoricalMessaging,isValidId(n)&&t instanceof Uint8Array&&"string"==typeof r){e.next=3;break}throw new RtmInvalidArgumentError("The send message arguments are not valid",o?PEER_MESSAGE_ERR_INVALID_USERID:CHANNEL_MESSAGE_ERR_FAILURE);case 3:if(!(t.byteLength+new Blob([r]).size>MESSAGE_TEXT_MAX_BYTES)){e.next=5;break}throw new RtmLimitExceededError("The message size is over the 32KB limit",o?PEER_MESSAGE_ERR_INVALID_MESSAGE:CHANNEL_MESSAGE_ERR_INVALID_MESSAGE);case 5:return l=t.byteLength>=MESSAGE_MIN_COMPRESSION_LEN,c=this.chatManager.getChatInfo(n),p=c.dialogue,f=c.sequence,d=this.instanceId,this.log('A%s %s raw message is sending to %s: "'.concat(d,"-").concat(p,"#").concat(f,'"'),l?" compressed":"",o?"peer":"channel",n),g=function(e){return {MiscMap:{description:r},sequence:f,dialogue:p,instance:d,dst:n,ms:long_1.fromNumber(Date.now(),!0),options:new MessageOption({IterationNumber:e,CompressionMethod:l?"Zlib":"Uncompressed",MessageType:o?"PeerRawMessage":"ChannelRawMessage",ToCache:a,ToArchive:u}).toLong(),payload:l?pako_2(t):t,src:_.context.uid}},e.next=12,from(this.sendMessageToRetry(g,!0)).pipe(timeout(void 0===s?MESSAGE_SEND_TIMEOUT:s),catchError(function(e){return e instanceof TimeoutError&&_.warn("Send message timeout"),throwError(e)})).toPromise();case 12:return h=e.sent,b=h.code,e.abrupt("return",{hasPeerReceived:0===b});case 15:case"end":return e.stop()}},e,this)}));return function(t,r,n,o,i,s){return e.apply(this,arguments)}}()},{key:"sendTextMessage",value:function(){var e=_asyncToGenerator$6(regenerator.mark(function e(t,r,n,o,i){var s,a,u,l,c,p,f,d,g,h,b=this;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(s=o.enableOfflineMessaging,a=o.enableHistoricalMessaging,isValidId(r)){e.next=3;break}throw new RtmInvalidArgumentError("The send message arguments are not valid",n?PEER_MESSAGE_ERR_INVALID_USERID:CHANNEL_MESSAGE_ERR_FAILURE);case 3:if(!(new Blob([t]).size>MESSAGE_TEXT_MAX_BYTES)){e.next=5;break}throw new RtmLimitExceededError("The message size is over the 32KB limit",n?PEER_MESSAGE_ERR_INVALID_MESSAGE:CHANNEL_MESSAGE_ERR_INVALID_MESSAGE);case 5:return u=new Blob([t]).size>=MESSAGE_MIN_COMPRESSION_LEN,l=this.chatManager.getChatInfo(r),c=l.dialogue,p=l.sequence,f=this.instanceId,this.log('A%s %s message is sending to %s: "'.concat(f,"-").concat(c,"#").concat(p,'"'),u?" compressed":"",n?"peer":"channel",r),d=function(e){return {MiscMap:{},sequence:p,dialogue:c,instance:f,dst:r,ms:long_1.fromNumber(Date.now(),!0),options:new MessageOption({IterationNumber:e,CompressionMethod:u?"Zlib":"Uncompressed",MessageType:n?"PeerToPeerMessage":"ChannelMessage",ToCache:s,ToArchive:a}).toLong(),payload:u?pako_2(t):(new TextEncoder).encode(t),src:b.context.uid}},e.next=12,from(this.sendMessageToRetry(d,!0)).pipe(timeout(void 0===i?COMMON_REQUEST_TIMEOUT:i),catchError(function(e){return e instanceof TimeoutError&&b.warn("Send message timeout"),throwError(e)})).toPromise();case 12:return g=e.sent,h=g.code,e.abrupt("return",{hasPeerReceived:0===h});case 15:case"end":return e.stop()}},e,this)}));return function(t,r,n,o,i){return e.apply(this,arguments)}}()},{key:"cleanLoginSubs",value:function(e){this.loginSocketSubs[e].reverse().forEach(function(e){return e.unsubscribe()}),this.loginSocketSubs[e]=[];}},{key:"sendMessageToRetry",value:function(){var e=_asyncToGenerator$6(regenerator.mark(function e(t,r){var n,o,i,s,a,u,l,c,p,f=arguments;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=f.length>2&&void 0!==f[2]?f[2]:0,this.log("Attempt to send the message ".concat(r?" with retrying, %o":"without retrying"),{retryTimes:n}),0!==(o=this.getLoginSockets()).length){e.next=5;break}throw new Error("no logged-in sockets");case 5:return i=t(n),o.forEach(function(e){e.sendPacket("Message",i);}),s=i.dialogue,a=i.sequence,u=i.instance,l=o.map(function(e){return e.fromReceived("Ack").pipe(filter(function(e){return s.eq(e.dialogue)&&a.eq(e.sequence)&&u.eq(e.instance)}))}),e.prev=9,e.next=12,merge.apply(void 0,_toConsumableArray$6(l)).pipe(timeout(MESSAGE_RETRY_TIMEOUT)).pipe(first()).toPromise();case 12:return c=e.sent,p=c.code,this.log("The message has been acked, %o",{code:p}),e.abrupt("return",{code:p,retryTimes:n});case 18:if(e.prev=18,e.t0=e.catch(9),!(e.t0 instanceof TimeoutError&&r)){e.next=22;break}return e.abrupt("return",this.sendMessageToRetry(t,!1,n+1));case 22:throw e.t0;case 23:case"end":return e.stop()}},e,this,[[9,18]])}));return function(t,r){return e.apply(this,arguments)}}()},{key:"initKeepAliveSender",value:function(){var e=this;this.lastLoginSockets.map(function(t){return t.pipe(switchMap(function(t){return timer(0,KEEPALIVE_INTERVAL).pipe(tap(function(){e.incSeqIfNeeded(t.env),t.sendPacket("Ping",{ms:long_1.fromNumber(Date.now(),!0),seq:e.seq});}))}))}).forEach(function(t,r){e.loginSocketSubs[r].push(t.subscribe({error:function(){}}));});}},{key:"initKeepAliveReconnector",value:function(){var e=this;this.lastLoginSockets.map(function(e){return e.pipe(switchMap(function(e){var t,r=!1,n=e.userJoin$.pipe(tap(function(){r=!0;})),o=e.input$.pipe(tap(function(e){"Ping"!==uriToPacketName(e.uri)&&(r=!1);}));return merge(timer(LOGIN_RESP_TIMEOUT,SOCKET_KEEPALIVE_TIMEOUT).pipe(withLatestFrom(e.receivedPacket),tap(function(n){var o=_slicedToArray$4(n,2),i=_slicedToArray$4(o[1],2)[1];t!==i||r||e.forceReconnect(),t=i;})),n,o)}))}).forEach(function(t,r){e.loginSocketSubs[r].push(t.subscribe({error:function(){}}));});}},{key:"initLoginReceiver",value:function(){var e=this;this.lastLoginSockets.map(function(t){return t.pipe(switchMap(function(t){return merge(fromEvent(t,"reconnect").pipe(tap(e.onReconnect(t))),t.fromReceived("Message").pipe(tap(e.onMessage(t))),t.fromReceived("GroupEnterNotice").pipe(tap(e.onGroupEnterNotice())),t.fromReceived("GroupLeaveNotice").pipe(tap(e.onGroupLeaveNotice())),t.fromReceived("GroupCountNotice").pipe(tap(e.onGroupCountNotice())),t.fromReceived("GroupAttributeAlt").pipe(tap(e.onGroupAttributeAlt())),t.fromReceived("UserJoinNotice").pipe(tap(e.onUserNotice(RtmStatusCode$1.PeerOnlineState.ONLINE))),t.fromReceived("UserQuitNotice").pipe(tap(e.onUserNotice(RtmStatusCode$1.PeerOnlineState.OFFLINE))),t.fromReceived("UserWaitNotice").pipe(tap(e.onUserNotice(RtmStatusCode$1.PeerOnlineState.UNREACHABLE)))).pipe(mapTo(void 0))}))}).forEach(function(t,r){e.loginSocketSubs[r].push(t.subscribe({error:function(){}}));});}},{key:"requestSocketLogin",value:function(e,t,r){var n=this;return concat(defer$1(_asyncToGenerator$6(regenerator.mark(function o(){return regenerator.wrap(function(o){for(;;)switch(o.prev=o.next){case 0:e.sendPacket("UserJoin",{account:n.context.uid,instance:n.instanceId,opt:new UserJoinOptions(t).toLong(),seq:r,ticket:e.ticket});case 1:case"end":return o.stop()}},o)}))),e.fromReceived("UserResp").pipe(first(function(e){return r.eq(e.seq)}),tap(function(t){var r=t.code;if(0!==r)throw n.clearSockets(),n.logError("Connected to gateway success but the Rtm server rejected login"),new RtmUnavailableError(["Login failure. The response code from the RTM service is %d",r],LOGIN_ERR_REJECTED);n.log("ENV_%d logged in",e.env);}),mapTo(e),timeout(LOGIN_RESP_TIMEOUT))).pipe(filter(function(e){return void 0!==e}),catchError(function(e,r){return e instanceof TimeoutError&&n.warn("Login response timeout, rejoin: %s",t),n.logError(e),t?r:throwError(e)}))}},{key:"getSocketLoginObservables",value:function(e,t){var r=this;return e.map(function(e){return e.pipe(tap(function(e){e.on("socketUserDrop",function(t){return r.onUserDrop(t,e)});}),switchMap(function(e,n){return r.incSeqIfNeeded(e.env),r.requestSocketLogin(e,0!==n,0===n?t:r.seq)}),share())})}},{key:"incSeqIfNeeded",value:function(e){if(![0,1].includes(e))throw new CommonError({INVALID_ENV:"The env argument is not 0 or 1"});this.seqSentStatuses[e]&&(this.seq=this.seq.add(1),this.seqSentStatuses=[!1,!1]),this.seqSentStatuses[e]=!0;}},{key:"incGetSeq",value:function(){return this.seq=this.seq.add(1),this.seqSentStatuses=[!0,!0],this.seq}},{key:"getLoginSockets",value:function(){return compact_1(this.curLoginSockets)}},{key:"emitMessage",value:function(e,t){var r=e.options,n=e.payload,o=e.src,i=e.dst,s=e.instance,a=e.dialogue,u=e.sequence,l=e.ms,c=e.MiscMap;this.dialogueSequenceLru.set(a.toString(),u);var p="".concat(s,"-").concat(a,"#").concat(u);if(this.msgDedupLru.has(p))this.warn("Env_%d: Messages out-of-order or not start with 1: %s",t,p);else {this.msgDedupLru.set(p,void 0);var f=new MessageOption(r),d=f.isZlibCompressed();if(f.isInvitation()){var g=d?pako_3(n,{to:"string"}):new TextDecoder("utf-8").decode(n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength)),h=JSON.parse(g);this.log("The received invitation body is %o",h),this.emit("invitationMessage",{body:h,type:f.getInvitationType(),peerId:o,serverReceivedTs:l.toNumber()});}else if(f.isTextMessage()){var b=f.isPeerToPeerMessage(),_=d?pako_3(n,{to:"string"}):new TextDecoder("utf-8").decode(n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength));if(this.info("Received a%s %s text message from %s to %s, %s",d?" compressed":"",b?"peer":"channel",o,i,p),b){var y={text:_,peerId:o,properties:{serverReceivedTs:l.toNumber(),isOfflineMessage:f.isFromCache()}};this.emit("peerTextMessage",y);}else this.emit("channelTextMessage",{channelId:i,memberId:o,text:_,properties:{serverReceivedTs:l.toNumber(),isOfflineMessage:!1}});}else if(f.isRawMessage()){var m=f.isRawPeerMessage(),v=void 0===c.description?"":c.description,$=d?pako_3(n):n;if(this.info("Received a%s %s raw message from %s to %s, %s",d?" compressed":"",m?"peer":"channel",o,i,p),m){var E={desc:v,raw:$,peerId:o,properties:{serverReceivedTs:l.toNumber(),isOfflineMessage:f.isFromCache()}};this.emit("peerRawMessage",E);}else this.emit("channelRawMessage",{desc:v,raw:$,channelId:i,memberId:o,properties:{serverReceivedTs:l.toNumber(),isOfflineMessage:!1}});}}}},{key:"onReconnect",value:function(e){var t=this;return function(){var r=[0,1].filter(function(t){return t!==e.env})[0],n=t.connection.curOpenSockets[r];n&&!0===n.notLoggedIn&&t.emit("connectionLost");}}},{key:"onUserDrop",value:function(e,t){var r=e.code;if(sendReport("KickedOff",{code:0,elapse:getElapse(this.startTime),linkId:Number.parseInt(t.name.split("-")[1],10),lts:long_1.fromNumber(Date.now()),server:t.address,serverCode:r,sid:getSid(this.instanceId),userId:this.context.uid}),10006!==r&&10001!==r){if(10009===r)return this.warn("The instance ID conflicts, reconnecting"),this.instanceId=getRandomUInt64(),this.context.sid=getSid(this.instanceId),void this.emit("instanceChanged",this.instanceId);[11,14,15,16].includes(r)&&(this.emit("userDrop",r),this.clearSockets());}else this.warn("Login too often and kicked off, reconnect and login");}},{key:"clearSockets",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;[0,1].forEach(function(r){e.cleanLoginSubs(r),e.connection.closeSocket(r,t);});}},{key:"onMessage",value:function(e){var r=this;return function(n){var o=n.dialogue,i=n.instance,s=n.sequence,a=n.options;if(n.src!==r.context.uid){var u=o.toString(),l=r.dialPendingMsgSubjectMaps[e.env].get(u),c="".concat(i,"-").concat(o,"#").concat(s);if(l)return l.next(n),void r.log("Env_%d: The dialogue has pending messages, next: %s",e.env,c);var p=r.dialogueSequenceLru.get(u),f=!p&&s.eq(1),d=void 0!==p&&s.sub(p).eq(1);if(f||d)return t.sendMessageAck(n,e),void r.emitMessage(n,e.env);if(p){if(s.lte(p))return;r.log("Env_%d: The message pended, the sequence is not continuous with the last: %s",e.env,c);}else r.log("Env_%d: The message pended, the first sequence is not equal to 1: %s",e.env,c);var g=new Subject;r.dialPendingMsgSubjectMaps[e.env].set(u,g);var h=g.pipe(observeOn(async),scan(function(e,t){return [].concat(_toConsumableArray$6(e),[t])},[]),map$1(function(e){return e.sort(function(e,t){var r=e.sequence,n=t.sequence;return r.eq(n)?0:r.gt(n)?1:-1})}),shareReplay(1)),b=new MessageOption(a),_=!b.isFromCache()&&!b.isBufferedMessage();h.pipe(takeUntil(timer(_?ONLINE_MESSAGE_DEDUP_DELAY:OFFLINE_MESSAGE_DEDUP_DELAY)),first(function(e){if(e.length<2)return !1;for(var t=void 0===p?long_1.fromNumber(1,!0):p.add(1),r=0;r<e.length;t=t.add(1),r++){if(!e[r].sequence.eq(t))return !1}return !0}),finalize(function(){r.dialPendingMsgSubjectMaps[e.env].delete(u);})).subscribe(function(n){n.forEach(function(n){t.sendMessageAck(n,e),r.emitMessage(n,e.env),r.log("Env_%d: The message queue has fully ordered, emitting: %s",e.env,"".concat(n.instance,"-").concat(n.dialogue,"#").concat(n.sequence));});},function(n){n instanceof EmptyError&&h.pipe(first()).subscribe(function(n){return n.forEach(function(n){r.log("Env_%d: The message pending queue expired, emitting: %s",e.env,"".concat(n.instance,"-").concat(n.dialogue,"#").concat(n.sequence)),t.sendMessageAck(n,e),r.emitMessage(n,e.env);})});}),g.next(n);}else r.log("The message is from the local account, ignored");}}},{key:"onGroupEnterNotice",value:function(){var e=this;return function(t){var r=t.group,n=t.instance,o=t.seq,i=t.user,s=t.size;e.emit("memberNotice",{channelId:r,seq:o,instance:n,memberId:i,type:"MemberJoined",size:s});}}},{key:"onGroupLeaveNotice",value:function(){var e=this;return function(t){var r=t.group,n=t.instance,o=t.seq,i=t.user,s=t.size;e.emit("memberNotice",{channelId:r,seq:o,instance:n,memberId:i,type:"MemberLeft",size:s});}}},{key:"onGroupCountNotice",value:function(){var e=this;return function(t){var r=t.group,n=t.instance,o=t.size,i=t.seq;e.emit("memberNotice",{channelId:r,seq:i,instance:n,type:"MemberCountUpdated",size:o});}}},{key:"onGroupAttributeAlt",value:function(){var e=this;return function(t){var r=t.group,n=_objectWithoutProperties$2(t,["group"]);e.emit("channelAttributesUpdated",_objectSpread$1({channelId:r},n));}}},{key:"onUserNotice",value:function(e){var t=this;return function(r){var n=r.instance,o=r.seq,i=r.user;t.emit("peerOnlineStatusChanged",{peerId:i,instance:n,seq:o,state:e});}}}]),t}();function genGetSession(e){return function(){var t=e();if(!t)throw new RtmInvalidStatusError("Client is not logged in. Cannot do the operation");return t}}function _typeof$b(e){return (_typeof$b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function asyncGeneratorStep$7(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value;}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o);}function _asyncToGenerator$7(e){return function(){var t=this,r=arguments;return new Promise(function(n,o){var i=e.apply(t,r);function s(e){asyncGeneratorStep$7(i,n,o,s,a,"next",e);}function a(e){asyncGeneratorStep$7(i,n,o,s,a,"throw",e);}s(void 0);})}}function _classCallCheck$d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn$b(e,t){return !t||"object"!==_typeof$b(t)&&"function"!=typeof t?_assertThisInitialized$b(e):t}function _getPrototypeOf$b(e){return (_getPrototypeOf$b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _assertThisInitialized$b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _defineProperties$9(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function _createClass$9(e,t,r){return t&&_defineProperties$9(e.prototype,t),r&&_defineProperties$9(e,r),e}function _inherits$b(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf$b(e,t);}function _setPrototypeOf$b(e,t){return (_setPrototypeOf$b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}Session$2.genTimeoutError=function(e){return of(void 0).pipe(delay(COMMON_REQUEST_TIMEOUT),map$1(function(){throw new RtmTimeoutError(["Request timed out after %ds",COMMON_REQUEST_TIMEOUT],e)}))};var LocalInvitationFailureReason=RtmStatusCode$1.LocalInvitationFailureReason,LocalInvitationState=RtmStatusCode$1.LocalInvitationState,RemoteInvitationFailureReason=RtmStatusCode$1.RemoteInvitationFailureReason,RemoteInvitationState=RtmStatusCode$1.RemoteInvitationState,EndedInvitationLogMessage="The invitation has ended, skipped emitting the %s event",InvitationError=genError(),RtmLocalInvitation=function(e){function t(e,r,n){var o;return _classCallCheck$d(this,t),(o=_possibleConstructorReturn$b(this,_getPrototypeOf$b(t).call(this,n,"RtmLocalInvitation",!0))).calleeId=e,o.getSession=r,o.state=LocalInvitationState.IDLE,o.localInvitationEnd$=merge(fromEvent(_assertThisInitialized$b(o),"LocalInvitationAccepted"),fromEvent(_assertThisInitialized$b(o),"LocalInvitationRefused"),fromEvent(_assertThisInitialized$b(o),"LocalInvitationFailure"),fromEvent(_assertThisInitialized$b(o),"LocalInvitationCanceled")).pipe(first(),subscribeOn(async)),o.callId=v4_1(),o._content="",o._channelId="",o._response="",o.onLocalInvitationAccepted=function(){o.state===LocalInvitationState.RECEIVED_BY_REMOTE?o.state=LocalInvitationState.ACCEPTED_BY_REMOTE:o.log(EndedInvitationLogMessage,"LocalInvitationAccepted");},o.onLocalInvitationCanceled=function(){o.isLocalInvitationEnd()?o.log(EndedInvitationLogMessage,"LocalInvitationCanceled"):o.state=LocalInvitationState.CANCELED;},o.onLocalInvitationFailure=function(){o.isLocalInvitationEnd()?o.log(EndedInvitationLogMessage,"LocalInvitationFailure"):o.state=LocalInvitationState.FAILURE;},o.onLocalInvitationReceivedByPeer=function(){o.state===LocalInvitationState.SENT_TO_REMOTE?o.state=LocalInvitationState.RECEIVED_BY_REMOTE:o.log(EndedInvitationLogMessage,"LocalInvitationReceivedByPeer");},o.onLocalInvitationRefused=function(){o.state===LocalInvitationState.RECEIVED_BY_REMOTE?o.state=LocalInvitationState.REFUSED_BY_REMOTE:o.log(EndedInvitationLogMessage,"LocalInvitationRefused");},o}return _inherits$b(t,createEventBase()),_createClass$9(t,[{key:"channelId",get:function(){return this._channelId},set:function(e){if(!isValidId(e))throw new RtmInvalidArgumentError("Illegal invitation channel ID",INVITATION_API_CALL_ERR_INVALID_ARGUMENT);if(this.state!==LocalInvitationState.IDLE)throw new RtmInvalidStatusError(["Cannot set the channel ID under the %s state",this.state],INVITATION_API_CALL_ERR_ALREADY_SENT);this._channelId=e;}},{key:"content",get:function(){return this._content},set:function(e){if(this.state!==LocalInvitationState.IDLE&&this.state!==LocalInvitationState.SENT_TO_REMOTE&&this.state!==LocalInvitationState.RECEIVED_BY_REMOTE)throw new RtmInvalidStatusError(["Cannot set the content under the %s state",this.state],INVITATION_API_CALL_ERR_ALREADY_SENT);if(new Blob([e]).size>INVITATION_EXTRA_MAX_BYTES)throw new RtmInvalidArgumentError('The length of the "content" overflows. The number of bytes representing content must not exceed 8 Ã 1024 if encoded in UTF-8.',INVITATION_API_CALL_ERR_INVALID_ARGUMENT);this._content=e;}},{key:"response",get:function(){return this._response},set:function(e){throw new RtmInvalidArgumentError('Cannot set the "response" of the LocalInvitation instance.',INVITATION_API_CALL_ERR_INVALID_ARGUMENT)}}]),_createClass$9(t,[{key:"send",value:function(){var e,t=this;if(this.state===LocalInvitationState.SENT_TO_REMOTE||this.state===LocalInvitationState.RECEIVED_BY_REMOTE)throw new RtmInvalidStatusError("The local invitation send failure. The call invitation has already been sent.",INVITATION_API_CALL_ERR_ALREADY_SENT);if(this.isLocalInvitationEnd())throw new RtmInvalidStatusError("The local invitation send failure. The call invitation has ended.",INVITATION_API_CALL_ERR_ALREADY_END);this.state=LocalInvitationState.SENT_TO_REMOTE,defer$1(_asyncToGenerator$7(regenerator.mark(function r(){var n,o,i;return regenerator.wrap(function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,t.getSession().sendInvitationMessage({peerId:t.calleeId,callId:t.callId,extra:t.content,type:"CallInvite",channelId:t.channelId});case 2:if(n=r.sent,o=n.hasPeerReceived,i=n.hasReSent,t.log("The local invitation has sent to the callee"),o||i){r.next=9;break}throw e=new InvitationError({PEER_NOT_ONLINE:"The peer of the invitation is not online"});case 9:if(o){r.next=12;break}throw e=new InvitationError({RESENT_AND_OFFLINE:"Resent and the peer of the invitation is not online"});case 12:case"end":return r.stop()}},r)}))).pipe(retryWhen(function(e){return e.pipe(tap(function(e){if(!(e instanceof InvitationError))throw e}),delay(LOCAL_INVITATION_RESEND_INTERVAL))}),timeout(LOCAL_INVITATION_ACK_TIMEOUT),takeUntil(this.localInvitationEnd$)).subscribe({next:function(){t.isLocalInvitationEnd()?t.log(EndedInvitationLogMessage,"LocalInvitationReceivedByPeer"):t.state!==LocalInvitationState.RECEIVED_BY_REMOTE?(t.info("The peer received the local invitation %s.",t.callId),t.onLocalInvitationReceivedByPeer(),t.emit("LocalInvitationReceivedByPeer"),t.localInvitationEnd$.pipe(timeout(INVITATION_EXPIRE_TIMEOUT),takeUntil(t.localInvitationEnd$)).subscribe({error:function(e){t.isLocalInvitationEnd()?t.log(EndedInvitationLogMessage,"LocalInvitationFailure"):(t.state=LocalInvitationState.FAILURE,isTimeout(e)?t.emit("LocalInvitationFailure",LocalInvitationFailureReason.INVITATION_EXPIRE):e instanceof RtmInvalidStatusError?t.emit("LocalInvitationFailure",LocalInvitationFailureReason.NOT_LOGGEDIN):t.emit("LocalInvitationFailure",LocalInvitationFailureReason.UNKNOWN),t.onLocalInvitationFailure());}})):t.log('The local invitation state is already "RECEIVED_BY_REMOTE", skipped emitting "LocalInvitationReceivedByPeer"');},error:function(r){if(t.isLocalInvitationEnd())t.log(EndedInvitationLogMessage,"LocalInvitationFailure");else {if(t.onLocalInvitationFailure(),isTimeout(r)&&e){if("PEER_NOT_ONLINE"===e.code)return void t.emit("LocalInvitationFailure",LocalInvitationFailureReason.PEER_OFFLINE);if("RESENT_AND_OFFLINE"===e.code)return void t.emit("LocalInvitationFailure",LocalInvitationFailureReason.PEER_NO_RESPONSE)}t.emit("LocalInvitationFailure",LocalInvitationFailureReason.UNKNOWN);}}});}},{key:"cancel",value:function(){if(this.isLocalInvitationEnd())throw new RtmInvalidStatusError("The local invitation cancel failure",INVITATION_API_CALL_ERR_ALREADY_END);if(this.state===LocalInvitationState.IDLE)throw new RtmInvalidStatusError("The local invitation has not been sent",INVITATION_API_CALL_ERR_NOT_STARTED);this.getSession().sendInvitationMessage({callId:this.callId,peerId:this.calleeId,type:"CallCancel",channelId:this.channelId,extra:this.content}),this.onLocalInvitationCanceled(),this.emit("LocalInvitationCanceled");}},{key:"onAcceptReceived",value:function(e){this.isLocalInvitationEnd()?this.log(EndedInvitationLogMessage,"LocalInvitationAccepted"):(this._response=e,this.onLocalInvitationAccepted(),this.emit("LocalInvitationAccepted",e),this.getSession().sendInvitationMessage({callId:this.callId,isAcceptAck:!0,type:"CallAccept",peerId:this.calleeId,channelId:this.channelId}));}},{key:"onRefuseReceived",value:function(e){this.isLocalInvitationEnd()?this.log(EndedInvitationLogMessage,"LocalInvitationRefused"):(this._response=e,this.onLocalInvitationRefused(),this.emit("LocalInvitationRefused",e));}},{key:"isLocalInvitationEnd",value:function(){return [LocalInvitationState.CANCELED,LocalInvitationState.FAILURE,LocalInvitationState.ACCEPTED_BY_REMOTE,LocalInvitationState.REFUSED_BY_REMOTE].includes(this.state)}}]),t}(),RtmRemoteInvitation=function(e){function t(e,r,n,o,i,s){var a;return _classCallCheck$d(this,t),(a=_possibleConstructorReturn$b(this,_getPrototypeOf$b(t).call(this,o,"RtmRemoteInvitation",!0))).callerId=e,a.callId=r,a.getSession=n,a.logger=o,a._content=i,a._channelId=s,a.state=RemoteInvitationState.INVITATION_RECEIVED,a.remoteInvitationEnd$=merge(fromEvent(_assertThisInitialized$b(a),"RemoteInvitationCanceled"),fromEvent(_assertThisInitialized$b(a),"RemoteInvitationRefused"),fromEvent(_assertThisInitialized$b(a),"RemoteInvitationAccepted"),fromEvent(_assertThisInitialized$b(a),"RemoteInvitationFailure")).pipe(first(),subscribeOn(async)),a._response="",a.onRemoteInvitationAccepted=function(){a.state===RemoteInvitationState.ACCEPT_SENT_TO_LOCAL?a.state=RemoteInvitationState.ACCEPTED:a.log(EndedInvitationLogMessage,"RemoteInvitationAccepted");},a.onRemoteInvitationCanceled=function(){a.isRemoteInvitationEnd()?a.log(EndedInvitationLogMessage,"RemoteInvitationCanceled"):a.state=RemoteInvitationState.CANCELED;},a.onRemoteInvitationFailure=function(){a.isRemoteInvitationEnd()?a.log(EndedInvitationLogMessage,"RemoteInvitationFailure"):a.state=RemoteInvitationState.FAILURE;},a.onRemoteInvitationRefused=function(){a.state===RemoteInvitationState.INVITATION_RECEIVED?a.state=RemoteInvitationState.REFUSED:a.log(EndedInvitationLogMessage,"RemoteInvitationRefused");},a.remoteInvitationEnd$.pipe(timeout(INVITATION_EXPIRE_TIMEOUT),takeUntil(a.remoteInvitationEnd$)).subscribe({error:function(e){a.isRemoteInvitationEnd()?a.log(EndedInvitationLogMessage,"RemoteInvitationFailure"):(a.onRemoteInvitationFailure(),isTimeout(e)?a.emit("RemoteInvitationFailure",RemoteInvitationFailureReason.INVITATION_EXPIRE):a.emit("RemoteInvitationFailure",RemoteInvitationFailureReason.UNKNOWN));}}),a}return _inherits$b(t,createEventBase()),_createClass$9(t,[{key:"channelId",get:function(){return this._channelId},set:function(e){throw new RtmInvalidArgumentError('Cannot set the "response" of the RemoteInvitation instance.',INVITATION_API_CALL_ERR_INVALID_ARGUMENT)}},{key:"content",get:function(){return this._content},set:function(e){throw new RtmInvalidArgumentError('Cannot set the "content" of the RemoteInvitation instance.',INVITATION_API_CALL_ERR_INVALID_ARGUMENT)}},{key:"response",get:function(){return this._response},set:function(e){if(this.isRemoteInvitationEnd())throw new RtmInvalidStatusError("The response set failure. The call invitation has already ended.",INVITATION_API_CALL_ERR_ALREADY_END);if(this.state!==RemoteInvitationState.INVITATION_RECEIVED)throw new RtmInvalidStatusError(["Cannot set the response under the %s state",this.state],INVITATION_API_CALL_ERR_ALREADY_ACCEPT);if(new Blob([e]).size>INVITATION_EXTRA_MAX_BYTES)throw new RtmInvalidArgumentError('The length of the "content" overflows. The number of bytes representing content must not exceed 8 Ã 1024 if encoded in UTF-8.',INVITATION_API_CALL_ERR_INVALID_ARGUMENT);this._response=e;}}]),_createClass$9(t,[{key:"accept",value:function(){var e=this;if(this.isRemoteInvitationEnd())throw new RtmInvalidStatusError("The local invitation has ended. Cannot accept.",INVITATION_API_CALL_ERR_ALREADY_END);if(this.state===RemoteInvitationState.ACCEPT_SENT_TO_LOCAL)throw new RtmInvalidStatusError("The remote invitation is accepting. Cannot do the operation.",INVITATION_API_CALL_ERR_ALREADY_ACCEPT);this.state=RemoteInvitationState.ACCEPT_SENT_TO_LOCAL,defer$1(_asyncToGenerator$7(regenerator.mark(function t(){var r;return regenerator.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.getSession().sendInvitationMessage({peerId:e.callerId,callId:e.callId,extra:e.response,type:"CallAccept",isAcceptAck:!1,channelId:e.channelId});case 2:if(r=t.sent,r.hasPeerReceived){t.next=6;break}throw new RtmUnavailableError;case 6:return t.next=8,fromEvent(e,"RemoteInvitationAccepted").toPromise();case 8:case"end":return t.stop()}},t)}))).pipe(retryWhen(function(e){return e.pipe(delay(REMOTE_INVITATION_ACCEPT_RESEND_INTERVAL))}),timeout(REMOTE_INVITATION_WAIT_ACCEPT_ACK_TIMEOUT),takeUntil(this.remoteInvitationEnd$),throwIfEmpty()).subscribe({error:function(t){e.isRemoteInvitationEnd()?t instanceof EmptyError||e.log(EndedInvitationLogMessage,"RemoteInvitationFailure"):(e.logError(t),e.onRemoteInvitationFailure(),e.emit("RemoteInvitationFailure",RemoteInvitationFailureReason.ACCEPT_FAILURE));}});}},{key:"refuse",value:function(){if(this.state===RemoteInvitationState.ACCEPT_SENT_TO_LOCAL)throw new RtmInvalidStatusError("The remote invitation is accepting. Cannot do the operation.",INVITATION_API_CALL_ERR_ALREADY_ACCEPT);if(this.isRemoteInvitationEnd())throw new RtmInvalidStatusError("The invitation is end. Cannot refuse",INVITATION_API_CALL_ERR_ALREADY_END);this.getSession().sendInvitationMessage({peerId:this.callerId,callId:this.callId,extra:this.response,type:"CallReject",channelId:this.channelId}),this.onRemoteInvitationRefused(),this.emit("RemoteInvitationRefused");}},{key:"onCancelReceived",value:function(e){this.isRemoteInvitationEnd()?this.log(EndedInvitationLogMessage,"RemoteInvitationCanceled"):(this._content=e,this.onRemoteInvitationCanceled(),this.emit("RemoteInvitationCanceled",e));}},{key:"onAcceptAckReceived",value:function(){this.isRemoteInvitationEnd()?this.log(EndedInvitationLogMessage,"RemoteInvitationAccepted"):(this.onRemoteInvitationAccepted(),this.emit("RemoteInvitationAccepted"));}},{key:"isRemoteInvitationEnd",value:function(){return [RemoteInvitationState.ACCEPTED,RemoteInvitationState.REFUSED,RemoteInvitationState.CANCELED,RemoteInvitationState.FAILURE].includes(this.state)}}]),t}(),InvitationManager=function(e){function t(e,r){var n;return _classCallCheck$d(this,t),(n=_possibleConstructorReturn$b(this,_getPrototypeOf$b(t).call(this,r,"InvitationManager"))).logger=r,n.getSession=void 0,n.invitationDispatcher=new events,n.outgoingLocalInvitations=new Map,n.receivedRemoteInvitations=new LRUCache(void 0,{maxlen:LRU_MAX_ITEMS}),n.getSession=genGetSession(e),n.invitationDispatcher.on("remoteInvitationToManager",function(e){var t=e.callId,o=e.extra,i=e.callerId,s=e.channelId;if(!n.receivedRemoteInvitations.has(t)){var a=new RtmRemoteInvitation(i,t,n.getSession,r,o,s);a.remoteInvitationEnd$.subscribe(function(){n.receivedRemoteInvitations.delete(t),a.removeAllListeners();}),n.receivedRemoteInvitations.set(t,a),n.emit("remoteInvitationInstance",a);}}),n.invitationDispatcher.on("acceptAckToRemoteInvitation",function(e){var t=e.callId,r=n.receivedRemoteInvitations.get(t);r&&r.onAcceptAckReceived();}),n.invitationDispatcher.on("cancelToRemoteInvitation",function(e){var t=e.callId,r=e.extra,o=n.receivedRemoteInvitations.get(t);o&&o.onCancelReceived(r);}),n.invitationDispatcher.on("acceptToLocalInvitation",function(e){var t=e.callId,r=e.extra,o=n.outgoingLocalInvitations.get(t);o&&o.onAcceptReceived(r);}),n.invitationDispatcher.on("refuseToLocalInvitation",function(e){var t=e.callId,r=e.extra,o=n.outgoingLocalInvitations.get(t);o&&o.onRefuseReceived(r);}),n}return _inherits$b(t,createEventBase()),_createClass$9(t,[{key:"invitationMessageHandler",value:function(e){var t=e.body,r=t.callId,n=t.extra,o=void 0===n?"":n,i=t.type,s=t.channel,a=void 0===s?"":s,u=e.type,l=e.peerId,c=e.serverReceivedTs;switch(u){case"CallAccept":return void("ack"===i?this.invitationDispatcher.emit("acceptAckToRemoteInvitation",{callId:r}):"request"===i&&this.invitationDispatcher.emit("acceptToLocalInvitation",{callId:r,extra:o}));case"CallInvite":return void this.invitationDispatcher.emit("remoteInvitationToManager",{callId:r,callerId:l,extra:o,channelId:a});case"CallCancel":if("0"===r){var p="".concat(END_CALL_PREFIX,"_").concat(a,"_").concat(o);return void this.getSession().emit("peerTextMessage",{peerId:l,properties:{serverReceivedTs:c,isOfflineMessage:!1},text:p})}return void this.invitationDispatcher.emit("cancelToRemoteInvitation",{callId:r,extra:o});case"CallReject":return void this.invitationDispatcher.emit("refuseToLocalInvitation",{callId:r,extra:o});default:throw assertNever("invitationType",u)}}},{key:"genLocalInvitation",value:function(e){var t=this,r=new RtmLocalInvitation(e,this.getSession,this.logger);return r.localInvitationEnd$.subscribe(function(){r.removeAllListeners(),t.outgoingLocalInvitations.delete(r.callId);}),this.outgoingLocalInvitations.set(r.callId,r),r}}]),t}(),FUNC_ERROR_TEXT$2="Expected a function";function throttle(e,t,r){var n=!0,o=!0;if("function"!=typeof e)throw new TypeError(FUNC_ERROR_TEXT$2);return isObject_1(r)&&(n="leading"in r?!!r.leading:n,o="trailing"in r?!!r.trailing:o),debounce_1(e,t,{leading:n,maxWait:t,trailing:o})}var throttle_1=throttle,_class,_temp;function _typeof$c(e){return (_typeof$c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _toConsumableArray$7(e){return _arrayWithoutHoles$7(e)||_iterableToArray$7(e)||_nonIterableSpread$7()}function _nonIterableSpread$7(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray$7(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}function _arrayWithoutHoles$7(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}function asyncGeneratorStep$8(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value;}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o);}function _asyncToGenerator$8(e){return function(){var t=this,r=arguments;return new Promise(function(n,o){var i=e.apply(t,r);function s(e){asyncGeneratorStep$8(i,n,o,s,a,"next",e);}function a(e){asyncGeneratorStep$8(i,n,o,s,a,"throw",e);}s(void 0);})}}function _classCallCheck$e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function _createClass$a(e,t,r){return t&&_defineProperties$a(e.prototype,t),r&&_defineProperties$a(e,r),e}function _possibleConstructorReturn$c(e,t){return !t||"object"!==_typeof$c(t)&&"function"!=typeof t?_assertThisInitialized$c(e):t}function _assertThisInitialized$c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf$c(e){return (_getPrototypeOf$c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits$c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf$c(e,t);}function _setPrototypeOf$c(e,t){return (_setPrototypeOf$c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor(e,t,r,n,o){var i={};return Object.keys(n).forEach(function(e){i[e]=n[e];}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=r.slice().reverse().reduce(function(r,n){return n(e,t,r)||r},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}const MemberJoinState={JOINED:0,LEFT:1};var ConnectionState=RtmStatusCode$1.ConnectionState,Channel=(_temp=function(e){function t(e,r,n,o){var i;return _classCallCheck$e(this,t),(i=_possibleConstructorReturn$c(this,_getPrototypeOf$c(t).call(this,o,"RtmChannel",!0))).channelId=e,i.client=n,i.onMemberCountUpdated=throttle_1(function(e){e!==i.memberCount&&(i.memberCount=e,i.emit("MemberCountUpdated",e));},MEMBER_COUNT_UPDATED_EVENT_INTERVAL),i.getSession=void 0,i.memberCount=0,i.memberJoinedLru=new LRUCache(void 0,{maxlen:LRU_MAX_ITEMS}),i.memberLeftLru=new LRUCache(void 0,{maxlen:LRU_MAX_ITEMS}),i.memberJoinStateLru=new LRUCache(void 0,{maxlen:LRU_MAX_ITEMS}),i.attributesSeqLru=new LRUCache(void 0,{maxlen:LRU_MAX_ITEMS}),i.onAttributesUpdated=function(e){var t=e.channelId,r=e.attributeMaps,n=e.instance,o=e.seq,s=n.toString(),a=i.attributesSeqLru.get(s);if((!a||o.greaterThan(a))&&(i.attributesSeqLru.set(s,o),t===i.channelId)){var u={},l=r,c=Array.isArray(l),p=0;for(l=c?l:l[Symbol.iterator]();;){var f;if(c){if(p>=l.length)break;f=l[p++];}else {if((p=l.next()).done)break;f=p.value;}var d=f,g=d.key,h=d.ms,b=d.value,_=d.origin;if("string"!=typeof g||!long_1.isLong(h)||"string"!=typeof b||!isValidId(_))break;u[g]={value:b,lastUpdateUserId:_,lastUpdateTs:h.toNumber()};}i.emit("AttributesUpdated",u);}},i.onChannelTextMessage=function(e){var t=e.memberId,r=e.text,n=e.channelId,o=e.properties;n===i.channelId&&i.emit("ChannelMessage",{text:r,messageType:RtmStatusCode$1.MessageType.TEXT},t,o);},i.onChannelRawMessage=function(e){var t=e.desc,r=e.raw,n=e.memberId,o=e.channelId,s=e.properties;o===i.channelId&&i.emit("ChannelMessage",{messageType:RtmStatusCode$1.MessageType.RAW,rawMessage:r,description:t},n,s);},i.onMemberNotice=function(e){var t=e.channelId,r=e.instance,n=e.memberId,o=e.seq,s=e.type,a=e.size;if(t===i.channelId){var u=r.toString(),l=o.toString(),c={MemberLeft:i.memberLeftLru,MemberJoined:i.memberJoinedLru,MemberCountUpdated:void 0}[s];if(c){if(c.has(u+l))return void i.log("received duplicated %s notice (seq: %s), channel '%s', member '%s'",s,l,i.channelId,n);if(c.set(u+l,void 0),"string"!=typeof n)return;if(n!==i.getSession().context.uid){var p=i.memberJoinStateLru.get(n);if(p===MemberJoinState.JOINED&&"MemberJoined"===s)return void i.log("received duplicated %s state (seq: %s), channel '%s', member '%s'",s,l,i.channelId,n);if(p===MemberJoinState.LEFT&&"MemberLeft"===s)return void i.log("received duplicated %s state (seq: %s), channel '%s', member '%s'",s,l,i.channelId,n)}i.memberJoinStateLru.set(n,"MemberJoined"===s?MemberJoinState.JOINED:MemberJoinState.LEFT);}i.info("Channel %s - %s, memberId: %s",s,i.channelId,"MemberCountUpdated"===s?"[unknown]":n);var f=n===i.getSession().context.uid;"MemberLeft"===s&&isValidId(n)?(f||i.emit(s,n),i.onMemberCountUpdated(a)):"MemberJoined"===s&&isValidId(n)?(f||i.emit(s,n),i.onMemberCountUpdated(a)):"MemberCountUpdated"===s&&"number"==typeof a&&i.onMemberCountUpdated(a);}},i.getSession=genGetSession(r),i.info("A channel created, id %s",e),i}return _inherits$c(t,createEventBase()),_createClass$a(t,[{key:"join",value:function(){var e=_asyncToGenerator$8(regenerator.mark(function e(){var t;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(isValidId(this.channelId)){e.next=2;break}throw new RtmInvalidArgumentError([invalidArgumentMessage,"channelId"],JOIN_CHANNEL_ERR_INVALID_ARGUMENT);case 2:e.prev=2,t=this.getSession(),e.next=9;break;case 6:throw e.prev=6,e.t0=e.catch(2),new RtmInvalidStatusError("The client is not logged in. Cannot do the operation",JOIN_CHANNEL_ERR_USER_NOT_LOGGED_IN);case 9:if(!t.joinedChannels.has(this)){e.next=12;break}throw sendReport("ChnJoin",{cname:this.channelId,lts:long_1.fromNumber(Date.now()),userId:t.context.uid,elapse:getElapse(t.startTime),errCode:JOIN_CHANNEL_ERR_ALREADY_JOINED,sid:getSid(t.instanceId)}),new RtmInvalidStatusError("The channel has joined. Cannot rejoin",JOIN_CHANNEL_ERR_ALREADY_JOINED);case 12:if(e.prev=12,this.log("Joining the channel %s",this.channelId),!this.hasOtherChannelJoined()){e.next=17;break}throw sendReport("ChnJoin",{cname:this.channelId,lts:long_1.fromNumber(Date.now()),userId:t.context.uid,elapse:getElapse(t.startTime),errCode:JOIN_CHANNEL_ERR_ALREADY_JOINED_CHANNEL_OF_SAME_ID,sid:getSid(t.instanceId)}),new RtmInvalidStatusError("A channel of the same channel ID has already joined. Cannot rejoin",JOIN_CHANNEL_ERR_ALREADY_JOINED_CHANNEL_OF_SAME_ID);case 17:if(t.joinedChannels.size!==MAX_JOINED_CHANNELS){e.next=20;break}throw sendReport("ChnJoin",{cname:this.channelId,lts:long_1.fromNumber(Date.now()),userId:t.context.uid,elapse:getElapse(t.startTime),errCode:JOIN_CHANNEL_ERR_EXCEED_LIMIT,sid:getSid(t.instanceId)}),new RtmLimitExceededError("The joined channels has exceeded the limit of 20",JOIN_CHANNEL_ERR_EXCEED_LIMIT);case 20:return sendReport("ChnJoin",{cname:this.channelId,lts:long_1.fromNumber(Date.now()),userId:t.context.uid,elapse:getElapse(t.startTime),errCode:0,sid:getSid(t.instanceId)}),e.next=23,t.requestChannelJoin(this,this.channelId);case 23:sendReport("ChnJoinRes",{cname:this.channelId,lts:long_1.fromNumber(Date.now()),elapse:getElapse(t.startTime),errCode:0,sid:getSid(t.instanceId),serverErrCode:0,userId:t.context.uid}),this.info("The channel %s joined successfully",this.channelId),t.on("channelTextMessage",this.onChannelTextMessage),t.on("channelRawMessage",this.onChannelRawMessage),t.on("memberNotice",this.onMemberNotice),t.on("channelAttributesUpdated",this.onAttributesUpdated),e.next=40;break;case 31:if(e.prev=31,e.t1=e.catch(12),this.logError(e.t1),!isRtmError(e.t1)){e.next=36;break}throw e.t1;case 36:if(!isTimeout(e.t1)){e.next=39;break}throw sendReport("ChnJoinRes",{cname:this.channelId,lts:long_1.fromNumber(Date.now()),elapse:getElapse(t.startTime),errCode:JOIN_CHANNEL_TIMEOUT,sid:getSid(t.instanceId),serverErrCode:0,userId:t.context.uid}),new RtmTimeoutError(["Join channel %s timed out",this.channelId],JOIN_CHANNEL_TIMEOUT);case 39:throw new RtmUnknownError(["The channel %s join failure",this.channelId],JOIN_CHANNEL_ERR_FAILURE,e.t1);case 40:case"end":return e.stop()}},e,this,[[2,6],[12,31]])}));return function(){return e.apply(this,arguments)}}()},{key:"leave",value:function(){var e=_asyncToGenerator$8(regenerator.mark(function e(){var t;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:e.prev=0,t=this.getSession(),e.next=7;break;case 4:throw e.prev=4,e.t0=e.catch(0),new RtmInvalidStatusError("The client is not logged in. Cannot do the operation",LEAVE_CHANNEL_ERR_USER_NOT_LOGGED_IN);case 7:if(t.joinedChannels.has(this)){e.next=9;break}throw new RtmInvalidStatusError("The channel does not join. Cannot do the operation",LEAVE_CHANNEL_ERR_NOT_IN_CHANNEL);case 9:e.prev=9,t.requestChannelLeave(this,this.channelId),this.memberLeftLru.empty(),this.memberJoinedLru.empty(),this.attributesSeqLru.empty(),this.memberJoinStateLru.empty(),this.memberCount=0,t.removeListener("channelTextMessage",this.onChannelTextMessage),t.removeListener("channelRawMessage",this.onChannelRawMessage),t.removeListener("memberNotice",this.onMemberNotice),t.removeListener("channelAttributesUpdated",this.onAttributesUpdated),e.next=31;break;case 22:if(e.prev=22,e.t1=e.catch(9),this.logError(e.t1),!isRtmError(e.t1)){e.next=29;break}throw !e.t1.code&&(e.t1.code=LEAVE_CHANNEL_ERR_REJECTED),sendReport("ChnLeave",{cname:this.channelId,lts:long_1.fromNumber(Date.now()),elapse:getElapse(t.startTime),errCode:LEAVE_CHANNEL_ERR_REJECTED,sid:getSid(t.instanceId),userId:t.context.uid}),e.t1;case 29:throw sendReport("ChnLeave",{cname:this.channelId,lts:long_1.fromNumber(Date.now()),elapse:getElapse(t.startTime),errCode:LEAVE_CHANNEL_ERR_FAILURE,sid:getSid(t.instanceId),userId:t.context.uid}),new RtmUnknownError("The channel leave failure",LEAVE_CHANNEL_ERR_FAILURE,e.t1);case 31:sendReport("ChnLeave",{cname:this.channelId,lts:long_1.fromNumber(Date.now()),elapse:getElapse(t.startTime),errCode:0,sid:getSid(t.instanceId),userId:t.context.uid});case 32:case"end":return e.stop()}},e,this,[[0,4],[9,22]])}));return function(){return e.apply(this,arguments)}}()},{key:"sendMessage",value:function(){var e=_asyncToGenerator$8(regenerator.mark(function e(t){var r,n,o,i,s,a,u=this,l=arguments;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=l.length>1&&void 0!==l[1]?l[1]:{},n=r.enableHistoricalMessaging,o=void 0!==n&&n,isPlainObject$1(t)){e.next=3;break}throw new RtmInvalidArgumentError("Message is not valid",CHANNEL_MESSAGE_ERR_INVALID_MESSAGE);case 3:if(void 0===t.messageType&&(void 0!==t.rawMessage?t.messageType="RAW":t.messageType="TEXT"),i=!0,"RAW"===t.messageType&&void 0!==t.text&&(i=!1),"TEXT"===t.messageType&&(void 0!==t.rawMessage&&(i=!1),void 0!==t.description&&(i=!1)),i){e.next=9;break}throw new RtmInvalidArgumentError("Message is not valid",CHANNEL_MESSAGE_ERR_INVALID_MESSAGE);case 9:if(this.client.connectionState!==ConnectionState.RECONNECTING){e.next=12;break}return s=Date.now(),e.abrupt("return",new Promise(function(e,r){var n,i=function(){var i=_asyncToGenerator$8(regenerator.mark(function i(){var a,l;return regenerator.wrap(function(i){for(;;)switch(i.prev=i.next){case 0:i.prev=0,a=u.getSession(),i.next=7;break;case 4:throw i.prev=4,i.t0=i.catch(0),new RtmInvalidStatusError("The client is not logged in. Cannot do the operation",CHANNEL_MESSAGE_ERR_USER_NOT_LOGGED_IN);case 7:if(l=Date.now()-s,i.prev=8,"TEXT"!==t.messageType){i.next=15;break}return i.next=12,a.sendTextMessage(t.text,u.channelId,!1,{enableHistoricalMessaging:o,enableOfflineMessaging:!1},MESSAGE_SEND_TIMEOUT-l);case 12:e(),i.next=23;break;case 15:if("RAW"!==t.messageType){i.next=22;break}return void 0===t.description&&(t.description=""),i.next=19,a.sendRawMessage(t.rawMessage,t.description,u.channelId,!1,{enableHistoricalMessaging:o,enableOfflineMessaging:!1},MESSAGE_SEND_TIMEOUT-l);case 19:e(),i.next=23;break;case 22:r(new RtmInvalidArgumentError("Invalid message type",CHANNEL_MESSAGE_ERR_INVALID_MESSAGE));case 23:return i.abrupt("return");case 26:i.prev=26,i.t1=i.catch(8),isTimeout(i.t1)&&r(new RtmTimeoutError(genTimeoutMessage(u.name,"sendMessageToPeer",MESSAGE_SEND_TIMEOUT),CHANNEL_MESSAGE_ERR_TIMEOUT)),isRtmError(i.t1)&&r(i.t1),r(new RtmUnavailableError("Channel message send failure",CHANNEL_MESSAGE_ERR_FAILURE,i.t1));case 31:return i.prev=31,clearTimeout(n),i.finish(31);case 34:case"end":return i.stop()}},i,null,[[0,4],[8,26,31,34]])}));return function(){return i.apply(this,arguments)}}();u.client.internalEmitter.once("RECONNECTED",i),n=setTimeout(function(){u.client.internalEmitter.off("RECONNECTED",i),r(new RtmTimeoutError(genTimeoutMessage(u.name,"sendMessageToPeer",MESSAGE_SEND_TIMEOUT),CHANNEL_MESSAGE_ERR_TIMEOUT));},MESSAGE_RETRY_TIMEOUT);}));case 12:if(this.client.connectionState===ConnectionState.CONNECTED){e.next=14;break}throw new RtmInvalidStatusError("The client is not logged in. Cannot do the operation",CHANNEL_MESSAGE_ERR_USER_NOT_LOGGED_IN);case 14:e.prev=14,a=this.getSession(),e.next=21;break;case 18:throw e.prev=18,e.t0=e.catch(14),new RtmInvalidStatusError("The client is not logged in. Cannot do the operation",CHANNEL_MESSAGE_ERR_USER_NOT_LOGGED_IN);case 21:if(e.prev=21,a.joinedChannels.has(this)){e.next=24;break}throw new RtmInvalidStatusError("The channel does not join. Cannot do the operation",CHANNEL_MESSAGE_ERR_USER_NOT_LOGGED_IN);case 24:if("TEXT"!==t.messageType){e.next=29;break}return e.next=27,a.sendTextMessage(t.text,this.channelId,!1,{enableHistoricalMessaging:o,enableOfflineMessaging:!1});case 27:e.next=36;break;case 29:if("RAW"!==t.messageType){e.next=35;break}return void 0===t.description&&(t.description=""),e.next=33,a.sendRawMessage(t.rawMessage,t.description,this.channelId,!1,{enableHistoricalMessaging:o,enableOfflineMessaging:!1});case 33:e.next=36;break;case 35:throw new RtmInvalidArgumentError("Invalid message type",CHANNEL_MESSAGE_ERR_INVALID_MESSAGE);case 36:e.next=46;break;case 38:if(e.prev=38,e.t1=e.catch(21),!isTimeout(e.t1)){e.next=42;break}throw new RtmTimeoutError(genTimeoutMessage(this.name,"sendMessage",MESSAGE_SEND_TIMEOUT),CHANNEL_MESSAGE_ERR_TIMEOUT);case 42:if(!isRtmError(e.t1)){e.next=45;break}throw this.logError(e.t1),e.t1;case 45:throw new RtmUnknownError("The channel message send failure",CHANNEL_MESSAGE_ERR_FAILURE);case 46:case"end":return e.stop()}},e,this,[[14,18],[21,38]])}));return function(t){return e.apply(this,arguments)}}()},{key:"getMembers",value:function(){var e=_asyncToGenerator$8(regenerator.mark(function e(){var t,r,n;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:e.prev=0,e.prev=1,t=this.getSession(),e.next=8;break;case 5:throw e.prev=5,e.t0=e.catch(1),new RtmInvalidStatusError("The client is not logged in. Cannot do the operation",GET_MEMBERS_ERR_USER_NOT_LOGGED_IN);case 8:if(t.joinedChannels.has(this)){e.next=10;break}throw new RtmInvalidStatusError("The channel does not join. Cannot do the operation",GET_MEMBERS_ERR_NOT_IN_CHANNEL);case 10:return r=this.getSession().requestChannelMemberList(this.channelId),e.next=13,r.pipe(map$1(function(e){return e.memberInfos.map(function(e){return e.account})})).toPromise();case 13:return n=e.sent,this.info("Channel %s - get members success, %o",this.channelId,n),e.abrupt("return",n);case 18:if(e.prev=18,e.t1=e.catch(0),!isRtmError(e.t1)){e.next=23;break}throw this.logError(e.t1),e.t1;case 23:throw new RtmUnknownError("The channel members get failure",GET_MEMBERS_ERR_FAILURE);case 24:case"end":return e.stop()}},e,this,[[0,18],[1,5]])}));return function(){return e.apply(this,arguments)}}()},{key:"hasOtherChannelJoined",value:function(){var e=this;return !this.getSession().joinedChannels.has(this)&&_toConsumableArray$7(this.getSession().joinedChannels).some(function(t){return t.channelId===e.channelId})}}]),t}(),_class=_temp,_applyDecoratedDescriptor(_class.prototype,"join",[logged],Object.getOwnPropertyDescriptor(_class.prototype,"join"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"leave",[logged],Object.getOwnPropertyDescriptor(_class.prototype,"leave"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"sendMessage",[logged],Object.getOwnPropertyDescriptor(_class.prototype,"sendMessage"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"getMembers",[logged],Object.getOwnPropertyDescriptor(_class.prototype,"getMembers"),_class.prototype),_class),_class$1,_temp$1;function _typeof$d(e){return (_typeof$d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ownKeys$3(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n);}return r}function _objectSpread$2(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ownKeys$3(r,!0).forEach(function(t){_defineProperty$4(e,t,r[t]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ownKeys$3(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t));});}return e}function _slicedToArray$5(e,t){return _arrayWithHoles$5(e)||_iterableToArrayLimit$5(e,t)||_nonIterableRest$5()}function _nonIterableRest$5(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit$5(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e;}finally{try{n||null==a.return||a.return();}finally{if(o)throw i}}return r}function _arrayWithHoles$5(e){if(Array.isArray(e))return e}function _defineProperty$4(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function asyncGeneratorStep$9(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value;}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o);}function _asyncToGenerator$9(e){return function(){var t=this,r=arguments;return new Promise(function(n,o){var i=e.apply(t,r);function s(e){asyncGeneratorStep$9(i,n,o,s,a,"next",e);}function a(e){asyncGeneratorStep$9(i,n,o,s,a,"throw",e);}s(void 0);})}}function _classCallCheck$f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$b(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}function _createClass$b(e,t,r){return t&&_defineProperties$b(e.prototype,t),r&&_defineProperties$b(e,r),e}function _possibleConstructorReturn$d(e,t){return !t||"object"!==_typeof$d(t)&&"function"!=typeof t?_assertThisInitialized$d(e):t}function _assertThisInitialized$d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf$d(e){return (_getPrototypeOf$d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits$d(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf$d(e,t);}function _setPrototypeOf$d(e,t){return (_setPrototypeOf$d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _applyDecoratedDescriptor$1(e,t,r,n,o){var i={};return Object.keys(n).forEach(function(e){i[e]=n[e];}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=r.slice().reverse().reduce(function(r,n){return n(e,t,r)||r},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}var ConnectionChangeReason=RtmStatusCode$1.ConnectionChangeReason,ConnectionState$1=RtmStatusCode$1.ConnectionState,connectionStateCodeMap={DISCONNECTED:1,CONNECTING:2,CONNECTED:3,RECONNECTING:4,ABORTED:5},connectionStateChangeReason={LOGIN:1,LOGIN_SUCCESS:2,LOGIN_FAILURE:3,LOGIN_TIMEOUT:4,INTERRUPTED:5,LOGOUT:6,BANNED_BY_SERVER:7,REMOTE_LOGIN:8},Client=(_temp$1=function(e){function t(e,r,n,o){var i;return _classCallCheck$f(this,t),(i=_possibleConstructorReturn$d(this,_getPrototypeOf$d(t).call(this,r,"RtmClient",!0))).parameters=n,i.setParameters=o,i.connectionState=ConnectionState$1.DISCONNECTED,i.internalEmitter=new events,i.context=void 0,i.attributes={},i.loginPromise=void 0,i.attributeDrafts=new Set,i.session=void 0,i.lastLoginTime=void 0,i.reconnId=0,i.channelAttributesCacheLru=new LRUCache(void 0,{maxlen:CHANNEL_ATTRIBUTES_CACHE_MAX_LENGTH}),i.invitationManager=new InvitationManager(function(){return i.session},i.logger),i.subscribedPeerStatusCache={},i.peerStatusSeqLru=new LRUCache(void 0,{maxlen:LRU_MAX_ITEMS}),i.peerUnreachableTimers={},i.reconnectionTimer=void 0,i.userDropHandler=function(e){if(void 0!==i.reconnectionTimer&&window.clearTimeout(i.reconnectionTimer),i.connectionState!==ConnectionState$1.ABORTED)switch(e){case 11:return i.logError("Kicked off by remote session"),void i.onConnectionStateChanged(ConnectionState$1.ABORTED,ConnectionChangeReason.REMOTE_LOGIN);case 14:case 15:case 16:return i.logError("Server banned because of illegal ".concat({14:"User ID",15:"IP",16:"Channel Name"}[e])),void i.onConnectionStateChanged(ConnectionState$1.ABORTED,ConnectionChangeReason.BANNED_BY_SERVER);default:i.logError("User kicked off for unknown code: ".concat(e)),i.onConnectionStateChanged(ConnectionState$1.ABORTED,ConnectionChangeReason.INTERRUPTED);}},i.context=new Context(e,r),i.invitationManager.on("remoteInvitationInstance",function(e){i.emit("RemoteInvitationReceived",e);}),i}return _inherits$d(t,createEventBase()),_createClass$b(t,[{key:"renewToken",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){var r,n;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if("string"==typeof t&&0!==t.length){e.next=2;break}throw new RtmInvalidArgumentError("Invalid argument",RENEW_TOKEN_ERR_INVALID_ARGUMENT);case 2:if("string"!=typeof t){e.next=5;break}if(!(t.length<APP_ID_LENGTH||t.substr(3,APP_ID_LENGTH)!==this.context.appId)){e.next=5;break}throw new RtmInvalidArgumentError("Invalid token",RENEW_TOKEN_ERR_INVALID_TOKEN);case 5:if(this.connectionState!==ConnectionState$1.ABORTED){e.next=8;break}return e.next=8,new Promise(function(){});case 8:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=10;break}throw new RtmInvalidStatusError("The client is not logged in",RENEW_TOKEN_ERR_USER_NOT_LOGGED_IN);case 10:if(void 0!==this.session){e.next=12;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 12:return e.prev=12,e.next=15,this.session.connection.apClient.fetchAp(getUrl("ap-web-1.agora.io"),t).pipe(timeout(AP_REQUEST_TIMEOUT)).toPromise();case 15:r=e.sent,n=r.ticket,e.next=27;break;case 19:if(e.prev=19,e.t0=e.catch(12),e.t0.code!==LOGIN_ERR_INVALID_APP_ID&&e.t0.code!==LOGIN_ERR_INVALID_TOKEN){e.next=23;break}throw new RtmUnauthenticatedError("Invalid token",RENEW_TOKEN_ERR_INVALID_TOKEN);case 23:if(e.t0.code!==LOGIN_ERR_TOKEN_EXPIRED){e.next=25;break}throw new RtmUnauthenticatedError("The token expired",RENEW_TOKEN_ERR_TOKEN_EXPIRED);case 25:if(!isTimeout(e.t0)){e.next=27;break}throw new RtmTimeoutError("Renew token timed out",RENEW_TOKEN_ERR_FAILURE);case 27:this.context.token=t,this.session.curLoginSockets.filter(function(e){return void 0!==e}).forEach(function(e){return e.ticket=n});case 29:case"end":return e.stop()}},e,this,[[12,19]])}));return function(t){return e.apply(this,arguments)}}()},{key:"queryPeersOnlineStatus",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){var r,n,o=this;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=2;break}throw new RtmInvalidStatusError("The client is not logged in",QUERY_PEERS_ONLINE_STATUS_ERR_USER_NOT_LOGGED_IN);case 2:if(void 0!==this.session){e.next=4;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:if(!(!Array.isArray(t)||0===t.length||t.some(function(e){return !isValidId(e)})||t.length>256)){e.next=6;break}throw new RtmInvalidArgumentError("invalid arguments",QUERY_PEERS_ONLINE_STATUS_ERR_INVALID_ARGUMENT);case 6:return e.next=8,this.session.requestPeersOnlineStatus(t).toPromise();case 8:return r=e.sent,n=mapValues_1(keyBy_1(r.userInfos,"account"),function(e){var t=e.ts;return Boolean(t)}),Object.keys(n).forEach(function(e){if(e in o.subscribedPeerStatusCache&&o.subscribedPeerStatusCache[e]!==RtmStatusCode$1.PeerOnlineState.UNREACHABLE){var t=n[e]?RtmStatusCode$1.PeerOnlineState.ONLINE:RtmStatusCode$1.PeerOnlineState.OFFLINE;o.emit("PeersOnlineStatusChanged",_defineProperty$4({},e,t)),o.subscribedPeerStatusCache[e]=t;}}),e.abrupt("return",n);case 12:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"getChannelMemberCount",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){var r,n,o,i,s,a,u,l,c,p,f,d,g,h=this;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=2;break}throw new RtmInvalidStatusError("The client is not logged in",GET_CHANNEL_MEMBER_COUNT_ERR_USER_NOT_LOGGED_IN);case 2:if(void 0!==this.session){e.next=4;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:if(!(t.length>32)){e.next=6;break}throw new RtmInvalidArgumentError("getChannelMemberCount exceed limit of 32 channelIds",GET_CHANNEL_MEMBER_COUNT_ERR_EXCEED_LIMIT);case 6:if(Array.isArray(t)&&0!==t.length){e.next=8;break}throw new RtmInvalidArgumentError("Invalid arguments: channelIds",GET_CHANNEL_MEMBER_COUNT_ERR_INVALID_ARGUMENT);case 8:r=t,n=Array.isArray(r),o=0,r=n?r:r[Symbol.iterator]();case 9:if(!n){e.next=15;break}if(!(o>=r.length)){e.next=12;break}return e.abrupt("break",24);case 12:i=r[o++],e.next=19;break;case 15:if(!(o=r.next()).done){e.next=18;break}return e.abrupt("break",24);case 18:i=o.value;case 19:if(isValidId(s=i)){e.next=22;break}throw new RtmInvalidArgumentError(["getChannelMemberCount channel id %s is invalid",s],GET_CHANNEL_MEMBER_COUNT_ERR_INVALID_ARGUMENT);case 22:e.next=9;break;case 24:return e.next=26,this.session.requestGetChannelMemberCount(t).toPromise();case 26:a=e.sent,u=a.groupInfos,l={},c=function(){if(f){if(d>=p.length)return "break";g=p[d++];}else {if((d=p.next()).done)return "break";g=d.value;}var e=g,t=e.group,r=e.memberCount;isValidId(t)&&"number"==typeof r&&(h.session.joinedChannels.forEach(function(e){e.channelId===t&&e.onMemberCountUpdated(r);}),l[t]=r);},p=u,f=Array.isArray(p),d=0,p=f?p:p[Symbol.iterator]();case 31:if("break"!==c()){e.next=34;break}return e.abrupt("break",36);case 34:e.next=31;break;case 36:return e.abrupt("return",l);case 37:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"setLocalUserAttributes",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){var r,n,o,i,s,a,u,l,c,p;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!(Object.keys(t).length>32)){e.next=2;break}throw new RtmLimitExceededError("Exceed the limit of 32 attributes",ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW);case 2:if(0!==Object.keys(t).length){e.next=4;break}throw new RtmInvalidArgumentError("The attributes is an empty object",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 4:r=0,n=0,o=Object.entries(t);case 6:if(!(n<o.length)){e.next=21;break}if(i=_slicedToArray$5(o[n],2),s=i[0],a=i[1],u=new Blob([s]).size,!(0===s.length||u>32)){e.next=11;break}throw new RtmInvalidArgumentError("Invalid attribute key",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 11:if(!((l=new Blob([a]).size)>8192)){e.next=14;break}throw new RtmLimitExceededError("Invalid attribute value, over the limit of 8KB",ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW);case 14:if(0!==a.length){e.next=16;break}throw new RtmInvalidArgumentError("Invalid attribute value",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 16:r+=u,r+=l;case 18:n++,e.next=6;break;case 21:if(!(r>16384)){e.next=23;break}throw new RtmLimitExceededError("The attributes size overflow",ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW);case 23:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=25;break}throw new RtmInvalidStatusError("The client is not logged in",ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN);case 25:if(void 0!==this.session){e.next=27;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 27:return c=this.session.requestSetLocalUserAttributes(t).toPromise(),p={attribute:t,promise:c},this.attributeDrafts.add(p),e.prev=30,e.next=33,c;case 33:this.attributes=t,e.next=41;break;case 36:if(e.prev=36,e.t0=e.catch(30),!isRtmError(e.t0)){e.next=40;break}throw e.t0;case 40:throw new RtmInvalidArgumentError("arguments is not valid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 41:return e.prev=41,this.attributeDrafts.delete(p),e.finish(41);case 44:case"end":return e.stop()}},e,this,[[30,36,41,44]])}));return function(t){return e.apply(this,arguments)}}()},{key:"setChannelAttributes",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t,r){var n,o,i,s,a,u,l,c,p,f,d,g,h,b=arguments;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=b.length>2&&void 0!==b[2]?b[2]:{},o=n.enableNotificationToChannelMembers,i=void 0!==o&&o,!(Object.keys(r).length>32)){e.next=3;break}throw new RtmLimitExceededError("Exceed the limit of 32 attributes",ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW);case 3:if(0!==Object.keys(r).length){e.next=5;break}throw new RtmInvalidArgumentError("The attributes is an empty object",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 5:s=0,a=0,u=Object.entries(r);case 7:if(!(a<u.length)){e.next=22;break}if(l=_slicedToArray$5(u[a],2),c=l[0],p=l[1],f=new Blob([c]).size,!(0===c.length||f>32)){e.next=12;break}throw new RtmInvalidArgumentError("Invalid attribute key",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 12:if(!((d=new Blob([p]).size)>8192)){e.next=15;break}throw new RtmLimitExceededError("Invalid attribute value, over the limit of 8KB",ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW);case 15:if(0!==p.length){e.next=17;break}throw new RtmInvalidArgumentError("Invalid attribute value",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 17:s+=f,s+=d;case 19:a++,e.next=7;break;case 22:if(!(s>32768)){e.next=24;break}throw new RtmLimitExceededError("The attributes size overflow",ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW);case 24:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=26;break}throw new RtmInvalidStatusError("The client is not logged in",ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN);case 26:if(void 0!==this.session){e.next=28;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 28:return g=this.session.requestSetChannelAttributes(t,r,i).toPromise(),e.prev=29,e.next=32,g;case 32:h=mapValues_1(r,function(e){return new Blob([e]).size}),this.channelAttributesCacheLru.set(t,h),e.next=41;break;case 36:if(e.prev=36,e.t0=e.catch(29),!isRtmError(e.t0)){e.next=40;break}throw e.t0;case 40:throw new RtmInvalidArgumentError("arguments is not valid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 41:case"end":return e.stop()}},e,this,[[29,36]])}));return function(t,r){return e.apply(this,arguments)}}()},{key:"addOrUpdateLocalUserAttributes",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){var r,n,o,i,s,a,u,l,c,p,f,d,g;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(isPlainObject$1(t)){e.next=2;break}throw new RtmInvalidArgumentError("Invalid attribute",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 2:if(0!==Object.keys(t).length){e.next=4;break}throw new RtmInvalidArgumentError("The attributes is an empty object",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 4:if(r=_objectSpread$2({},this.attributes,{},t),!(Object.keys(r).length>32)){e.next=7;break}throw new RtmLimitExceededError("Exceed the limit of 32 attributes",ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW);case 7:for(n=0,o=0,i=Object.entries(r);o<i.length;o++)s=_slicedToArray$5(i[o],2),a=s[0],u=s[1],n+=new Blob([a,u]).size;if(!(n>16384)){e.next=11;break}throw new RtmLimitExceededError("The attributes size overflow",ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW);case 11:l=0,c=Object.entries(t);case 12:if(!(l<c.length)){e.next=23;break}if(p=_slicedToArray$5(c[l],2),f=p[0],u=p[1],!(0===f.length||new Blob([f]).size>32)){e.next=16;break}throw new RtmInvalidArgumentError("Invalid attribute key",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 16:if(!(new Blob([u]).size>8192)){e.next=18;break}throw new RtmLimitExceededError("Invalid attribute value, over the limit of 8KB",ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW);case 18:if(0!==u.length){e.next=20;break}throw new RtmInvalidArgumentError("Invalid attribute value",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 20:l++,e.next=12;break;case 23:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=25;break}throw new RtmInvalidStatusError("The client is not logged in",ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN);case 25:if(void 0!==this.session){e.next=27;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 27:return d=this.session.requestAddOrUpdateLocalUserAttributes(t).toPromise(),g={attribute:r,promise:d},this.attributeDrafts.add(g),e.prev=30,e.next=33,d;case 33:this.attributes=r,e.next=41;break;case 36:if(e.prev=36,e.t0=e.catch(30),!isRtmError(e.t0)){e.next=40;break}throw e.t0;case 40:throw new RtmInvalidArgumentError("arguments is not valid",QUERY_PEERS_ONLINE_STATUS_ERR_INVALID_ARGUMENT);case 41:return e.prev=41,this.attributeDrafts.delete(g),e.finish(41);case 44:case"end":return e.stop()}},e,this,[[30,36,41,44]])}));return function(t){return e.apply(this,arguments)}}()},{key:"addOrUpdateChannelAttributes",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t,r){var n,o,i,s,a,u,l,c,p,f,d,g,h,b=arguments;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=b.length>2&&void 0!==b[2]?b[2]:{},o=n.enableNotificationToChannelMembers,i=void 0!==o&&o,isPlainObject$1(r)){e.next=3;break}throw new RtmInvalidArgumentError("Invalid attribute",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 3:if(0!==Object.keys(r).length){e.next=5;break}throw new RtmInvalidArgumentError("The attributes is an empty object",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 5:if(!(Object.keys(r).length>32)){e.next=7;break}throw new RtmLimitExceededError("Exceed the limit of 32 attributes",ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW);case 7:s=this.channelAttributesCacheLru.get(t,{}),a=mapValues_1(r,function(e){return new Blob([e]).size}),u=0,l=_objectSpread$2({},s,{},a),c=0,p=Object.entries(l);case 12:if(!(c<p.length)){e.next=25;break}if(f=_slicedToArray$5(p[c],2),d=f[0],g=f[1],!(0===d.length||new Blob([d]).size>32)){e.next=16;break}throw new RtmInvalidArgumentError("Invalid attribute key",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 16:if(!(g>8192)){e.next=18;break}throw new RtmLimitExceededError("Invalid attribute value, over the limit of 8KB",ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW);case 18:if(0!==g){e.next=20;break}throw new RtmInvalidArgumentError("Invalid attribute value",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 20:u+=g,u+=new Blob([d]).size;case 22:c++,e.next=12;break;case 25:if(!(u>32768)){e.next=27;break}throw new RtmLimitExceededError("The attributes size overflow",ATTRIBUTE_OPERATION_ERR_SIZE_OVERFLOW);case 27:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=29;break}throw new RtmInvalidStatusError("The client is not logged in",ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN);case 29:if(void 0!==this.session){e.next=31;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 31:return h=this.session.requestAddOrUpdateChannelAttributes(t,r,i).toPromise(),e.prev=32,e.next=35,h;case 35:this.channelAttributesCacheLru.set(t,l),e.next=43;break;case 38:if(e.prev=38,e.t0=e.catch(32),!isRtmError(e.t0)){e.next=42;break}throw e.t0;case 42:throw new RtmInvalidArgumentError("arguments is not valid",QUERY_PEERS_ONLINE_STATUS_ERR_INVALID_ARGUMENT);case 43:case"end":return e.stop()}},e,this,[[32,38]])}));return function(t,r){return e.apply(this,arguments)}}()},{key:"deleteLocalUserAttributesByKeys",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){var r,n,o,i,s,a,u;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(Array.isArray(t)&&0!==t.length&&!t.some(function(e){return 0===e.length||e.length>32})){e.next=2;break}throw new RtmInvalidStatusError("arguments is not valid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 2:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=4;break}throw new RtmInvalidStatusError("The client is not logged in",ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN);case 4:if(void 0!==this.session){e.next=6;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 6:return r=this.session.requestDeleteLocalUserAttributesByKeys(t).toPromise(),n={attribute:omit_1(this.attributes,t),promise:r},this.attributeDrafts.add(n),e.prev=9,e.next=12,r;case 12:o=t,i=Array.isArray(o),s=0,o=i?o:o[Symbol.iterator]();case 13:if(!i){e.next=19;break}if(!(s>=o.length)){e.next=16;break}return e.abrupt("break",27);case 16:a=o[s++],e.next=23;break;case 19:if(!(s=o.next()).done){e.next=22;break}return e.abrupt("break",27);case 22:a=s.value;case 23:u=a,delete this.attributes[u];case 25:e.next=13;break;case 27:e.next=34;break;case 29:if(e.prev=29,e.t0=e.catch(9),!isRtmError(e.t0)){e.next=33;break}throw e.t0;case 33:throw new RtmInvalidArgumentError("arguments is not valid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 34:return e.prev=34,this.attributeDrafts.delete(n),e.finish(34);case 37:case"end":return e.stop()}},e,this,[[9,29,34,37]])}));return function(t){return e.apply(this,arguments)}}()},{key:"deleteChannelAttributesByKeys",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t,r){var n,o,i,s,a,u,l,c,p,f=arguments;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=f.length>2&&void 0!==f[2]?f[2]:{},o=n.enableNotificationToChannelMembers,i=void 0!==o&&o,Array.isArray(r)&&0!==r.length&&isValidId(t)&&!r.some(function(e){return 0===e.length||e.length>32})){e.next=3;break}throw new RtmInvalidStatusError("arguments is not valid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 3:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=5;break}throw new RtmInvalidStatusError("The client is not logged in",ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN);case 5:if(void 0!==this.session){e.next=7;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 7:return s=this.session.requestDeleteChannelAttributesByKeys(t,r,i).toPromise(),e.prev=8,e.next=11,s;case 11:if(!(a=this.channelAttributesCacheLru.get(t))){e.next=28;break}u=r,l=Array.isArray(u),c=0,u=l?u:u[Symbol.iterator]();case 14:if(!l){e.next=20;break}if(!(c>=u.length)){e.next=17;break}return e.abrupt("break",28);case 17:p=u[c++],e.next=24;break;case 20:if(!(c=u.next()).done){e.next=23;break}return e.abrupt("break",28);case 23:p=c.value;case 24:delete a[p];case 26:e.next=14;break;case 28:e.next=35;break;case 30:if(e.prev=30,e.t0=e.catch(8),!isRtmError(e.t0)){e.next=34;break}throw e.t0;case 34:throw new RtmInvalidArgumentError("arguments is not valid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 35:case"end":return e.stop()}},e,this,[[8,30]])}));return function(t,r){return e.apply(this,arguments)}}()},{key:"clearLocalUserAttributes",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(){var t,r;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=2;break}throw new RtmInvalidStatusError("The client is not logged in",ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN);case 2:if(void 0!==this.session){e.next=4;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:return t=this.session.requestClearLocalUserAttributes().toPromise(),r={attribute:{},promise:t},this.attributeDrafts.add(r),e.prev=7,e.next=10,t;case 10:this.attributes={},e.next=18;break;case 13:if(e.prev=13,e.t0=e.catch(7),!isRtmError(e.t0)){e.next=17;break}throw e.t0;case 17:throw new RtmInvalidArgumentError("arguments is not valid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 18:return e.prev=18,this.attributeDrafts.delete(r),e.finish(18);case 21:case"end":return e.stop()}},e,this,[[7,13,18,21]])}));return function(){return e.apply(this,arguments)}}()},{key:"clearChannelAttributes",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){var r,n,o,i,s=arguments;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=s.length>1&&void 0!==s[1]?s[1]:{},n=r.enableNotificationToChannelMembers,o=void 0!==n&&n,this.connectionState===ConnectionState$1.CONNECTED){e.next=3;break}throw new RtmInvalidStatusError("The client is not logged in",ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN);case 3:if(void 0!==this.session){e.next=5;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 5:return i=this.session.requestClearChannelAttributes(t,o).toPromise(),e.prev=6,e.next=9,i;case 9:this.channelAttributesCacheLru.delete(t),e.next=17;break;case 12:if(e.prev=12,e.t0=e.catch(6),!isRtmError(e.t0)){e.next=16;break}throw e.t0;case 16:throw new RtmInvalidArgumentError("arguments is not valid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 17:case"end":return e.stop()}},e,this,[[6,12]])}));return function(t){return e.apply(this,arguments)}}()},{key:"getUserAttributes",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){var r,n,o;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(isValidId(t)){e.next=2;break}throw new RtmInvalidArgumentError("Not a valid user ID",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 2:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=4;break}throw new RtmInvalidStatusError("The client is not logged in",ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN);case 4:if(void 0!==this.session){e.next=6;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 6:return e.prev=6,e.next=9,this.session.requestGetUserAttributeKeys(t).toPromise();case 9:return r=e.sent,n=r.keys,e.next=13,this.session.requestGetUserAttributesByKeys(t,n.slice(0,32)).toPromise();case 13:o=e.sent,e.next=21;break;case 16:if(e.prev=16,e.t0=e.catch(6),!isRtmError(e.t0)){e.next=20;break}throw e.t0;case 20:throw new RtmInvalidArgumentError("arguments is not valid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 21:return e.abrupt("return",fromPairs_1(o.attributeInfos.map(function(e){return [e.key,e.value]})));case 22:case"end":return e.stop()}},e,this,[[6,16]])}));return function(t){return e.apply(this,arguments)}}()},{key:"getChannelAttributes",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){var r,n,o,i,s,a,u,l,c,p,f,d,g,h;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(isValidId(t)){e.next=2;break}throw new RtmInvalidArgumentError("Not a valid channel ID",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 2:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=4;break}throw new RtmInvalidStatusError("The client is not logged in",ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN);case 4:if(void 0!==this.session){e.next=6;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 6:return e.prev=6,e.next=9,this.session.requestGetChannelAttributesKeys(t).toPromise();case 9:return r=e.sent,n=r.keys,e.next=13,this.session.requestGetChannelAttributesByKeys(t,n.slice(0,32)).toPromise();case 13:o=e.sent,i=o.attributeMaps,e.next=22;break;case 17:if(e.prev=17,e.t0=e.catch(6),!isRtmError(e.t0)){e.next=21;break}throw e.t0;case 21:throw new RtmInvalidArgumentError("arguments is not valid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 22:s={},a=i,u=Array.isArray(a),l=0,a=u?a:a[Symbol.iterator]();case 24:if(!u){e.next=30;break}if(!(l>=a.length)){e.next=27;break}return e.abrupt("break",40);case 27:c=a[l++],e.next=34;break;case 30:if(!(l=a.next()).done){e.next=33;break}return e.abrupt("break",40);case 33:c=l.value;case 34:if(f=(p=c).key,d=p.ms,g=p.value,h=p.origin,"string"==typeof f&&long_1.isLong(d)&&"string"==typeof g&&isValidId(h)){e.next=37;break}return e.abrupt("break",40);case 37:s[f]={value:g,lastUpdateUserId:h,lastUpdateTs:d.toNumber()};case 38:e.next=24;break;case 40:return this.channelAttributesCacheLru.set(t,mapValues_1(s,function(e){var t=e.value;return new Blob([t]).size})),e.abrupt("return",s);case 42:case"end":return e.stop()}},e,this,[[6,17]])}));return function(t){return e.apply(this,arguments)}}()},{key:"getChannelAttributesByKeys",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t,r){var n,o,i,s,a,u,l,c,p,f,d,g,h;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=2;break}throw new RtmInvalidStatusError("The client is not logged in",ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN);case 2:if(void 0!==this.session){e.next=4;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:return checkValidAttrGetByKeysArgs(t,r),e.prev=5,e.next=8,this.session.requestGetChannelAttributesByKeys(t,r).toPromise();case 8:n=e.sent,o=n.attributeMaps,e.next=17;break;case 12:if(e.prev=12,e.t0=e.catch(5),!isRtmError(e.t0)){e.next=16;break}throw e.t0;case 16:throw new RtmInvalidArgumentError("arguments is not valid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 17:i={},s=this.channelAttributesCacheLru.get(t,{}),a=o,u=Array.isArray(a),l=0,a=u?a:a[Symbol.iterator]();case 20:if(!u){e.next=26;break}if(!(l>=a.length)){e.next=23;break}return e.abrupt("break",37);case 23:c=a[l++],e.next=30;break;case 26:if(!(l=a.next()).done){e.next=29;break}return e.abrupt("break",37);case 29:c=l.value;case 30:if(f=(p=c).key,d=p.ms,g=p.value,h=p.origin,"string"==typeof f&&long_1.isLong(d)&&"string"==typeof g&&isValidId(h)){e.next=33;break}return e.abrupt("break",37);case 33:s[f]=new Blob([g]).size,i[f]={value:g,lastUpdateUserId:h,lastUpdateTs:d.toNumber()};case 35:e.next=20;break;case 37:return this.channelAttributesCacheLru.set(t,s),e.abrupt("return",i);case 39:case"end":return e.stop()}},e,this,[[5,12]])}));return function(t,r){return e.apply(this,arguments)}}()},{key:"getUserAttributesByKeys",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t,r){var n;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=2;break}throw new RtmInvalidStatusError("The client is not logged in",ATTRIBUTE_OPERATION_ERR_USER_NOT_LOGGED_IN);case 2:if(void 0!==this.session){e.next=4;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:return checkValidAttrGetByKeysArgs(t,r),e.prev=5,e.next=8,this.session.requestGetUserAttributesByKeys(t,r).toPromise();case 8:n=e.sent,e.next=16;break;case 11:if(e.prev=11,e.t0=e.catch(5),!isRtmError(e.t0)){e.next=15;break}throw e.t0;case 15:throw new RtmInvalidArgumentError("arguments is not valid",ATTRIBUTE_OPERATION_ERR_INVALID_ARGUMENT);case 16:return e.abrupt("return",fromPairs_1(n.attributeInfos.map(function(e){return [e.key,e.value]})));case 17:case"end":return e.stop()}},e,this,[[5,11]])}));return function(t,r){return e.apply(this,arguments)}}()},{key:"login",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){var r,n,o;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=getRandomUInt64(),n=t.token,t.token===this.context.appId&&(n=void 0),sendReport("Session",{appId:this.context.appId,did:navigator.userAgent,elapse:getElapse(this.session&&this.session.startTime),index:{index1:t.uid,index2:this.context.appId,index3:"enableLogUpload=".concat(this.parameters.enableLogUpload)},installId:processId,lts:long_1.fromNumber(Date.now()),os:WEB_PLATFORM_TYPE,sid:getSid(r),token:n||"",userId:t.uid,ver:version}),isPlainObject$1(t)&&isValidId(t.uid)){e.next=6;break}throw new RtmInvalidArgumentError("not a valid user id",LOGIN_ERR_INVALID_ARGUMENT);case 6:if("string"!=typeof n||!n){e.next=12;break}if(!(n.length<APP_ID_LENGTH+3||n.substr(3,APP_ID_LENGTH)!==this.context.appId)){e.next=9;break}throw new RtmInvalidArgumentError("Invalid token",LOGIN_ERR_INVALID_TOKEN);case 9:this.context.token=n,e.next=14;break;case 12:if("string"==typeof n||isNil_1(n)){e.next=14;break}throw new RtmInvalidArgumentError('The "token" is not a valid string.',LOGIN_ERR_INVALID_ARGUMENT);case 14:return o=Date.now(),this.context.sid=getSid(r),this.loginPromise=this.loginImpl({uid:t.uid,instanceId:r}),this.info("RTM Client logging in as".concat(t.uid)),e.prev=18,e.next=21,this.loginPromise;case 21:e.next=28;break;case 23:throw e.prev=23,e.t0=e.catch(18),isRtmError(e.t0)&&sendReport("Link",{ackedServerIp:"",destServerIp:"",ec:e.t0.code||1,sc:e.t0.serverCode,elapse:getElapse(this.session&&this.session.startTime),lts:long_1.fromNumber(Date.now()),responseTime:Date.now()-o,sid:getSid(r),userId:t.uid}),this.context.token=void 0,e.t0;case 28:return e.prev=28,this.loginPromise=void 0,e.finish(28);case 31:case"end":return e.stop()}},e,this,[[18,23,28,31]])}));return function(t){return e.apply(this,arguments)}}()},{key:"logout",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(){return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!this.loginPromise){e.next=3;break}return e.next=3,this.loginPromise;case 3:if(void 0!==this.reconnectionTimer&&window.clearTimeout(this.reconnectionTimer),this.connectionState!==ConnectionState$1.DISCONNECTED){e.next=7;break}throw this.logError("Already in logout state"),new RtmInvalidStatusError("Logout failure. The client has already been logged out",LOGOUT_ERR_USER_NOT_LOGGED_IN);case 7:if(this.connectionState!==ConnectionState$1.ABORTED){e.next=11;break}return this.info('Reset connection state from "ABORTED" to "DISCONNECTED"'),this.onConnectionStateChanged(ConnectionState$1.DISCONNECTED,ConnectionChangeReason.LOGOUT),e.abrupt("return");case 11:if(void 0!==this.session){e.next=14;break}return this.onConnectionStateChanged(ConnectionState$1.DISCONNECTED,ConnectionChangeReason.LOGOUT),e.abrupt("return");case 14:return sendReport("Logout",{elapse:getElapse(this.session.startTime),lts:long_1.fromNumber(Date.now()),sid:getSid(this.session.instanceId),userId:this.context.uid}),e.next=17,this.session.logoutHandler();case 17:this.onConnectionStateChanged(ConnectionState$1.DISCONNECTED,ConnectionChangeReason.LOGOUT),this.log("Log out success");case 19:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"sendMessageToPeer",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t,r){var n,o,i,s,a,u,l,c,p,f,d,g,h,b,_,y,m=this,v=arguments;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=v.length>2&&void 0!==v[2]?v[2]:{},o=n.enableOfflineMessaging,i=void 0!==o&&o,s=n.enableHistoricalMessaging,a=void 0!==s&&s,isPlainObject$1(t)){e.next=3;break}throw new RtmInvalidArgumentError("Message is not valid",PEER_MESSAGE_ERR_INVALID_MESSAGE);case 3:if(void 0===t.messageType&&(void 0!==t.rawMessage?t.messageType="RAW":t.messageType="TEXT"),u=!0,l=!1,"RAW"===t.messageType&&void 0!==t.text&&(u=!1),"TEXT"===t.messageType&&("string"!=typeof t.text?u=!1:t.text.startsWith(END_CALL_PREFIX)&&(c=t.text.split("_"),p=_slicedToArray$5(c,3),f=p[0],d=p[1],void 0!==p[2]&&isValidId(d)&&f===END_CALL_PREFIX?l=!0:u=!1),void 0!==t.rawMessage&&(u=!1),void 0!==t.description&&(u=!1)),u){e.next=10;break}throw new RtmInvalidArgumentError("Message is not valid",PEER_MESSAGE_ERR_INVALID_MESSAGE);case 10:if(this.connectionState!==ConnectionState$1.RECONNECTING){e.next=13;break}return g=Date.now(),e.abrupt("return",new Promise(function(e,n){var o,s=function(){var s=_asyncToGenerator$9(regenerator.mark(function s(){var u,c,p,f,d;return regenerator.wrap(function(s){for(;;)switch(s.prev=s.next){case 0:if(void 0!==m.session){s.next=2;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 2:if(u=Date.now()-g,s.prev=3,"TEXT"!==t.messageType){s.next=22;break}if(!l){s.next=15;break}return c=t.text.split("_"),p=_slicedToArray$5(c,3),f=p[1],d=p[2],m.log("[rtm-API] EndCall message send api is called"),s.t0=e,s.next=11,m.session.sendInvitationMessage({peerId:r,type:"CallCancel",extra:d,channelId:f,callId:"0"});case 11:s.t1=s.sent,(0, s.t0)(s.t1),s.next=20;break;case 15:return s.t2=e,s.next=18,m.session.sendTextMessage(t.text,r,!0,{enableOfflineMessaging:i,enableHistoricalMessaging:a},MESSAGE_SEND_TIMEOUT-u);case 18:s.t3=s.sent,(0, s.t2)(s.t3);case 20:s.next=32;break;case 22:if("RAW"!==t.messageType){s.next=31;break}return void 0===t.description&&(t.description=""),s.t4=e,s.next=27,m.session.sendRawMessage(t.rawMessage,t.description,r,!0,{enableOfflineMessaging:i,enableHistoricalMessaging:a},MESSAGE_SEND_TIMEOUT-u);case 27:s.t5=s.sent,(0, s.t4)(s.t5),s.next=32;break;case 31:n(new RtmInvalidArgumentError("Invalid message type",PEER_MESSAGE_ERR_INVALID_MESSAGE));case 32:return s.abrupt("return");case 35:s.prev=35,s.t6=s.catch(3),isTimeout(s.t6)&&n(new RtmTimeoutError(genTimeoutMessage(m.name,"sendMessageToPeer",MESSAGE_SEND_TIMEOUT),PEER_MESSAGE_ERR_TIMEOUT)),isRtmError(s.t6)&&n(s.t6),n(new RtmUnavailableError("Peer-to-peer message send failure",PEER_MESSAGE_ERR_FAILURE,s.t6));case 40:return s.prev=40,clearTimeout(o),s.finish(40);case 43:case"end":return s.stop()}},s,null,[[3,35,40,43]])}));return function(){return s.apply(this,arguments)}}();m.internalEmitter.once("RECONNECTED",s),o=setTimeout(function(){m.internalEmitter.off("RECONNECTED",s),n(new RtmTimeoutError(genTimeoutMessage(m.name,"sendMessageToPeer",MESSAGE_SEND_TIMEOUT),PEER_MESSAGE_ERR_TIMEOUT));},MESSAGE_RETRY_TIMEOUT);}));case 13:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=15;break}throw new RtmInvalidStatusError("Failed to send the peer-to-peer message. The client is not logged in",PEER_MESSAGE_ERR_USER_NOT_LOGGED_IN);case 15:if(void 0!==this.session){e.next=17;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 17:if(e.prev=17,"TEXT"!==t.messageType){e.next=28;break}if(!l){e.next=25;break}return h=t.text.split("_"),b=_slicedToArray$5(h,3),_=b[1],y=b[2],this.log("[rtm-API] EndCall message send api is called"),e.next=24,this.session.sendInvitationMessage({peerId:r,type:"CallCancel",extra:y,channelId:_,callId:"0"});case 24:return e.abrupt("return",e.sent);case 25:return e.next=27,this.session.sendTextMessage(t.text,r,!0,{enableOfflineMessaging:i,enableHistoricalMessaging:a});case 27:return e.abrupt("return",e.sent);case 28:if("RAW"!==t.messageType){e.next=33;break}return void 0===t.description&&(t.description=""),e.next=32,this.session.sendRawMessage(t.rawMessage,t.description,r,!0,{enableOfflineMessaging:i,enableHistoricalMessaging:a});case 32:return e.abrupt("return",e.sent);case 33:throw new RtmInvalidArgumentError("Invalid message type",PEER_MESSAGE_ERR_INVALID_MESSAGE);case 36:if(e.prev=36,e.t0=e.catch(17),!isTimeout(e.t0)){e.next=40;break}throw new RtmTimeoutError(genTimeoutMessage(this.name,"sendMessageToPeer",MESSAGE_SEND_TIMEOUT),PEER_MESSAGE_ERR_TIMEOUT);case 40:if(!isRtmError(e.t0)){e.next=42;break}throw e.t0;case 42:throw new RtmUnavailableError("Peer-to-peer message send failure",PEER_MESSAGE_ERR_FAILURE,e.t0);case 43:case"end":return e.stop()}},e,this,[[17,36]])}));return function(t,r){return e.apply(this,arguments)}}()},{key:"createChannel",value:function(e){var t=this;if(!isValidId(e))throw new RtmInvalidArgumentError([invalidArgumentMessage,getName({channelId:e})],CREATE_CHANNEL_ERR_INVALID_ARGUMENT);return new Channel(e,function(){return t.session},this,this.logger)}},{key:"createLocalInvitation",value:function(e){if(!isValidId(e))throw new RtmInvalidArgumentError([invalidArgumentMessage,getName({calleeId:e})],INVITATION_API_CALL_ERR_INVALID_ARGUMENT);return this.invitationManager.genLocalInvitation(e)}},{key:"subscribePeersOnlineStatus",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){var r,n,o,i,s,a,u,l,c,p,f,d,g,h,b,_,y,m,v,$,E,I=this;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=2;break}throw new RtmInvalidStatusError("The client is not logged in",PEER_SUBSCRIPTION_STATUS_ERR_USER_NOT_LOGGED_IN);case 2:if(void 0!==this.session){e.next=4;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:if(Array.isArray(t)&&0!==t.length){e.next=6;break}throw new RtmInvalidArgumentError("Invalid arguments: peerIds",PEER_SUBSCRIPTION_STATUS_ERR_INVALID_ARGUMENT);case 6:r=t,n=Array.isArray(r),o=0,r=n?r:r[Symbol.iterator]();case 7:if(!n){e.next=13;break}if(!(o>=r.length)){e.next=10;break}return e.abrupt("break",22);case 10:i=r[o++],e.next=17;break;case 13:if(!(o=r.next()).done){e.next=16;break}return e.abrupt("break",22);case 16:i=o.value;case 17:if(isValidId(s=i)){e.next=20;break}throw new RtmInvalidArgumentError(["subscribePeersOnlineStatus peer id %s is invalid",s],PEER_SUBSCRIPTION_STATUS_ERR_INVALID_ARGUMENT);case 20:e.next=7;break;case 22:if(!((a=uniq_1(t)).length+Object.keys(this.subscribedPeerStatusCache).length>512)){e.next=25;break}throw new RtmLimitExceededError("Subscribed peers overflows",PEER_SUBSCRIPTION_STATUS_ERR_OVERFLOW);case 25:return e.next=27,this.session.requestSubscribePeersOnlineStatus(a).toPromise();case 27:u=e.sent,l=u.errors,c=[],p=[],f=l,d=Array.isArray(f),g=0,f=d?f:f[Symbol.iterator]();case 32:if(!d){e.next=38;break}if(!(g>=f.length)){e.next=35;break}return e.abrupt("break",48);case 35:h=f[g++],e.next=42;break;case 38:if(!(g=f.next()).done){e.next=41;break}return e.abrupt("break",48);case 41:h=g.value;case 42:if(_=(b=h).code,"string"==typeof(y=b.account)){e.next=45;break}throw new RtmUnavailableError("Returned account is invalid",PEER_SUBSCRIPTION_STATUS_ERR_FAILURE);case 45:0!==_&&c.push(y);case 46:e.next=32;break;case 48:m=a,v=Array.isArray(m),$=0,m=v?m:m[Symbol.iterator]();case 49:if(!v){e.next=55;break}if(!($>=m.length)){e.next=52;break}return e.abrupt("break",63);case 52:E=m[$++],e.next=59;break;case 55:if(!($=m.next()).done){e.next=58;break}return e.abrupt("break",63);case 58:E=$.value;case 59:y=E,c.includes(y)||(p.push(y),this.subscribedPeerStatusCache[y]=void 0);case 61:e.next=49;break;case 63:if(this.session.requestPeersOnlineStatus(p).pipe(map$1(function(e){var t=e.userInfos;return mapValues_1(keyBy_1(t,"account"),function(e){var t=e.ts;return Boolean(t)})})).subscribe(function(e){var t=mapValues_1(e,function(e,t){var r=e?RtmStatusCode$1.PeerOnlineState.ONLINE:RtmStatusCode$1.PeerOnlineState.OFFLINE;return I.subscribedPeerStatusCache[t]=r,r});I.emit("PeersOnlineStatusChanged",t);}),0===c.length){e.next=66;break}throw new RtmUnavailableError("Subscription failed",PEER_SUBSCRIPTION_STATUS_ERR_FAILURE);case 66:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"unsubscribePeersOnlineStatus",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){var r,n,o,i,s,a,u,l,c,p,f;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=2;break}throw new RtmInvalidStatusError("The client is not logged in",PEER_SUBSCRIPTION_STATUS_ERR_USER_NOT_LOGGED_IN);case 2:if(void 0!==this.session){e.next=4;break}throw new CommonError({SESSION_NOT_FOUND:"Failed to get session of the client"});case 4:if(Array.isArray(t)&&0!==t.length){e.next=6;break}throw new RtmInvalidArgumentError("Invalid arguments: peerIds",PEER_SUBSCRIPTION_STATUS_ERR_INVALID_ARGUMENT);case 6:r=t,n=Array.isArray(r),o=0,r=n?r:r[Symbol.iterator]();case 7:if(!n){e.next=13;break}if(!(o>=r.length)){e.next=10;break}return e.abrupt("break",22);case 10:i=r[o++],e.next=17;break;case 13:if(!(o=r.next()).done){e.next=16;break}return e.abrupt("break",22);case 16:i=o.value;case 17:if(isValidId(s=i)){e.next=20;break}throw new RtmInvalidArgumentError(["subscribePeersOnlineStatus peer id %s is invalid",s],PEER_SUBSCRIPTION_STATUS_ERR_INVALID_ARGUMENT);case 20:e.next=7;break;case 22:if(!(t.length>512)){e.next=24;break}throw new RtmLimitExceededError("Unsubscribed peers overflows",PEER_SUBSCRIPTION_STATUS_ERR_OVERFLOW);case 24:a=uniq_1(t),this.session.requestUnsubscribePeersOnlineStatus(a),u=a,l=Array.isArray(u),c=0,u=l?u:u[Symbol.iterator]();case 27:if(!l){e.next=33;break}if(!(c>=u.length)){e.next=30;break}return e.abrupt("break",41);case 30:p=u[c++],e.next=37;break;case 33:if(!(c=u.next()).done){e.next=36;break}return e.abrupt("break",41);case 36:p=c.value;case 37:f=p,delete this.subscribedPeerStatusCache[f];case 39:e.next=27;break;case 41:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"queryPeersBySubscriptionOption",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.connectionState===ConnectionState$1.CONNECTED){e.next=2;break}throw new RtmInvalidStatusError("The client is not logged in",PEER_SUBSCRIPTION_STATUS_ERR_USER_NOT_LOGGED_IN);case 2:if(t!==RtmStatusCode$1.PeerSubscriptionOption.ONLINE_STATUS){e.next=4;break}return e.abrupt("return",Object.keys(this.subscribedPeerStatusCache));case 4:throw new RtmInvalidArgumentError("Subscription option not supported",PEER_SUBSCRIPTION_STATUS_ERR_INVALID_ARGUMENT);case 5:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"loginImpl",value:function(){var e=_asyncToGenerator$9(regenerator.mark(function e(t){var r,n,o,i,s,a=this;return regenerator.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t.uid,n=t.instanceId,o=n,!(void 0!==this.lastLoginTime&&Date.now()-this.lastLoginTime<1e3/LOGIN_QPS_LIMIT)){e.next=4;break}throw new RtmInvokeTooOftenError(["The frequency of login exceeded the limit of %d queries per second",LOGIN_QPS_LIMIT],LOGIN_ERR_TOO_OFTEN);case 4:if(this.connectionState===ConnectionState$1.DISCONNECTED){e.next=6;break}throw new RtmInvalidStatusError("The SDK is either logging in or has logged in the Agora RTM system",LOGIN_ERR_ALREADY_LOGIN);case 6:e.prev=6,this.context.uid=r,e.next=13;break;case 10:throw e.prev=10,e.t0=e.catch(6),new RtmInvalidArgumentError([invalidArgumentMessage,getName({uid:r})],LOGIN_ERR_INVALID_ARGUMENT);case 13:return this.onConnectionStateChanged(ConnectionState$1.CONNECTING,ConnectionChangeReason.LOGIN),i=new Session$2(this.context,new Connection(this.context,this.logger),o,this.logger),this.session=i,s=function e(){if(a.connectionState===ConnectionState$1.CONNECTED){var t,r,n;a.onConnectionStateChanged(ConnectionState$1.RECONNECTING,ConnectionChangeReason.INTERRUPTED);var i=function(){var s=_asyncToGenerator$9(regenerator.mark(function s(){var u,l,c;return regenerator.wrap(function(s){for(;;)switch(s.prev=s.next){case 0:if(u=long_1.fromNumber(1),l=[!1,!1],c=Date.now(),a.connectionState===ConnectionState$1.RECONNECTING){s.next=5;break}return s.abrupt("return");case 5:return a.log("Enter giant reconnection"),a.session&&(a.session.removeAllListeners(),u=a.session.seq,l=a.session.seqSentStatuses,c=a.session.startTime,0!==a.session.joinedChannels.size&&(t=a.session.joinedChannels),0!==a.session.msgDedupLru.size&&(r=a.session.msgDedupLru),0!==a.session.dialogueSequenceLru.size&&(n=a.session.dialogueSequenceLru),a.session.logoutHandler()),a.session=new Session$2(a.context,new Connection(a.context,a.logger),o,a.logger),a.session.on("instanceChanged",function(e){return o=e}),a.session.on("userJoined",function(e){if(0!==Object.keys(a.attributes).length){if(void 0===a.session)return;a.session.requestSetLocalUserAttributes(a.attributes,e).toPromise();}if(0!==a.attributeDrafts.size){var t=function(){if(n){if(o>=r.length)return "break";i=r[o++];}else {if((o=r.next()).done)return "break";i=o.value;}var t=i,s=t.promise,u=t.attribute;s.then(function(){void 0!==a.session&&a.session.requestSetLocalUserAttributes(u,e).toPromise();});},r=a.attributeDrafts,n=Array.isArray(r),o=0;for(r=n?r:r[Symbol.iterator]();;){var i;if("break"===t())break}}if(0!==Object.keys(a.subscribedPeerStatusCache).length){if(void 0===a.session)return;a.session.requestSubscribePeersOnlineStatus(Object.keys(a.subscribedPeerStatusCache));}}),s.prev=10,a.session.startTime=c,a.session.seq=u,a.session.seqSentStatuses=l,s.next=16,a.session.loginHandler();case 16:a.log("Login success for account %s",a.context.uid),s.next=27;break;case 19:return s.prev=19,s.t0=s.catch(10),s.t0.code===LOGIN_ERR_TOKEN_EXPIRED&&a.emit("TokenExpired"),s.next=24,delay$1(2e3);case 24:return s.next=26,i();case 26:return s.abrupt("return");case 27:a.session.on("connectionLost",e),a.session.once("userDrop",a.userDropHandler),a.session.on("peerTextMessage",function(e){var t=e.peerId,r=e.text,n=e.properties;a.emit("MessageFromPeer",{text:r,messageType:RtmStatusCode$1.MessageType.TEXT},t,n);}),a.session.on("peerRawMessage",function(e){var t=e.desc,r=e.raw,n=e.properties,o=e.peerId;a.emit("MessageFromPeer",{rawMessage:r,description:t,messageType:RtmStatusCode$1.MessageType.RAW},o,n);}),a.session.on("peerOnlineStatusChanged",function(e){var t=e.instance.toString()+e.state,r=a.peerStatusSeqLru.get(t);!r||e.seq.greaterThan(r)?(a.peerStatusSeqLru.set(t,e.seq),e.state!==a.subscribedPeerStatusCache[e.peerId]?a.emit("PeersOnlineStatusChanged",_defineProperty$4({},e.peerId,e.state)):a.log("peer status for %s not changed, previous %s",e.peerId,e.state),a.subscribedPeerStatusCache[e.peerId]=e.state,clearTimeout(a.peerUnreachableTimers[t]),e.state===RtmStatusCode$1.PeerOnlineState.UNREACHABLE&&(a.peerUnreachableTimers[t]=setTimeout(function(){a.subscribedPeerStatusCache[e.peerId]===RtmStatusCode$1.PeerOnlineState.UNREACHABLE&&(a.subscribedPeerStatusCache[e.peerId]=RtmStatusCode$1.PeerOnlineState.ONLINE,a.emit("PeersOnlineStatusChanged",_defineProperty$4({},e.peerId,RtmStatusCode$1.PeerOnlineState.ONLINE)));},3e4))):a.log("peerOnlineStatusChanged dedup for %s, %d",t,e.seq.toNumber());}),a.session.on("invitationMessage",a.invitationManager.invitationMessageHandler.bind(a.invitationManager)),a.session.on("channelAttributesUpdated",function(e){var t=e.channelId,r={},n=e.attributeMaps,o=Array.isArray(n),i=0;for(n=o?n:n[Symbol.iterator]();;){var s;if(o){if(i>=n.length)break;s=n[i++];}else {if((i=n.next()).done)break;s=i.value;}var u=s,l=u.key,c=u.ms,p=u.value,f=u.origin;if("string"!=typeof l||!long_1.isLong(c)||"string"!=typeof p||!isValidId(f))break;r[l]=new Blob([p]).size;}a.channelAttributesCacheLru.set(t,r);}),void 0!==t&&(t.forEach(function(e){return e.join()}),a.session.joinedChannels=t),void 0!==r&&(a.session.msgDedupLru=r),void 0!==u&&(a.session.seq=u),void 0!==n&&(a.session.dialogueSequenceLru=n),void 0!==l&&(a.session.seqSentStatuses=l),a.onConnectionStateChanged(ConnectionState$1.CONNECTED,ConnectionChangeReason.LOGIN_SUCCESS),0!==Object.keys(a.attributes).length&&a.setLocalUserAttributes(a.attributes);case 41:case"end":return s.stop()}},s,null,[[10,19]])}));return function(){return s.apply(this,arguments)}}();a.reconnectionTimer=window.setTimeout(i,12e3),a.session&&a.session.once("userJoined",function(){void 0!==a.reconnectionTimer&&window.clearTimeout(a.reconnectionTimer),a.onConnectionStateChanged(ConnectionState$1.CONNECTED,ConnectionChangeReason.LOGIN_SUCCESS);});}},i.on("connectionLost",s),i.once("userDrop",this.userDropHandler),this.session.on("peerTextMessage",function(e){var t=e.peerId,r=e.text,n=e.properties;a.emit("MessageFromPeer",{text:r,messageType:RtmStatusCode$1.MessageType.TEXT},t,n);}),this.session.on("peerRawMessage",function(e){var t=e.desc,r=e.raw,n=e.properties,o=e.peerId;a.emit("MessageFromPeer",{rawMessage:r,description:t,messageType:RtmStatusCode$1.MessageType.RAW},o,n);}),i.on("instanceChanged",function(e){return o=e}),i.on("peerOnlineStatusChanged",function(e){var t=e.instance.toString()+e.state,r=a.peerStatusSeqLru.get(t);!r||e.seq.greaterThan(r)?(a.peerStatusSeqLru.set(t,e.seq),e.state!==a.subscribedPeerStatusCache[e.peerId]?a.emit("PeersOnlineStatusChanged",_defineProperty$4({},e.peerId,e.state)):a.log("peer status for %s not changed, previous %s",e.peerId,e.state),a.subscribedPeerStatusCache[e.peerId]=e.state,clearTimeout(a.peerUnreachableTimers[t]),e.state===RtmStatusCode$1.PeerOnlineState.UNREACHABLE&&(a.peerUnreachableTimers[t]=setTimeout(function(){a.subscribedPeerStatusCache[e.peerId]===RtmStatusCode$1.PeerOnlineState.UNREACHABLE&&(a.subscribedPeerStatusCache[e.peerId]=RtmStatusCode$1.PeerOnlineState.ONLINE,a.emit("PeersOnlineStatusChanged",_defineProperty$4({},e.peerId,RtmStatusCode$1.PeerOnlineState.ONLINE)));},3e4))):a.log("peerOnlineStatusChanged dedup for %s, %d",t,e.seq.toNumber());}),i.on("invitationMessage",this.invitationManager.invitationMessageHandler.bind(this.invitationManager)),i.on("channelAttributesUpdated",function(e){var t=e.channelId,r={},n=e.attributeMaps,o=Array.isArray(n),i=0;for(n=o?n:n[Symbol.iterator]();;){var s;if(o){if(i>=n.length)break;s=n[i++];}else {if((i=n.next()).done)break;s=i.value;}var u=s,l=u.key,c=u.ms,p=u.value,f=u.origin;if("string"!=typeof l||!long_1.isLong(c)||"string"!=typeof p||!isValidId(f))break;r[l]=new Blob([p]).size;}a.channelAttributesCacheLru.set(t,r);}),i.on("userJoined",function(e){if(0!==Object.keys(a.attributes).length){if(void 0===a.session)return;a.session.requestSetLocalUserAttributes(a.attributes,e).toPromise();}if(0!==a.attributeDrafts.size){var t=function(){if(n){if(o>=r.length)return "break";s=r[o++];}else {if((o=r.next()).done)return "break";s=o.value;}var t=s,i=t.promise,u=t.attribute;i.then(function(){void 0!==a.session&&a.session.requestSetLocalUserAttributes(u,e).toPromise();});},r=a.attributeDrafts,n=Array.isArray(r),o=0;for(r=n?r:r[Symbol.iterator]();;){var s;if("break"===t())break}}0!==Object.keys(a.subscribedPeerStatusCache).length&&i.requestSubscribePeersOnlineStatus(Object.keys(a.subscribedPeerStatusCache));}),this.lastLoginTime=Date.now(),e.prev=27,e.next=30,i.loginHandler();case 30:e.next=41;break;case 32:if(e.prev=32,e.t1=e.catch(27),!isTimeout(e.t1)){e.next=37;break}throw this.onConnectionStateChanged(ConnectionState$1.DISCONNECTED,ConnectionChangeReason.LOGIN_TIMEOUT),new RtmTimeoutError(genTimeoutMessage(this.name,"login",CLIENT_LOGIN_TIMEOUT),LOGIN_ERR_TIMEOUT);case 37:if(this.onConnectionStateChanged(ConnectionState$1.DISCONNECTED,ConnectionChangeReason.LOGIN_FAILURE),!isRtmError(e.t1)){e.next=40;break}throw e.t1;case 40:throw new RtmUnavailableError("Login failure",LOGIN_ERR_UNKNOWN,e.t1);case 41:this.onConnectionStateChanged(ConnectionState$1.CONNECTED,ConnectionChangeReason.LOGIN_SUCCESS);case 42:case"end":return e.stop()}},e,this,[[6,10],[27,32]])}));return function(t){return e.apply(this,arguments)}}()},{key:"onConnectionStateChanged",value:function(e,t){var r=this;e===ConnectionState$1.RECONNECTING&&(this.reconnId+=1),sendReport("ConnectionStateChange",{elapse:getElapse(this.session&&this.session.startTime),lts:long_1.fromNumber(Date.now()),newState:connectionStateCodeMap[e],oldState:connectionStateCodeMap[this.connectionState],reason:connectionStateChangeReason[t],sid:getSid(this.session&&this.session.instanceId||long_1.fromNumber(0)),userId:this.context.uid,reconnId:this.reconnId}),this.connectionState===ConnectionState$1.RECONNECTING&&e===ConnectionState$1.CONNECTED&&(0!==Object.keys(this.subscribedPeerStatusCache).length&&void 0!==this.session&&this.session.requestPeersOnlineStatus(Object.keys(this.subscribedPeerStatusCache)).pipe(map$1(function(e){var t=e.userInfos;return mapValues_1(keyBy_1(t,"account"),function(e){var t=e.ts;return Boolean(t)})})).subscribe(function(e){var t=mapValues_1(e,function(e,t){var n=e?RtmStatusCode$1.PeerOnlineState.ONLINE:RtmStatusCode$1.PeerOnlineState.OFFLINE;return r.subscribedPeerStatusCache[t]=n,n});r.emit("PeersOnlineStatusChanged",t);}),this.internalEmitter.emit("RECONNECTED")),this.connectionState=e,e!==ConnectionState$1.ABORTED&&e!==ConnectionState$1.DISCONNECTED||(this.reconnId=0,this.attributes={},this.session&&this.session.removeAllListeners(),this.session=void 0,this.channelAttributesCacheLru.empty(),this.peerStatusSeqLru.empty(),this.peerUnreachableTimers={},this.reconnectionTimer=void 0,this.subscribedPeerStatusCache={},this.attributeDrafts.clear(),this.context.token=void 0),this.emit("ConnectionStateChanged",e,t);}}]),t}(),_class$1=_temp$1,_applyDecoratedDescriptor$1(_class$1.prototype,"renewToken",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"renewToken"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"queryPeersOnlineStatus",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"queryPeersOnlineStatus"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"getChannelMemberCount",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"getChannelMemberCount"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"setLocalUserAttributes",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"setLocalUserAttributes"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"setChannelAttributes",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"setChannelAttributes"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"addOrUpdateLocalUserAttributes",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"addOrUpdateLocalUserAttributes"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"addOrUpdateChannelAttributes",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"addOrUpdateChannelAttributes"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"deleteLocalUserAttributesByKeys",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"deleteLocalUserAttributesByKeys"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"deleteChannelAttributesByKeys",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"deleteChannelAttributesByKeys"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"clearLocalUserAttributes",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"clearLocalUserAttributes"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"clearChannelAttributes",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"clearChannelAttributes"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"getUserAttributes",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"getUserAttributes"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"getChannelAttributes",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"getChannelAttributes"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"getChannelAttributesByKeys",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"getChannelAttributesByKeys"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"getUserAttributesByKeys",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"getUserAttributesByKeys"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"login",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"login"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"logout",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"logout"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"sendMessageToPeer",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"sendMessageToPeer"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"createChannel",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"createChannel"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"subscribePeersOnlineStatus",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"subscribePeersOnlineStatus"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"unsubscribePeersOnlineStatus",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"unsubscribePeersOnlineStatus"),_class$1.prototype),_applyDecoratedDescriptor$1(_class$1.prototype,"queryPeersBySubscriptionOption",[logged],Object.getOwnPropertyDescriptor(_class$1.prototype,"queryPeersBySubscriptionOption"),_class$1.prototype),_class$1);function ownKeys$4(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n);}return r}function _objectSpread$3(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ownKeys$4(r,!0).forEach(function(t){_defineProperty$5(e,t,r[t]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ownKeys$4(r).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t));});}return e}function _defineProperty$5(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var ConnectionChangeReason$1=RtmStatusCode$1.ConnectionChangeReason,ConnectionState$2=RtmStatusCode$1.ConnectionState,LocalInvitationFailureReason$1=RtmStatusCode$1.LocalInvitationFailureReason,LocalInvitationState$1=RtmStatusCode$1.LocalInvitationState,RemoteInvitationFailureReason$1=RtmStatusCode$1.RemoteInvitationFailureReason,RemoteInvitationState$1=RtmStatusCode$1.RemoteInvitationState,MessageType$1=RtmStatusCode$1.MessageType,PeerOnlineState=RtmStatusCode$1.PeerOnlineState,PeerSubscriptionOption=RtmStatusCode$1.PeerSubscriptionOption;void 0===Number.MAX_SAFE_INTEGER&&(Number.MAX_SAFE_INTEGER=9007199254740991);var LogFilter={LOG_FILTER_OFF:{error:!1,warn:!1,info:!1,track:!1,debug:!1},LOG_FILTER_ERROR:{error:!0,warn:!1,info:!1,track:!1,debug:!1},LOG_FILTER_WARNING:{error:!0,warn:!0,info:!1,track:!1,debug:!1},LOG_FILTER_INFO:{error:!0,warn:!0,info:!0,track:!1,debug:!1},LOG_FILTER_DEBUG:{error:!0,warn:!0,info:!0,track:!0,debug:!0}};function createInstance(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.enableLogUpload,n=void 0!==r&&r,o=t.logFilter,i=void 0===o?LogFilter.LOG_FILTER_INFO:o;if(!isValidAppId(e))throw new RtmInvalidArgumentError([invalidArgumentMessage,getName({appId:e})],CREATE_INSTANCE_ERR_INVALID_ARGUMENT);var s={enableLogUpload:n,logFilter:i},a=initLoggerId(),u=genInfoLogger(s),l=genWarnLogger(s),c=genErrorLogger(s),p=trackLoggerGenerator(a,s),f=debugLoggerGenerator(a,s),d=f("RTM:DEBUG","<Entry> ");return u("The Agora RTM Web SDK version is %s",version),d("Creating an RtmClient instance"),d('The Git commit ID is "'.concat(BUILD,'"')),d("The App ID is %s",e),u("The process ID is %s",processId),d("process.env.NODE_ENV is %s","production"),new Client(e,{genLogger:f,genTracker:p,info:u,warn:l,logError:c,loggerId:a},s,function(e){var t=function(e,t){s[e]=t;},r=getKeys(e),n=Array.isArray(r),o=0;for(r=n?r:r[Symbol.iterator]();;){var i;if(n){if(o>=r.length)break;i=r[o++];}else {if((o=r.next()).done)break;i=o.value;}var a=i,u=e[a];null!=u&&t(a,u);}})}var index=_objectSpread$3({createInstance:createInstance,BUILD:BUILD,VERSION:version,END_CALL_PREFIX:END_CALL_PREFIX,processId:processId,ConnectionChangeReason:ConnectionChangeReason$1,ConnectionState:ConnectionState$2,LocalInvitationFailureReason:LocalInvitationFailureReason$1,LocalInvitationState:LocalInvitationState$1,RemoteInvitationFailureReason:RemoteInvitationFailureReason$1,RemoteInvitationState:RemoteInvitationState$1,MessageType:MessageType$1,PeerOnlineState:PeerOnlineState,PeerSubscriptionOption:PeerSubscriptionOption},LogFilter);return index});
  });

  var AgoraRTM = unwrapExports(agoraRtmSdk);

  var environment = {
    appKey: 'ab4289a46cd34da6a61fd8d66774b65f',
    appCertificate: '',
    channelName: 'Channel',
    port: 5000
  };

  var Emittable = /*#__PURE__*/function () {
    function Emittable() {
      this.events = {};
    }

    var _proto = Emittable.prototype;

    _proto.on = function on(type, callback) {
      var _this = this;

      var event = this.events[type] = this.events[type] || [];
      event.push(callback);
      return function () {
        _this.events[type] = event.filter(function (x) {
          return x !== callback;
        });
      };
    };

    _proto.off = function off(type, callback) {
      var event = this.events[type];

      if (event) {
        this.events[type] = event.filter(function (x) {
          return x !== callback;
        });
      }
    };

    _proto.once = function once(type, callback) {
      var _this2 = this;

      var once = function once(data) {
        callback(data);

        _this2.off(type, once);
      };

      this.on(type, once);
    };

    _proto.emit = function emit(type, data) {
      var event = this.events[type];

      if (event) {
        event.forEach(function (callback) {
          // callback.call(this, data);
          callback(data);
        });
      }

      var broadcast = this.events.broadcast;

      if (broadcast) {
        broadcast.forEach(function (callback) {
          callback(type, data);
        });
      }
    };

    return Emittable;
  }();

  var STATIC = window.location.port === '41999' || window.location.host === 'actarian.github.io';
  var DEVELOPMENT = ['localhost', '127.0.0.1', '0.0.0.0'].indexOf(window.location.host.split(':')[0]) !== -1;

  var HttpService = /*#__PURE__*/function () {
    function HttpService() {}

    HttpService.http$ = function http$(method, url, data, format) {
      var _this = this;

      if (format === void 0) {
        format = 'json';
      }

      var methods = ['POST', 'PUT', 'PATCH'];
      var response_ = null;
      return rxjs.from(fetch(this.getUrl(url, format), {
        method: method,
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: methods.indexOf(method) !== -1 ? JSON.stringify(data) : undefined
      }).then(function (response) {
        response_ = response; // console.log(response);

        if (response.ok) {
          return response[format]();
        } else {
          return response.json().then(function (json) {
            return Promise.reject(json);
          });
        }
      })).pipe(operators.catchError(function (error) {
        return rxjs.throwError(_this.getError(error, response_));
      }));
    };

    HttpService.get$ = function get$(url, data, format) {
      var query = this.query(data);
      return this.http$('GET', "" + url + query, undefined, format);
    };

    HttpService.delete$ = function delete$(url) {
      return this.http$('DELETE', url);
    };

    HttpService.post$ = function post$(url, data) {
      return this.http$('POST', url, data);
    };

    HttpService.put$ = function put$(url, data) {
      return this.http$('PUT', url, data);
    };

    HttpService.patch$ = function patch$(url, data) {
      return this.http$('PATCH', url, data);
    };

    HttpService.query = function query(data) {
      return ''; // todo
    };

    HttpService.getUrl = function getUrl(url, format) {
      if (format === void 0) {
        format = 'json';
      }

      // console.log(url);
      return STATIC && format === 'json' && url.indexOf('/') === 0 ? "." + url + ".json" : url;
    };

    HttpService.getError = function getError(object, response) {
      var error = typeof object === 'object' ? object : {};

      if (!error.statusCode) {
        error.statusCode = response ? response.status : 0;
      }

      if (!error.statusMessage) {
        error.statusMessage = response ? response.statusText : object;
      }

      console.log('HttpService.getError', error, object);
      return error;
    };

    return HttpService;
  }();

  var MessageType = {
    Ping: 'ping',
    RequestControl: 'requestControl',
    RequestControlAccepted: 'requestControlAccepted',
    RequestControlRejected: 'requestControlRejected'
  };

  var AgoraService = /*#__PURE__*/function (_Emittable) {
    _inheritsLoose(AgoraService, _Emittable);

    function AgoraService() {
      var _this;

      _this = _Emittable.call(this) || this;
      _this.onStreamPublished = _this.onStreamPublished.bind(_assertThisInitialized(_this));
      _this.onStreamAdded = _this.onStreamAdded.bind(_assertThisInitialized(_this));
      _this.onStreamSubscribed = _this.onStreamSubscribed.bind(_assertThisInitialized(_this));
      _this.onStreamRemoved = _this.onStreamRemoved.bind(_assertThisInitialized(_this));
      _this.onPeerLeaved = _this.onPeerLeaved.bind(_assertThisInitialized(_this));
      _this.onTokenPrivilegeWillExpire = _this.onTokenPrivilegeWillExpire.bind(_assertThisInitialized(_this));
      _this.onTokenPrivilegeDidExpire = _this.onTokenPrivilegeDidExpire.bind(_assertThisInitialized(_this));
      return _this;
    }

    var _proto = AgoraService.prototype;

    _proto.connect = function connect() {
      var _this2 = this;

      this.createClient(function () {
        HttpService.post$('/api/token/rtc', {
          uid: null
        }).subscribe(function (token) {
          console.log('token', token);

          _this2.joinChannel(token.token);
        });
      });
    };

    _proto.createClient = function createClient(next) {
      console.log('agora rtc sdk version: ' + AgoraRTC.VERSION + ' compatible: ' + AgoraRTC.checkSystemRequirements());
      var client = this.client = AgoraRTC.createClient({
        mode: 'live',
        codec: 'h264'
      }); // rtc

      client.init(environment.appKey, function () {
        console.log('AgoraRTC client initialized');
        next();
      }, function (error) {
        console.log('AgoraRTC client init failed', error);
      });
      client.on('stream-published', this.onStreamPublished); //subscribe remote stream

      client.on('stream-added', this.onStreamAdded);
      client.on('stream-subscribed', this.onStreamSubscribed);
      client.on('error', this.onError); // Occurs when the peer user leaves the channel; for example, the peer user calls Client.leave.

      client.on('peer-leave', this.onPeerLeaved);
      client.on('stream-removed', this.onStreamRemoved);
      client.on('onTokenPrivilegeWillExpire', this.onTokenPrivilegeWillExpire);
      client.on('onTokenPrivilegeDidExpire', this.onTokenPrivilegeDidExpire);
      console.log('agora rtm sdk version: ' + AgoraRTM.VERSION + ' compatible');
      var messageClient = this.messageClient = AgoraRTM.createInstance(environment.appKey, {
        logFilter: AgoraRTM.LOG_FILTER_DEBUG
      });
      messageClient.on('ConnectionStateChanged', console.error);
      messageClient.on('MessageFromPeer', console.warn);
    };

    _proto.joinChannel = function joinChannel(token) {
      var _this3 = this;

      var client = this.client;
      var uid = null;
      token = null; // !!!

      client.join(token, environment.channelName, uid, function (uid) {
        // console.log('User ' + uid + ' join channel successfully');
        HttpService.post$('/api/token/rtm', {
          uid: uid
        }).subscribe(function (token) {
          console.log('token', token);

          _this3.joinMessageChannel(token.token, uid).then(function (success) {
            console.log('joinMessageChannel.success', success);
          }, function (error) {
            console.log('joinMessageChannel.error', error);
          });
        }); // !!! require localhost or https

        _this3.detectDevices(function (devices) {
          // console.log(devices);
          var cameraId = devices.videos.length ? devices.videos[0].deviceId : null;
          var microphoneId = devices.audios.length ? devices.audios[0].deviceId : null;

          _this3.createLocalStream(uid, microphoneId, cameraId);
        });
      }, function (error) {
        console.log('Join channel failed', error);
      }); //Â https://console.agora.io/invite?sign=YXBwSWQlM0RhYjQyODlhNDZjZDM0ZGE2YTYxZmQ4ZDY2Nzc0YjY1ZiUyNm5hbWUlM0RaYW1wZXR0aSUyNnRpbWVzdGFtcCUzRDE1ODY5NjM0NDU=// join link expire in 30 minutes
    };

    _proto.joinMessageChannel = function joinMessageChannel(token, uid) {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        var messageClient = _this4.messageClient;

        messageClient.login({
          uid: uid.toString()
        }).then(function () {
          _this4.messageChannel = messageClient.createChannel(environment.channelName);
          return _this4.messageChannel.join();
        }).then(function () {
          _this4.messageChannel.on('ChannelMessage', _this4.onMessage);

          resolve(uid);
        }).catch(reject);
      });
    };

    _proto.sendMessage = function sendMessage(message) {
      var _this5 = this;

      message.wrc_version = 'beta';
      message.uid = this.uid;
      var messageChannel = this.messageChannel;
      messageChannel.sendMessage({
        text: JSON.stringify(message)
      });
      console.log('wrc: send', message);

      if (message.rpcid) {
        return new Promise(function (resolve) {
          _this5.once("message-" + message.rpcid, function (message) {
            resolve(message);
          });
        });
      } else {
        return Promise.resolve(message);
      }
    };

    _proto.detectDevices = function detectDevices(next) {
      AgoraRTC.getDevices(function (devices) {
        devices.filter(function (device) {
          return ['audioinput', 'videoinput'].indexOf(device.kind) !== -1;
        }).map(function (device) {
          return {
            label: device.label,
            deviceId: device.deviceId,
            kind: device.kind
          };
        });
        var videos = [];
        var audios = [];

        for (var i = 0; i < devices.length; i++) {
          var device = devices[i];

          if ('videoinput' == device.kind) {
            videos.push({
              label: device.label || 'camera-' + videos.length,
              deviceId: device.deviceId,
              kind: device.kind
            });
          }

          if ('audioinput' == device.kind) {
            audios.push({
              label: device.label || 'microphone-' + videos.length,
              deviceId: device.deviceId,
              kind: device.kind
            });
          }
        }

        next({
          videos: videos,
          audios: audios
        });
      });
    };

    _proto.createLocalStream = function createLocalStream(uid, microphoneId, cameraId) {
      var local = this.local = AgoraRTC.createStream({
        streamID: uid,
        microphoneId: microphoneId,
        cameraId: cameraId,
        audio: microphoneId ? true : false,
        video: cameraId ? true : false,
        screen: false
      });
      this.initLocalStream();
    };

    _proto.initLocalStream = function initLocalStream() {
      var _this6 = this;

      var client = this.client;
      var local = this.local;
      local.init(function () {
        console.log('getUserMedia successfully');
        var video = document.querySelector('.video--me');

        if (video) {
          video.setAttribute('id', 'agora_local_' + local.streamID);
          local.play('agora_local_' + local.streamID);
        }

        _this6.publishLocalStream();
      }, function (error) {
        console.log('getUserMedia failed', error);
      });
    };

    _proto.publishLocalStream = function publishLocalStream() {
      var client = this.client;
      var local = this.local; //publish local stream

      client.publish(local, function (error) {
        console.log('Publish local stream error: ' + error);
      });
    };

    _proto.unpublishLocalStream = function unpublishLocalStream() {
      var client = this.client;
      var local = this.local;
      client.unpublish(local, function (error) {
        console.log('unpublish failed');
      });
    };

    _proto.leaveChannel = function leaveChannel() {
      var client = this.client;
      client.leave(function () {
        console.log('Leave channel successfully');
      }, function (error) {
        console.log('Leave channel failed');
      });
      var messageChannel = this.messageChannel;
      var messageClient = this.messageClient;
      messageChannel.leave();
      messageClient.logout();
    };

    _proto.toggleCamera = function toggleCamera() {
      if (this.local) {
        this.local.video = !this.local.video;
      }
    };

    _proto.toggleAudio = function toggleAudio() {
      if (this.local) {
        this.local.audio = !this.local.audio;
      }
    };

    _proto.getRemoteTargetUID = function getRemoteTargetUID() {
      if (!this.rtmChannel || !this.cname) {
        throw new Error("not join channel");
      }

      return this.sendMessage({
        type: MessageType.Ping,
        rpcid: Date.now().toString()
      }).then(function (message) {
        return message.payload.uid;
      });
    };

    _proto.sendRemoteControlRequest = function sendRemoteControlRequest(message) {
      var _this7 = this;

      return new Promise(function (resolve, reject) {
        _this7.sendMessage({
          type: MessageType.RequestControl,
          rpcid: Date.now().toString(),
          payload: {
            message: message
          }
        }).then(function (message) {
          if (message.type === MessageType.RequestControlAccepted) {
            /*
            this.remoteDeviceInfo = message.payload;
            if (this.playerElement) {
            this.remoteStream.play(this.playerElement.id, { fit: 'contain', muted: true });
            this.controlMouse()
            resolve(true);
            return;
            } else {
            reject('request not accepted');
            }
            */
            resolve(true);
          } else if (message.type === MessageType.RequestControlRejected) {
            // this.remoteDeviceInfo = undefined
            resolve(false);
          }
        });
      });
    };

    _proto.getSessionStats = function getSessionStats() {
      var client = this.client;
      client.getSessionStats(function (stats) {
        console.log("Current Session Duration: " + stats.Duration);
        console.log("Current Session UserCount: " + stats.UserCount);
        console.log("Current Session SendBytes: " + stats.SendBytes);
        console.log("Current Session RecvBytes: " + stats.RecvBytes);
        console.log("Current Session SendBitrate: " + stats.SendBitrate);
        console.log("Current Session RecvBitrate: " + stats.RecvBitrate);
      });
    };

    _proto.getSystemStats = function getSystemStats() {
      var client = this.client;
      client.getSystemStats(function (stats) {
        console.log("Current battery level: " + stats.BatteryLevel);
      });
    } // events
    ;

    _proto.onError = function onError(error) {
      console.log('Agora', error);
    };

    _proto.onMessage = function onMessage(data, uid) {
      if (uid !== this.uid) {
        var message = JSON.parse(data.text);
        console.log('wrc: receive', message);

        if (message.rpcid) {
          this.emit("message-" + message.rpcid, message);
        }
        /*
        // this.emit('wrc-message', message);
        if (message.type === WRCMessageType.WRC_CLOSE) {
          console.log('receive wrc close')
          this.cleanRemote()
          this.emit('remote-close')
        }
        */

      }
    };

    _proto.onStreamPublished = function onStreamPublished(event) {
      console.log('Publish local stream successfully');
    };

    _proto.onStreamAdded = function onStreamAdded(event) {
      var client = this.client;
      var stream = event.stream;
      var id = stream.getId();
      console.log('New stream added: ' + id);

      if (id !== this.uid) {
        client.subscribe(stream, function (error) {
          console.log('stream subscribe failed', error);
        });
      }
    };

    _proto.onStreamSubscribed = function onStreamSubscribed(event) {
      var stream = event.stream;
      var id = stream.getId();
      console.log('Subscribe remote stream successfully: ' + id);
      var video = document.querySelector('.video--other');

      if (video) {
        video.setAttribute('id', 'agora_remote_' + id);
        video.classList.add('playing');
      } // console.log('video', video);


      stream.play('agora_remote_' + id);
    } // Occurs when the remote stream is removed; for example, a peer user calls Client.unpublish.
    ;

    _proto.onStreamRemoved = function onStreamRemoved(event) {
      var stream = event.stream;
      var id = stream.getId();
      console.log('stream-removed remote-uid: ', id);

      if (id !== this.uid) {
        stream.stop('agora_remote_' + id);
        var video = document.querySelector('.video--other');

        if (video) {
          video.classList.remove('playing');
        }
      }

      console.log('stream-removed remote-uid: ', id);
    };

    _proto.onPeerLeaved = function onPeerLeaved(event) {
      var id = event.uid;
      console.log('peer-leave id', id);

      if (id !== this.uid) {
        var video = document.querySelector('.video--other');

        if (video) {
          video.classList.remove('playing');
        }
      }
    };

    _proto.onTokenPrivilegeWillExpire = function onTokenPrivilegeWillExpire(event) {
      // After requesting a new token
      // client.renewToken(token);
      console.log('onTokenPrivilegeWillExpire');
    };

    _proto.onTokenPrivilegeDidExpire = function onTokenPrivilegeDidExpire(event) {
      // After requesting a new token
      // client.renewToken(token);
      console.log('onTokenPrivilegeDidExpire');
    };

    return AgoraService;
  }(Emittable);

  var LocationService = /*#__PURE__*/function () {
    function LocationService() {}

    LocationService.get = function get(key) {
      var params = new URLSearchParams(window.location.search); // console.log('LocationService.get', params);

      return params.get(key);
    };

    LocationService.set = function set(keyOrValue, value) {
      var params = new URLSearchParams(window.location.search);

      if (typeof keyOrValue === 'string') {
        params.set(keyOrValue, value);
      } else {
        params.set(keyOrValue, '');
      }

      this.replace(params); // console.log('LocationService.set', params, keyOrValue, value);
    };

    LocationService.replace = function replace(params) {
      if (window.history && window.history.pushState) {
        var title = document.title;
        var url = window.location.href.split('?')[0] + "?" + params.toString();
        window.history.pushState(params.toString(), title, url);
      }
    };

    LocationService.deserialize = function deserialize(key) {
      var encoded = this.get('params');
      return this.decode(key, encoded);
    };

    LocationService.serialize = function serialize(keyOrValue, value) {
      var params = this.deserialize();
      var encoded = this.encode(keyOrValue, value, params);
      this.set('params', encoded);
    };

    LocationService.decode = function decode(key, encoded) {
      var decoded = null;

      if (encoded) {
        var json = window.atob(encoded);
        decoded = JSON.parse(json);
      }

      if (key && decoded) {
        decoded = decoded[key];
      }

      return decoded || null;
    };

    LocationService.encode = function encode(keyOrValue, value, params) {
      params = params || {};
      var encoded = null;

      if (typeof keyOrValue === 'string') {
        params[keyOrValue] = value;
      } else {
        params = keyOrValue;
      }

      var json = JSON.stringify(params);
      encoded = window.btoa(json);
      return encoded;
    };

    return LocationService;
  }();

  var ModalEvent = function ModalEvent(data) {
    this.data = data;
  };
  var ModalResolveEvent = /*#__PURE__*/function (_ModalEvent) {
    _inheritsLoose(ModalResolveEvent, _ModalEvent);

    function ModalResolveEvent() {
      return _ModalEvent.apply(this, arguments) || this;
    }

    return ModalResolveEvent;
  }(ModalEvent);
  var ModalRejectEvent = /*#__PURE__*/function (_ModalEvent2) {
    _inheritsLoose(ModalRejectEvent, _ModalEvent2);

    function ModalRejectEvent() {
      return _ModalEvent2.apply(this, arguments) || this;
    }

    return ModalRejectEvent;
  }(ModalEvent);

  var ModalService = /*#__PURE__*/function () {
    function ModalService() {}

    ModalService.open$ = function open$(modal) {
      var _this = this;

      return this.getTemplate$(modal.src).pipe(operators.map(function (template) {
        return {
          node: _this.getNode(template),
          data: modal.data,
          modal: modal
        };
      }), operators.tap(function (node) {
        return _this.modal$.next(node);
      }), operators.switchMap(function (node) {
        return _this.events$;
      }));
    };

    ModalService.load$ = function load$(modal) {};

    ModalService.getTemplate$ = function getTemplate$(url) {
      return rxjs.from(fetch(url).then(function (response) {
        return response.text();
      }));
    };

    ModalService.getNode = function getNode(template) {
      var div = document.createElement("div");
      div.innerHTML = template;
      var node = div.firstElementChild;
      return node;
    };

    ModalService.reject = function reject(data) {
      this.modal$.next(null);
      this.events$.next(new ModalRejectEvent(data));
    };

    ModalService.resolve = function resolve(data) {
      this.modal$.next(null);
      this.events$.next(new ModalResolveEvent(data));
    };

    return ModalService;
  }();
  ModalService.modal$ = new rxjs.Subject();
  ModalService.events$ = new rxjs.Subject();

  var LocalStorageService = /*#__PURE__*/function () {
    function LocalStorageService() {}

    LocalStorageService.delete = function _delete(name) {
      if (this.isLocalStorageSupported()) {
        window.localStorage.removeItem(name);
      }
    };

    LocalStorageService.exist = function exist(name) {
      if (this.isLocalStorageSupported()) {
        return window.localStorage[name] !== undefined;
      }
    };

    LocalStorageService.get = function get(name) {
      var value = null;

      if (this.isLocalStorageSupported() && window.localStorage[name] !== undefined) {
        try {
          value = JSON.parse(window.localStorage[name]);
        } catch (e) {
          console.log('LocalStorageService.get.error parsing', name, e);
        }
      }

      return value;
    };

    LocalStorageService.set = function set(name, value) {
      if (this.isLocalStorageSupported()) {
        try {
          var cache = [];
          var json = JSON.stringify(value, function (key, value) {
            if (typeof value === 'object' && value !== null) {
              if (cache.indexOf(value) !== -1) {
                // Circular reference found, discard key
                return;
              }

              cache.push(value);
            }

            return value;
          });
          window.localStorage.setItem(name, json);
        } catch (e) {
          console.log('LocalStorageService.set.error serializing', name, value, e);
        }
      }
    };

    LocalStorageService.isLocalStorageSupported = function isLocalStorageSupported() {
      if (this.supported) {
        return true;
      }

      var supported = false;

      try {
        supported = 'localStorage' in window && window.localStorage !== null;

        if (supported) {
          window.localStorage.setItem('test', '1');
          window.localStorage.removeItem('test');
        } else {
          supported = false;
        }
      } catch (e) {
        supported = false;
      }

      this.supported = supported;
      return supported;
    };

    return LocalStorageService;
  }();

  var UserService = /*#__PURE__*/function () {
    function UserService() {}

    UserService.setUser = function setUser(user) {
      this.user$.next(user);
    };

    UserService.me$ = function me$() {
      var _this = this;

      return HttpService.get$('/api/users/me').pipe(operators.map(function (user) {
        return _this.mapStatic__(user, 'me');
      }), operators.switchMap(function (user) {
        _this.setUser(user);

        return _this.user$;
      }));
    };

    UserService.register$ = function register$(payload) {
      var _this2 = this;

      return HttpService.post$('/api/users/register', payload).pipe(operators.map(function (user) {
        return _this2.mapStatic__(user, 'register');
      }));
    };

    UserService.update = function update(payload) {
      var _this3 = this;

      return HttpService.post$('/api/users/updateprofile', payload).pipe(operators.map(function (user) {
        return _this3.mapStatic__(user, 'register');
      }));
    };

    UserService.login$ = function login$(payload) {
      var _this4 = this;

      return HttpService.post$('/api/users/login', payload).pipe(operators.map(function (user) {
        return _this4.mapStatic__(user, 'login');
      }));
    };

    UserService.logout$ = function logout$() {
      var _this5 = this;

      return HttpService.post$('/api/users/logout').pipe(operators.map(function (user) {
        return _this5.mapStatic__(user, 'logout');
      }));
    };

    UserService.retrieve$ = function retrieve$(payload) {
      var _this6 = this;

      return HttpService.post$('/api/users/retrievepassword', payload).pipe(operators.map(function (user) {
        return _this6.mapStatic__(user, 'retrieve');
      }));
    };

    UserService.mapStatic__ = function mapStatic__(user, action) {
      if (action === void 0) {
        action = 'me';
      }

      if (!STATIC) {
        return user;
      }

      switch (action) {
        case 'me':
          if (!LocalStorageService.exist('user')) {
            user = null;
          }
          break;

        case 'register':
          LocalStorageService.set('user', user);
          break;

        case 'login':
          LocalStorageService.set('user', user);
          break;

        case 'logout':
          LocalStorageService.delete('user');
          break;
      }

      return user;
    };

    return UserService;
  }();
  UserService.user$ = new rxjs.BehaviorSubject(null);

  var src = STATIC ? '/agora/club-modal.html' : '/Viewdoc.cshtml?co_id=23649';

  var AppComponent = /*#__PURE__*/function (_Component) {
    _inheritsLoose(AppComponent, _Component);

    function AppComponent() {
      return _Component.apply(this, arguments) || this;
    }

    var _proto = AppComponent.prototype;

    // !!! require localhost or https
    _proto.onInit = function onInit() {
      var _getContext = rxcomp.getContext(this),
          node = _getContext.node;

      node.classList.remove('hidden'); // console.log('context', context);

      /*
      UserService.user$.pipe(
      	takeUntil(this.unsubscribe$)
      ).subscribe(user => {
      	console.log('AppComponent.user$', user);
      	this.user = user;
      	this.pushChanges();
      });
      setTimeout(() => {
      	this.parseQueryString();
      }, 500);
      */

      this.useAgora();
    };

    _proto.useAgora = function useAgora() {
      var agora = new AgoraService();
      agora.connect();
    };

    _proto.onDropped = function onDropped(id) {
      console.log('AppComponent.onDropped', id);
    };

    _proto.parseQueryString = function parseQueryString() {
      var action = LocationService.get('action');

      switch (action) {
        case 'login':
          this.openLogin();
          break;

        case 'register':
          this.openRegister();
          break;
      }
    };

    _proto.openLogin = function openLogin() {
      this.openLoginRegisterModal(1);
    };

    _proto.openRegister = function openRegister() {
      this.openLoginRegisterModal(2);
    };

    _proto.openLoginRegisterModal = function openLoginRegisterModal(view) {
      if (view === void 0) {
        view = 1;
      }

      ModalService.open$({
        src: src,
        data: {
          view: view
        }
      }).pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (event) {
        // console.log('RegisterOrLoginComponent.onRegister', event);
        if (event instanceof ModalResolveEvent) {
          UserService.setUser(event.data);
        }
      });
    } // onView() { const context = getContext(this); }
    // onChanges() {}
    // onDestroy() {}
    ;

    return AppComponent;
  }(rxcomp.Component);
  AppComponent.meta = {
    selector: '[app-component]'
  };

  // Polyfills

  if ( Number.EPSILON === undefined ) {

  	Number.EPSILON = Math.pow( 2, - 52 );

  }

  if ( Number.isInteger === undefined ) {

  	// Missing in IE
  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

  	Number.isInteger = function ( value ) {

  		return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;

  	};

  }

  //

  if ( Math.sign === undefined ) {

  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

  	Math.sign = function ( x ) {

  		return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

  	};

  }

  if ( 'name' in Function.prototype === false ) {

  	// Missing in IE
  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

  	Object.defineProperty( Function.prototype, 'name', {

  		get: function () {

  			return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];

  		}

  	} );

  }

  if ( Object.assign === undefined ) {

  	// Missing in IE
  	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

  	Object.assign = function ( target ) {

  		if ( target === undefined || target === null ) {

  			throw new TypeError( 'Cannot convert undefined or null to object' );

  		}

  		var output = Object( target );

  		for ( var index = 1; index < arguments.length; index ++ ) {

  			var source = arguments[ index ];

  			if ( source !== undefined && source !== null ) {

  				for ( var nextKey in source ) {

  					if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

  						output[ nextKey ] = source[ nextKey ];

  					}

  				}

  			}

  		}

  		return output;

  	};

  }

  var REVISION = '115';
  var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
  var TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
  var CullFaceNone = 0;
  var CullFaceBack = 1;
  var CullFaceFront = 2;
  var PCFShadowMap = 1;
  var PCFSoftShadowMap = 2;
  var VSMShadowMap = 3;
  var FrontSide = 0;
  var BackSide = 1;
  var DoubleSide = 2;
  var FlatShading = 1;
  var NoBlending = 0;
  var NormalBlending = 1;
  var AdditiveBlending = 2;
  var SubtractiveBlending = 3;
  var MultiplyBlending = 4;
  var CustomBlending = 5;
  var AddEquation = 100;
  var SubtractEquation = 101;
  var ReverseSubtractEquation = 102;
  var MinEquation = 103;
  var MaxEquation = 104;
  var ZeroFactor = 200;
  var OneFactor = 201;
  var SrcColorFactor = 202;
  var OneMinusSrcColorFactor = 203;
  var SrcAlphaFactor = 204;
  var OneMinusSrcAlphaFactor = 205;
  var DstAlphaFactor = 206;
  var OneMinusDstAlphaFactor = 207;
  var DstColorFactor = 208;
  var OneMinusDstColorFactor = 209;
  var SrcAlphaSaturateFactor = 210;
  var NeverDepth = 0;
  var AlwaysDepth = 1;
  var LessDepth = 2;
  var LessEqualDepth = 3;
  var EqualDepth = 4;
  var GreaterEqualDepth = 5;
  var GreaterDepth = 6;
  var NotEqualDepth = 7;
  var MultiplyOperation = 0;
  var MixOperation = 1;
  var AddOperation = 2;
  var NoToneMapping = 0;
  var LinearToneMapping = 1;
  var ReinhardToneMapping = 2;
  var Uncharted2ToneMapping = 3;
  var CineonToneMapping = 4;
  var ACESFilmicToneMapping = 5;

  var UVMapping = 300;
  var CubeReflectionMapping = 301;
  var CubeRefractionMapping = 302;
  var EquirectangularReflectionMapping = 303;
  var EquirectangularRefractionMapping = 304;
  var SphericalReflectionMapping = 305;
  var CubeUVReflectionMapping = 306;
  var CubeUVRefractionMapping = 307;
  var RepeatWrapping = 1000;
  var ClampToEdgeWrapping = 1001;
  var MirroredRepeatWrapping = 1002;
  var NearestFilter = 1003;
  var NearestMipmapNearestFilter = 1004;
  var NearestMipmapLinearFilter = 1005;
  var LinearFilter = 1006;
  var LinearMipmapNearestFilter = 1007;
  var LinearMipmapLinearFilter = 1008;
  var LinearMipMapLinearFilter = 1008;
  var UnsignedByteType = 1009;
  var ByteType = 1010;
  var ShortType = 1011;
  var UnsignedShortType = 1012;
  var IntType = 1013;
  var UnsignedIntType = 1014;
  var FloatType = 1015;
  var HalfFloatType = 1016;
  var UnsignedShort4444Type = 1017;
  var UnsignedShort5551Type = 1018;
  var UnsignedShort565Type = 1019;
  var UnsignedInt248Type = 1020;
  var AlphaFormat = 1021;
  var RGBFormat = 1022;
  var RGBAFormat = 1023;
  var LuminanceFormat = 1024;
  var LuminanceAlphaFormat = 1025;
  var RGBEFormat = RGBAFormat;
  var DepthFormat = 1026;
  var DepthStencilFormat = 1027;
  var RedFormat = 1028;
  var RedIntegerFormat = 1029;
  var RGFormat = 1030;
  var RGIntegerFormat = 1031;
  var RGBIntegerFormat = 1032;
  var RGBAIntegerFormat = 1033;

  var RGB_S3TC_DXT1_Format = 33776;
  var RGBA_S3TC_DXT1_Format = 33777;
  var RGBA_S3TC_DXT3_Format = 33778;
  var RGBA_S3TC_DXT5_Format = 33779;
  var RGB_PVRTC_4BPPV1_Format = 35840;
  var RGB_PVRTC_2BPPV1_Format = 35841;
  var RGBA_PVRTC_4BPPV1_Format = 35842;
  var RGBA_PVRTC_2BPPV1_Format = 35843;
  var RGB_ETC1_Format = 36196;
  var RGB_ETC2_Format = 37492;
  var RGBA_ETC2_EAC_Format = 37496;
  var RGBA_ASTC_4x4_Format = 37808;
  var RGBA_ASTC_5x4_Format = 37809;
  var RGBA_ASTC_5x5_Format = 37810;
  var RGBA_ASTC_6x5_Format = 37811;
  var RGBA_ASTC_6x6_Format = 37812;
  var RGBA_ASTC_8x5_Format = 37813;
  var RGBA_ASTC_8x6_Format = 37814;
  var RGBA_ASTC_8x8_Format = 37815;
  var RGBA_ASTC_10x5_Format = 37816;
  var RGBA_ASTC_10x6_Format = 37817;
  var RGBA_ASTC_10x8_Format = 37818;
  var RGBA_ASTC_10x10_Format = 37819;
  var RGBA_ASTC_12x10_Format = 37820;
  var RGBA_ASTC_12x12_Format = 37821;
  var RGBA_BPTC_Format = 36492;
  var SRGB8_ALPHA8_ASTC_4x4_Format = 37840;
  var SRGB8_ALPHA8_ASTC_5x4_Format = 37841;
  var SRGB8_ALPHA8_ASTC_5x5_Format = 37842;
  var SRGB8_ALPHA8_ASTC_6x5_Format = 37843;
  var SRGB8_ALPHA8_ASTC_6x6_Format = 37844;
  var SRGB8_ALPHA8_ASTC_8x5_Format = 37845;
  var SRGB8_ALPHA8_ASTC_8x6_Format = 37846;
  var SRGB8_ALPHA8_ASTC_8x8_Format = 37847;
  var SRGB8_ALPHA8_ASTC_10x5_Format = 37848;
  var SRGB8_ALPHA8_ASTC_10x6_Format = 37849;
  var SRGB8_ALPHA8_ASTC_10x8_Format = 37850;
  var SRGB8_ALPHA8_ASTC_10x10_Format = 37851;
  var SRGB8_ALPHA8_ASTC_12x10_Format = 37852;
  var SRGB8_ALPHA8_ASTC_12x12_Format = 37853;
  var LoopOnce = 2200;
  var LoopRepeat = 2201;
  var LoopPingPong = 2202;
  var InterpolateDiscrete = 2300;
  var InterpolateLinear = 2301;
  var InterpolateSmooth = 2302;
  var ZeroCurvatureEnding = 2400;
  var ZeroSlopeEnding = 2401;
  var WrapAroundEnding = 2402;
  var TrianglesDrawMode = 0;
  var TriangleStripDrawMode = 1;
  var TriangleFanDrawMode = 2;
  var LinearEncoding = 3000;
  var sRGBEncoding = 3001;
  var GammaEncoding = 3007;
  var RGBEEncoding = 3002;
  var LogLuvEncoding = 3003;
  var RGBM7Encoding = 3004;
  var RGBM16Encoding = 3005;
  var RGBDEncoding = 3006;
  var BasicDepthPacking = 3200;
  var RGBADepthPacking = 3201;
  var TangentSpaceNormalMap = 0;
  var ObjectSpaceNormalMap = 1;
  var KeepStencilOp = 7680;
  var AlwaysStencilFunc = 519;

  var StaticDrawUsage = 35044;
  var DynamicDrawUsage = 35048;

  /**
   * https://github.com/mrdoob/eventdispatcher.js/
   */

  function EventDispatcher() {}

  Object.assign( EventDispatcher.prototype, {

  	addEventListener: function ( type, listener ) {

  		if ( this._listeners === undefined ) this._listeners = {};

  		var listeners = this._listeners;

  		if ( listeners[ type ] === undefined ) {

  			listeners[ type ] = [];

  		}

  		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

  			listeners[ type ].push( listener );

  		}

  	},

  	hasEventListener: function ( type, listener ) {

  		if ( this._listeners === undefined ) return false;

  		var listeners = this._listeners;

  		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

  	},

  	removeEventListener: function ( type, listener ) {

  		if ( this._listeners === undefined ) return;

  		var listeners = this._listeners;
  		var listenerArray = listeners[ type ];

  		if ( listenerArray !== undefined ) {

  			var index = listenerArray.indexOf( listener );

  			if ( index !== - 1 ) {

  				listenerArray.splice( index, 1 );

  			}

  		}

  	},

  	dispatchEvent: function ( event ) {

  		if ( this._listeners === undefined ) return;

  		var listeners = this._listeners;
  		var listenerArray = listeners[ event.type ];

  		if ( listenerArray !== undefined ) {

  			event.target = this;

  			// Make a copy, in case listeners are removed while iterating.
  			var array = listenerArray.slice( 0 );

  			for ( var i = 0, l = array.length; i < l; i ++ ) {

  				array[ i ].call( this, event );

  			}

  		}

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author thezwap
   */

  var _lut = [];

  for ( var i = 0; i < 256; i ++ ) {

  	_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );

  }

  var MathUtils = {

  	DEG2RAD: Math.PI / 180,
  	RAD2DEG: 180 / Math.PI,

  	generateUUID: function () {

  		// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

  		var d0 = Math.random() * 0xffffffff | 0;
  		var d1 = Math.random() * 0xffffffff | 0;
  		var d2 = Math.random() * 0xffffffff | 0;
  		var d3 = Math.random() * 0xffffffff | 0;
  		var uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
  			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
  			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
  			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

  		// .toUpperCase() here flattens concatenated strings to save heap memory space.
  		return uuid.toUpperCase();

  	},

  	clamp: function ( value, min, max ) {

  		return Math.max( min, Math.min( max, value ) );

  	},

  	// compute euclidian modulo of m % n
  	// https://en.wikipedia.org/wiki/Modulo_operation

  	euclideanModulo: function ( n, m ) {

  		return ( ( n % m ) + m ) % m;

  	},

  	// Linear mapping from range <a1, a2> to range <b1, b2>

  	mapLinear: function ( x, a1, a2, b1, b2 ) {

  		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

  	},

  	// https://en.wikipedia.org/wiki/Linear_interpolation

  	lerp: function ( x, y, t ) {

  		return ( 1 - t ) * x + t * y;

  	},

  	// http://en.wikipedia.org/wiki/Smoothstep

  	smoothstep: function ( x, min, max ) {

  		if ( x <= min ) return 0;
  		if ( x >= max ) return 1;

  		x = ( x - min ) / ( max - min );

  		return x * x * ( 3 - 2 * x );

  	},

  	smootherstep: function ( x, min, max ) {

  		if ( x <= min ) return 0;
  		if ( x >= max ) return 1;

  		x = ( x - min ) / ( max - min );

  		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

  	},

  	// Random integer from <low, high> interval

  	randInt: function ( low, high ) {

  		return low + Math.floor( Math.random() * ( high - low + 1 ) );

  	},

  	// Random float from <low, high> interval

  	randFloat: function ( low, high ) {

  		return low + Math.random() * ( high - low );

  	},

  	// Random float from <-range/2, range/2> interval

  	randFloatSpread: function ( range ) {

  		return range * ( 0.5 - Math.random() );

  	},

  	degToRad: function ( degrees ) {

  		return degrees * MathUtils.DEG2RAD;

  	},

  	radToDeg: function ( radians ) {

  		return radians * MathUtils.RAD2DEG;

  	},

  	isPowerOfTwo: function ( value ) {

  		return ( value & ( value - 1 ) ) === 0 && value !== 0;

  	},

  	ceilPowerOfTwo: function ( value ) {

  		return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

  	},

  	floorPowerOfTwo: function ( value ) {

  		return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

  	},

  	setQuaternionFromProperEuler: function ( q, a, b, c, order ) {

  		// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

  		// rotations are applied to the axes in the order specified by 'order'
  		// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
  		// angles are in radians

  		var cos = Math.cos;
  		var sin = Math.sin;

  		var c2 = cos( b / 2 );
  		var s2 = sin( b / 2 );

  		var c13 = cos( ( a + c ) / 2 );
  		var s13 = sin( ( a + c ) / 2 );

  		var c1_3 = cos( ( a - c ) / 2 );
  		var s1_3 = sin( ( a - c ) / 2 );

  		var c3_1 = cos( ( c - a ) / 2 );
  		var s3_1 = sin( ( c - a ) / 2 );

  		if ( order === 'XYX' ) {

  			q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );

  		} else if ( order === 'YZY' ) {

  			q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );

  		} else if ( order === 'ZXZ' ) {

  			q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );

  		} else if ( order === 'XZX' ) {

  			q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );

  		} else if ( order === 'YXY' ) {

  			q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );

  		} else if ( order === 'ZYZ' ) {

  			q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );

  		} else {

  			console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.' );

  		}

  	}

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author philogb / http://blog.thejit.org/
   * @author egraether / http://egraether.com/
   * @author zz85 / http://www.lab4games.net/zz85/blog
   */

  function Vector2( x, y ) {

  	this.x = x || 0;
  	this.y = y || 0;

  }

  Object.defineProperties( Vector2.prototype, {

  	"width": {

  		get: function () {

  			return this.x;

  		},

  		set: function ( value ) {

  			this.x = value;

  		}

  	},

  	"height": {

  		get: function () {

  			return this.y;

  		},

  		set: function ( value ) {

  			this.y = value;

  		}

  	}

  } );

  Object.assign( Vector2.prototype, {

  	isVector2: true,

  	set: function ( x, y ) {

  		this.x = x;
  		this.y = y;

  		return this;

  	},

  	setScalar: function ( scalar ) {

  		this.x = scalar;
  		this.y = scalar;

  		return this;

  	},

  	setX: function ( x ) {

  		this.x = x;

  		return this;

  	},

  	setY: function ( y ) {

  		this.y = y;

  		return this;

  	},

  	setComponent: function ( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	},

  	getComponent: function ( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.x, this.y );

  	},

  	copy: function ( v ) {

  		this.x = v.x;
  		this.y = v.y;

  		return this;

  	},

  	add: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
  			return this.addVectors( v, w );

  		}

  		this.x += v.x;
  		this.y += v.y;

  		return this;

  	},

  	addScalar: function ( s ) {

  		this.x += s;
  		this.y += s;

  		return this;

  	},

  	addVectors: function ( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;

  		return this;

  	},

  	addScaledVector: function ( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;

  		return this;

  	},

  	sub: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
  			return this.subVectors( v, w );

  		}

  		this.x -= v.x;
  		this.y -= v.y;

  		return this;

  	},

  	subScalar: function ( s ) {

  		this.x -= s;
  		this.y -= s;

  		return this;

  	},

  	subVectors: function ( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;

  		return this;

  	},

  	multiply: function ( v ) {

  		this.x *= v.x;
  		this.y *= v.y;

  		return this;

  	},

  	multiplyScalar: function ( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;

  		return this;

  	},

  	divide: function ( v ) {

  		this.x /= v.x;
  		this.y /= v.y;

  		return this;

  	},

  	divideScalar: function ( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	},

  	applyMatrix3: function ( m ) {

  		var x = this.x, y = this.y;
  		var e = m.elements;

  		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
  		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

  		return this;

  	},

  	min: function ( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );

  		return this;

  	},

  	max: function ( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );

  		return this;

  	},

  	clamp: function ( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

  		return this;

  	},

  	clampScalar: function ( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

  		return this;

  	},

  	clampLength: function ( min, max ) {

  		var length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	},

  	floor: function () {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );

  		return this;

  	},

  	ceil: function () {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );

  		return this;

  	},

  	round: function () {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );

  		return this;

  	},

  	roundToZero: function () {

  		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
  		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

  		return this;

  	},

  	negate: function () {

  		this.x = - this.x;
  		this.y = - this.y;

  		return this;

  	},

  	dot: function ( v ) {

  		return this.x * v.x + this.y * v.y;

  	},

  	cross: function ( v ) {

  		return this.x * v.y - this.y * v.x;

  	},

  	lengthSq: function () {

  		return this.x * this.x + this.y * this.y;

  	},

  	length: function () {

  		return Math.sqrt( this.x * this.x + this.y * this.y );

  	},

  	manhattanLength: function () {

  		return Math.abs( this.x ) + Math.abs( this.y );

  	},

  	normalize: function () {

  		return this.divideScalar( this.length() || 1 );

  	},

  	angle: function () {

  		// computes the angle in radians with respect to the positive x-axis

  		var angle = Math.atan2( - this.y, - this.x ) + Math.PI;

  		return angle;

  	},

  	distanceTo: function ( v ) {

  		return Math.sqrt( this.distanceToSquared( v ) );

  	},

  	distanceToSquared: function ( v ) {

  		var dx = this.x - v.x, dy = this.y - v.y;
  		return dx * dx + dy * dy;

  	},

  	manhattanDistanceTo: function ( v ) {

  		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

  	},

  	setLength: function ( length ) {

  		return this.normalize().multiplyScalar( length );

  	},

  	lerp: function ( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;

  		return this;

  	},

  	lerpVectors: function ( v1, v2, alpha ) {

  		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

  	},

  	equals: function ( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;

  		return array;

  	},

  	fromBufferAttribute: function ( attribute, index, offset ) {

  		if ( offset !== undefined ) {

  			console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

  		}

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );

  		return this;

  	},

  	rotateAround: function ( center, angle ) {

  		var c = Math.cos( angle ), s = Math.sin( angle );

  		var x = this.x - center.x;
  		var y = this.y - center.y;

  		this.x = x * c - y * s + center.x;
  		this.y = x * s + y * c + center.y;

  		return this;

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author bhouston / http://clara.io
   * @author tschw
   */

  function Matrix3() {

  	this.elements = [

  		1, 0, 0,
  		0, 1, 0,
  		0, 0, 1

  	];

  	if ( arguments.length > 0 ) {

  		console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

  	}

  }

  Object.assign( Matrix3.prototype, {

  	isMatrix3: true,

  	set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

  		var te = this.elements;

  		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
  		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
  		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

  		return this;

  	},

  	identity: function () {

  		this.set(

  			1, 0, 0,
  			0, 1, 0,
  			0, 0, 1

  		);

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().fromArray( this.elements );

  	},

  	copy: function ( m ) {

  		var te = this.elements;
  		var me = m.elements;

  		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
  		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
  		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

  		return this;

  	},

  	extractBasis: function ( xAxis, yAxis, zAxis ) {

  		xAxis.setFromMatrix3Column( this, 0 );
  		yAxis.setFromMatrix3Column( this, 1 );
  		zAxis.setFromMatrix3Column( this, 2 );

  		return this;

  	},

  	setFromMatrix4: function ( m ) {

  		var me = m.elements;

  		this.set(

  			me[ 0 ], me[ 4 ], me[ 8 ],
  			me[ 1 ], me[ 5 ], me[ 9 ],
  			me[ 2 ], me[ 6 ], me[ 10 ]

  		);

  		return this;

  	},

  	multiply: function ( m ) {

  		return this.multiplyMatrices( this, m );

  	},

  	premultiply: function ( m ) {

  		return this.multiplyMatrices( m, this );

  	},

  	multiplyMatrices: function ( a, b ) {

  		var ae = a.elements;
  		var be = b.elements;
  		var te = this.elements;

  		var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
  		var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
  		var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

  		var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
  		var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
  		var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

  		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
  		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
  		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

  		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
  		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
  		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

  		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
  		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
  		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

  		return this;

  	},

  	multiplyScalar: function ( s ) {

  		var te = this.elements;

  		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
  		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
  		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

  		return this;

  	},

  	determinant: function () {

  		var te = this.elements;

  		var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
  			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
  			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

  		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

  	},

  	getInverse: function ( matrix, throwOnDegenerate ) {

  		if ( throwOnDegenerate !== undefined ) {

  			console.warn( "THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate." );

  		}

  		var me = matrix.elements,
  			te = this.elements,

  			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
  			n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
  			n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

  			t11 = n33 * n22 - n32 * n23,
  			t12 = n32 * n13 - n33 * n12,
  			t13 = n23 * n12 - n22 * n13,

  			det = n11 * t11 + n21 * t12 + n31 * t13;

  		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );

  		var detInv = 1 / det;

  		te[ 0 ] = t11 * detInv;
  		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
  		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

  		te[ 3 ] = t12 * detInv;
  		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
  		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

  		te[ 6 ] = t13 * detInv;
  		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
  		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

  		return this;

  	},

  	transpose: function () {

  		var tmp, m = this.elements;

  		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
  		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
  		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

  		return this;

  	},

  	getNormalMatrix: function ( matrix4 ) {

  		return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

  	},

  	transposeIntoArray: function ( r ) {

  		var m = this.elements;

  		r[ 0 ] = m[ 0 ];
  		r[ 1 ] = m[ 3 ];
  		r[ 2 ] = m[ 6 ];
  		r[ 3 ] = m[ 1 ];
  		r[ 4 ] = m[ 4 ];
  		r[ 5 ] = m[ 7 ];
  		r[ 6 ] = m[ 2 ];
  		r[ 7 ] = m[ 5 ];
  		r[ 8 ] = m[ 8 ];

  		return this;

  	},

  	setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {

  		var c = Math.cos( rotation );
  		var s = Math.sin( rotation );

  		this.set(
  			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
  			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
  			0, 0, 1
  		);

  	},

  	scale: function ( sx, sy ) {

  		var te = this.elements;

  		te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
  		te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

  		return this;

  	},

  	rotate: function ( theta ) {

  		var c = Math.cos( theta );
  		var s = Math.sin( theta );

  		var te = this.elements;

  		var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
  		var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

  		te[ 0 ] = c * a11 + s * a21;
  		te[ 3 ] = c * a12 + s * a22;
  		te[ 6 ] = c * a13 + s * a23;

  		te[ 1 ] = - s * a11 + c * a21;
  		te[ 4 ] = - s * a12 + c * a22;
  		te[ 7 ] = - s * a13 + c * a23;

  		return this;

  	},

  	translate: function ( tx, ty ) {

  		var te = this.elements;

  		te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
  		te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

  		return this;

  	},

  	equals: function ( matrix ) {

  		var te = this.elements;
  		var me = matrix.elements;

  		for ( var i = 0; i < 9; i ++ ) {

  			if ( te[ i ] !== me[ i ] ) return false;

  		}

  		return true;

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		for ( var i = 0; i < 9; i ++ ) {

  			this.elements[ i ] = array[ i + offset ];

  		}

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		var te = this.elements;

  		array[ offset ] = te[ 0 ];
  		array[ offset + 1 ] = te[ 1 ];
  		array[ offset + 2 ] = te[ 2 ];

  		array[ offset + 3 ] = te[ 3 ];
  		array[ offset + 4 ] = te[ 4 ];
  		array[ offset + 5 ] = te[ 5 ];

  		array[ offset + 6 ] = te[ 6 ];
  		array[ offset + 7 ] = te[ 7 ];
  		array[ offset + 8 ] = te[ 8 ];

  		return array;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author szimek / https://github.com/szimek/
   */

  var _canvas;

  var ImageUtils = {

  	getDataURL: function ( image ) {

  		var canvas;

  		if ( typeof HTMLCanvasElement == 'undefined' ) {

  			return image.src;

  		} else if ( image instanceof HTMLCanvasElement ) {

  			canvas = image;

  		} else {

  			if ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );

  			_canvas.width = image.width;
  			_canvas.height = image.height;

  			var context = _canvas.getContext( '2d' );

  			if ( image instanceof ImageData ) {

  				context.putImageData( image, 0, 0 );

  			} else {

  				context.drawImage( image, 0, 0, image.width, image.height );

  			}

  			canvas = _canvas;

  		}

  		if ( canvas.width > 2048 || canvas.height > 2048 ) {

  			return canvas.toDataURL( 'image/jpeg', 0.6 );

  		} else {

  			return canvas.toDataURL( 'image/png' );

  		}

  	}

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author szimek / https://github.com/szimek/
   */

  var textureId = 0;

  function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

  	Object.defineProperty( this, 'id', { value: textureId ++ } );

  	this.uuid = MathUtils.generateUUID();

  	this.name = '';

  	this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
  	this.mipmaps = [];

  	this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

  	this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
  	this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

  	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
  	this.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;

  	this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

  	this.format = format !== undefined ? format : RGBAFormat;
  	this.internalFormat = null;
  	this.type = type !== undefined ? type : UnsignedByteType;

  	this.offset = new Vector2( 0, 0 );
  	this.repeat = new Vector2( 1, 1 );
  	this.center = new Vector2( 0, 0 );
  	this.rotation = 0;

  	this.matrixAutoUpdate = true;
  	this.matrix = new Matrix3();

  	this.generateMipmaps = true;
  	this.premultiplyAlpha = false;
  	this.flipY = true;
  	this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

  	// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
  	//
  	// Also changing the encoding after already used by a Material will not automatically make the Material
  	// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
  	this.encoding = encoding !== undefined ? encoding : LinearEncoding;

  	this.version = 0;
  	this.onUpdate = null;

  }

  Texture.DEFAULT_IMAGE = undefined;
  Texture.DEFAULT_MAPPING = UVMapping;

  Texture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: Texture,

  	isTexture: true,

  	updateMatrix: function () {

  		this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.name = source.name;

  		this.image = source.image;
  		this.mipmaps = source.mipmaps.slice( 0 );

  		this.mapping = source.mapping;

  		this.wrapS = source.wrapS;
  		this.wrapT = source.wrapT;

  		this.magFilter = source.magFilter;
  		this.minFilter = source.minFilter;

  		this.anisotropy = source.anisotropy;

  		this.format = source.format;
  		this.internalFormat = source.internalFormat;
  		this.type = source.type;

  		this.offset.copy( source.offset );
  		this.repeat.copy( source.repeat );
  		this.center.copy( source.center );
  		this.rotation = source.rotation;

  		this.matrixAutoUpdate = source.matrixAutoUpdate;
  		this.matrix.copy( source.matrix );

  		this.generateMipmaps = source.generateMipmaps;
  		this.premultiplyAlpha = source.premultiplyAlpha;
  		this.flipY = source.flipY;
  		this.unpackAlignment = source.unpackAlignment;
  		this.encoding = source.encoding;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var isRootObject = ( meta === undefined || typeof meta === 'string' );

  		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

  			return meta.textures[ this.uuid ];

  		}

  		var output = {

  			metadata: {
  				version: 4.5,
  				type: 'Texture',
  				generator: 'Texture.toJSON'
  			},

  			uuid: this.uuid,
  			name: this.name,

  			mapping: this.mapping,

  			repeat: [ this.repeat.x, this.repeat.y ],
  			offset: [ this.offset.x, this.offset.y ],
  			center: [ this.center.x, this.center.y ],
  			rotation: this.rotation,

  			wrap: [ this.wrapS, this.wrapT ],

  			format: this.format,
  			type: this.type,
  			encoding: this.encoding,

  			minFilter: this.minFilter,
  			magFilter: this.magFilter,
  			anisotropy: this.anisotropy,

  			flipY: this.flipY,

  			premultiplyAlpha: this.premultiplyAlpha,
  			unpackAlignment: this.unpackAlignment

  		};

  		if ( this.image !== undefined ) {

  			// TODO: Move to THREE.Image

  			var image = this.image;

  			if ( image.uuid === undefined ) {

  				image.uuid = MathUtils.generateUUID(); // UGH

  			}

  			if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {

  				var url;

  				if ( Array.isArray( image ) ) {

  					// process array of images e.g. CubeTexture

  					url = [];

  					for ( var i = 0, l = image.length; i < l; i ++ ) {

  						url.push( ImageUtils.getDataURL( image[ i ] ) );

  					}

  				} else {

  					// process single image

  					url = ImageUtils.getDataURL( image );

  				}

  				meta.images[ image.uuid ] = {
  					uuid: image.uuid,
  					url: url
  				};

  			}

  			output.image = image.uuid;

  		}

  		if ( ! isRootObject ) {

  			meta.textures[ this.uuid ] = output;

  		}

  		return output;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	},

  	transformUv: function ( uv ) {

  		if ( this.mapping !== UVMapping ) return uv;

  		uv.applyMatrix3( this.matrix );

  		if ( uv.x < 0 || uv.x > 1 ) {

  			switch ( this.wrapS ) {

  				case RepeatWrapping:

  					uv.x = uv.x - Math.floor( uv.x );
  					break;

  				case ClampToEdgeWrapping:

  					uv.x = uv.x < 0 ? 0 : 1;
  					break;

  				case MirroredRepeatWrapping:

  					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

  						uv.x = Math.ceil( uv.x ) - uv.x;

  					} else {

  						uv.x = uv.x - Math.floor( uv.x );

  					}
  					break;

  			}

  		}

  		if ( uv.y < 0 || uv.y > 1 ) {

  			switch ( this.wrapT ) {

  				case RepeatWrapping:

  					uv.y = uv.y - Math.floor( uv.y );
  					break;

  				case ClampToEdgeWrapping:

  					uv.y = uv.y < 0 ? 0 : 1;
  					break;

  				case MirroredRepeatWrapping:

  					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

  						uv.y = Math.ceil( uv.y ) - uv.y;

  					} else {

  						uv.y = uv.y - Math.floor( uv.y );

  					}
  					break;

  			}

  		}

  		if ( this.flipY ) {

  			uv.y = 1 - uv.y;

  		}

  		return uv;

  	}

  } );

  Object.defineProperty( Texture.prototype, "needsUpdate", {

  	set: function ( value ) {

  		if ( value === true ) this.version ++;

  	}

  } );

  /**
   * @author supereggbert / http://www.paulbrunt.co.uk/
   * @author philogb / http://blog.thejit.org/
   * @author mikael emtinger / http://gomo.se/
   * @author egraether / http://egraether.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  function Vector4( x, y, z, w ) {

  	this.x = x || 0;
  	this.y = y || 0;
  	this.z = z || 0;
  	this.w = ( w !== undefined ) ? w : 1;

  }

  Object.defineProperties( Vector4.prototype, {

  	"width": {

  		get: function () {

  			return this.z;

  		},

  		set: function ( value ) {

  			this.z = value;

  		}

  	},

  	"height": {

  		get: function () {

  			return this.w;

  		},

  		set: function ( value ) {

  			this.w = value;

  		}

  	}

  } );

  Object.assign( Vector4.prototype, {

  	isVector4: true,

  	set: function ( x, y, z, w ) {

  		this.x = x;
  		this.y = y;
  		this.z = z;
  		this.w = w;

  		return this;

  	},

  	setScalar: function ( scalar ) {

  		this.x = scalar;
  		this.y = scalar;
  		this.z = scalar;
  		this.w = scalar;

  		return this;

  	},

  	setX: function ( x ) {

  		this.x = x;

  		return this;

  	},

  	setY: function ( y ) {

  		this.y = y;

  		return this;

  	},

  	setZ: function ( z ) {

  		this.z = z;

  		return this;

  	},

  	setW: function ( w ) {

  		this.w = w;

  		return this;

  	},

  	setComponent: function ( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			case 2: this.z = value; break;
  			case 3: this.w = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	},

  	getComponent: function ( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			case 2: return this.z;
  			case 3: return this.w;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.x, this.y, this.z, this.w );

  	},

  	copy: function ( v ) {

  		this.x = v.x;
  		this.y = v.y;
  		this.z = v.z;
  		this.w = ( v.w !== undefined ) ? v.w : 1;

  		return this;

  	},

  	add: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
  			return this.addVectors( v, w );

  		}

  		this.x += v.x;
  		this.y += v.y;
  		this.z += v.z;
  		this.w += v.w;

  		return this;

  	},

  	addScalar: function ( s ) {

  		this.x += s;
  		this.y += s;
  		this.z += s;
  		this.w += s;

  		return this;

  	},

  	addVectors: function ( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;
  		this.z = a.z + b.z;
  		this.w = a.w + b.w;

  		return this;

  	},

  	addScaledVector: function ( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;
  		this.z += v.z * s;
  		this.w += v.w * s;

  		return this;

  	},

  	sub: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
  			return this.subVectors( v, w );

  		}

  		this.x -= v.x;
  		this.y -= v.y;
  		this.z -= v.z;
  		this.w -= v.w;

  		return this;

  	},

  	subScalar: function ( s ) {

  		this.x -= s;
  		this.y -= s;
  		this.z -= s;
  		this.w -= s;

  		return this;

  	},

  	subVectors: function ( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;
  		this.z = a.z - b.z;
  		this.w = a.w - b.w;

  		return this;

  	},

  	multiplyScalar: function ( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;
  		this.z *= scalar;
  		this.w *= scalar;

  		return this;

  	},

  	applyMatrix4: function ( m ) {

  		var x = this.x, y = this.y, z = this.z, w = this.w;
  		var e = m.elements;

  		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
  		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
  		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
  		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

  		return this;

  	},

  	divideScalar: function ( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	},

  	setAxisAngleFromQuaternion: function ( q ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

  		// q is assumed to be normalized

  		this.w = 2 * Math.acos( q.w );

  		var s = Math.sqrt( 1 - q.w * q.w );

  		if ( s < 0.0001 ) {

  			this.x = 1;
  			this.y = 0;
  			this.z = 0;

  		} else {

  			this.x = q.x / s;
  			this.y = q.y / s;
  			this.z = q.z / s;

  		}

  		return this;

  	},

  	setAxisAngleFromRotationMatrix: function ( m ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		var angle, x, y, z,		// variables for result
  			epsilon = 0.01,		// margin to allow for rounding errors
  			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

  			te = m.elements,

  			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
  			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
  			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

  		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
  		     ( Math.abs( m13 - m31 ) < epsilon ) &&
  		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

  			// singularity found
  			// first check for identity matrix which must have +1 for all terms
  			// in leading diagonal and zero in other terms

  			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
  			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
  			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
  			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

  				// this singularity is identity matrix so angle = 0

  				this.set( 1, 0, 0, 0 );

  				return this; // zero angle, arbitrary axis

  			}

  			// otherwise this singularity is angle = 180

  			angle = Math.PI;

  			var xx = ( m11 + 1 ) / 2;
  			var yy = ( m22 + 1 ) / 2;
  			var zz = ( m33 + 1 ) / 2;
  			var xy = ( m12 + m21 ) / 4;
  			var xz = ( m13 + m31 ) / 4;
  			var yz = ( m23 + m32 ) / 4;

  			if ( ( xx > yy ) && ( xx > zz ) ) {

  				// m11 is the largest diagonal term

  				if ( xx < epsilon ) {

  					x = 0;
  					y = 0.707106781;
  					z = 0.707106781;

  				} else {

  					x = Math.sqrt( xx );
  					y = xy / x;
  					z = xz / x;

  				}

  			} else if ( yy > zz ) {

  				// m22 is the largest diagonal term

  				if ( yy < epsilon ) {

  					x = 0.707106781;
  					y = 0;
  					z = 0.707106781;

  				} else {

  					y = Math.sqrt( yy );
  					x = xy / y;
  					z = yz / y;

  				}

  			} else {

  				// m33 is the largest diagonal term so base result on this

  				if ( zz < epsilon ) {

  					x = 0.707106781;
  					y = 0.707106781;
  					z = 0;

  				} else {

  					z = Math.sqrt( zz );
  					x = xz / z;
  					y = yz / z;

  				}

  			}

  			this.set( x, y, z, angle );

  			return this; // return 180 deg rotation

  		}

  		// as we have reached here there are no singularities so we can handle normally

  		var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
  		                   ( m13 - m31 ) * ( m13 - m31 ) +
  		                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

  		if ( Math.abs( s ) < 0.001 ) s = 1;

  		// prevent divide by zero, should not happen if matrix is orthogonal and should be
  		// caught by singularity test above, but I've left it in just in case

  		this.x = ( m32 - m23 ) / s;
  		this.y = ( m13 - m31 ) / s;
  		this.z = ( m21 - m12 ) / s;
  		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

  		return this;

  	},

  	min: function ( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );
  		this.z = Math.min( this.z, v.z );
  		this.w = Math.min( this.w, v.w );

  		return this;

  	},

  	max: function ( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );
  		this.z = Math.max( this.z, v.z );
  		this.w = Math.max( this.w, v.w );

  		return this;

  	},

  	clamp: function ( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
  		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
  		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

  		return this;

  	},

  	clampScalar: function ( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
  		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
  		this.w = Math.max( minVal, Math.min( maxVal, this.w ) );

  		return this;

  	},

  	clampLength: function ( min, max ) {

  		var length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	},

  	floor: function () {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );
  		this.z = Math.floor( this.z );
  		this.w = Math.floor( this.w );

  		return this;

  	},

  	ceil: function () {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );
  		this.z = Math.ceil( this.z );
  		this.w = Math.ceil( this.w );

  		return this;

  	},

  	round: function () {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );
  		this.z = Math.round( this.z );
  		this.w = Math.round( this.w );

  		return this;

  	},

  	roundToZero: function () {

  		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
  		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
  		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
  		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

  		return this;

  	},

  	negate: function () {

  		this.x = - this.x;
  		this.y = - this.y;
  		this.z = - this.z;
  		this.w = - this.w;

  		return this;

  	},

  	dot: function ( v ) {

  		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

  	},

  	lengthSq: function () {

  		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

  	},

  	length: function () {

  		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

  	},

  	manhattanLength: function () {

  		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

  	},

  	normalize: function () {

  		return this.divideScalar( this.length() || 1 );

  	},

  	setLength: function ( length ) {

  		return this.normalize().multiplyScalar( length );

  	},

  	lerp: function ( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;
  		this.z += ( v.z - this.z ) * alpha;
  		this.w += ( v.w - this.w ) * alpha;

  		return this;

  	},

  	lerpVectors: function ( v1, v2, alpha ) {

  		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

  	},

  	equals: function ( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];
  		this.z = array[ offset + 2 ];
  		this.w = array[ offset + 3 ];

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;
  		array[ offset + 2 ] = this.z;
  		array[ offset + 3 ] = this.w;

  		return array;

  	},

  	fromBufferAttribute: function ( attribute, index, offset ) {

  		if ( offset !== undefined ) {

  			console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

  		}

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );
  		this.z = attribute.getZ( index );
  		this.w = attribute.getW( index );

  		return this;

  	}

  } );

  /**
   * @author szimek / https://github.com/szimek/
   * @author alteredq / http://alteredqualia.com/
   * @author Marius Kintel / https://github.com/kintel
   */

  /*
   In options, we can specify:
   * Texture parameters for an auto-generated target texture
   * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
  */
  function WebGLRenderTarget( width, height, options ) {

  	this.width = width;
  	this.height = height;

  	this.scissor = new Vector4( 0, 0, width, height );
  	this.scissorTest = false;

  	this.viewport = new Vector4( 0, 0, width, height );

  	options = options || {};

  	this.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

  	this.texture.image = {};
  	this.texture.image.width = width;
  	this.texture.image.height = height;

  	this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
  	this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

  	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
  	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
  	this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

  }

  WebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: WebGLRenderTarget,

  	isWebGLRenderTarget: true,

  	setSize: function ( width, height ) {

  		if ( this.width !== width || this.height !== height ) {

  			this.width = width;
  			this.height = height;

  			this.texture.image.width = width;
  			this.texture.image.height = height;

  			this.dispose();

  		}

  		this.viewport.set( 0, 0, width, height );
  		this.scissor.set( 0, 0, width, height );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.width = source.width;
  		this.height = source.height;

  		this.viewport.copy( source.viewport );

  		this.texture = source.texture.clone();

  		this.depthBuffer = source.depthBuffer;
  		this.stencilBuffer = source.stencilBuffer;
  		this.depthTexture = source.depthTexture;

  		return this;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  /**
   * @author Mugen87 / https://github.com/Mugen87
   * @author Matt DesLauriers / @mattdesl
   */

  function WebGLMultisampleRenderTarget( width, height, options ) {

  	WebGLRenderTarget.call( this, width, height, options );

  	this.samples = 4;

  }

  WebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {

  	constructor: WebGLMultisampleRenderTarget,

  	isWebGLMultisampleRenderTarget: true,

  	copy: function ( source ) {

  		WebGLRenderTarget.prototype.copy.call( this, source );

  		this.samples = source.samples;

  		return this;

  	}

  } );

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author bhouston / http://clara.io
   */

  function Quaternion( x, y, z, w ) {

  	this._x = x || 0;
  	this._y = y || 0;
  	this._z = z || 0;
  	this._w = ( w !== undefined ) ? w : 1;

  }

  Object.assign( Quaternion, {

  	slerp: function ( qa, qb, qm, t ) {

  		return qm.copy( qa ).slerp( qb, t );

  	},

  	slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

  		// fuzz-free, array-based Quaternion SLERP operation

  		var x0 = src0[ srcOffset0 + 0 ],
  			y0 = src0[ srcOffset0 + 1 ],
  			z0 = src0[ srcOffset0 + 2 ],
  			w0 = src0[ srcOffset0 + 3 ],

  			x1 = src1[ srcOffset1 + 0 ],
  			y1 = src1[ srcOffset1 + 1 ],
  			z1 = src1[ srcOffset1 + 2 ],
  			w1 = src1[ srcOffset1 + 3 ];

  		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

  			var s = 1 - t,

  				cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

  				dir = ( cos >= 0 ? 1 : - 1 ),
  				sqrSin = 1 - cos * cos;

  			// Skip the Slerp for tiny steps to avoid numeric problems:
  			if ( sqrSin > Number.EPSILON ) {

  				var sin = Math.sqrt( sqrSin ),
  					len = Math.atan2( sin, cos * dir );

  				s = Math.sin( s * len ) / sin;
  				t = Math.sin( t * len ) / sin;

  			}

  			var tDir = t * dir;

  			x0 = x0 * s + x1 * tDir;
  			y0 = y0 * s + y1 * tDir;
  			z0 = z0 * s + z1 * tDir;
  			w0 = w0 * s + w1 * tDir;

  			// Normalize in case we just did a lerp:
  			if ( s === 1 - t ) {

  				var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

  				x0 *= f;
  				y0 *= f;
  				z0 *= f;
  				w0 *= f;

  			}

  		}

  		dst[ dstOffset ] = x0;
  		dst[ dstOffset + 1 ] = y0;
  		dst[ dstOffset + 2 ] = z0;
  		dst[ dstOffset + 3 ] = w0;

  	}

  } );

  Object.defineProperties( Quaternion.prototype, {

  	x: {

  		get: function () {

  			return this._x;

  		},

  		set: function ( value ) {

  			this._x = value;
  			this._onChangeCallback();

  		}

  	},

  	y: {

  		get: function () {

  			return this._y;

  		},

  		set: function ( value ) {

  			this._y = value;
  			this._onChangeCallback();

  		}

  	},

  	z: {

  		get: function () {

  			return this._z;

  		},

  		set: function ( value ) {

  			this._z = value;
  			this._onChangeCallback();

  		}

  	},

  	w: {

  		get: function () {

  			return this._w;

  		},

  		set: function ( value ) {

  			this._w = value;
  			this._onChangeCallback();

  		}

  	}

  } );

  Object.assign( Quaternion.prototype, {

  	isQuaternion: true,

  	set: function ( x, y, z, w ) {

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._w = w;

  		this._onChangeCallback();

  		return this;

  	},

  	clone: function () {

  		return new this.constructor( this._x, this._y, this._z, this._w );

  	},

  	copy: function ( quaternion ) {

  		this._x = quaternion.x;
  		this._y = quaternion.y;
  		this._z = quaternion.z;
  		this._w = quaternion.w;

  		this._onChangeCallback();

  		return this;

  	},

  	setFromEuler: function ( euler, update ) {

  		if ( ! ( euler && euler.isEuler ) ) {

  			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

  		}

  		var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

  		// http://www.mathworks.com/matlabcentral/fileexchange/
  		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
  		//	content/SpinCalc.m

  		var cos = Math.cos;
  		var sin = Math.sin;

  		var c1 = cos( x / 2 );
  		var c2 = cos( y / 2 );
  		var c3 = cos( z / 2 );

  		var s1 = sin( x / 2 );
  		var s2 = sin( y / 2 );
  		var s3 = sin( z / 2 );

  		if ( order === 'XYZ' ) {

  			this._x = s1 * c2 * c3 + c1 * s2 * s3;
  			this._y = c1 * s2 * c3 - s1 * c2 * s3;
  			this._z = c1 * c2 * s3 + s1 * s2 * c3;
  			this._w = c1 * c2 * c3 - s1 * s2 * s3;

  		} else if ( order === 'YXZ' ) {

  			this._x = s1 * c2 * c3 + c1 * s2 * s3;
  			this._y = c1 * s2 * c3 - s1 * c2 * s3;
  			this._z = c1 * c2 * s3 - s1 * s2 * c3;
  			this._w = c1 * c2 * c3 + s1 * s2 * s3;

  		} else if ( order === 'ZXY' ) {

  			this._x = s1 * c2 * c3 - c1 * s2 * s3;
  			this._y = c1 * s2 * c3 + s1 * c2 * s3;
  			this._z = c1 * c2 * s3 + s1 * s2 * c3;
  			this._w = c1 * c2 * c3 - s1 * s2 * s3;

  		} else if ( order === 'ZYX' ) {

  			this._x = s1 * c2 * c3 - c1 * s2 * s3;
  			this._y = c1 * s2 * c3 + s1 * c2 * s3;
  			this._z = c1 * c2 * s3 - s1 * s2 * c3;
  			this._w = c1 * c2 * c3 + s1 * s2 * s3;

  		} else if ( order === 'YZX' ) {

  			this._x = s1 * c2 * c3 + c1 * s2 * s3;
  			this._y = c1 * s2 * c3 + s1 * c2 * s3;
  			this._z = c1 * c2 * s3 - s1 * s2 * c3;
  			this._w = c1 * c2 * c3 - s1 * s2 * s3;

  		} else if ( order === 'XZY' ) {

  			this._x = s1 * c2 * c3 - c1 * s2 * s3;
  			this._y = c1 * s2 * c3 - s1 * c2 * s3;
  			this._z = c1 * c2 * s3 + s1 * s2 * c3;
  			this._w = c1 * c2 * c3 + s1 * s2 * s3;

  		}

  		if ( update !== false ) this._onChangeCallback();

  		return this;

  	},

  	setFromAxisAngle: function ( axis, angle ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

  		// assumes axis is normalized

  		var halfAngle = angle / 2, s = Math.sin( halfAngle );

  		this._x = axis.x * s;
  		this._y = axis.y * s;
  		this._z = axis.z * s;
  		this._w = Math.cos( halfAngle );

  		this._onChangeCallback();

  		return this;

  	},

  	setFromRotationMatrix: function ( m ) {

  		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		var te = m.elements,

  			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
  			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
  			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

  			trace = m11 + m22 + m33,
  			s;

  		if ( trace > 0 ) {

  			s = 0.5 / Math.sqrt( trace + 1.0 );

  			this._w = 0.25 / s;
  			this._x = ( m32 - m23 ) * s;
  			this._y = ( m13 - m31 ) * s;
  			this._z = ( m21 - m12 ) * s;

  		} else if ( m11 > m22 && m11 > m33 ) {

  			s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

  			this._w = ( m32 - m23 ) / s;
  			this._x = 0.25 * s;
  			this._y = ( m12 + m21 ) / s;
  			this._z = ( m13 + m31 ) / s;

  		} else if ( m22 > m33 ) {

  			s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

  			this._w = ( m13 - m31 ) / s;
  			this._x = ( m12 + m21 ) / s;
  			this._y = 0.25 * s;
  			this._z = ( m23 + m32 ) / s;

  		} else {

  			s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

  			this._w = ( m21 - m12 ) / s;
  			this._x = ( m13 + m31 ) / s;
  			this._y = ( m23 + m32 ) / s;
  			this._z = 0.25 * s;

  		}

  		this._onChangeCallback();

  		return this;

  	},

  	setFromUnitVectors: function ( vFrom, vTo ) {

  		// assumes direction vectors vFrom and vTo are normalized

  		var EPS = 0.000001;

  		var r = vFrom.dot( vTo ) + 1;

  		if ( r < EPS ) {

  			r = 0;

  			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

  				this._x = - vFrom.y;
  				this._y = vFrom.x;
  				this._z = 0;
  				this._w = r;

  			} else {

  				this._x = 0;
  				this._y = - vFrom.z;
  				this._z = vFrom.y;
  				this._w = r;

  			}

  		} else {

  			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

  			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
  			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
  			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
  			this._w = r;

  		}

  		return this.normalize();

  	},

  	angleTo: function ( q ) {

  		return 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );

  	},

  	rotateTowards: function ( q, step ) {

  		var angle = this.angleTo( q );

  		if ( angle === 0 ) return this;

  		var t = Math.min( 1, step / angle );

  		this.slerp( q, t );

  		return this;

  	},

  	inverse: function () {

  		// quaternion is assumed to have unit length

  		return this.conjugate();

  	},

  	conjugate: function () {

  		this._x *= - 1;
  		this._y *= - 1;
  		this._z *= - 1;

  		this._onChangeCallback();

  		return this;

  	},

  	dot: function ( v ) {

  		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

  	},

  	lengthSq: function () {

  		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

  	},

  	length: function () {

  		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

  	},

  	normalize: function () {

  		var l = this.length();

  		if ( l === 0 ) {

  			this._x = 0;
  			this._y = 0;
  			this._z = 0;
  			this._w = 1;

  		} else {

  			l = 1 / l;

  			this._x = this._x * l;
  			this._y = this._y * l;
  			this._z = this._z * l;
  			this._w = this._w * l;

  		}

  		this._onChangeCallback();

  		return this;

  	},

  	multiply: function ( q, p ) {

  		if ( p !== undefined ) {

  			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
  			return this.multiplyQuaternions( q, p );

  		}

  		return this.multiplyQuaternions( this, q );

  	},

  	premultiply: function ( q ) {

  		return this.multiplyQuaternions( q, this );

  	},

  	multiplyQuaternions: function ( a, b ) {

  		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

  		var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
  		var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

  		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
  		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
  		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
  		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

  		this._onChangeCallback();

  		return this;

  	},

  	slerp: function ( qb, t ) {

  		if ( t === 0 ) return this;
  		if ( t === 1 ) return this.copy( qb );

  		var x = this._x, y = this._y, z = this._z, w = this._w;

  		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

  		var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

  		if ( cosHalfTheta < 0 ) {

  			this._w = - qb._w;
  			this._x = - qb._x;
  			this._y = - qb._y;
  			this._z = - qb._z;

  			cosHalfTheta = - cosHalfTheta;

  		} else {

  			this.copy( qb );

  		}

  		if ( cosHalfTheta >= 1.0 ) {

  			this._w = w;
  			this._x = x;
  			this._y = y;
  			this._z = z;

  			return this;

  		}

  		var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

  		if ( sqrSinHalfTheta <= Number.EPSILON ) {

  			var s = 1 - t;
  			this._w = s * w + t * this._w;
  			this._x = s * x + t * this._x;
  			this._y = s * y + t * this._y;
  			this._z = s * z + t * this._z;

  			this.normalize();
  			this._onChangeCallback();

  			return this;

  		}

  		var sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
  		var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
  		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
  			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

  		this._w = ( w * ratioA + this._w * ratioB );
  		this._x = ( x * ratioA + this._x * ratioB );
  		this._y = ( y * ratioA + this._y * ratioB );
  		this._z = ( z * ratioA + this._z * ratioB );

  		this._onChangeCallback();

  		return this;

  	},

  	equals: function ( quaternion ) {

  		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this._x = array[ offset ];
  		this._y = array[ offset + 1 ];
  		this._z = array[ offset + 2 ];
  		this._w = array[ offset + 3 ];

  		this._onChangeCallback();

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		array[ offset ] = this._x;
  		array[ offset + 1 ] = this._y;
  		array[ offset + 2 ] = this._z;
  		array[ offset + 3 ] = this._w;

  		return array;

  	},

  	fromBufferAttribute: function ( attribute, index ) {

  		this._x = attribute.getX( index );
  		this._y = attribute.getY( index );
  		this._z = attribute.getZ( index );
  		this._w = attribute.getW( index );

  		return this;

  	},

  	_onChange: function ( callback ) {

  		this._onChangeCallback = callback;

  		return this;

  	},

  	_onChangeCallback: function () {}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author kile / http://kile.stravaganza.org/
   * @author philogb / http://blog.thejit.org/
   * @author mikael emtinger / http://gomo.se/
   * @author egraether / http://egraether.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  var _vector = new Vector3();
  var _quaternion = new Quaternion();

  function Vector3( x, y, z ) {

  	this.x = x || 0;
  	this.y = y || 0;
  	this.z = z || 0;

  }

  Object.assign( Vector3.prototype, {

  	isVector3: true,

  	set: function ( x, y, z ) {

  		this.x = x;
  		this.y = y;
  		this.z = z;

  		return this;

  	},

  	setScalar: function ( scalar ) {

  		this.x = scalar;
  		this.y = scalar;
  		this.z = scalar;

  		return this;

  	},

  	setX: function ( x ) {

  		this.x = x;

  		return this;

  	},

  	setY: function ( y ) {

  		this.y = y;

  		return this;

  	},

  	setZ: function ( z ) {

  		this.z = z;

  		return this;

  	},

  	setComponent: function ( index, value ) {

  		switch ( index ) {

  			case 0: this.x = value; break;
  			case 1: this.y = value; break;
  			case 2: this.z = value; break;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  		return this;

  	},

  	getComponent: function ( index ) {

  		switch ( index ) {

  			case 0: return this.x;
  			case 1: return this.y;
  			case 2: return this.z;
  			default: throw new Error( 'index is out of range: ' + index );

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.x, this.y, this.z );

  	},

  	copy: function ( v ) {

  		this.x = v.x;
  		this.y = v.y;
  		this.z = v.z;

  		return this;

  	},

  	add: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
  			return this.addVectors( v, w );

  		}

  		this.x += v.x;
  		this.y += v.y;
  		this.z += v.z;

  		return this;

  	},

  	addScalar: function ( s ) {

  		this.x += s;
  		this.y += s;
  		this.z += s;

  		return this;

  	},

  	addVectors: function ( a, b ) {

  		this.x = a.x + b.x;
  		this.y = a.y + b.y;
  		this.z = a.z + b.z;

  		return this;

  	},

  	addScaledVector: function ( v, s ) {

  		this.x += v.x * s;
  		this.y += v.y * s;
  		this.z += v.z * s;

  		return this;

  	},

  	sub: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
  			return this.subVectors( v, w );

  		}

  		this.x -= v.x;
  		this.y -= v.y;
  		this.z -= v.z;

  		return this;

  	},

  	subScalar: function ( s ) {

  		this.x -= s;
  		this.y -= s;
  		this.z -= s;

  		return this;

  	},

  	subVectors: function ( a, b ) {

  		this.x = a.x - b.x;
  		this.y = a.y - b.y;
  		this.z = a.z - b.z;

  		return this;

  	},

  	multiply: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
  			return this.multiplyVectors( v, w );

  		}

  		this.x *= v.x;
  		this.y *= v.y;
  		this.z *= v.z;

  		return this;

  	},

  	multiplyScalar: function ( scalar ) {

  		this.x *= scalar;
  		this.y *= scalar;
  		this.z *= scalar;

  		return this;

  	},

  	multiplyVectors: function ( a, b ) {

  		this.x = a.x * b.x;
  		this.y = a.y * b.y;
  		this.z = a.z * b.z;

  		return this;

  	},

  	applyEuler: function ( euler ) {

  		if ( ! ( euler && euler.isEuler ) ) {

  			console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

  		}

  		return this.applyQuaternion( _quaternion.setFromEuler( euler ) );

  	},

  	applyAxisAngle: function ( axis, angle ) {

  		return this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );

  	},

  	applyMatrix3: function ( m ) {

  		var x = this.x, y = this.y, z = this.z;
  		var e = m.elements;

  		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
  		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
  		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

  		return this;

  	},

  	applyNormalMatrix: function ( m ) {

  		return this.applyMatrix3( m ).normalize();

  	},

  	applyMatrix4: function ( m ) {

  		var x = this.x, y = this.y, z = this.z;
  		var e = m.elements;

  		var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

  		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
  		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
  		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

  		return this;

  	},

  	applyQuaternion: function ( q ) {

  		var x = this.x, y = this.y, z = this.z;
  		var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

  		// calculate quat * vector

  		var ix = qw * x + qy * z - qz * y;
  		var iy = qw * y + qz * x - qx * z;
  		var iz = qw * z + qx * y - qy * x;
  		var iw = - qx * x - qy * y - qz * z;

  		// calculate result * inverse quat

  		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
  		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
  		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

  		return this;

  	},

  	project: function ( camera ) {

  		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

  	},

  	unproject: function ( camera ) {

  		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

  	},

  	transformDirection: function ( m ) {

  		// input: THREE.Matrix4 affine matrix
  		// vector interpreted as a direction

  		var x = this.x, y = this.y, z = this.z;
  		var e = m.elements;

  		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
  		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
  		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

  		return this.normalize();

  	},

  	divide: function ( v ) {

  		this.x /= v.x;
  		this.y /= v.y;
  		this.z /= v.z;

  		return this;

  	},

  	divideScalar: function ( scalar ) {

  		return this.multiplyScalar( 1 / scalar );

  	},

  	min: function ( v ) {

  		this.x = Math.min( this.x, v.x );
  		this.y = Math.min( this.y, v.y );
  		this.z = Math.min( this.z, v.z );

  		return this;

  	},

  	max: function ( v ) {

  		this.x = Math.max( this.x, v.x );
  		this.y = Math.max( this.y, v.y );
  		this.z = Math.max( this.z, v.z );

  		return this;

  	},

  	clamp: function ( min, max ) {

  		// assumes min < max, componentwise

  		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
  		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
  		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

  		return this;

  	},

  	clampScalar: function ( minVal, maxVal ) {

  		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
  		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
  		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

  		return this;

  	},

  	clampLength: function ( min, max ) {

  		var length = this.length();

  		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

  	},

  	floor: function () {

  		this.x = Math.floor( this.x );
  		this.y = Math.floor( this.y );
  		this.z = Math.floor( this.z );

  		return this;

  	},

  	ceil: function () {

  		this.x = Math.ceil( this.x );
  		this.y = Math.ceil( this.y );
  		this.z = Math.ceil( this.z );

  		return this;

  	},

  	round: function () {

  		this.x = Math.round( this.x );
  		this.y = Math.round( this.y );
  		this.z = Math.round( this.z );

  		return this;

  	},

  	roundToZero: function () {

  		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
  		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
  		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

  		return this;

  	},

  	negate: function () {

  		this.x = - this.x;
  		this.y = - this.y;
  		this.z = - this.z;

  		return this;

  	},

  	dot: function ( v ) {

  		return this.x * v.x + this.y * v.y + this.z * v.z;

  	},

  	// TODO lengthSquared?

  	lengthSq: function () {

  		return this.x * this.x + this.y * this.y + this.z * this.z;

  	},

  	length: function () {

  		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

  	},

  	manhattanLength: function () {

  		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

  	},

  	normalize: function () {

  		return this.divideScalar( this.length() || 1 );

  	},

  	setLength: function ( length ) {

  		return this.normalize().multiplyScalar( length );

  	},

  	lerp: function ( v, alpha ) {

  		this.x += ( v.x - this.x ) * alpha;
  		this.y += ( v.y - this.y ) * alpha;
  		this.z += ( v.z - this.z ) * alpha;

  		return this;

  	},

  	lerpVectors: function ( v1, v2, alpha ) {

  		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

  	},

  	cross: function ( v, w ) {

  		if ( w !== undefined ) {

  			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
  			return this.crossVectors( v, w );

  		}

  		return this.crossVectors( this, v );

  	},

  	crossVectors: function ( a, b ) {

  		var ax = a.x, ay = a.y, az = a.z;
  		var bx = b.x, by = b.y, bz = b.z;

  		this.x = ay * bz - az * by;
  		this.y = az * bx - ax * bz;
  		this.z = ax * by - ay * bx;

  		return this;

  	},

  	projectOnVector: function ( v ) {

  		var denominator = v.lengthSq();

  		if ( denominator === 0 ) return this.set( 0, 0, 0 );

  		var scalar = v.dot( this ) / denominator;

  		return this.copy( v ).multiplyScalar( scalar );

  	},

  	projectOnPlane: function ( planeNormal ) {

  		_vector.copy( this ).projectOnVector( planeNormal );

  		return this.sub( _vector );

  	},

  	reflect: function ( normal ) {

  		// reflect incident vector off plane orthogonal to normal
  		// normal is assumed to have unit length

  		return this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

  	},

  	angleTo: function ( v ) {

  		var denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

  		if ( denominator === 0 ) return Math.PI / 2;

  		var theta = this.dot( v ) / denominator;

  		// clamp, to handle numerical problems

  		return Math.acos( MathUtils.clamp( theta, - 1, 1 ) );

  	},

  	distanceTo: function ( v ) {

  		return Math.sqrt( this.distanceToSquared( v ) );

  	},

  	distanceToSquared: function ( v ) {

  		var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

  		return dx * dx + dy * dy + dz * dz;

  	},

  	manhattanDistanceTo: function ( v ) {

  		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

  	},

  	setFromSpherical: function ( s ) {

  		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

  	},

  	setFromSphericalCoords: function ( radius, phi, theta ) {

  		var sinPhiRadius = Math.sin( phi ) * radius;

  		this.x = sinPhiRadius * Math.sin( theta );
  		this.y = Math.cos( phi ) * radius;
  		this.z = sinPhiRadius * Math.cos( theta );

  		return this;

  	},

  	setFromCylindrical: function ( c ) {

  		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

  	},

  	setFromCylindricalCoords: function ( radius, theta, y ) {

  		this.x = radius * Math.sin( theta );
  		this.y = y;
  		this.z = radius * Math.cos( theta );

  		return this;

  	},

  	setFromMatrixPosition: function ( m ) {

  		var e = m.elements;

  		this.x = e[ 12 ];
  		this.y = e[ 13 ];
  		this.z = e[ 14 ];

  		return this;

  	},

  	setFromMatrixScale: function ( m ) {

  		var sx = this.setFromMatrixColumn( m, 0 ).length();
  		var sy = this.setFromMatrixColumn( m, 1 ).length();
  		var sz = this.setFromMatrixColumn( m, 2 ).length();

  		this.x = sx;
  		this.y = sy;
  		this.z = sz;

  		return this;

  	},

  	setFromMatrixColumn: function ( m, index ) {

  		return this.fromArray( m.elements, index * 4 );

  	},

  	setFromMatrix3Column: function ( m, index ) {

  		return this.fromArray( m.elements, index * 3 );

  	},

  	equals: function ( v ) {

  		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this.x = array[ offset ];
  		this.y = array[ offset + 1 ];
  		this.z = array[ offset + 2 ];

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		array[ offset ] = this.x;
  		array[ offset + 1 ] = this.y;
  		array[ offset + 2 ] = this.z;

  		return array;

  	},

  	fromBufferAttribute: function ( attribute, index, offset ) {

  		if ( offset !== undefined ) {

  			console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

  		}

  		this.x = attribute.getX( index );
  		this.y = attribute.getY( index );
  		this.z = attribute.getZ( index );

  		return this;

  	}

  } );

  var _v1 = new Vector3();
  var _m1 = new Matrix4();
  var _zero = new Vector3( 0, 0, 0 );
  var _one = new Vector3( 1, 1, 1 );
  var _x = new Vector3();
  var _y = new Vector3();
  var _z = new Vector3();

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author supereggbert / http://www.paulbrunt.co.uk/
   * @author philogb / http://blog.thejit.org/
   * @author jordi_ros / http://plattsoft.com
   * @author D1plo1d / http://github.com/D1plo1d
   * @author alteredq / http://alteredqualia.com/
   * @author mikael emtinger / http://gomo.se/
   * @author timknip / http://www.floorplanner.com/
   * @author bhouston / http://clara.io
   * @author WestLangley / http://github.com/WestLangley
   */

  function Matrix4() {

  	this.elements = [

  		1, 0, 0, 0,
  		0, 1, 0, 0,
  		0, 0, 1, 0,
  		0, 0, 0, 1

  	];

  	if ( arguments.length > 0 ) {

  		console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

  	}

  }

  Object.assign( Matrix4.prototype, {

  	isMatrix4: true,

  	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

  		var te = this.elements;

  		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
  		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
  		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
  		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

  		return this;

  	},

  	identity: function () {

  		this.set(

  			1, 0, 0, 0,
  			0, 1, 0, 0,
  			0, 0, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	clone: function () {

  		return new Matrix4().fromArray( this.elements );

  	},

  	copy: function ( m ) {

  		var te = this.elements;
  		var me = m.elements;

  		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
  		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
  		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
  		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

  		return this;

  	},

  	copyPosition: function ( m ) {

  		var te = this.elements, me = m.elements;

  		te[ 12 ] = me[ 12 ];
  		te[ 13 ] = me[ 13 ];
  		te[ 14 ] = me[ 14 ];

  		return this;

  	},

  	extractBasis: function ( xAxis, yAxis, zAxis ) {

  		xAxis.setFromMatrixColumn( this, 0 );
  		yAxis.setFromMatrixColumn( this, 1 );
  		zAxis.setFromMatrixColumn( this, 2 );

  		return this;

  	},

  	makeBasis: function ( xAxis, yAxis, zAxis ) {

  		this.set(
  			xAxis.x, yAxis.x, zAxis.x, 0,
  			xAxis.y, yAxis.y, zAxis.y, 0,
  			xAxis.z, yAxis.z, zAxis.z, 0,
  			0, 0, 0, 1
  		);

  		return this;

  	},

  	extractRotation: function ( m ) {

  		// this method does not support reflection matrices

  		var te = this.elements;
  		var me = m.elements;

  		var scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();
  		var scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();
  		var scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();

  		te[ 0 ] = me[ 0 ] * scaleX;
  		te[ 1 ] = me[ 1 ] * scaleX;
  		te[ 2 ] = me[ 2 ] * scaleX;
  		te[ 3 ] = 0;

  		te[ 4 ] = me[ 4 ] * scaleY;
  		te[ 5 ] = me[ 5 ] * scaleY;
  		te[ 6 ] = me[ 6 ] * scaleY;
  		te[ 7 ] = 0;

  		te[ 8 ] = me[ 8 ] * scaleZ;
  		te[ 9 ] = me[ 9 ] * scaleZ;
  		te[ 10 ] = me[ 10 ] * scaleZ;
  		te[ 11 ] = 0;

  		te[ 12 ] = 0;
  		te[ 13 ] = 0;
  		te[ 14 ] = 0;
  		te[ 15 ] = 1;

  		return this;

  	},

  	makeRotationFromEuler: function ( euler ) {

  		if ( ! ( euler && euler.isEuler ) ) {

  			console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

  		}

  		var te = this.elements;

  		var x = euler.x, y = euler.y, z = euler.z;
  		var a = Math.cos( x ), b = Math.sin( x );
  		var c = Math.cos( y ), d = Math.sin( y );
  		var e = Math.cos( z ), f = Math.sin( z );

  		if ( euler.order === 'XYZ' ) {

  			var ae = a * e, af = a * f, be = b * e, bf = b * f;

  			te[ 0 ] = c * e;
  			te[ 4 ] = - c * f;
  			te[ 8 ] = d;

  			te[ 1 ] = af + be * d;
  			te[ 5 ] = ae - bf * d;
  			te[ 9 ] = - b * c;

  			te[ 2 ] = bf - ae * d;
  			te[ 6 ] = be + af * d;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'YXZ' ) {

  			var ce = c * e, cf = c * f, de = d * e, df = d * f;

  			te[ 0 ] = ce + df * b;
  			te[ 4 ] = de * b - cf;
  			te[ 8 ] = a * d;

  			te[ 1 ] = a * f;
  			te[ 5 ] = a * e;
  			te[ 9 ] = - b;

  			te[ 2 ] = cf * b - de;
  			te[ 6 ] = df + ce * b;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'ZXY' ) {

  			var ce = c * e, cf = c * f, de = d * e, df = d * f;

  			te[ 0 ] = ce - df * b;
  			te[ 4 ] = - a * f;
  			te[ 8 ] = de + cf * b;

  			te[ 1 ] = cf + de * b;
  			te[ 5 ] = a * e;
  			te[ 9 ] = df - ce * b;

  			te[ 2 ] = - a * d;
  			te[ 6 ] = b;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'ZYX' ) {

  			var ae = a * e, af = a * f, be = b * e, bf = b * f;

  			te[ 0 ] = c * e;
  			te[ 4 ] = be * d - af;
  			te[ 8 ] = ae * d + bf;

  			te[ 1 ] = c * f;
  			te[ 5 ] = bf * d + ae;
  			te[ 9 ] = af * d - be;

  			te[ 2 ] = - d;
  			te[ 6 ] = b * c;
  			te[ 10 ] = a * c;

  		} else if ( euler.order === 'YZX' ) {

  			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

  			te[ 0 ] = c * e;
  			te[ 4 ] = bd - ac * f;
  			te[ 8 ] = bc * f + ad;

  			te[ 1 ] = f;
  			te[ 5 ] = a * e;
  			te[ 9 ] = - b * e;

  			te[ 2 ] = - d * e;
  			te[ 6 ] = ad * f + bc;
  			te[ 10 ] = ac - bd * f;

  		} else if ( euler.order === 'XZY' ) {

  			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

  			te[ 0 ] = c * e;
  			te[ 4 ] = - f;
  			te[ 8 ] = d * e;

  			te[ 1 ] = ac * f + bd;
  			te[ 5 ] = a * e;
  			te[ 9 ] = ad * f - bc;

  			te[ 2 ] = bc * f - ad;
  			te[ 6 ] = b * e;
  			te[ 10 ] = bd * f + ac;

  		}

  		// bottom row
  		te[ 3 ] = 0;
  		te[ 7 ] = 0;
  		te[ 11 ] = 0;

  		// last column
  		te[ 12 ] = 0;
  		te[ 13 ] = 0;
  		te[ 14 ] = 0;
  		te[ 15 ] = 1;

  		return this;

  	},

  	makeRotationFromQuaternion: function ( q ) {

  		return this.compose( _zero, q, _one );

  	},

  	lookAt: function ( eye, target, up ) {

  		var te = this.elements;

  		_z.subVectors( eye, target );

  		if ( _z.lengthSq() === 0 ) {

  			// eye and target are in the same position

  			_z.z = 1;

  		}

  		_z.normalize();
  		_x.crossVectors( up, _z );

  		if ( _x.lengthSq() === 0 ) {

  			// up and z are parallel

  			if ( Math.abs( up.z ) === 1 ) {

  				_z.x += 0.0001;

  			} else {

  				_z.z += 0.0001;

  			}

  			_z.normalize();
  			_x.crossVectors( up, _z );

  		}

  		_x.normalize();
  		_y.crossVectors( _z, _x );

  		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
  		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
  		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

  		return this;

  	},

  	multiply: function ( m, n ) {

  		if ( n !== undefined ) {

  			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
  			return this.multiplyMatrices( m, n );

  		}

  		return this.multiplyMatrices( this, m );

  	},

  	premultiply: function ( m ) {

  		return this.multiplyMatrices( m, this );

  	},

  	multiplyMatrices: function ( a, b ) {

  		var ae = a.elements;
  		var be = b.elements;
  		var te = this.elements;

  		var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
  		var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
  		var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
  		var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

  		var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
  		var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
  		var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
  		var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

  		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
  		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
  		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
  		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

  		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
  		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
  		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
  		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

  		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
  		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
  		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
  		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

  		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
  		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
  		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
  		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

  		return this;

  	},

  	multiplyScalar: function ( s ) {

  		var te = this.elements;

  		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
  		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
  		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
  		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

  		return this;

  	},

  	determinant: function () {

  		var te = this.elements;

  		var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
  		var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
  		var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
  		var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

  		//TODO: make this more efficient
  		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

  		return (
  			n41 * (
  				+ n14 * n23 * n32
  				 - n13 * n24 * n32
  				 - n14 * n22 * n33
  				 + n12 * n24 * n33
  				 + n13 * n22 * n34
  				 - n12 * n23 * n34
  			) +
  			n42 * (
  				+ n11 * n23 * n34
  				 - n11 * n24 * n33
  				 + n14 * n21 * n33
  				 - n13 * n21 * n34
  				 + n13 * n24 * n31
  				 - n14 * n23 * n31
  			) +
  			n43 * (
  				+ n11 * n24 * n32
  				 - n11 * n22 * n34
  				 - n14 * n21 * n32
  				 + n12 * n21 * n34
  				 + n14 * n22 * n31
  				 - n12 * n24 * n31
  			) +
  			n44 * (
  				- n13 * n22 * n31
  				 - n11 * n23 * n32
  				 + n11 * n22 * n33
  				 + n13 * n21 * n32
  				 - n12 * n21 * n33
  				 + n12 * n23 * n31
  			)

  		);

  	},

  	transpose: function () {

  		var te = this.elements;
  		var tmp;

  		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
  		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
  		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

  		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
  		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
  		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

  		return this;

  	},

  	setPosition: function ( x, y, z ) {

  		var te = this.elements;

  		if ( x.isVector3 ) {

  			te[ 12 ] = x.x;
  			te[ 13 ] = x.y;
  			te[ 14 ] = x.z;

  		} else {

  			te[ 12 ] = x;
  			te[ 13 ] = y;
  			te[ 14 ] = z;

  		}

  		return this;

  	},

  	getInverse: function ( m, throwOnDegenerate ) {

  		if ( throwOnDegenerate !== undefined ) {

  			console.warn( "THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate." );

  		}

  		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
  		var te = this.elements,
  			me = m.elements,

  			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
  			n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
  			n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
  			n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

  			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
  			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
  			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
  			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

  		var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

  		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

  		var detInv = 1 / det;

  		te[ 0 ] = t11 * detInv;
  		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
  		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
  		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

  		te[ 4 ] = t12 * detInv;
  		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
  		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
  		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

  		te[ 8 ] = t13 * detInv;
  		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
  		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
  		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

  		te[ 12 ] = t14 * detInv;
  		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
  		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
  		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

  		return this;

  	},

  	scale: function ( v ) {

  		var te = this.elements;
  		var x = v.x, y = v.y, z = v.z;

  		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
  		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
  		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
  		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

  		return this;

  	},

  	getMaxScaleOnAxis: function () {

  		var te = this.elements;

  		var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
  		var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
  		var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

  		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

  	},

  	makeTranslation: function ( x, y, z ) {

  		this.set(

  			1, 0, 0, x,
  			0, 1, 0, y,
  			0, 0, 1, z,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	makeRotationX: function ( theta ) {

  		var c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			1, 0, 0, 0,
  			0, c, - s, 0,
  			0, s, c, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	makeRotationY: function ( theta ) {

  		var c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			 c, 0, s, 0,
  			 0, 1, 0, 0,
  			- s, 0, c, 0,
  			 0, 0, 0, 1

  		);

  		return this;

  	},

  	makeRotationZ: function ( theta ) {

  		var c = Math.cos( theta ), s = Math.sin( theta );

  		this.set(

  			c, - s, 0, 0,
  			s, c, 0, 0,
  			0, 0, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	makeRotationAxis: function ( axis, angle ) {

  		// Based on http://www.gamedev.net/reference/articles/article1199.asp

  		var c = Math.cos( angle );
  		var s = Math.sin( angle );
  		var t = 1 - c;
  		var x = axis.x, y = axis.y, z = axis.z;
  		var tx = t * x, ty = t * y;

  		this.set(

  			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
  			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
  			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
  			0, 0, 0, 1

  		);

  		 return this;

  	},

  	makeScale: function ( x, y, z ) {

  		this.set(

  			x, 0, 0, 0,
  			0, y, 0, 0,
  			0, 0, z, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	makeShear: function ( x, y, z ) {

  		this.set(

  			1, y, z, 0,
  			x, 1, z, 0,
  			x, y, 1, 0,
  			0, 0, 0, 1

  		);

  		return this;

  	},

  	compose: function ( position, quaternion, scale ) {

  		var te = this.elements;

  		var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
  		var x2 = x + x,	y2 = y + y, z2 = z + z;
  		var xx = x * x2, xy = x * y2, xz = x * z2;
  		var yy = y * y2, yz = y * z2, zz = z * z2;
  		var wx = w * x2, wy = w * y2, wz = w * z2;

  		var sx = scale.x, sy = scale.y, sz = scale.z;

  		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
  		te[ 1 ] = ( xy + wz ) * sx;
  		te[ 2 ] = ( xz - wy ) * sx;
  		te[ 3 ] = 0;

  		te[ 4 ] = ( xy - wz ) * sy;
  		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
  		te[ 6 ] = ( yz + wx ) * sy;
  		te[ 7 ] = 0;

  		te[ 8 ] = ( xz + wy ) * sz;
  		te[ 9 ] = ( yz - wx ) * sz;
  		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
  		te[ 11 ] = 0;

  		te[ 12 ] = position.x;
  		te[ 13 ] = position.y;
  		te[ 14 ] = position.z;
  		te[ 15 ] = 1;

  		return this;

  	},

  	decompose: function ( position, quaternion, scale ) {

  		var te = this.elements;

  		var sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
  		var sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
  		var sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

  		// if determine is negative, we need to invert one scale
  		var det = this.determinant();
  		if ( det < 0 ) sx = - sx;

  		position.x = te[ 12 ];
  		position.y = te[ 13 ];
  		position.z = te[ 14 ];

  		// scale the rotation part
  		_m1.copy( this );

  		var invSX = 1 / sx;
  		var invSY = 1 / sy;
  		var invSZ = 1 / sz;

  		_m1.elements[ 0 ] *= invSX;
  		_m1.elements[ 1 ] *= invSX;
  		_m1.elements[ 2 ] *= invSX;

  		_m1.elements[ 4 ] *= invSY;
  		_m1.elements[ 5 ] *= invSY;
  		_m1.elements[ 6 ] *= invSY;

  		_m1.elements[ 8 ] *= invSZ;
  		_m1.elements[ 9 ] *= invSZ;
  		_m1.elements[ 10 ] *= invSZ;

  		quaternion.setFromRotationMatrix( _m1 );

  		scale.x = sx;
  		scale.y = sy;
  		scale.z = sz;

  		return this;

  	},

  	makePerspective: function ( left, right, top, bottom, near, far ) {

  		if ( far === undefined ) {

  			console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

  		}

  		var te = this.elements;
  		var x = 2 * near / ( right - left );
  		var y = 2 * near / ( top - bottom );

  		var a = ( right + left ) / ( right - left );
  		var b = ( top + bottom ) / ( top - bottom );
  		var c = - ( far + near ) / ( far - near );
  		var d = - 2 * far * near / ( far - near );

  		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
  		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
  		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
  		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

  		return this;

  	},

  	makeOrthographic: function ( left, right, top, bottom, near, far ) {

  		var te = this.elements;
  		var w = 1.0 / ( right - left );
  		var h = 1.0 / ( top - bottom );
  		var p = 1.0 / ( far - near );

  		var x = ( right + left ) * w;
  		var y = ( top + bottom ) * h;
  		var z = ( far + near ) * p;

  		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
  		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
  		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
  		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

  		return this;

  	},

  	equals: function ( matrix ) {

  		var te = this.elements;
  		var me = matrix.elements;

  		for ( var i = 0; i < 16; i ++ ) {

  			if ( te[ i ] !== me[ i ] ) return false;

  		}

  		return true;

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		for ( var i = 0; i < 16; i ++ ) {

  			this.elements[ i ] = array[ i + offset ];

  		}

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		var te = this.elements;

  		array[ offset ] = te[ 0 ];
  		array[ offset + 1 ] = te[ 1 ];
  		array[ offset + 2 ] = te[ 2 ];
  		array[ offset + 3 ] = te[ 3 ];

  		array[ offset + 4 ] = te[ 4 ];
  		array[ offset + 5 ] = te[ 5 ];
  		array[ offset + 6 ] = te[ 6 ];
  		array[ offset + 7 ] = te[ 7 ];

  		array[ offset + 8 ] = te[ 8 ];
  		array[ offset + 9 ] = te[ 9 ];
  		array[ offset + 10 ] = te[ 10 ];
  		array[ offset + 11 ] = te[ 11 ];

  		array[ offset + 12 ] = te[ 12 ];
  		array[ offset + 13 ] = te[ 13 ];
  		array[ offset + 14 ] = te[ 14 ];
  		array[ offset + 15 ] = te[ 15 ];

  		return array;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author bhouston / http://clara.io
   */

  var _matrix = new Matrix4();
  var _quaternion$1 = new Quaternion();

  function Euler( x, y, z, order ) {

  	this._x = x || 0;
  	this._y = y || 0;
  	this._z = z || 0;
  	this._order = order || Euler.DefaultOrder;

  }

  Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

  Euler.DefaultOrder = 'XYZ';

  Object.defineProperties( Euler.prototype, {

  	x: {

  		get: function () {

  			return this._x;

  		},

  		set: function ( value ) {

  			this._x = value;
  			this._onChangeCallback();

  		}

  	},

  	y: {

  		get: function () {

  			return this._y;

  		},

  		set: function ( value ) {

  			this._y = value;
  			this._onChangeCallback();

  		}

  	},

  	z: {

  		get: function () {

  			return this._z;

  		},

  		set: function ( value ) {

  			this._z = value;
  			this._onChangeCallback();

  		}

  	},

  	order: {

  		get: function () {

  			return this._order;

  		},

  		set: function ( value ) {

  			this._order = value;
  			this._onChangeCallback();

  		}

  	}

  } );

  Object.assign( Euler.prototype, {

  	isEuler: true,

  	set: function ( x, y, z, order ) {

  		this._x = x;
  		this._y = y;
  		this._z = z;
  		this._order = order || this._order;

  		this._onChangeCallback();

  		return this;

  	},

  	clone: function () {

  		return new this.constructor( this._x, this._y, this._z, this._order );

  	},

  	copy: function ( euler ) {

  		this._x = euler._x;
  		this._y = euler._y;
  		this._z = euler._z;
  		this._order = euler._order;

  		this._onChangeCallback();

  		return this;

  	},

  	setFromRotationMatrix: function ( m, order, update ) {

  		var clamp = MathUtils.clamp;

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		var te = m.elements;
  		var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
  		var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
  		var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

  		order = order || this._order;

  		if ( order === 'XYZ' ) {

  			this._y = Math.asin( clamp( m13, - 1, 1 ) );

  			if ( Math.abs( m13 ) < 0.9999999 ) {

  				this._x = Math.atan2( - m23, m33 );
  				this._z = Math.atan2( - m12, m11 );

  			} else {

  				this._x = Math.atan2( m32, m22 );
  				this._z = 0;

  			}

  		} else if ( order === 'YXZ' ) {

  			this._x = Math.asin( - clamp( m23, - 1, 1 ) );

  			if ( Math.abs( m23 ) < 0.9999999 ) {

  				this._y = Math.atan2( m13, m33 );
  				this._z = Math.atan2( m21, m22 );

  			} else {

  				this._y = Math.atan2( - m31, m11 );
  				this._z = 0;

  			}

  		} else if ( order === 'ZXY' ) {

  			this._x = Math.asin( clamp( m32, - 1, 1 ) );

  			if ( Math.abs( m32 ) < 0.9999999 ) {

  				this._y = Math.atan2( - m31, m33 );
  				this._z = Math.atan2( - m12, m22 );

  			} else {

  				this._y = 0;
  				this._z = Math.atan2( m21, m11 );

  			}

  		} else if ( order === 'ZYX' ) {

  			this._y = Math.asin( - clamp( m31, - 1, 1 ) );

  			if ( Math.abs( m31 ) < 0.9999999 ) {

  				this._x = Math.atan2( m32, m33 );
  				this._z = Math.atan2( m21, m11 );

  			} else {

  				this._x = 0;
  				this._z = Math.atan2( - m12, m22 );

  			}

  		} else if ( order === 'YZX' ) {

  			this._z = Math.asin( clamp( m21, - 1, 1 ) );

  			if ( Math.abs( m21 ) < 0.9999999 ) {

  				this._x = Math.atan2( - m23, m22 );
  				this._y = Math.atan2( - m31, m11 );

  			} else {

  				this._x = 0;
  				this._y = Math.atan2( m13, m33 );

  			}

  		} else if ( order === 'XZY' ) {

  			this._z = Math.asin( - clamp( m12, - 1, 1 ) );

  			if ( Math.abs( m12 ) < 0.9999999 ) {

  				this._x = Math.atan2( m32, m22 );
  				this._y = Math.atan2( m13, m11 );

  			} else {

  				this._x = Math.atan2( - m23, m33 );
  				this._y = 0;

  			}

  		} else {

  			console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

  		}

  		this._order = order;

  		if ( update !== false ) this._onChangeCallback();

  		return this;

  	},

  	setFromQuaternion: function ( q, order, update ) {

  		_matrix.makeRotationFromQuaternion( q );

  		return this.setFromRotationMatrix( _matrix, order, update );

  	},

  	setFromVector3: function ( v, order ) {

  		return this.set( v.x, v.y, v.z, order || this._order );

  	},

  	reorder: function ( newOrder ) {

  		// WARNING: this discards revolution information -bhouston

  		_quaternion$1.setFromEuler( this );

  		return this.setFromQuaternion( _quaternion$1, newOrder );

  	},

  	equals: function ( euler ) {

  		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

  	},

  	fromArray: function ( array ) {

  		this._x = array[ 0 ];
  		this._y = array[ 1 ];
  		this._z = array[ 2 ];
  		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

  		this._onChangeCallback();

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		array[ offset ] = this._x;
  		array[ offset + 1 ] = this._y;
  		array[ offset + 2 ] = this._z;
  		array[ offset + 3 ] = this._order;

  		return array;

  	},

  	toVector3: function ( optionalResult ) {

  		if ( optionalResult ) {

  			return optionalResult.set( this._x, this._y, this._z );

  		} else {

  			return new Vector3( this._x, this._y, this._z );

  		}

  	},

  	_onChange: function ( callback ) {

  		this._onChangeCallback = callback;

  		return this;

  	},

  	_onChangeCallback: function () {}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Layers() {

  	this.mask = 1 | 0;

  }

  Object.assign( Layers.prototype, {

  	set: function ( channel ) {

  		this.mask = 1 << channel | 0;

  	},

  	enable: function ( channel ) {

  		this.mask |= 1 << channel | 0;

  	},

  	enableAll: function () {

  		this.mask = 0xffffffff | 0;

  	},

  	toggle: function ( channel ) {

  		this.mask ^= 1 << channel | 0;

  	},

  	disable: function ( channel ) {

  		this.mask &= ~ ( 1 << channel | 0 );

  	},

  	disableAll: function () {

  		this.mask = 0;

  	},

  	test: function ( layers ) {

  		return ( this.mask & layers.mask ) !== 0;

  	}

  } );

  var _object3DId = 0;

  var _v1$1 = new Vector3();
  var _q1 = new Quaternion();
  var _m1$1 = new Matrix4();
  var _target = new Vector3();

  var _position = new Vector3();
  var _scale = new Vector3();
  var _quaternion$2 = new Quaternion();

  var _xAxis = new Vector3( 1, 0, 0 );
  var _yAxis = new Vector3( 0, 1, 0 );
  var _zAxis = new Vector3( 0, 0, 1 );

  var _addedEvent = { type: 'added' };
  var _removedEvent = { type: 'removed' };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author elephantatwork / www.elephantatwork.ch
   */

  function Object3D() {

  	Object.defineProperty( this, 'id', { value: _object3DId ++ } );

  	this.uuid = MathUtils.generateUUID();

  	this.name = '';
  	this.type = 'Object3D';

  	this.parent = null;
  	this.children = [];

  	this.up = Object3D.DefaultUp.clone();

  	var position = new Vector3();
  	var rotation = new Euler();
  	var quaternion = new Quaternion();
  	var scale = new Vector3( 1, 1, 1 );

  	function onRotationChange() {

  		quaternion.setFromEuler( rotation, false );

  	}

  	function onQuaternionChange() {

  		rotation.setFromQuaternion( quaternion, undefined, false );

  	}

  	rotation._onChange( onRotationChange );
  	quaternion._onChange( onQuaternionChange );

  	Object.defineProperties( this, {
  		position: {
  			configurable: true,
  			enumerable: true,
  			value: position
  		},
  		rotation: {
  			configurable: true,
  			enumerable: true,
  			value: rotation
  		},
  		quaternion: {
  			configurable: true,
  			enumerable: true,
  			value: quaternion
  		},
  		scale: {
  			configurable: true,
  			enumerable: true,
  			value: scale
  		},
  		modelViewMatrix: {
  			value: new Matrix4()
  		},
  		normalMatrix: {
  			value: new Matrix3()
  		}
  	} );

  	this.matrix = new Matrix4();
  	this.matrixWorld = new Matrix4();

  	this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
  	this.matrixWorldNeedsUpdate = false;

  	this.layers = new Layers();
  	this.visible = true;

  	this.castShadow = false;
  	this.receiveShadow = false;

  	this.frustumCulled = true;
  	this.renderOrder = 0;

  	this.userData = {};

  }

  Object3D.DefaultUp = new Vector3( 0, 1, 0 );
  Object3D.DefaultMatrixAutoUpdate = true;

  Object3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: Object3D,

  	isObject3D: true,

  	onBeforeRender: function () {},
  	onAfterRender: function () {},

  	applyMatrix4: function ( matrix ) {

  		if ( this.matrixAutoUpdate ) this.updateMatrix();

  		this.matrix.premultiply( matrix );

  		this.matrix.decompose( this.position, this.quaternion, this.scale );

  	},

  	applyQuaternion: function ( q ) {

  		this.quaternion.premultiply( q );

  		return this;

  	},

  	setRotationFromAxisAngle: function ( axis, angle ) {

  		// assumes axis is normalized

  		this.quaternion.setFromAxisAngle( axis, angle );

  	},

  	setRotationFromEuler: function ( euler ) {

  		this.quaternion.setFromEuler( euler, true );

  	},

  	setRotationFromMatrix: function ( m ) {

  		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

  		this.quaternion.setFromRotationMatrix( m );

  	},

  	setRotationFromQuaternion: function ( q ) {

  		// assumes q is normalized

  		this.quaternion.copy( q );

  	},

  	rotateOnAxis: function ( axis, angle ) {

  		// rotate object on axis in object space
  		// axis is assumed to be normalized

  		_q1.setFromAxisAngle( axis, angle );

  		this.quaternion.multiply( _q1 );

  		return this;

  	},

  	rotateOnWorldAxis: function ( axis, angle ) {

  		// rotate object on axis in world space
  		// axis is assumed to be normalized
  		// method assumes no rotated parent

  		_q1.setFromAxisAngle( axis, angle );

  		this.quaternion.premultiply( _q1 );

  		return this;

  	},

  	rotateX: function ( angle ) {

  		return this.rotateOnAxis( _xAxis, angle );

  	},

  	rotateY: function ( angle ) {

  		return this.rotateOnAxis( _yAxis, angle );

  	},

  	rotateZ: function ( angle ) {

  		return this.rotateOnAxis( _zAxis, angle );

  	},

  	translateOnAxis: function ( axis, distance ) {

  		// translate object by distance along axis in object space
  		// axis is assumed to be normalized

  		_v1$1.copy( axis ).applyQuaternion( this.quaternion );

  		this.position.add( _v1$1.multiplyScalar( distance ) );

  		return this;

  	},

  	translateX: function ( distance ) {

  		return this.translateOnAxis( _xAxis, distance );

  	},

  	translateY: function ( distance ) {

  		return this.translateOnAxis( _yAxis, distance );

  	},

  	translateZ: function ( distance ) {

  		return this.translateOnAxis( _zAxis, distance );

  	},

  	localToWorld: function ( vector ) {

  		return vector.applyMatrix4( this.matrixWorld );

  	},

  	worldToLocal: function ( vector ) {

  		return vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );

  	},

  	lookAt: function ( x, y, z ) {

  		// This method does not support objects having non-uniformly-scaled parent(s)

  		if ( x.isVector3 ) {

  			_target.copy( x );

  		} else {

  			_target.set( x, y, z );

  		}

  		var parent = this.parent;

  		this.updateWorldMatrix( true, false );

  		_position.setFromMatrixPosition( this.matrixWorld );

  		if ( this.isCamera || this.isLight ) {

  			_m1$1.lookAt( _position, _target, this.up );

  		} else {

  			_m1$1.lookAt( _target, _position, this.up );

  		}

  		this.quaternion.setFromRotationMatrix( _m1$1 );

  		if ( parent ) {

  			_m1$1.extractRotation( parent.matrixWorld );
  			_q1.setFromRotationMatrix( _m1$1 );
  			this.quaternion.premultiply( _q1.inverse() );

  		}

  	},

  	add: function ( object ) {

  		if ( arguments.length > 1 ) {

  			for ( var i = 0; i < arguments.length; i ++ ) {

  				this.add( arguments[ i ] );

  			}

  			return this;

  		}

  		if ( object === this ) {

  			console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
  			return this;

  		}

  		if ( ( object && object.isObject3D ) ) {

  			if ( object.parent !== null ) {

  				object.parent.remove( object );

  			}

  			object.parent = this;
  			this.children.push( object );

  			object.dispatchEvent( _addedEvent );

  		} else {

  			console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

  		}

  		return this;

  	},

  	remove: function ( object ) {

  		if ( arguments.length > 1 ) {

  			for ( var i = 0; i < arguments.length; i ++ ) {

  				this.remove( arguments[ i ] );

  			}

  			return this;

  		}

  		var index = this.children.indexOf( object );

  		if ( index !== - 1 ) {

  			object.parent = null;
  			this.children.splice( index, 1 );

  			object.dispatchEvent( _removedEvent );

  		}

  		return this;

  	},

  	attach: function ( object ) {

  		// adds object as a child of this, while maintaining the object's world transform

  		this.updateWorldMatrix( true, false );

  		_m1$1.getInverse( this.matrixWorld );

  		if ( object.parent !== null ) {

  			object.parent.updateWorldMatrix( true, false );

  			_m1$1.multiply( object.parent.matrixWorld );

  		}

  		object.applyMatrix4( _m1$1 );

  		object.updateWorldMatrix( false, false );

  		this.add( object );

  		return this;

  	},

  	getObjectById: function ( id ) {

  		return this.getObjectByProperty( 'id', id );

  	},

  	getObjectByName: function ( name ) {

  		return this.getObjectByProperty( 'name', name );

  	},

  	getObjectByProperty: function ( name, value ) {

  		if ( this[ name ] === value ) return this;

  		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

  			var child = this.children[ i ];
  			var object = child.getObjectByProperty( name, value );

  			if ( object !== undefined ) {

  				return object;

  			}

  		}

  		return undefined;

  	},

  	getWorldPosition: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );
  			target = new Vector3();

  		}

  		this.updateMatrixWorld( true );

  		return target.setFromMatrixPosition( this.matrixWorld );

  	},

  	getWorldQuaternion: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );
  			target = new Quaternion();

  		}

  		this.updateMatrixWorld( true );

  		this.matrixWorld.decompose( _position, target, _scale );

  		return target;

  	},

  	getWorldScale: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Object3D: .getWorldScale() target is now required' );
  			target = new Vector3();

  		}

  		this.updateMatrixWorld( true );

  		this.matrixWorld.decompose( _position, _quaternion$2, target );

  		return target;

  	},

  	getWorldDirection: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );
  			target = new Vector3();

  		}

  		this.updateMatrixWorld( true );

  		var e = this.matrixWorld.elements;

  		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

  	},

  	raycast: function () {},

  	traverse: function ( callback ) {

  		callback( this );

  		var children = this.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].traverse( callback );

  		}

  	},

  	traverseVisible: function ( callback ) {

  		if ( this.visible === false ) return;

  		callback( this );

  		var children = this.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].traverseVisible( callback );

  		}

  	},

  	traverseAncestors: function ( callback ) {

  		var parent = this.parent;

  		if ( parent !== null ) {

  			callback( parent );

  			parent.traverseAncestors( callback );

  		}

  	},

  	updateMatrix: function () {

  		this.matrix.compose( this.position, this.quaternion, this.scale );

  		this.matrixWorldNeedsUpdate = true;

  	},

  	updateMatrixWorld: function ( force ) {

  		if ( this.matrixAutoUpdate ) this.updateMatrix();

  		if ( this.matrixWorldNeedsUpdate || force ) {

  			if ( this.parent === null ) {

  				this.matrixWorld.copy( this.matrix );

  			} else {

  				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

  			}

  			this.matrixWorldNeedsUpdate = false;

  			force = true;

  		}

  		// update children

  		var children = this.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].updateMatrixWorld( force );

  		}

  	},

  	updateWorldMatrix: function ( updateParents, updateChildren ) {

  		var parent = this.parent;

  		if ( updateParents === true && parent !== null ) {

  			parent.updateWorldMatrix( true, false );

  		}

  		if ( this.matrixAutoUpdate ) this.updateMatrix();

  		if ( this.parent === null ) {

  			this.matrixWorld.copy( this.matrix );

  		} else {

  			this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

  		}

  		// update children

  		if ( updateChildren === true ) {

  			var children = this.children;

  			for ( var i = 0, l = children.length; i < l; i ++ ) {

  				children[ i ].updateWorldMatrix( false, true );

  			}

  		}

  	},

  	toJSON: function ( meta ) {

  		// meta is a string when called from JSON.stringify
  		var isRootObject = ( meta === undefined || typeof meta === 'string' );

  		var output = {};

  		// meta is a hash used to collect geometries, materials.
  		// not providing it implies that this is the root object
  		// being serialized.
  		if ( isRootObject ) {

  			// initialize meta obj
  			meta = {
  				geometries: {},
  				materials: {},
  				textures: {},
  				images: {},
  				shapes: {}
  			};

  			output.metadata = {
  				version: 4.5,
  				type: 'Object',
  				generator: 'Object3D.toJSON'
  			};

  		}

  		// standard Object3D serialization

  		var object = {};

  		object.uuid = this.uuid;
  		object.type = this.type;

  		if ( this.name !== '' ) object.name = this.name;
  		if ( this.castShadow === true ) object.castShadow = true;
  		if ( this.receiveShadow === true ) object.receiveShadow = true;
  		if ( this.visible === false ) object.visible = false;
  		if ( this.frustumCulled === false ) object.frustumCulled = false;
  		if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
  		if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;

  		object.layers = this.layers.mask;
  		object.matrix = this.matrix.toArray();

  		if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;

  		// object specific properties

  		if ( this.isInstancedMesh ) {

  			object.type = 'InstancedMesh';
  			object.count = this.count;
  			object.instanceMatrix = this.instanceMatrix.toJSON();

  		}

  		//

  		function serialize( library, element ) {

  			if ( library[ element.uuid ] === undefined ) {

  				library[ element.uuid ] = element.toJSON( meta );

  			}

  			return element.uuid;

  		}

  		if ( this.isMesh || this.isLine || this.isPoints ) {

  			object.geometry = serialize( meta.geometries, this.geometry );

  			var parameters = this.geometry.parameters;

  			if ( parameters !== undefined && parameters.shapes !== undefined ) {

  				var shapes = parameters.shapes;

  				if ( Array.isArray( shapes ) ) {

  					for ( var i = 0, l = shapes.length; i < l; i ++ ) {

  						var shape = shapes[ i ];

  						serialize( meta.shapes, shape );

  					}

  				} else {

  					serialize( meta.shapes, shapes );

  				}

  			}

  		}

  		if ( this.material !== undefined ) {

  			if ( Array.isArray( this.material ) ) {

  				var uuids = [];

  				for ( var i = 0, l = this.material.length; i < l; i ++ ) {

  					uuids.push( serialize( meta.materials, this.material[ i ] ) );

  				}

  				object.material = uuids;

  			} else {

  				object.material = serialize( meta.materials, this.material );

  			}

  		}

  		//

  		if ( this.children.length > 0 ) {

  			object.children = [];

  			for ( var i = 0; i < this.children.length; i ++ ) {

  				object.children.push( this.children[ i ].toJSON( meta ).object );

  			}

  		}

  		if ( isRootObject ) {

  			var geometries = extractFromCache( meta.geometries );
  			var materials = extractFromCache( meta.materials );
  			var textures = extractFromCache( meta.textures );
  			var images = extractFromCache( meta.images );
  			var shapes = extractFromCache( meta.shapes );

  			if ( geometries.length > 0 ) output.geometries = geometries;
  			if ( materials.length > 0 ) output.materials = materials;
  			if ( textures.length > 0 ) output.textures = textures;
  			if ( images.length > 0 ) output.images = images;
  			if ( shapes.length > 0 ) output.shapes = shapes;

  		}

  		output.object = object;

  		return output;

  		// extract data from the cache hash
  		// remove metadata on each item
  		// and return as array
  		function extractFromCache( cache ) {

  			var values = [];
  			for ( var key in cache ) {

  				var data = cache[ key ];
  				delete data.metadata;
  				values.push( data );

  			}
  			return values;

  		}

  	},

  	clone: function ( recursive ) {

  		return new this.constructor().copy( this, recursive );

  	},

  	copy: function ( source, recursive ) {

  		if ( recursive === undefined ) recursive = true;

  		this.name = source.name;

  		this.up.copy( source.up );

  		this.position.copy( source.position );
  		this.quaternion.copy( source.quaternion );
  		this.scale.copy( source.scale );

  		this.matrix.copy( source.matrix );
  		this.matrixWorld.copy( source.matrixWorld );

  		this.matrixAutoUpdate = source.matrixAutoUpdate;
  		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

  		this.layers.mask = source.layers.mask;
  		this.visible = source.visible;

  		this.castShadow = source.castShadow;
  		this.receiveShadow = source.receiveShadow;

  		this.frustumCulled = source.frustumCulled;
  		this.renderOrder = source.renderOrder;

  		this.userData = JSON.parse( JSON.stringify( source.userData ) );

  		if ( recursive === true ) {

  			for ( var i = 0; i < source.children.length; i ++ ) {

  				var child = source.children[ i ];
  				this.add( child.clone() );

  			}

  		}

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Scene() {

  	Object3D.call( this );

  	this.type = 'Scene';

  	this.background = null;
  	this.environment = null;
  	this.fog = null;

  	this.overrideMaterial = null;

  	this.autoUpdate = true; // checked by the renderer

  	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

  		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef

  	}

  }

  Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Scene,

  	isScene: true,

  	copy: function ( source, recursive ) {

  		Object3D.prototype.copy.call( this, source, recursive );

  		if ( source.background !== null ) this.background = source.background.clone();
  		if ( source.environment !== null ) this.environment = source.environment.clone();
  		if ( source.fog !== null ) this.fog = source.fog.clone();

  		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

  		this.autoUpdate = source.autoUpdate;
  		this.matrixAutoUpdate = source.matrixAutoUpdate;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
  		if ( this.environment !== null ) data.object.environment = this.environment.toJSON( meta );
  		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

  		return data;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  var _points = [
  	new Vector3(),
  	new Vector3(),
  	new Vector3(),
  	new Vector3(),
  	new Vector3(),
  	new Vector3(),
  	new Vector3(),
  	new Vector3()
  ];

  var _vector$1 = new Vector3();

  var _box = new Box3();

  // triangle centered vertices

  var _v0 = new Vector3();
  var _v1$2 = new Vector3();
  var _v2 = new Vector3();

  // triangle edge vectors

  var _f0 = new Vector3();
  var _f1 = new Vector3();
  var _f2 = new Vector3();

  var _center = new Vector3();
  var _extents = new Vector3();
  var _triangleNormal = new Vector3();
  var _testAxis = new Vector3();

  /**
   * @author bhouston / http://clara.io
   * @author WestLangley / http://github.com/WestLangley
   */

  function Box3( min, max ) {

  	this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
  	this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

  }


  Object.assign( Box3.prototype, {

  	isBox3: true,

  	set: function ( min, max ) {

  		this.min.copy( min );
  		this.max.copy( max );

  		return this;

  	},

  	setFromArray: function ( array ) {

  		var minX = + Infinity;
  		var minY = + Infinity;
  		var minZ = + Infinity;

  		var maxX = - Infinity;
  		var maxY = - Infinity;
  		var maxZ = - Infinity;

  		for ( var i = 0, l = array.length; i < l; i += 3 ) {

  			var x = array[ i ];
  			var y = array[ i + 1 ];
  			var z = array[ i + 2 ];

  			if ( x < minX ) minX = x;
  			if ( y < minY ) minY = y;
  			if ( z < minZ ) minZ = z;

  			if ( x > maxX ) maxX = x;
  			if ( y > maxY ) maxY = y;
  			if ( z > maxZ ) maxZ = z;

  		}

  		this.min.set( minX, minY, minZ );
  		this.max.set( maxX, maxY, maxZ );

  		return this;

  	},

  	setFromBufferAttribute: function ( attribute ) {

  		var minX = + Infinity;
  		var minY = + Infinity;
  		var minZ = + Infinity;

  		var maxX = - Infinity;
  		var maxY = - Infinity;
  		var maxZ = - Infinity;

  		for ( var i = 0, l = attribute.count; i < l; i ++ ) {

  			var x = attribute.getX( i );
  			var y = attribute.getY( i );
  			var z = attribute.getZ( i );

  			if ( x < minX ) minX = x;
  			if ( y < minY ) minY = y;
  			if ( z < minZ ) minZ = z;

  			if ( x > maxX ) maxX = x;
  			if ( y > maxY ) maxY = y;
  			if ( z > maxZ ) maxZ = z;

  		}

  		this.min.set( minX, minY, minZ );
  		this.max.set( maxX, maxY, maxZ );

  		return this;

  	},

  	setFromPoints: function ( points ) {

  		this.makeEmpty();

  		for ( var i = 0, il = points.length; i < il; i ++ ) {

  			this.expandByPoint( points[ i ] );

  		}

  		return this;

  	},

  	setFromCenterAndSize: function ( center, size ) {

  		var halfSize = _vector$1.copy( size ).multiplyScalar( 0.5 );

  		this.min.copy( center ).sub( halfSize );
  		this.max.copy( center ).add( halfSize );

  		return this;

  	},

  	setFromObject: function ( object ) {

  		this.makeEmpty();

  		return this.expandByObject( object );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( box ) {

  		this.min.copy( box.min );
  		this.max.copy( box.max );

  		return this;

  	},

  	makeEmpty: function () {

  		this.min.x = this.min.y = this.min.z = + Infinity;
  		this.max.x = this.max.y = this.max.z = - Infinity;

  		return this;

  	},

  	isEmpty: function () {

  		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

  		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

  	},

  	getCenter: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box3: .getCenter() target is now required' );
  			target = new Vector3();

  		}

  		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

  	},

  	getSize: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box3: .getSize() target is now required' );
  			target = new Vector3();

  		}

  		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

  	},

  	expandByPoint: function ( point ) {

  		this.min.min( point );
  		this.max.max( point );

  		return this;

  	},

  	expandByVector: function ( vector ) {

  		this.min.sub( vector );
  		this.max.add( vector );

  		return this;

  	},

  	expandByScalar: function ( scalar ) {

  		this.min.addScalar( - scalar );
  		this.max.addScalar( scalar );

  		return this;

  	},

  	expandByObject: function ( object ) {

  		// Computes the world-axis-aligned bounding box of an object (including its children),
  		// accounting for both the object's, and children's, world transforms

  		object.updateWorldMatrix( false, false );

  		var geometry = object.geometry;

  		if ( geometry !== undefined ) {

  			if ( geometry.boundingBox === null ) {

  				geometry.computeBoundingBox();

  			}

  			_box.copy( geometry.boundingBox );
  			_box.applyMatrix4( object.matrixWorld );

  			this.union( _box );

  		}

  		var children = object.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			this.expandByObject( children[ i ] );

  		}

  		return this;

  	},

  	containsPoint: function ( point ) {

  		return point.x < this.min.x || point.x > this.max.x ||
  			point.y < this.min.y || point.y > this.max.y ||
  			point.z < this.min.z || point.z > this.max.z ? false : true;

  	},

  	containsBox: function ( box ) {

  		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
  			this.min.y <= box.min.y && box.max.y <= this.max.y &&
  			this.min.z <= box.min.z && box.max.z <= this.max.z;

  	},

  	getParameter: function ( point, target ) {

  		// This can potentially have a divide by zero if the box
  		// has a size dimension of 0.

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box3: .getParameter() target is now required' );
  			target = new Vector3();

  		}

  		return target.set(
  			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
  			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
  			( point.z - this.min.z ) / ( this.max.z - this.min.z )
  		);

  	},

  	intersectsBox: function ( box ) {

  		// using 6 splitting planes to rule out intersections.
  		return box.max.x < this.min.x || box.min.x > this.max.x ||
  			box.max.y < this.min.y || box.min.y > this.max.y ||
  			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

  	},

  	intersectsSphere: function ( sphere ) {

  		// Find the point on the AABB closest to the sphere center.
  		this.clampPoint( sphere.center, _vector$1 );

  		// If that point is inside the sphere, the AABB and sphere intersect.
  		return _vector$1.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

  	},

  	intersectsPlane: function ( plane ) {

  		// We compute the minimum and maximum dot product values. If those values
  		// are on the same side (back or front) of the plane, then there is no intersection.

  		var min, max;

  		if ( plane.normal.x > 0 ) {

  			min = plane.normal.x * this.min.x;
  			max = plane.normal.x * this.max.x;

  		} else {

  			min = plane.normal.x * this.max.x;
  			max = plane.normal.x * this.min.x;

  		}

  		if ( plane.normal.y > 0 ) {

  			min += plane.normal.y * this.min.y;
  			max += plane.normal.y * this.max.y;

  		} else {

  			min += plane.normal.y * this.max.y;
  			max += plane.normal.y * this.min.y;

  		}

  		if ( plane.normal.z > 0 ) {

  			min += plane.normal.z * this.min.z;
  			max += plane.normal.z * this.max.z;

  		} else {

  			min += plane.normal.z * this.max.z;
  			max += plane.normal.z * this.min.z;

  		}

  		return ( min <= - plane.constant && max >= - plane.constant );

  	},

  	intersectsTriangle: function ( triangle ) {

  		if ( this.isEmpty() ) {

  			return false;

  		}

  		// compute box center and extents
  		this.getCenter( _center );
  		_extents.subVectors( this.max, _center );

  		// translate triangle to aabb origin
  		_v0.subVectors( triangle.a, _center );
  		_v1$2.subVectors( triangle.b, _center );
  		_v2.subVectors( triangle.c, _center );

  		// compute edge vectors for triangle
  		_f0.subVectors( _v1$2, _v0 );
  		_f1.subVectors( _v2, _v1$2 );
  		_f2.subVectors( _v0, _v2 );

  		// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
  		// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
  		// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
  		var axes = [
  			0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
  			_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
  			- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
  		];
  		if ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {

  			return false;

  		}

  		// test 3 face normals from the aabb
  		axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
  		if ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {

  			return false;

  		}

  		// finally testing the face normal of the triangle
  		// use already existing triangle edge vectors here
  		_triangleNormal.crossVectors( _f0, _f1 );
  		axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];

  		return satForAxes( axes, _v0, _v1$2, _v2, _extents );

  	},

  	clampPoint: function ( point, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box3: .clampPoint() target is now required' );
  			target = new Vector3();

  		}

  		return target.copy( point ).clamp( this.min, this.max );

  	},

  	distanceToPoint: function ( point ) {

  		var clampedPoint = _vector$1.copy( point ).clamp( this.min, this.max );

  		return clampedPoint.sub( point ).length();

  	},

  	getBoundingSphere: function ( target ) {

  		if ( target === undefined ) {

  			console.error( 'THREE.Box3: .getBoundingSphere() target is now required' );
  			//target = new Sphere(); // removed to avoid cyclic dependency

  		}

  		this.getCenter( target.center );

  		target.radius = this.getSize( _vector$1 ).length() * 0.5;

  		return target;

  	},

  	intersect: function ( box ) {

  		this.min.max( box.min );
  		this.max.min( box.max );

  		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
  		if ( this.isEmpty() ) this.makeEmpty();

  		return this;

  	},

  	union: function ( box ) {

  		this.min.min( box.min );
  		this.max.max( box.max );

  		return this;

  	},

  	applyMatrix4: function ( matrix ) {

  		// transform of empty box is an empty box.
  		if ( this.isEmpty() ) return this;

  		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
  		_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
  		_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
  		_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
  		_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
  		_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
  		_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
  		_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
  		_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

  		this.setFromPoints( _points );

  		return this;

  	},

  	translate: function ( offset ) {

  		this.min.add( offset );
  		this.max.add( offset );

  		return this;

  	},

  	equals: function ( box ) {

  		return box.min.equals( this.min ) && box.max.equals( this.max );

  	}

  } );

  function satForAxes( axes, v0, v1, v2, extents ) {

  	var i, j;

  	for ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {

  		_testAxis.fromArray( axes, i );
  		// project the aabb onto the seperating axis
  		var r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
  		// project all 3 vertices of the triangle onto the seperating axis
  		var p0 = v0.dot( _testAxis );
  		var p1 = v1.dot( _testAxis );
  		var p2 = v2.dot( _testAxis );
  		// actual test, basically see if either of the most extreme of the triangle points intersects r
  		if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

  			// points of the projected triangle are outside the projected half-length of the aabb
  			// the axis is seperating and we can exit
  			return false;

  		}

  	}

  	return true;

  }

  var _box$1 = new Box3();

  /**
   * @author bhouston / http://clara.io
   * @author mrdoob / http://mrdoob.com/
   */

  function Sphere( center, radius ) {

  	this.center = ( center !== undefined ) ? center : new Vector3();
  	this.radius = ( radius !== undefined ) ? radius : 0;

  }

  Object.assign( Sphere.prototype, {

  	set: function ( center, radius ) {

  		this.center.copy( center );
  		this.radius = radius;

  		return this;

  	},

  	setFromPoints: function ( points, optionalCenter ) {

  		var center = this.center;

  		if ( optionalCenter !== undefined ) {

  			center.copy( optionalCenter );

  		} else {

  			_box$1.setFromPoints( points ).getCenter( center );

  		}

  		var maxRadiusSq = 0;

  		for ( var i = 0, il = points.length; i < il; i ++ ) {

  			maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

  		}

  		this.radius = Math.sqrt( maxRadiusSq );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( sphere ) {

  		this.center.copy( sphere.center );
  		this.radius = sphere.radius;

  		return this;

  	},

  	empty: function () {

  		return ( this.radius <= 0 );

  	},

  	containsPoint: function ( point ) {

  		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

  	},

  	distanceToPoint: function ( point ) {

  		return ( point.distanceTo( this.center ) - this.radius );

  	},

  	intersectsSphere: function ( sphere ) {

  		var radiusSum = this.radius + sphere.radius;

  		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

  	},

  	intersectsBox: function ( box ) {

  		return box.intersectsSphere( this );

  	},

  	intersectsPlane: function ( plane ) {

  		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

  	},

  	clampPoint: function ( point, target ) {

  		var deltaLengthSq = this.center.distanceToSquared( point );

  		if ( target === undefined ) {

  			console.warn( 'THREE.Sphere: .clampPoint() target is now required' );
  			target = new Vector3();

  		}

  		target.copy( point );

  		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

  			target.sub( this.center ).normalize();
  			target.multiplyScalar( this.radius ).add( this.center );

  		}

  		return target;

  	},

  	getBoundingBox: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );
  			target = new Box3();

  		}

  		target.set( this.center, this.center );
  		target.expandByScalar( this.radius );

  		return target;

  	},

  	applyMatrix4: function ( matrix ) {

  		this.center.applyMatrix4( matrix );
  		this.radius = this.radius * matrix.getMaxScaleOnAxis();

  		return this;

  	},

  	translate: function ( offset ) {

  		this.center.add( offset );

  		return this;

  	},

  	equals: function ( sphere ) {

  		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

  	}

  } );

  var _vector$2 = new Vector3();
  var _segCenter = new Vector3();
  var _segDir = new Vector3();
  var _diff = new Vector3();

  var _edge1 = new Vector3();
  var _edge2 = new Vector3();
  var _normal = new Vector3();

  /**
   * @author bhouston / http://clara.io
   */

  function Ray( origin, direction ) {

  	this.origin = ( origin !== undefined ) ? origin : new Vector3();
  	this.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );

  }

  Object.assign( Ray.prototype, {

  	set: function ( origin, direction ) {

  		this.origin.copy( origin );
  		this.direction.copy( direction );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( ray ) {

  		this.origin.copy( ray.origin );
  		this.direction.copy( ray.direction );

  		return this;

  	},

  	at: function ( t, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Ray: .at() target is now required' );
  			target = new Vector3();

  		}

  		return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );

  	},

  	lookAt: function ( v ) {

  		this.direction.copy( v ).sub( this.origin ).normalize();

  		return this;

  	},

  	recast: function ( t ) {

  		this.origin.copy( this.at( t, _vector$2 ) );

  		return this;

  	},

  	closestPointToPoint: function ( point, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );
  			target = new Vector3();

  		}

  		target.subVectors( point, this.origin );

  		var directionDistance = target.dot( this.direction );

  		if ( directionDistance < 0 ) {

  			return target.copy( this.origin );

  		}

  		return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

  	},

  	distanceToPoint: function ( point ) {

  		return Math.sqrt( this.distanceSqToPoint( point ) );

  	},

  	distanceSqToPoint: function ( point ) {

  		var directionDistance = _vector$2.subVectors( point, this.origin ).dot( this.direction );

  		// point behind the ray

  		if ( directionDistance < 0 ) {

  			return this.origin.distanceToSquared( point );

  		}

  		_vector$2.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

  		return _vector$2.distanceToSquared( point );

  	},

  	distanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

  		// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
  		// It returns the min distance between the ray and the segment
  		// defined by v0 and v1
  		// It can also set two optional targets :
  		// - The closest point on the ray
  		// - The closest point on the segment

  		_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
  		_segDir.copy( v1 ).sub( v0 ).normalize();
  		_diff.copy( this.origin ).sub( _segCenter );

  		var segExtent = v0.distanceTo( v1 ) * 0.5;
  		var a01 = - this.direction.dot( _segDir );
  		var b0 = _diff.dot( this.direction );
  		var b1 = - _diff.dot( _segDir );
  		var c = _diff.lengthSq();
  		var det = Math.abs( 1 - a01 * a01 );
  		var s0, s1, sqrDist, extDet;

  		if ( det > 0 ) {

  			// The ray and segment are not parallel.

  			s0 = a01 * b1 - b0;
  			s1 = a01 * b0 - b1;
  			extDet = segExtent * det;

  			if ( s0 >= 0 ) {

  				if ( s1 >= - extDet ) {

  					if ( s1 <= extDet ) {

  						// region 0
  						// Minimum at interior points of ray and segment.

  						var invDet = 1 / det;
  						s0 *= invDet;
  						s1 *= invDet;
  						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

  					} else {

  						// region 1

  						s1 = segExtent;
  						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  					}

  				} else {

  					// region 5

  					s1 = - segExtent;
  					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  				}

  			} else {

  				if ( s1 <= - extDet ) {

  					// region 4

  					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
  					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
  					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  				} else if ( s1 <= extDet ) {

  					// region 3

  					s0 = 0;
  					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
  					sqrDist = s1 * ( s1 + 2 * b1 ) + c;

  				} else {

  					// region 2

  					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
  					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
  					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  				}

  			}

  		} else {

  			// Ray and segment are parallel.

  			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
  			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
  			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

  		}

  		if ( optionalPointOnRay ) {

  			optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

  		}

  		if ( optionalPointOnSegment ) {

  			optionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );

  		}

  		return sqrDist;

  	},

  	intersectSphere: function ( sphere, target ) {

  		_vector$2.subVectors( sphere.center, this.origin );
  		var tca = _vector$2.dot( this.direction );
  		var d2 = _vector$2.dot( _vector$2 ) - tca * tca;
  		var radius2 = sphere.radius * sphere.radius;

  		if ( d2 > radius2 ) return null;

  		var thc = Math.sqrt( radius2 - d2 );

  		// t0 = first intersect point - entrance on front of sphere
  		var t0 = tca - thc;

  		// t1 = second intersect point - exit point on back of sphere
  		var t1 = tca + thc;

  		// test to see if both t0 and t1 are behind the ray - if so, return null
  		if ( t0 < 0 && t1 < 0 ) return null;

  		// test to see if t0 is behind the ray:
  		// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
  		// in order to always return an intersect point that is in front of the ray.
  		if ( t0 < 0 ) return this.at( t1, target );

  		// else t0 is in front of the ray, so return the first collision point scaled by t0
  		return this.at( t0, target );

  	},

  	intersectsSphere: function ( sphere ) {

  		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

  	},

  	distanceToPlane: function ( plane ) {

  		var denominator = plane.normal.dot( this.direction );

  		if ( denominator === 0 ) {

  			// line is coplanar, return origin
  			if ( plane.distanceToPoint( this.origin ) === 0 ) {

  				return 0;

  			}

  			// Null is preferable to undefined since undefined means.... it is undefined

  			return null;

  		}

  		var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

  		// Return if the ray never intersects the plane

  		return t >= 0 ? t : null;

  	},

  	intersectPlane: function ( plane, target ) {

  		var t = this.distanceToPlane( plane );

  		if ( t === null ) {

  			return null;

  		}

  		return this.at( t, target );

  	},

  	intersectsPlane: function ( plane ) {

  		// check if the ray lies on the plane first

  		var distToPoint = plane.distanceToPoint( this.origin );

  		if ( distToPoint === 0 ) {

  			return true;

  		}

  		var denominator = plane.normal.dot( this.direction );

  		if ( denominator * distToPoint < 0 ) {

  			return true;

  		}

  		// ray origin is behind the plane (and is pointing behind it)

  		return false;

  	},

  	intersectBox: function ( box, target ) {

  		var tmin, tmax, tymin, tymax, tzmin, tzmax;

  		var invdirx = 1 / this.direction.x,
  			invdiry = 1 / this.direction.y,
  			invdirz = 1 / this.direction.z;

  		var origin = this.origin;

  		if ( invdirx >= 0 ) {

  			tmin = ( box.min.x - origin.x ) * invdirx;
  			tmax = ( box.max.x - origin.x ) * invdirx;

  		} else {

  			tmin = ( box.max.x - origin.x ) * invdirx;
  			tmax = ( box.min.x - origin.x ) * invdirx;

  		}

  		if ( invdiry >= 0 ) {

  			tymin = ( box.min.y - origin.y ) * invdiry;
  			tymax = ( box.max.y - origin.y ) * invdiry;

  		} else {

  			tymin = ( box.max.y - origin.y ) * invdiry;
  			tymax = ( box.min.y - origin.y ) * invdiry;

  		}

  		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

  		// These lines also handle the case where tmin or tmax is NaN
  		// (result of 0 * Infinity). x !== x returns true if x is NaN

  		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

  		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

  		if ( invdirz >= 0 ) {

  			tzmin = ( box.min.z - origin.z ) * invdirz;
  			tzmax = ( box.max.z - origin.z ) * invdirz;

  		} else {

  			tzmin = ( box.max.z - origin.z ) * invdirz;
  			tzmax = ( box.min.z - origin.z ) * invdirz;

  		}

  		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

  		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

  		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

  		//return point closest to the ray (positive side)

  		if ( tmax < 0 ) return null;

  		return this.at( tmin >= 0 ? tmin : tmax, target );

  	},

  	intersectsBox: function ( box ) {

  		return this.intersectBox( box, _vector$2 ) !== null;

  	},

  	intersectTriangle: function ( a, b, c, backfaceCulling, target ) {

  		// Compute the offset origin, edges, and normal.

  		// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

  		_edge1.subVectors( b, a );
  		_edge2.subVectors( c, a );
  		_normal.crossVectors( _edge1, _edge2 );

  		// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
  		// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
  		//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
  		//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
  		//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
  		var DdN = this.direction.dot( _normal );
  		var sign;

  		if ( DdN > 0 ) {

  			if ( backfaceCulling ) return null;
  			sign = 1;

  		} else if ( DdN < 0 ) {

  			sign = - 1;
  			DdN = - DdN;

  		} else {

  			return null;

  		}

  		_diff.subVectors( this.origin, a );
  		var DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );

  		// b1 < 0, no intersection
  		if ( DdQxE2 < 0 ) {

  			return null;

  		}

  		var DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );

  		// b2 < 0, no intersection
  		if ( DdE1xQ < 0 ) {

  			return null;

  		}

  		// b1+b2 > 1, no intersection
  		if ( DdQxE2 + DdE1xQ > DdN ) {

  			return null;

  		}

  		// Line intersects triangle, check if ray does.
  		var QdN = - sign * _diff.dot( _normal );

  		// t < 0, no intersection
  		if ( QdN < 0 ) {

  			return null;

  		}

  		// Ray intersects triangle.
  		return this.at( QdN / DdN, target );

  	},

  	applyMatrix4: function ( matrix4 ) {

  		this.origin.applyMatrix4( matrix4 );
  		this.direction.transformDirection( matrix4 );

  		return this;

  	},

  	equals: function ( ray ) {

  		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   */

  var _vector1 = new Vector3();
  var _vector2 = new Vector3();
  var _normalMatrix = new Matrix3();

  function Plane( normal, constant ) {

  	// normal is assumed to be normalized

  	this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
  	this.constant = ( constant !== undefined ) ? constant : 0;

  }

  Object.assign( Plane.prototype, {

  	isPlane: true,

  	set: function ( normal, constant ) {

  		this.normal.copy( normal );
  		this.constant = constant;

  		return this;

  	},

  	setComponents: function ( x, y, z, w ) {

  		this.normal.set( x, y, z );
  		this.constant = w;

  		return this;

  	},

  	setFromNormalAndCoplanarPoint: function ( normal, point ) {

  		this.normal.copy( normal );
  		this.constant = - point.dot( this.normal );

  		return this;

  	},

  	setFromCoplanarPoints: function ( a, b, c ) {

  		var normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();

  		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

  		this.setFromNormalAndCoplanarPoint( normal, a );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( plane ) {

  		this.normal.copy( plane.normal );
  		this.constant = plane.constant;

  		return this;

  	},

  	normalize: function () {

  		// Note: will lead to a divide by zero if the plane is invalid.

  		var inverseNormalLength = 1.0 / this.normal.length();
  		this.normal.multiplyScalar( inverseNormalLength );
  		this.constant *= inverseNormalLength;

  		return this;

  	},

  	negate: function () {

  		this.constant *= - 1;
  		this.normal.negate();

  		return this;

  	},

  	distanceToPoint: function ( point ) {

  		return this.normal.dot( point ) + this.constant;

  	},

  	distanceToSphere: function ( sphere ) {

  		return this.distanceToPoint( sphere.center ) - sphere.radius;

  	},

  	projectPoint: function ( point, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Plane: .projectPoint() target is now required' );
  			target = new Vector3();

  		}

  		return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

  	},

  	intersectLine: function ( line, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Plane: .intersectLine() target is now required' );
  			target = new Vector3();

  		}

  		var direction = line.delta( _vector1 );

  		var denominator = this.normal.dot( direction );

  		if ( denominator === 0 ) {

  			// line is coplanar, return origin
  			if ( this.distanceToPoint( line.start ) === 0 ) {

  				return target.copy( line.start );

  			}

  			// Unsure if this is the correct method to handle this case.
  			return undefined;

  		}

  		var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

  		if ( t < 0 || t > 1 ) {

  			return undefined;

  		}

  		return target.copy( direction ).multiplyScalar( t ).add( line.start );

  	},

  	intersectsLine: function ( line ) {

  		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

  		var startSign = this.distanceToPoint( line.start );
  		var endSign = this.distanceToPoint( line.end );

  		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

  	},

  	intersectsBox: function ( box ) {

  		return box.intersectsPlane( this );

  	},

  	intersectsSphere: function ( sphere ) {

  		return sphere.intersectsPlane( this );

  	},

  	coplanarPoint: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Plane: .coplanarPoint() target is now required' );
  			target = new Vector3();

  		}

  		return target.copy( this.normal ).multiplyScalar( - this.constant );

  	},

  	applyMatrix4: function ( matrix, optionalNormalMatrix ) {

  		var normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );

  		var referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );

  		var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

  		this.constant = - referencePoint.dot( normal );

  		return this;

  	},

  	translate: function ( offset ) {

  		this.constant -= offset.dot( this.normal );

  		return this;

  	},

  	equals: function ( plane ) {

  		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   * @author mrdoob / http://mrdoob.com/
   */

  var _v0$1 = new Vector3();
  var _v1$3 = new Vector3();
  var _v2$1 = new Vector3();
  var _v3 = new Vector3();

  var _vab = new Vector3();
  var _vac = new Vector3();
  var _vbc = new Vector3();
  var _vap = new Vector3();
  var _vbp = new Vector3();
  var _vcp = new Vector3();

  function Triangle( a, b, c ) {

  	this.a = ( a !== undefined ) ? a : new Vector3();
  	this.b = ( b !== undefined ) ? b : new Vector3();
  	this.c = ( c !== undefined ) ? c : new Vector3();

  }

  Object.assign( Triangle, {

  	getNormal: function ( a, b, c, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Triangle: .getNormal() target is now required' );
  			target = new Vector3();

  		}

  		target.subVectors( c, b );
  		_v0$1.subVectors( a, b );
  		target.cross( _v0$1 );

  		var targetLengthSq = target.lengthSq();
  		if ( targetLengthSq > 0 ) {

  			return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

  		}

  		return target.set( 0, 0, 0 );

  	},

  	// static/instance method to calculate barycentric coordinates
  	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  	getBarycoord: function ( point, a, b, c, target ) {

  		_v0$1.subVectors( c, a );
  		_v1$3.subVectors( b, a );
  		_v2$1.subVectors( point, a );

  		var dot00 = _v0$1.dot( _v0$1 );
  		var dot01 = _v0$1.dot( _v1$3 );
  		var dot02 = _v0$1.dot( _v2$1 );
  		var dot11 = _v1$3.dot( _v1$3 );
  		var dot12 = _v1$3.dot( _v2$1 );

  		var denom = ( dot00 * dot11 - dot01 * dot01 );

  		if ( target === undefined ) {

  			console.warn( 'THREE.Triangle: .getBarycoord() target is now required' );
  			target = new Vector3();

  		}

  		// collinear or singular triangle
  		if ( denom === 0 ) {

  			// arbitrary location outside of triangle?
  			// not sure if this is the best idea, maybe should be returning undefined
  			return target.set( - 2, - 1, - 1 );

  		}

  		var invDenom = 1 / denom;
  		var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
  		var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

  		// barycentric coordinates must always sum to 1
  		return target.set( 1 - u - v, v, u );

  	},

  	containsPoint: function ( point, a, b, c ) {

  		Triangle.getBarycoord( point, a, b, c, _v3 );

  		return ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );

  	},

  	getUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {

  		this.getBarycoord( point, p1, p2, p3, _v3 );

  		target.set( 0, 0 );
  		target.addScaledVector( uv1, _v3.x );
  		target.addScaledVector( uv2, _v3.y );
  		target.addScaledVector( uv3, _v3.z );

  		return target;

  	},

  	isFrontFacing: function ( a, b, c, direction ) {

  		_v0$1.subVectors( c, b );
  		_v1$3.subVectors( a, b );

  		// strictly front facing
  		return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;

  	}

  } );

  Object.assign( Triangle.prototype, {

  	set: function ( a, b, c ) {

  		this.a.copy( a );
  		this.b.copy( b );
  		this.c.copy( c );

  		return this;

  	},

  	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

  		this.a.copy( points[ i0 ] );
  		this.b.copy( points[ i1 ] );
  		this.c.copy( points[ i2 ] );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( triangle ) {

  		this.a.copy( triangle.a );
  		this.b.copy( triangle.b );
  		this.c.copy( triangle.c );

  		return this;

  	},

  	getArea: function () {

  		_v0$1.subVectors( this.c, this.b );
  		_v1$3.subVectors( this.a, this.b );

  		return _v0$1.cross( _v1$3 ).length() * 0.5;

  	},

  	getMidpoint: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Triangle: .getMidpoint() target is now required' );
  			target = new Vector3();

  		}

  		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

  	},

  	getNormal: function ( target ) {

  		return Triangle.getNormal( this.a, this.b, this.c, target );

  	},

  	getPlane: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Triangle: .getPlane() target is now required' );
  			target = new Plane();

  		}

  		return target.setFromCoplanarPoints( this.a, this.b, this.c );

  	},

  	getBarycoord: function ( point, target ) {

  		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

  	},

  	getUV: function ( point, uv1, uv2, uv3, target ) {

  		return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );

  	},

  	containsPoint: function ( point ) {

  		return Triangle.containsPoint( point, this.a, this.b, this.c );

  	},

  	isFrontFacing: function ( direction ) {

  		return Triangle.isFrontFacing( this.a, this.b, this.c, direction );

  	},

  	intersectsBox: function ( box ) {

  		return box.intersectsTriangle( this );

  	},

  	closestPointToPoint: function ( p, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );
  			target = new Vector3();

  		}

  		var a = this.a, b = this.b, c = this.c;
  		var v, w;

  		// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
  		// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
  		// under the accompanying license; see chapter 5.1.5 for detailed explanation.
  		// basically, we're distinguishing which of the voronoi regions of the triangle
  		// the point lies in with the minimum amount of redundant computation.

  		_vab.subVectors( b, a );
  		_vac.subVectors( c, a );
  		_vap.subVectors( p, a );
  		var d1 = _vab.dot( _vap );
  		var d2 = _vac.dot( _vap );
  		if ( d1 <= 0 && d2 <= 0 ) {

  			// vertex region of A; barycentric coords (1, 0, 0)
  			return target.copy( a );

  		}

  		_vbp.subVectors( p, b );
  		var d3 = _vab.dot( _vbp );
  		var d4 = _vac.dot( _vbp );
  		if ( d3 >= 0 && d4 <= d3 ) {

  			// vertex region of B; barycentric coords (0, 1, 0)
  			return target.copy( b );

  		}

  		var vc = d1 * d4 - d3 * d2;
  		if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

  			v = d1 / ( d1 - d3 );
  			// edge region of AB; barycentric coords (1-v, v, 0)
  			return target.copy( a ).addScaledVector( _vab, v );

  		}

  		_vcp.subVectors( p, c );
  		var d5 = _vab.dot( _vcp );
  		var d6 = _vac.dot( _vcp );
  		if ( d6 >= 0 && d5 <= d6 ) {

  			// vertex region of C; barycentric coords (0, 0, 1)
  			return target.copy( c );

  		}

  		var vb = d5 * d2 - d1 * d6;
  		if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

  			w = d2 / ( d2 - d6 );
  			// edge region of AC; barycentric coords (1-w, 0, w)
  			return target.copy( a ).addScaledVector( _vac, w );

  		}

  		var va = d3 * d6 - d5 * d4;
  		if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

  			_vbc.subVectors( c, b );
  			w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
  			// edge region of BC; barycentric coords (0, 1-w, w)
  			return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC

  		}

  		// face region
  		var denom = 1 / ( va + vb + vc );
  		// u = va * denom
  		v = vb * denom;
  		w = vc * denom;

  		return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );

  	},

  	equals: function ( triangle ) {

  		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
  	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
  	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
  	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
  	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
  	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
  	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
  	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
  	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
  	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
  	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
  	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
  	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
  	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
  	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
  	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
  	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
  	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
  	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
  	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
  	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
  	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
  	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
  	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

  var _hslA = { h: 0, s: 0, l: 0 };
  var _hslB = { h: 0, s: 0, l: 0 };

  function Color( r, g, b ) {

  	if ( g === undefined && b === undefined ) {

  		// r is THREE.Color, hex or string
  		return this.set( r );

  	}

  	return this.setRGB( r, g, b );

  }

  function hue2rgb( p, q, t ) {

  	if ( t < 0 ) t += 1;
  	if ( t > 1 ) t -= 1;
  	if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
  	if ( t < 1 / 2 ) return q;
  	if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
  	return p;

  }

  function SRGBToLinear( c ) {

  	return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

  }

  function LinearToSRGB( c ) {

  	return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

  }

  Object.assign( Color.prototype, {

  	isColor: true,

  	r: 1, g: 1, b: 1,

  	set: function ( value ) {

  		if ( value && value.isColor ) {

  			this.copy( value );

  		} else if ( typeof value === 'number' ) {

  			this.setHex( value );

  		} else if ( typeof value === 'string' ) {

  			this.setStyle( value );

  		}

  		return this;

  	},

  	setScalar: function ( scalar ) {

  		this.r = scalar;
  		this.g = scalar;
  		this.b = scalar;

  		return this;

  	},

  	setHex: function ( hex ) {

  		hex = Math.floor( hex );

  		this.r = ( hex >> 16 & 255 ) / 255;
  		this.g = ( hex >> 8 & 255 ) / 255;
  		this.b = ( hex & 255 ) / 255;

  		return this;

  	},

  	setRGB: function ( r, g, b ) {

  		this.r = r;
  		this.g = g;
  		this.b = b;

  		return this;

  	},

  	setHSL: function ( h, s, l ) {

  		// h,s,l ranges are in 0.0 - 1.0
  		h = MathUtils.euclideanModulo( h, 1 );
  		s = MathUtils.clamp( s, 0, 1 );
  		l = MathUtils.clamp( l, 0, 1 );

  		if ( s === 0 ) {

  			this.r = this.g = this.b = l;

  		} else {

  			var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
  			var q = ( 2 * l ) - p;

  			this.r = hue2rgb( q, p, h + 1 / 3 );
  			this.g = hue2rgb( q, p, h );
  			this.b = hue2rgb( q, p, h - 1 / 3 );

  		}

  		return this;

  	},

  	setStyle: function ( style ) {

  		function handleAlpha( string ) {

  			if ( string === undefined ) return;

  			if ( parseFloat( string ) < 1 ) {

  				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

  			}

  		}


  		var m;

  		if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

  			// rgb / hsl

  			var color;
  			var name = m[ 1 ];
  			var components = m[ 2 ];

  			switch ( name ) {

  				case 'rgb':
  				case 'rgba':

  					if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

  						// rgb(255,0,0) rgba(255,0,0,0.5)
  						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
  						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
  						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

  						handleAlpha( color[ 5 ] );

  						return this;

  					}

  					if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

  						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
  						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
  						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
  						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

  						handleAlpha( color[ 5 ] );

  						return this;

  					}

  					break;

  				case 'hsl':
  				case 'hsla':

  					if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

  						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
  						var h = parseFloat( color[ 1 ] ) / 360;
  						var s = parseInt( color[ 2 ], 10 ) / 100;
  						var l = parseInt( color[ 3 ], 10 ) / 100;

  						handleAlpha( color[ 5 ] );

  						return this.setHSL( h, s, l );

  					}

  					break;

  			}

  		} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

  			// hex color

  			var hex = m[ 1 ];
  			var size = hex.length;

  			if ( size === 3 ) {

  				// #ff0
  				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
  				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
  				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

  				return this;

  			} else if ( size === 6 ) {

  				// #ff0000
  				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
  				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
  				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

  				return this;

  			}

  		}

  		if ( style && style.length > 0 ) {

  			return this.setColorName( style );

  		}

  		return this;

  	},

  	setColorName: function ( style ) {

  		// color keywords
  		var hex = _colorKeywords[ style ];

  		if ( hex !== undefined ) {

  			// red
  			this.setHex( hex );

  		} else {

  			// unknown color
  			console.warn( 'THREE.Color: Unknown color ' + style );

  		}

  		return this;

  	},

  	clone: function () {

  		return new this.constructor( this.r, this.g, this.b );

  	},

  	copy: function ( color ) {

  		this.r = color.r;
  		this.g = color.g;
  		this.b = color.b;

  		return this;

  	},

  	copyGammaToLinear: function ( color, gammaFactor ) {

  		if ( gammaFactor === undefined ) gammaFactor = 2.0;

  		this.r = Math.pow( color.r, gammaFactor );
  		this.g = Math.pow( color.g, gammaFactor );
  		this.b = Math.pow( color.b, gammaFactor );

  		return this;

  	},

  	copyLinearToGamma: function ( color, gammaFactor ) {

  		if ( gammaFactor === undefined ) gammaFactor = 2.0;

  		var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

  		this.r = Math.pow( color.r, safeInverse );
  		this.g = Math.pow( color.g, safeInverse );
  		this.b = Math.pow( color.b, safeInverse );

  		return this;

  	},

  	convertGammaToLinear: function ( gammaFactor ) {

  		this.copyGammaToLinear( this, gammaFactor );

  		return this;

  	},

  	convertLinearToGamma: function ( gammaFactor ) {

  		this.copyLinearToGamma( this, gammaFactor );

  		return this;

  	},

  	copySRGBToLinear: function ( color ) {

  		this.r = SRGBToLinear( color.r );
  		this.g = SRGBToLinear( color.g );
  		this.b = SRGBToLinear( color.b );

  		return this;

  	},

  	copyLinearToSRGB: function ( color ) {

  		this.r = LinearToSRGB( color.r );
  		this.g = LinearToSRGB( color.g );
  		this.b = LinearToSRGB( color.b );

  		return this;

  	},

  	convertSRGBToLinear: function () {

  		this.copySRGBToLinear( this );

  		return this;

  	},

  	convertLinearToSRGB: function () {

  		this.copyLinearToSRGB( this );

  		return this;

  	},

  	getHex: function () {

  		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

  	},

  	getHexString: function () {

  		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

  	},

  	getHSL: function ( target ) {

  		// h,s,l ranges are in 0.0 - 1.0

  		if ( target === undefined ) {

  			console.warn( 'THREE.Color: .getHSL() target is now required' );
  			target = { h: 0, s: 0, l: 0 };

  		}

  		var r = this.r, g = this.g, b = this.b;

  		var max = Math.max( r, g, b );
  		var min = Math.min( r, g, b );

  		var hue, saturation;
  		var lightness = ( min + max ) / 2.0;

  		if ( min === max ) {

  			hue = 0;
  			saturation = 0;

  		} else {

  			var delta = max - min;

  			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

  			switch ( max ) {

  				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
  				case g: hue = ( b - r ) / delta + 2; break;
  				case b: hue = ( r - g ) / delta + 4; break;

  			}

  			hue /= 6;

  		}

  		target.h = hue;
  		target.s = saturation;
  		target.l = lightness;

  		return target;

  	},

  	getStyle: function () {

  		return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

  	},

  	offsetHSL: function ( h, s, l ) {

  		this.getHSL( _hslA );

  		_hslA.h += h; _hslA.s += s; _hslA.l += l;

  		this.setHSL( _hslA.h, _hslA.s, _hslA.l );

  		return this;

  	},

  	add: function ( color ) {

  		this.r += color.r;
  		this.g += color.g;
  		this.b += color.b;

  		return this;

  	},

  	addColors: function ( color1, color2 ) {

  		this.r = color1.r + color2.r;
  		this.g = color1.g + color2.g;
  		this.b = color1.b + color2.b;

  		return this;

  	},

  	addScalar: function ( s ) {

  		this.r += s;
  		this.g += s;
  		this.b += s;

  		return this;

  	},

  	sub: function ( color ) {

  		this.r = Math.max( 0, this.r - color.r );
  		this.g = Math.max( 0, this.g - color.g );
  		this.b = Math.max( 0, this.b - color.b );

  		return this;

  	},

  	multiply: function ( color ) {

  		this.r *= color.r;
  		this.g *= color.g;
  		this.b *= color.b;

  		return this;

  	},

  	multiplyScalar: function ( s ) {

  		this.r *= s;
  		this.g *= s;
  		this.b *= s;

  		return this;

  	},

  	lerp: function ( color, alpha ) {

  		this.r += ( color.r - this.r ) * alpha;
  		this.g += ( color.g - this.g ) * alpha;
  		this.b += ( color.b - this.b ) * alpha;

  		return this;

  	},

  	lerpHSL: function ( color, alpha ) {

  		this.getHSL( _hslA );
  		color.getHSL( _hslB );

  		var h = MathUtils.lerp( _hslA.h, _hslB.h, alpha );
  		var s = MathUtils.lerp( _hslA.s, _hslB.s, alpha );
  		var l = MathUtils.lerp( _hslA.l, _hslB.l, alpha );

  		this.setHSL( h, s, l );

  		return this;

  	},

  	equals: function ( c ) {

  		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this.r = array[ offset ];
  		this.g = array[ offset + 1 ];
  		this.b = array[ offset + 2 ];

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		array[ offset ] = this.r;
  		array[ offset + 1 ] = this.g;
  		array[ offset + 2 ] = this.b;

  		return array;

  	},

  	toJSON: function () {

  		return this.getHex();

  	}

  } );

  Color.NAMES = _colorKeywords;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function Face3( a, b, c, normal, color, materialIndex ) {

  	this.a = a;
  	this.b = b;
  	this.c = c;

  	this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
  	this.vertexNormals = Array.isArray( normal ) ? normal : [];

  	this.color = ( color && color.isColor ) ? color : new Color();
  	this.vertexColors = Array.isArray( color ) ? color : [];

  	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

  }

  Object.assign( Face3.prototype, {

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.a = source.a;
  		this.b = source.b;
  		this.c = source.c;

  		this.normal.copy( source.normal );
  		this.color.copy( source.color );

  		this.materialIndex = source.materialIndex;

  		for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

  			this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

  		}

  		for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

  			this.vertexColors[ i ] = source.vertexColors[ i ].clone();

  		}

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  var materialId = 0;

  function Material() {

  	Object.defineProperty( this, 'id', { value: materialId ++ } );

  	this.uuid = MathUtils.generateUUID();

  	this.name = '';
  	this.type = 'Material';

  	this.fog = true;

  	this.blending = NormalBlending;
  	this.side = FrontSide;
  	this.flatShading = false;
  	this.vertexColors = false;

  	this.opacity = 1;
  	this.transparent = false;

  	this.blendSrc = SrcAlphaFactor;
  	this.blendDst = OneMinusSrcAlphaFactor;
  	this.blendEquation = AddEquation;
  	this.blendSrcAlpha = null;
  	this.blendDstAlpha = null;
  	this.blendEquationAlpha = null;

  	this.depthFunc = LessEqualDepth;
  	this.depthTest = true;
  	this.depthWrite = true;

  	this.stencilWriteMask = 0xff;
  	this.stencilFunc = AlwaysStencilFunc;
  	this.stencilRef = 0;
  	this.stencilFuncMask = 0xff;
  	this.stencilFail = KeepStencilOp;
  	this.stencilZFail = KeepStencilOp;
  	this.stencilZPass = KeepStencilOp;
  	this.stencilWrite = false;

  	this.clippingPlanes = null;
  	this.clipIntersection = false;
  	this.clipShadows = false;

  	this.shadowSide = null;

  	this.colorWrite = true;

  	this.precision = null; // override the renderer's default precision for this material

  	this.polygonOffset = false;
  	this.polygonOffsetFactor = 0;
  	this.polygonOffsetUnits = 0;

  	this.dithering = false;

  	this.alphaTest = 0;
  	this.premultipliedAlpha = false;

  	this.visible = true;

  	this.toneMapped = true;

  	this.userData = {};

  	this.version = 0;

  }

  Material.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: Material,

  	isMaterial: true,

  	onBeforeCompile: function () {},

  	setValues: function ( values ) {

  		if ( values === undefined ) return;

  		for ( var key in values ) {

  			var newValue = values[ key ];

  			if ( newValue === undefined ) {

  				console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
  				continue;

  			}

  			// for backward compatability if shading is set in the constructor
  			if ( key === 'shading' ) {

  				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
  				this.flatShading = ( newValue === FlatShading ) ? true : false;
  				continue;

  			}

  			var currentValue = this[ key ];

  			if ( currentValue === undefined ) {

  				console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
  				continue;

  			}

  			if ( currentValue && currentValue.isColor ) {

  				currentValue.set( newValue );

  			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

  				currentValue.copy( newValue );

  			} else {

  				this[ key ] = newValue;

  			}

  		}

  	},

  	toJSON: function ( meta ) {

  		var isRoot = ( meta === undefined || typeof meta === 'string' );

  		if ( isRoot ) {

  			meta = {
  				textures: {},
  				images: {}
  			};

  		}

  		var data = {
  			metadata: {
  				version: 4.5,
  				type: 'Material',
  				generator: 'Material.toJSON'
  			}
  		};

  		// standard Material serialization
  		data.uuid = this.uuid;
  		data.type = this.type;

  		if ( this.name !== '' ) data.name = this.name;

  		if ( this.color && this.color.isColor ) data.color = this.color.getHex();

  		if ( this.roughness !== undefined ) data.roughness = this.roughness;
  		if ( this.metalness !== undefined ) data.metalness = this.metalness;

  		if ( this.sheen && this.sheen.isColor ) data.sheen = this.sheen.getHex();
  		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
  		if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

  		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
  		if ( this.shininess !== undefined ) data.shininess = this.shininess;
  		if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;
  		if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;

  		if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {

  			data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;

  		}

  		if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {

  			data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;

  		}

  		if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {

  			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
  			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

  		}

  		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
  		if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
  		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
  		if ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;

  		if ( this.aoMap && this.aoMap.isTexture ) {

  			data.aoMap = this.aoMap.toJSON( meta ).uuid;
  			data.aoMapIntensity = this.aoMapIntensity;

  		}

  		if ( this.bumpMap && this.bumpMap.isTexture ) {

  			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
  			data.bumpScale = this.bumpScale;

  		}

  		if ( this.normalMap && this.normalMap.isTexture ) {

  			data.normalMap = this.normalMap.toJSON( meta ).uuid;
  			data.normalMapType = this.normalMapType;
  			data.normalScale = this.normalScale.toArray();

  		}

  		if ( this.displacementMap && this.displacementMap.isTexture ) {

  			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
  			data.displacementScale = this.displacementScale;
  			data.displacementBias = this.displacementBias;

  		}

  		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
  		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

  		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
  		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

  		if ( this.envMap && this.envMap.isTexture ) {

  			data.envMap = this.envMap.toJSON( meta ).uuid;
  			data.reflectivity = this.reflectivity; // Scale behind envMap
  			data.refractionRatio = this.refractionRatio;

  			if ( this.combine !== undefined ) data.combine = this.combine;
  			if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;

  		}

  		if ( this.gradientMap && this.gradientMap.isTexture ) {

  			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

  		}

  		if ( this.size !== undefined ) data.size = this.size;
  		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

  		if ( this.blending !== NormalBlending ) data.blending = this.blending;
  		if ( this.flatShading === true ) data.flatShading = this.flatShading;
  		if ( this.side !== FrontSide ) data.side = this.side;
  		if ( this.vertexColors ) data.vertexColors = true;

  		if ( this.opacity < 1 ) data.opacity = this.opacity;
  		if ( this.transparent === true ) data.transparent = this.transparent;

  		data.depthFunc = this.depthFunc;
  		data.depthTest = this.depthTest;
  		data.depthWrite = this.depthWrite;

  		data.stencilWrite = this.stencilWrite;
  		data.stencilWriteMask = this.stencilWriteMask;
  		data.stencilFunc = this.stencilFunc;
  		data.stencilRef = this.stencilRef;
  		data.stencilFuncMask = this.stencilFuncMask;
  		data.stencilFail = this.stencilFail;
  		data.stencilZFail = this.stencilZFail;
  		data.stencilZPass = this.stencilZPass;

  		// rotation (SpriteMaterial)
  		if ( this.rotation && this.rotation !== 0 ) data.rotation = this.rotation;

  		if ( this.polygonOffset === true ) data.polygonOffset = true;
  		if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
  		if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;

  		if ( this.linewidth && this.linewidth !== 1 ) data.linewidth = this.linewidth;
  		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
  		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
  		if ( this.scale !== undefined ) data.scale = this.scale;

  		if ( this.dithering === true ) data.dithering = true;

  		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
  		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;

  		if ( this.wireframe === true ) data.wireframe = this.wireframe;
  		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
  		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
  		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

  		if ( this.morphTargets === true ) data.morphTargets = true;
  		if ( this.morphNormals === true ) data.morphNormals = true;
  		if ( this.skinning === true ) data.skinning = true;

  		if ( this.visible === false ) data.visible = false;

  		if ( this.toneMapped === false ) data.toneMapped = false;

  		if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;

  		// TODO: Copied from Object3D.toJSON

  		function extractFromCache( cache ) {

  			var values = [];

  			for ( var key in cache ) {

  				var data = cache[ key ];
  				delete data.metadata;
  				values.push( data );

  			}

  			return values;

  		}

  		if ( isRoot ) {

  			var textures = extractFromCache( meta.textures );
  			var images = extractFromCache( meta.images );

  			if ( textures.length > 0 ) data.textures = textures;
  			if ( images.length > 0 ) data.images = images;

  		}

  		return data;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.name = source.name;

  		this.fog = source.fog;

  		this.blending = source.blending;
  		this.side = source.side;
  		this.flatShading = source.flatShading;
  		this.vertexColors = source.vertexColors;

  		this.opacity = source.opacity;
  		this.transparent = source.transparent;

  		this.blendSrc = source.blendSrc;
  		this.blendDst = source.blendDst;
  		this.blendEquation = source.blendEquation;
  		this.blendSrcAlpha = source.blendSrcAlpha;
  		this.blendDstAlpha = source.blendDstAlpha;
  		this.blendEquationAlpha = source.blendEquationAlpha;

  		this.depthFunc = source.depthFunc;
  		this.depthTest = source.depthTest;
  		this.depthWrite = source.depthWrite;

  		this.stencilWriteMask = source.stencilWriteMask;
  		this.stencilFunc = source.stencilFunc;
  		this.stencilRef = source.stencilRef;
  		this.stencilFuncMask = source.stencilFuncMask;
  		this.stencilFail = source.stencilFail;
  		this.stencilZFail = source.stencilZFail;
  		this.stencilZPass = source.stencilZPass;
  		this.stencilWrite = source.stencilWrite;

  		var srcPlanes = source.clippingPlanes,
  			dstPlanes = null;

  		if ( srcPlanes !== null ) {

  			var n = srcPlanes.length;
  			dstPlanes = new Array( n );

  			for ( var i = 0; i !== n; ++ i )
  				dstPlanes[ i ] = srcPlanes[ i ].clone();

  		}

  		this.clippingPlanes = dstPlanes;
  		this.clipIntersection = source.clipIntersection;
  		this.clipShadows = source.clipShadows;

  		this.shadowSide = source.shadowSide;

  		this.colorWrite = source.colorWrite;

  		this.precision = source.precision;

  		this.polygonOffset = source.polygonOffset;
  		this.polygonOffsetFactor = source.polygonOffsetFactor;
  		this.polygonOffsetUnits = source.polygonOffsetUnits;

  		this.dithering = source.dithering;

  		this.alphaTest = source.alphaTest;
  		this.premultipliedAlpha = source.premultipliedAlpha;

  		this.visible = source.visible;

  		this.toneMapped = source.toneMapped;

  		this.userData = JSON.parse( JSON.stringify( source.userData ) );

  		return this;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  Object.defineProperty( Material.prototype, 'needsUpdate', {

  	set: function ( value ) {

  		if ( value === true ) this.version ++;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *  map: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  specularMap: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
   *  combine: THREE.Multiply,
   *  reflectivity: <float>,
   *  refractionRatio: <float>,
   *
   *  depthTest: <bool>,
   *  depthWrite: <bool>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>
   * }
   */

  function MeshBasicMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshBasicMaterial';

  	this.color = new Color( 0xffffff ); // emissive

  	this.map = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.specularMap = null;

  	this.alphaMap = null;

  	this.envMap = null;
  	this.combine = MultiplyOperation;
  	this.reflectivity = 1;
  	this.refractionRatio = 0.98;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;

  	this.setValues( parameters );

  }

  MeshBasicMaterial.prototype = Object.create( Material.prototype );
  MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

  MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

  MeshBasicMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.map = source.map;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.specularMap = source.specularMap;

  	this.alphaMap = source.alphaMap;

  	this.envMap = source.envMap;
  	this.combine = source.combine;
  	this.reflectivity = source.reflectivity;
  	this.refractionRatio = source.refractionRatio;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _vector$3 = new Vector3();

  function BufferAttribute( array, itemSize, normalized ) {

  	if ( Array.isArray( array ) ) {

  		throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

  	}

  	this.name = '';

  	this.array = array;
  	this.itemSize = itemSize;
  	this.count = array !== undefined ? array.length / itemSize : 0;
  	this.normalized = normalized === true;

  	this.usage = StaticDrawUsage;
  	this.updateRange = { offset: 0, count: - 1 };

  	this.version = 0;

  }

  Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {

  	set: function ( value ) {

  		if ( value === true ) this.version ++;

  	}

  } );

  Object.assign( BufferAttribute.prototype, {

  	isBufferAttribute: true,

  	onUploadCallback: function () {},

  	setUsage: function ( value ) {

  		this.usage = value;

  		return this;

  	},

  	copy: function ( source ) {

  		this.name = source.name;
  		this.array = new source.array.constructor( source.array );
  		this.itemSize = source.itemSize;
  		this.count = source.count;
  		this.normalized = source.normalized;

  		this.usage = source.usage;

  		return this;

  	},

  	copyAt: function ( index1, attribute, index2 ) {

  		index1 *= this.itemSize;
  		index2 *= attribute.itemSize;

  		for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

  			this.array[ index1 + i ] = attribute.array[ index2 + i ];

  		}

  		return this;

  	},

  	copyArray: function ( array ) {

  		this.array.set( array );

  		return this;

  	},

  	copyColorsArray: function ( colors ) {

  		var array = this.array, offset = 0;

  		for ( var i = 0, l = colors.length; i < l; i ++ ) {

  			var color = colors[ i ];

  			if ( color === undefined ) {

  				console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
  				color = new Color();

  			}

  			array[ offset ++ ] = color.r;
  			array[ offset ++ ] = color.g;
  			array[ offset ++ ] = color.b;

  		}

  		return this;

  	},

  	copyVector2sArray: function ( vectors ) {

  		var array = this.array, offset = 0;

  		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

  			var vector = vectors[ i ];

  			if ( vector === undefined ) {

  				console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
  				vector = new Vector2();

  			}

  			array[ offset ++ ] = vector.x;
  			array[ offset ++ ] = vector.y;

  		}

  		return this;

  	},

  	copyVector3sArray: function ( vectors ) {

  		var array = this.array, offset = 0;

  		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

  			var vector = vectors[ i ];

  			if ( vector === undefined ) {

  				console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
  				vector = new Vector3();

  			}

  			array[ offset ++ ] = vector.x;
  			array[ offset ++ ] = vector.y;
  			array[ offset ++ ] = vector.z;

  		}

  		return this;

  	},

  	copyVector4sArray: function ( vectors ) {

  		var array = this.array, offset = 0;

  		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

  			var vector = vectors[ i ];

  			if ( vector === undefined ) {

  				console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
  				vector = new Vector4();

  			}

  			array[ offset ++ ] = vector.x;
  			array[ offset ++ ] = vector.y;
  			array[ offset ++ ] = vector.z;
  			array[ offset ++ ] = vector.w;

  		}

  		return this;

  	},

  	applyMatrix3: function ( m ) {

  		for ( var i = 0, l = this.count; i < l; i ++ ) {

  			_vector$3.x = this.getX( i );
  			_vector$3.y = this.getY( i );
  			_vector$3.z = this.getZ( i );

  			_vector$3.applyMatrix3( m );

  			this.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );

  		}

  		return this;

  	},

  	applyMatrix4: function ( m ) {

  		for ( var i = 0, l = this.count; i < l; i ++ ) {

  			_vector$3.x = this.getX( i );
  			_vector$3.y = this.getY( i );
  			_vector$3.z = this.getZ( i );

  			_vector$3.applyMatrix4( m );

  			this.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );

  		}

  		return this;

  	},

  	applyNormalMatrix: function ( m ) {

  		for ( var i = 0, l = this.count; i < l; i ++ ) {

  			_vector$3.x = this.getX( i );
  			_vector$3.y = this.getY( i );
  			_vector$3.z = this.getZ( i );

  			_vector$3.applyNormalMatrix( m );

  			this.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );

  		}

  		return this;

  	},

  	transformDirection: function ( m ) {

  		for ( var i = 0, l = this.count; i < l; i ++ ) {

  			_vector$3.x = this.getX( i );
  			_vector$3.y = this.getY( i );
  			_vector$3.z = this.getZ( i );

  			_vector$3.transformDirection( m );

  			this.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );

  		}

  		return this;

  	},

  	set: function ( value, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this.array.set( value, offset );

  		return this;

  	},

  	getX: function ( index ) {

  		return this.array[ index * this.itemSize ];

  	},

  	setX: function ( index, x ) {

  		this.array[ index * this.itemSize ] = x;

  		return this;

  	},

  	getY: function ( index ) {

  		return this.array[ index * this.itemSize + 1 ];

  	},

  	setY: function ( index, y ) {

  		this.array[ index * this.itemSize + 1 ] = y;

  		return this;

  	},

  	getZ: function ( index ) {

  		return this.array[ index * this.itemSize + 2 ];

  	},

  	setZ: function ( index, z ) {

  		this.array[ index * this.itemSize + 2 ] = z;

  		return this;

  	},

  	getW: function ( index ) {

  		return this.array[ index * this.itemSize + 3 ];

  	},

  	setW: function ( index, w ) {

  		this.array[ index * this.itemSize + 3 ] = w;

  		return this;

  	},

  	setXY: function ( index, x, y ) {

  		index *= this.itemSize;

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;

  		return this;

  	},

  	setXYZ: function ( index, x, y, z ) {

  		index *= this.itemSize;

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;
  		this.array[ index + 2 ] = z;

  		return this;

  	},

  	setXYZW: function ( index, x, y, z, w ) {

  		index *= this.itemSize;

  		this.array[ index + 0 ] = x;
  		this.array[ index + 1 ] = y;
  		this.array[ index + 2 ] = z;
  		this.array[ index + 3 ] = w;

  		return this;

  	},

  	onUpload: function ( callback ) {

  		this.onUploadCallback = callback;

  		return this;

  	},

  	clone: function () {

  		return new this.constructor( this.array, this.itemSize ).copy( this );

  	},

  	toJSON: function () {

  		return {
  			itemSize: this.itemSize,
  			type: this.array.constructor.name,
  			array: Array.prototype.slice.call( this.array ),
  			normalized: this.normalized
  		};

  	}

  } );

  //

  function Int8BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );

  }

  Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;


  function Uint8BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );

  }

  Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;


  function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );

  }

  Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;


  function Int16BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );

  }

  Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;


  function Uint16BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );

  }

  Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


  function Int32BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );

  }

  Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;


  function Uint32BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );

  }

  Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


  function Float32BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );

  }

  Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


  function Float64BufferAttribute( array, itemSize, normalized ) {

  	BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );

  }

  Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
  Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function DirectGeometry() {

  	this.vertices = [];
  	this.normals = [];
  	this.colors = [];
  	this.uvs = [];
  	this.uvs2 = [];

  	this.groups = [];

  	this.morphTargets = {};

  	this.skinWeights = [];
  	this.skinIndices = [];

  	// this.lineDistances = [];

  	this.boundingBox = null;
  	this.boundingSphere = null;

  	// update flags

  	this.verticesNeedUpdate = false;
  	this.normalsNeedUpdate = false;
  	this.colorsNeedUpdate = false;
  	this.uvsNeedUpdate = false;
  	this.groupsNeedUpdate = false;

  }

  Object.assign( DirectGeometry.prototype, {

  	computeGroups: function ( geometry ) {

  		var group;
  		var groups = [];
  		var materialIndex = undefined;

  		var faces = geometry.faces;

  		for ( var i = 0; i < faces.length; i ++ ) {

  			var face = faces[ i ];

  			// materials

  			if ( face.materialIndex !== materialIndex ) {

  				materialIndex = face.materialIndex;

  				if ( group !== undefined ) {

  					group.count = ( i * 3 ) - group.start;
  					groups.push( group );

  				}

  				group = {
  					start: i * 3,
  					materialIndex: materialIndex
  				};

  			}

  		}

  		if ( group !== undefined ) {

  			group.count = ( i * 3 ) - group.start;
  			groups.push( group );

  		}

  		this.groups = groups;

  	},

  	fromGeometry: function ( geometry ) {

  		var faces = geometry.faces;
  		var vertices = geometry.vertices;
  		var faceVertexUvs = geometry.faceVertexUvs;

  		var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
  		var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

  		// morphs

  		var morphTargets = geometry.morphTargets;
  		var morphTargetsLength = morphTargets.length;

  		var morphTargetsPosition;

  		if ( morphTargetsLength > 0 ) {

  			morphTargetsPosition = [];

  			for ( var i = 0; i < morphTargetsLength; i ++ ) {

  				morphTargetsPosition[ i ] = {
  					name: morphTargets[ i ].name,
  				 	data: []
  				};

  			}

  			this.morphTargets.position = morphTargetsPosition;

  		}

  		var morphNormals = geometry.morphNormals;
  		var morphNormalsLength = morphNormals.length;

  		var morphTargetsNormal;

  		if ( morphNormalsLength > 0 ) {

  			morphTargetsNormal = [];

  			for ( var i = 0; i < morphNormalsLength; i ++ ) {

  				morphTargetsNormal[ i ] = {
  					name: morphNormals[ i ].name,
  				 	data: []
  				};

  			}

  			this.morphTargets.normal = morphTargetsNormal;

  		}

  		// skins

  		var skinIndices = geometry.skinIndices;
  		var skinWeights = geometry.skinWeights;

  		var hasSkinIndices = skinIndices.length === vertices.length;
  		var hasSkinWeights = skinWeights.length === vertices.length;

  		//

  		if ( vertices.length > 0 && faces.length === 0 ) {

  			console.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );

  		}

  		for ( var i = 0; i < faces.length; i ++ ) {

  			var face = faces[ i ];

  			this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

  			var vertexNormals = face.vertexNormals;

  			if ( vertexNormals.length === 3 ) {

  				this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

  			} else {

  				var normal = face.normal;

  				this.normals.push( normal, normal, normal );

  			}

  			var vertexColors = face.vertexColors;

  			if ( vertexColors.length === 3 ) {

  				this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

  			} else {

  				var color = face.color;

  				this.colors.push( color, color, color );

  			}

  			if ( hasFaceVertexUv === true ) {

  				var vertexUvs = faceVertexUvs[ 0 ][ i ];

  				if ( vertexUvs !== undefined ) {

  					this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

  				} else {

  					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

  					this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

  				}

  			}

  			if ( hasFaceVertexUv2 === true ) {

  				var vertexUvs = faceVertexUvs[ 1 ][ i ];

  				if ( vertexUvs !== undefined ) {

  					this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

  				} else {

  					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

  					this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

  				}

  			}

  			// morphs

  			for ( var j = 0; j < morphTargetsLength; j ++ ) {

  				var morphTarget = morphTargets[ j ].vertices;

  				morphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

  			}

  			for ( var j = 0; j < morphNormalsLength; j ++ ) {

  				var morphNormal = morphNormals[ j ].vertexNormals[ i ];

  				morphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );

  			}

  			// skins

  			if ( hasSkinIndices ) {

  				this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

  			}

  			if ( hasSkinWeights ) {

  				this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

  			}

  		}

  		this.computeGroups( geometry );

  		this.verticesNeedUpdate = geometry.verticesNeedUpdate;
  		this.normalsNeedUpdate = geometry.normalsNeedUpdate;
  		this.colorsNeedUpdate = geometry.colorsNeedUpdate;
  		this.uvsNeedUpdate = geometry.uvsNeedUpdate;
  		this.groupsNeedUpdate = geometry.groupsNeedUpdate;

  		if ( geometry.boundingSphere !== null ) {

  			this.boundingSphere = geometry.boundingSphere.clone();

  		}

  		if ( geometry.boundingBox !== null ) {

  			this.boundingBox = geometry.boundingBox.clone();

  		}

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function arrayMax( array ) {

  	if ( array.length === 0 ) return - Infinity;

  	var max = array[ 0 ];

  	for ( var i = 1, l = array.length; i < l; ++ i ) {

  		if ( array[ i ] > max ) max = array[ i ];

  	}

  	return max;

  }

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   */

  var _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id

  var _m1$2 = new Matrix4();
  var _obj = new Object3D();
  var _offset = new Vector3();
  var _box$2 = new Box3();
  var _boxMorphTargets = new Box3();
  var _vector$4 = new Vector3();

  function BufferGeometry() {

  	Object.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );

  	this.uuid = MathUtils.generateUUID();

  	this.name = '';
  	this.type = 'BufferGeometry';

  	this.index = null;
  	this.attributes = {};

  	this.morphAttributes = {};
  	this.morphTargetsRelative = false;

  	this.groups = [];

  	this.boundingBox = null;
  	this.boundingSphere = null;

  	this.drawRange = { start: 0, count: Infinity };

  	this.userData = {};

  }

  BufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: BufferGeometry,

  	isBufferGeometry: true,

  	getIndex: function () {

  		return this.index;

  	},

  	setIndex: function ( index ) {

  		if ( Array.isArray( index ) ) {

  			this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

  		} else {

  			this.index = index;

  		}

  	},

  	getAttribute: function ( name ) {

  		return this.attributes[ name ];

  	},

  	setAttribute: function ( name, attribute ) {

  		this.attributes[ name ] = attribute;

  		return this;

  	},

  	deleteAttribute: function ( name ) {

  		delete this.attributes[ name ];

  		return this;

  	},

  	addGroup: function ( start, count, materialIndex ) {

  		this.groups.push( {

  			start: start,
  			count: count,
  			materialIndex: materialIndex !== undefined ? materialIndex : 0

  		} );

  	},

  	clearGroups: function () {

  		this.groups = [];

  	},

  	setDrawRange: function ( start, count ) {

  		this.drawRange.start = start;
  		this.drawRange.count = count;

  	},

  	applyMatrix4: function ( matrix ) {

  		var position = this.attributes.position;

  		if ( position !== undefined ) {

  			position.applyMatrix4( matrix );

  			position.needsUpdate = true;

  		}

  		var normal = this.attributes.normal;

  		if ( normal !== undefined ) {

  			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

  			normal.applyNormalMatrix( normalMatrix );

  			normal.needsUpdate = true;

  		}

  		var tangent = this.attributes.tangent;

  		if ( tangent !== undefined ) {

  			tangent.transformDirection( matrix );

  			tangent.needsUpdate = true;

  		}

  		if ( this.boundingBox !== null ) {

  			this.computeBoundingBox();

  		}

  		if ( this.boundingSphere !== null ) {

  			this.computeBoundingSphere();

  		}

  		return this;

  	},

  	rotateX: function ( angle ) {

  		// rotate geometry around world x-axis

  		_m1$2.makeRotationX( angle );

  		this.applyMatrix4( _m1$2 );

  		return this;

  	},

  	rotateY: function ( angle ) {

  		// rotate geometry around world y-axis

  		_m1$2.makeRotationY( angle );

  		this.applyMatrix4( _m1$2 );

  		return this;

  	},

  	rotateZ: function ( angle ) {

  		// rotate geometry around world z-axis

  		_m1$2.makeRotationZ( angle );

  		this.applyMatrix4( _m1$2 );

  		return this;

  	},

  	translate: function ( x, y, z ) {

  		// translate geometry

  		_m1$2.makeTranslation( x, y, z );

  		this.applyMatrix4( _m1$2 );

  		return this;

  	},

  	scale: function ( x, y, z ) {

  		// scale geometry

  		_m1$2.makeScale( x, y, z );

  		this.applyMatrix4( _m1$2 );

  		return this;

  	},

  	lookAt: function ( vector ) {

  		_obj.lookAt( vector );

  		_obj.updateMatrix();

  		this.applyMatrix4( _obj.matrix );

  		return this;

  	},

  	center: function () {

  		this.computeBoundingBox();

  		this.boundingBox.getCenter( _offset ).negate();

  		this.translate( _offset.x, _offset.y, _offset.z );

  		return this;

  	},

  	setFromObject: function ( object ) {

  		// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

  		var geometry = object.geometry;

  		if ( object.isPoints || object.isLine ) {

  			var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
  			var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );

  			this.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
  			this.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

  			if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

  				var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );

  				this.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

  			}

  			if ( geometry.boundingSphere !== null ) {

  				this.boundingSphere = geometry.boundingSphere.clone();

  			}

  			if ( geometry.boundingBox !== null ) {

  				this.boundingBox = geometry.boundingBox.clone();

  			}

  		} else if ( object.isMesh ) {

  			if ( geometry && geometry.isGeometry ) {

  				this.fromGeometry( geometry );

  			}

  		}

  		return this;

  	},

  	setFromPoints: function ( points ) {

  		var position = [];

  		for ( var i = 0, l = points.length; i < l; i ++ ) {

  			var point = points[ i ];
  			position.push( point.x, point.y, point.z || 0 );

  		}

  		this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

  		return this;

  	},

  	updateFromObject: function ( object ) {

  		var geometry = object.geometry;

  		if ( object.isMesh ) {

  			var direct = geometry.__directGeometry;

  			if ( geometry.elementsNeedUpdate === true ) {

  				direct = undefined;
  				geometry.elementsNeedUpdate = false;

  			}

  			if ( direct === undefined ) {

  				return this.fromGeometry( geometry );

  			}

  			direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
  			direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
  			direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
  			direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
  			direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

  			geometry.verticesNeedUpdate = false;
  			geometry.normalsNeedUpdate = false;
  			geometry.colorsNeedUpdate = false;
  			geometry.uvsNeedUpdate = false;
  			geometry.groupsNeedUpdate = false;

  			geometry = direct;

  		}

  		var attribute;

  		if ( geometry.verticesNeedUpdate === true ) {

  			attribute = this.attributes.position;

  			if ( attribute !== undefined ) {

  				attribute.copyVector3sArray( geometry.vertices );
  				attribute.needsUpdate = true;

  			}

  			geometry.verticesNeedUpdate = false;

  		}

  		if ( geometry.normalsNeedUpdate === true ) {

  			attribute = this.attributes.normal;

  			if ( attribute !== undefined ) {

  				attribute.copyVector3sArray( geometry.normals );
  				attribute.needsUpdate = true;

  			}

  			geometry.normalsNeedUpdate = false;

  		}

  		if ( geometry.colorsNeedUpdate === true ) {

  			attribute = this.attributes.color;

  			if ( attribute !== undefined ) {

  				attribute.copyColorsArray( geometry.colors );
  				attribute.needsUpdate = true;

  			}

  			geometry.colorsNeedUpdate = false;

  		}

  		if ( geometry.uvsNeedUpdate ) {

  			attribute = this.attributes.uv;

  			if ( attribute !== undefined ) {

  				attribute.copyVector2sArray( geometry.uvs );
  				attribute.needsUpdate = true;

  			}

  			geometry.uvsNeedUpdate = false;

  		}

  		if ( geometry.lineDistancesNeedUpdate ) {

  			attribute = this.attributes.lineDistance;

  			if ( attribute !== undefined ) {

  				attribute.copyArray( geometry.lineDistances );
  				attribute.needsUpdate = true;

  			}

  			geometry.lineDistancesNeedUpdate = false;

  		}

  		if ( geometry.groupsNeedUpdate ) {

  			geometry.computeGroups( object.geometry );
  			this.groups = geometry.groups;

  			geometry.groupsNeedUpdate = false;

  		}

  		return this;

  	},

  	fromGeometry: function ( geometry ) {

  		geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

  		return this.fromDirectGeometry( geometry.__directGeometry );

  	},

  	fromDirectGeometry: function ( geometry ) {

  		var positions = new Float32Array( geometry.vertices.length * 3 );
  		this.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

  		if ( geometry.normals.length > 0 ) {

  			var normals = new Float32Array( geometry.normals.length * 3 );
  			this.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

  		}

  		if ( geometry.colors.length > 0 ) {

  			var colors = new Float32Array( geometry.colors.length * 3 );
  			this.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

  		}

  		if ( geometry.uvs.length > 0 ) {

  			var uvs = new Float32Array( geometry.uvs.length * 2 );
  			this.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

  		}

  		if ( geometry.uvs2.length > 0 ) {

  			var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
  			this.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

  		}

  		// groups

  		this.groups = geometry.groups;

  		// morphs

  		for ( var name in geometry.morphTargets ) {

  			var array = [];
  			var morphTargets = geometry.morphTargets[ name ];

  			for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

  				var morphTarget = morphTargets[ i ];

  				var attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );
  				attribute.name = morphTarget.name;

  				array.push( attribute.copyVector3sArray( morphTarget.data ) );

  			}

  			this.morphAttributes[ name ] = array;

  		}

  		// skinning

  		if ( geometry.skinIndices.length > 0 ) {

  			var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
  			this.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

  		}

  		if ( geometry.skinWeights.length > 0 ) {

  			var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
  			this.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

  		}

  		//

  		if ( geometry.boundingSphere !== null ) {

  			this.boundingSphere = geometry.boundingSphere.clone();

  		}

  		if ( geometry.boundingBox !== null ) {

  			this.boundingBox = geometry.boundingBox.clone();

  		}

  		return this;

  	},

  	computeBoundingBox: function () {

  		if ( this.boundingBox === null ) {

  			this.boundingBox = new Box3();

  		}

  		var position = this.attributes.position;
  		var morphAttributesPosition = this.morphAttributes.position;

  		if ( position !== undefined ) {

  			this.boundingBox.setFromBufferAttribute( position );

  			// process morph attributes if present

  			if ( morphAttributesPosition ) {

  				for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  					var morphAttribute = morphAttributesPosition[ i ];
  					_box$2.setFromBufferAttribute( morphAttribute );

  					if ( this.morphTargetsRelative ) {

  						_vector$4.addVectors( this.boundingBox.min, _box$2.min );
  						this.boundingBox.expandByPoint( _vector$4 );

  						_vector$4.addVectors( this.boundingBox.max, _box$2.max );
  						this.boundingBox.expandByPoint( _vector$4 );

  					} else {

  						this.boundingBox.expandByPoint( _box$2.min );
  						this.boundingBox.expandByPoint( _box$2.max );

  					}

  				}

  			}

  		} else {

  			this.boundingBox.makeEmpty();

  		}

  		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

  			console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

  		}

  	},

  	computeBoundingSphere: function () {

  		if ( this.boundingSphere === null ) {

  			this.boundingSphere = new Sphere();

  		}

  		var position = this.attributes.position;
  		var morphAttributesPosition = this.morphAttributes.position;

  		if ( position ) {

  			// first, find the center of the bounding sphere

  			var center = this.boundingSphere.center;

  			_box$2.setFromBufferAttribute( position );

  			// process morph attributes if present

  			if ( morphAttributesPosition ) {

  				for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  					var morphAttribute = morphAttributesPosition[ i ];
  					_boxMorphTargets.setFromBufferAttribute( morphAttribute );

  					if ( this.morphTargetsRelative ) {

  						_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );
  						_box$2.expandByPoint( _vector$4 );

  						_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );
  						_box$2.expandByPoint( _vector$4 );

  					} else {

  						_box$2.expandByPoint( _boxMorphTargets.min );
  						_box$2.expandByPoint( _boxMorphTargets.max );

  					}

  				}

  			}

  			_box$2.getCenter( center );

  			// second, try to find a boundingSphere with a radius smaller than the
  			// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

  			var maxRadiusSq = 0;

  			for ( var i = 0, il = position.count; i < il; i ++ ) {

  				_vector$4.fromBufferAttribute( position, i );

  				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );

  			}

  			// process morph attributes if present

  			if ( morphAttributesPosition ) {

  				for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

  					var morphAttribute = morphAttributesPosition[ i ];
  					var morphTargetsRelative = this.morphTargetsRelative;

  					for ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {

  						_vector$4.fromBufferAttribute( morphAttribute, j );

  						if ( morphTargetsRelative ) {

  							_offset.fromBufferAttribute( position, j );
  							_vector$4.add( _offset );

  						}

  						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );

  					}

  				}

  			}

  			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

  			if ( isNaN( this.boundingSphere.radius ) ) {

  				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

  			}

  		}

  	},

  	computeFaceNormals: function () {

  		// backwards compatibility

  	},

  	computeVertexNormals: function () {

  		var index = this.index;
  		var attributes = this.attributes;

  		if ( attributes.position ) {

  			var positions = attributes.position.array;

  			if ( attributes.normal === undefined ) {

  				this.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

  			} else {

  				// reset existing normals to zero

  				var array = attributes.normal.array;

  				for ( var i = 0, il = array.length; i < il; i ++ ) {

  					array[ i ] = 0;

  				}

  			}

  			var normals = attributes.normal.array;

  			var vA, vB, vC;
  			var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
  			var cb = new Vector3(), ab = new Vector3();

  			// indexed elements

  			if ( index ) {

  				var indices = index.array;

  				for ( var i = 0, il = index.count; i < il; i += 3 ) {

  					vA = indices[ i + 0 ] * 3;
  					vB = indices[ i + 1 ] * 3;
  					vC = indices[ i + 2 ] * 3;

  					pA.fromArray( positions, vA );
  					pB.fromArray( positions, vB );
  					pC.fromArray( positions, vC );

  					cb.subVectors( pC, pB );
  					ab.subVectors( pA, pB );
  					cb.cross( ab );

  					normals[ vA ] += cb.x;
  					normals[ vA + 1 ] += cb.y;
  					normals[ vA + 2 ] += cb.z;

  					normals[ vB ] += cb.x;
  					normals[ vB + 1 ] += cb.y;
  					normals[ vB + 2 ] += cb.z;

  					normals[ vC ] += cb.x;
  					normals[ vC + 1 ] += cb.y;
  					normals[ vC + 2 ] += cb.z;

  				}

  			} else {

  				// non-indexed elements (unconnected triangle soup)

  				for ( var i = 0, il = positions.length; i < il; i += 9 ) {

  					pA.fromArray( positions, i );
  					pB.fromArray( positions, i + 3 );
  					pC.fromArray( positions, i + 6 );

  					cb.subVectors( pC, pB );
  					ab.subVectors( pA, pB );
  					cb.cross( ab );

  					normals[ i ] = cb.x;
  					normals[ i + 1 ] = cb.y;
  					normals[ i + 2 ] = cb.z;

  					normals[ i + 3 ] = cb.x;
  					normals[ i + 4 ] = cb.y;
  					normals[ i + 5 ] = cb.z;

  					normals[ i + 6 ] = cb.x;
  					normals[ i + 7 ] = cb.y;
  					normals[ i + 8 ] = cb.z;

  				}

  			}

  			this.normalizeNormals();

  			attributes.normal.needsUpdate = true;

  		}

  	},

  	merge: function ( geometry, offset ) {

  		if ( ! ( geometry && geometry.isBufferGeometry ) ) {

  			console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
  			return;

  		}

  		if ( offset === undefined ) {

  			offset = 0;

  			console.warn(
  				'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
  				+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
  			);

  		}

  		var attributes = this.attributes;

  		for ( var key in attributes ) {

  			if ( geometry.attributes[ key ] === undefined ) continue;

  			var attribute1 = attributes[ key ];
  			var attributeArray1 = attribute1.array;

  			var attribute2 = geometry.attributes[ key ];
  			var attributeArray2 = attribute2.array;

  			var attributeOffset = attribute2.itemSize * offset;
  			var length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );

  			for ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {

  				attributeArray1[ j ] = attributeArray2[ i ];

  			}

  		}

  		return this;

  	},

  	normalizeNormals: function () {

  		var normals = this.attributes.normal;

  		for ( var i = 0, il = normals.count; i < il; i ++ ) {

  			_vector$4.x = normals.getX( i );
  			_vector$4.y = normals.getY( i );
  			_vector$4.z = normals.getZ( i );

  			_vector$4.normalize();

  			normals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );

  		}

  	},

  	toNonIndexed: function () {

  		function convertBufferAttribute( attribute, indices ) {

  			var array = attribute.array;
  			var itemSize = attribute.itemSize;

  			var array2 = new array.constructor( indices.length * itemSize );

  			var index = 0, index2 = 0;

  			for ( var i = 0, l = indices.length; i < l; i ++ ) {

  				index = indices[ i ] * itemSize;

  				for ( var j = 0; j < itemSize; j ++ ) {

  					array2[ index2 ++ ] = array[ index ++ ];

  				}

  			}

  			return new BufferAttribute( array2, itemSize );

  		}

  		//

  		if ( this.index === null ) {

  			console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
  			return this;

  		}

  		var geometry2 = new BufferGeometry();

  		var indices = this.index.array;
  		var attributes = this.attributes;

  		// attributes

  		for ( var name in attributes ) {

  			var attribute = attributes[ name ];

  			var newAttribute = convertBufferAttribute( attribute, indices );

  			geometry2.setAttribute( name, newAttribute );

  		}

  		// morph attributes

  		var morphAttributes = this.morphAttributes;

  		for ( name in morphAttributes ) {

  			var morphArray = [];
  			var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

  			for ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {

  				var attribute = morphAttribute[ i ];

  				var newAttribute = convertBufferAttribute( attribute, indices );

  				morphArray.push( newAttribute );

  			}

  			geometry2.morphAttributes[ name ] = morphArray;

  		}

  		geometry2.morphTargetsRelative = this.morphTargetsRelative;

  		// groups

  		var groups = this.groups;

  		for ( var i = 0, l = groups.length; i < l; i ++ ) {

  			var group = groups[ i ];
  			geometry2.addGroup( group.start, group.count, group.materialIndex );

  		}

  		return geometry2;

  	},

  	toJSON: function () {

  		var data = {
  			metadata: {
  				version: 4.5,
  				type: 'BufferGeometry',
  				generator: 'BufferGeometry.toJSON'
  			}
  		};

  		// standard BufferGeometry serialization

  		data.uuid = this.uuid;
  		data.type = this.type;
  		if ( this.name !== '' ) data.name = this.name;
  		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

  		if ( this.parameters !== undefined ) {

  			var parameters = this.parameters;

  			for ( var key in parameters ) {

  				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

  			}

  			return data;

  		}

  		data.data = { attributes: {} };

  		var index = this.index;

  		if ( index !== null ) {

  			data.data.index = {
  				type: index.array.constructor.name,
  				array: Array.prototype.slice.call( index.array )
  			};

  		}

  		var attributes = this.attributes;

  		for ( var key in attributes ) {

  			var attribute = attributes[ key ];

  			var attributeData = attribute.toJSON();

  			if ( attribute.name !== '' ) attributeData.name = attribute.name;

  			data.data.attributes[ key ] = attributeData;

  		}

  		var morphAttributes = {};
  		var hasMorphAttributes = false;

  		for ( var key in this.morphAttributes ) {

  			var attributeArray = this.morphAttributes[ key ];

  			var array = [];

  			for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {

  				var attribute = attributeArray[ i ];

  				var attributeData = attribute.toJSON();

  				if ( attribute.name !== '' ) attributeData.name = attribute.name;

  				array.push( attributeData );

  			}

  			if ( array.length > 0 ) {

  				morphAttributes[ key ] = array;

  				hasMorphAttributes = true;

  			}

  		}

  		if ( hasMorphAttributes ) {

  			data.data.morphAttributes = morphAttributes;
  			data.data.morphTargetsRelative = this.morphTargetsRelative;

  		}

  		var groups = this.groups;

  		if ( groups.length > 0 ) {

  			data.data.groups = JSON.parse( JSON.stringify( groups ) );

  		}

  		var boundingSphere = this.boundingSphere;

  		if ( boundingSphere !== null ) {

  			data.data.boundingSphere = {
  				center: boundingSphere.center.toArray(),
  				radius: boundingSphere.radius
  			};

  		}

  		return data;

  	},

  	clone: function () {

  		/*
  		 // Handle primitives

  		 var parameters = this.parameters;

  		 if ( parameters !== undefined ) {

  		 var values = [];

  		 for ( var key in parameters ) {

  		 values.push( parameters[ key ] );

  		 }

  		 var geometry = Object.create( this.constructor.prototype );
  		 this.constructor.apply( geometry, values );
  		 return geometry;

  		 }

  		 return new this.constructor().copy( this );
  		 */

  		return new BufferGeometry().copy( this );

  	},

  	copy: function ( source ) {

  		var name, i, l;

  		// reset

  		this.index = null;
  		this.attributes = {};
  		this.morphAttributes = {};
  		this.groups = [];
  		this.boundingBox = null;
  		this.boundingSphere = null;

  		// name

  		this.name = source.name;

  		// index

  		var index = source.index;

  		if ( index !== null ) {

  			this.setIndex( index.clone() );

  		}

  		// attributes

  		var attributes = source.attributes;

  		for ( name in attributes ) {

  			var attribute = attributes[ name ];
  			this.setAttribute( name, attribute.clone() );

  		}

  		// morph attributes

  		var morphAttributes = source.morphAttributes;

  		for ( name in morphAttributes ) {

  			var array = [];
  			var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

  			for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {

  				array.push( morphAttribute[ i ].clone() );

  			}

  			this.morphAttributes[ name ] = array;

  		}

  		this.morphTargetsRelative = source.morphTargetsRelative;

  		// groups

  		var groups = source.groups;

  		for ( i = 0, l = groups.length; i < l; i ++ ) {

  			var group = groups[ i ];
  			this.addGroup( group.start, group.count, group.materialIndex );

  		}

  		// bounding box

  		var boundingBox = source.boundingBox;

  		if ( boundingBox !== null ) {

  			this.boundingBox = boundingBox.clone();

  		}

  		// bounding sphere

  		var boundingSphere = source.boundingSphere;

  		if ( boundingSphere !== null ) {

  			this.boundingSphere = boundingSphere.clone();

  		}

  		// draw range

  		this.drawRange.start = source.drawRange.start;
  		this.drawRange.count = source.drawRange.count;

  		// user data

  		this.userData = source.userData;

  		return this;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author mikael emtinger / http://gomo.se/
   * @author jonobr1 / http://jonobr1.com/
   */

  var _inverseMatrix = new Matrix4();
  var _ray = new Ray();
  var _sphere = new Sphere();

  var _vA = new Vector3();
  var _vB = new Vector3();
  var _vC = new Vector3();

  var _tempA = new Vector3();
  var _tempB = new Vector3();
  var _tempC = new Vector3();

  var _morphA = new Vector3();
  var _morphB = new Vector3();
  var _morphC = new Vector3();

  var _uvA = new Vector2();
  var _uvB = new Vector2();
  var _uvC = new Vector2();

  var _intersectionPoint = new Vector3();
  var _intersectionPointWorld = new Vector3();

  function Mesh( geometry, material ) {

  	Object3D.call( this );

  	this.type = 'Mesh';

  	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
  	this.material = material !== undefined ? material : new MeshBasicMaterial();

  	this.updateMorphTargets();

  }

  Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Mesh,

  	isMesh: true,

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source );

  		if ( source.morphTargetInfluences !== undefined ) {

  			this.morphTargetInfluences = source.morphTargetInfluences.slice();

  		}

  		if ( source.morphTargetDictionary !== undefined ) {

  			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

  		}

  		return this;

  	},

  	updateMorphTargets: function () {

  		var geometry = this.geometry;
  		var m, ml, name;

  		if ( geometry.isBufferGeometry ) {

  			var morphAttributes = geometry.morphAttributes;
  			var keys = Object.keys( morphAttributes );

  			if ( keys.length > 0 ) {

  				var morphAttribute = morphAttributes[ keys[ 0 ] ];

  				if ( morphAttribute !== undefined ) {

  					this.morphTargetInfluences = [];
  					this.morphTargetDictionary = {};

  					for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

  						name = morphAttribute[ m ].name || String( m );

  						this.morphTargetInfluences.push( 0 );
  						this.morphTargetDictionary[ name ] = m;

  					}

  				}

  			}

  		} else {

  			var morphTargets = geometry.morphTargets;

  			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

  				console.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

  			}

  		}

  	},

  	raycast: function ( raycaster, intersects ) {

  		var geometry = this.geometry;
  		var material = this.material;
  		var matrixWorld = this.matrixWorld;

  		if ( material === undefined ) return;

  		// Checking boundingSphere distance to ray

  		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

  		_sphere.copy( geometry.boundingSphere );
  		_sphere.applyMatrix4( matrixWorld );

  		if ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;

  		//

  		_inverseMatrix.getInverse( matrixWorld );
  		_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );

  		// Check boundingBox before continuing

  		if ( geometry.boundingBox !== null ) {

  			if ( _ray.intersectsBox( geometry.boundingBox ) === false ) return;

  		}

  		var intersection;

  		if ( geometry.isBufferGeometry ) {

  			var a, b, c;
  			var index = geometry.index;
  			var position = geometry.attributes.position;
  			var morphPosition = geometry.morphAttributes.position;
  			var morphTargetsRelative = geometry.morphTargetsRelative;
  			var uv = geometry.attributes.uv;
  			var uv2 = geometry.attributes.uv2;
  			var groups = geometry.groups;
  			var drawRange = geometry.drawRange;
  			var i, j, il, jl;
  			var group, groupMaterial;
  			var start, end;

  			if ( index !== null ) {

  				// indexed buffer geometry

  				if ( Array.isArray( material ) ) {

  					for ( i = 0, il = groups.length; i < il; i ++ ) {

  						group = groups[ i ];
  						groupMaterial = material[ group.materialIndex ];

  						start = Math.max( group.start, drawRange.start );
  						end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

  						for ( j = start, jl = end; j < jl; j += 3 ) {

  							a = index.getX( j );
  							b = index.getX( j + 1 );
  							c = index.getX( j + 2 );

  							intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

  							if ( intersection ) {

  								intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
  								intersection.face.materialIndex = group.materialIndex;
  								intersects.push( intersection );

  							}

  						}

  					}

  				} else {

  					start = Math.max( 0, drawRange.start );
  					end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

  					for ( i = start, il = end; i < il; i += 3 ) {

  						a = index.getX( i );
  						b = index.getX( i + 1 );
  						c = index.getX( i + 2 );

  						intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

  						if ( intersection ) {

  							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
  							intersects.push( intersection );

  						}

  					}

  				}

  			} else if ( position !== undefined ) {

  				// non-indexed buffer geometry

  				if ( Array.isArray( material ) ) {

  					for ( i = 0, il = groups.length; i < il; i ++ ) {

  						group = groups[ i ];
  						groupMaterial = material[ group.materialIndex ];

  						start = Math.max( group.start, drawRange.start );
  						end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

  						for ( j = start, jl = end; j < jl; j += 3 ) {

  							a = j;
  							b = j + 1;
  							c = j + 2;

  							intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

  							if ( intersection ) {

  								intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
  								intersection.face.materialIndex = group.materialIndex;
  								intersects.push( intersection );

  							}

  						}

  					}

  				} else {

  					start = Math.max( 0, drawRange.start );
  					end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

  					for ( i = start, il = end; i < il; i += 3 ) {

  						a = i;
  						b = i + 1;
  						c = i + 2;

  						intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

  						if ( intersection ) {

  							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
  							intersects.push( intersection );

  						}

  					}

  				}

  			}

  		} else if ( geometry.isGeometry ) {

  			var fvA, fvB, fvC;
  			var isMultiMaterial = Array.isArray( material );

  			var vertices = geometry.vertices;
  			var faces = geometry.faces;
  			var uvs;

  			var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
  			if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

  			for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

  				var face = faces[ f ];
  				var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;

  				if ( faceMaterial === undefined ) continue;

  				fvA = vertices[ face.a ];
  				fvB = vertices[ face.b ];
  				fvC = vertices[ face.c ];

  				intersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );

  				if ( intersection ) {

  					if ( uvs && uvs[ f ] ) {

  						var uvs_f = uvs[ f ];
  						_uvA.copy( uvs_f[ 0 ] );
  						_uvB.copy( uvs_f[ 1 ] );
  						_uvC.copy( uvs_f[ 2 ] );

  						intersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );

  					}

  					intersection.face = face;
  					intersection.faceIndex = f;
  					intersects.push( intersection );

  				}

  			}

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.geometry, this.material ).copy( this );

  	}

  } );

  function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

  	var intersect;

  	if ( material.side === BackSide ) {

  		intersect = ray.intersectTriangle( pC, pB, pA, true, point );

  	} else {

  		intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

  	}

  	if ( intersect === null ) return null;

  	_intersectionPointWorld.copy( point );
  	_intersectionPointWorld.applyMatrix4( object.matrixWorld );

  	var distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );

  	if ( distance < raycaster.near || distance > raycaster.far ) return null;

  	return {
  		distance: distance,
  		point: _intersectionPointWorld.clone(),
  		object: object
  	};

  }

  function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {

  	_vA.fromBufferAttribute( position, a );
  	_vB.fromBufferAttribute( position, b );
  	_vC.fromBufferAttribute( position, c );

  	var morphInfluences = object.morphTargetInfluences;

  	if ( material.morphTargets && morphPosition && morphInfluences ) {

  		_morphA.set( 0, 0, 0 );
  		_morphB.set( 0, 0, 0 );
  		_morphC.set( 0, 0, 0 );

  		for ( var i = 0, il = morphPosition.length; i < il; i ++ ) {

  			var influence = morphInfluences[ i ];
  			var morphAttribute = morphPosition[ i ];

  			if ( influence === 0 ) continue;

  			_tempA.fromBufferAttribute( morphAttribute, a );
  			_tempB.fromBufferAttribute( morphAttribute, b );
  			_tempC.fromBufferAttribute( morphAttribute, c );

  			if ( morphTargetsRelative ) {

  				_morphA.addScaledVector( _tempA, influence );
  				_morphB.addScaledVector( _tempB, influence );
  				_morphC.addScaledVector( _tempC, influence );

  			} else {

  				_morphA.addScaledVector( _tempA.sub( _vA ), influence );
  				_morphB.addScaledVector( _tempB.sub( _vB ), influence );
  				_morphC.addScaledVector( _tempC.sub( _vC ), influence );

  			}

  		}

  		_vA.add( _morphA );
  		_vB.add( _morphB );
  		_vC.add( _morphC );

  	}

  	var intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );

  	if ( intersection ) {

  		if ( uv ) {

  			_uvA.fromBufferAttribute( uv, a );
  			_uvB.fromBufferAttribute( uv, b );
  			_uvC.fromBufferAttribute( uv, c );

  			intersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );

  		}

  		if ( uv2 ) {

  			_uvA.fromBufferAttribute( uv2, a );
  			_uvB.fromBufferAttribute( uv2, b );
  			_uvC.fromBufferAttribute( uv2, c );

  			intersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );

  		}

  		var face = new Face3( a, b, c );
  		Triangle.getNormal( _vA, _vB, _vC, face.normal );

  		intersection.face = face;

  	}

  	return intersection;

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author kile / http://kile.stravaganza.org/
   * @author alteredq / http://alteredqualia.com/
   * @author mikael emtinger / http://gomo.se/
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * @author bhouston / http://clara.io
   */

  var _geometryId = 0; // Geometry uses even numbers as Id
  var _m1$3 = new Matrix4();
  var _obj$1 = new Object3D();
  var _offset$1 = new Vector3();

  function Geometry() {

  	Object.defineProperty( this, 'id', { value: _geometryId += 2 } );

  	this.uuid = MathUtils.generateUUID();

  	this.name = '';
  	this.type = 'Geometry';

  	this.vertices = [];
  	this.colors = [];
  	this.faces = [];
  	this.faceVertexUvs = [[]];

  	this.morphTargets = [];
  	this.morphNormals = [];

  	this.skinWeights = [];
  	this.skinIndices = [];

  	this.lineDistances = [];

  	this.boundingBox = null;
  	this.boundingSphere = null;

  	// update flags

  	this.elementsNeedUpdate = false;
  	this.verticesNeedUpdate = false;
  	this.uvsNeedUpdate = false;
  	this.normalsNeedUpdate = false;
  	this.colorsNeedUpdate = false;
  	this.lineDistancesNeedUpdate = false;
  	this.groupsNeedUpdate = false;

  }

  Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: Geometry,

  	isGeometry: true,

  	applyMatrix4: function ( matrix ) {

  		var normalMatrix = new Matrix3().getNormalMatrix( matrix );

  		for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

  			var vertex = this.vertices[ i ];
  			vertex.applyMatrix4( matrix );

  		}

  		for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

  			var face = this.faces[ i ];
  			face.normal.applyMatrix3( normalMatrix ).normalize();

  			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

  				face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

  			}

  		}

  		if ( this.boundingBox !== null ) {

  			this.computeBoundingBox();

  		}

  		if ( this.boundingSphere !== null ) {

  			this.computeBoundingSphere();

  		}

  		this.verticesNeedUpdate = true;
  		this.normalsNeedUpdate = true;

  		return this;

  	},

  	rotateX: function ( angle ) {

  		// rotate geometry around world x-axis

  		_m1$3.makeRotationX( angle );

  		this.applyMatrix4( _m1$3 );

  		return this;

  	},

  	rotateY: function ( angle ) {

  		// rotate geometry around world y-axis

  		_m1$3.makeRotationY( angle );

  		this.applyMatrix4( _m1$3 );

  		return this;

  	},

  	rotateZ: function ( angle ) {

  		// rotate geometry around world z-axis

  		_m1$3.makeRotationZ( angle );

  		this.applyMatrix4( _m1$3 );

  		return this;

  	},

  	translate: function ( x, y, z ) {

  		// translate geometry

  		_m1$3.makeTranslation( x, y, z );

  		this.applyMatrix4( _m1$3 );

  		return this;

  	},

  	scale: function ( x, y, z ) {

  		// scale geometry

  		_m1$3.makeScale( x, y, z );

  		this.applyMatrix4( _m1$3 );

  		return this;

  	},

  	lookAt: function ( vector ) {

  		_obj$1.lookAt( vector );

  		_obj$1.updateMatrix();

  		this.applyMatrix4( _obj$1.matrix );

  		return this;

  	},

  	fromBufferGeometry: function ( geometry ) {

  		var scope = this;

  		var indices = geometry.index !== null ? geometry.index.array : undefined;
  		var attributes = geometry.attributes;

  		if ( attributes.position === undefined ) {

  			console.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );
  			return this;

  		}

  		var positions = attributes.position.array;
  		var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
  		var colors = attributes.color !== undefined ? attributes.color.array : undefined;
  		var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
  		var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

  		if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

  		for ( var i = 0; i < positions.length; i += 3 ) {

  			scope.vertices.push( new Vector3().fromArray( positions, i ) );

  			if ( colors !== undefined ) {

  				scope.colors.push( new Color().fromArray( colors, i ) );

  			}

  		}

  		function addFace( a, b, c, materialIndex ) {

  			var vertexColors = ( colors === undefined ) ? [] : [
  				scope.colors[ a ].clone(),
  				scope.colors[ b ].clone(),
  				scope.colors[ c ].clone() ];

  			var vertexNormals = ( normals === undefined ) ? [] : [
  				new Vector3().fromArray( normals, a * 3 ),
  				new Vector3().fromArray( normals, b * 3 ),
  				new Vector3().fromArray( normals, c * 3 )
  			];

  			var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

  			scope.faces.push( face );

  			if ( uvs !== undefined ) {

  				scope.faceVertexUvs[ 0 ].push( [
  					new Vector2().fromArray( uvs, a * 2 ),
  					new Vector2().fromArray( uvs, b * 2 ),
  					new Vector2().fromArray( uvs, c * 2 )
  				] );

  			}

  			if ( uvs2 !== undefined ) {

  				scope.faceVertexUvs[ 1 ].push( [
  					new Vector2().fromArray( uvs2, a * 2 ),
  					new Vector2().fromArray( uvs2, b * 2 ),
  					new Vector2().fromArray( uvs2, c * 2 )
  				] );

  			}

  		}

  		var groups = geometry.groups;

  		if ( groups.length > 0 ) {

  			for ( var i = 0; i < groups.length; i ++ ) {

  				var group = groups[ i ];

  				var start = group.start;
  				var count = group.count;

  				for ( var j = start, jl = start + count; j < jl; j += 3 ) {

  					if ( indices !== undefined ) {

  						addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );

  					} else {

  						addFace( j, j + 1, j + 2, group.materialIndex );

  					}

  				}

  			}

  		} else {

  			if ( indices !== undefined ) {

  				for ( var i = 0; i < indices.length; i += 3 ) {

  					addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

  				}

  			} else {

  				for ( var i = 0; i < positions.length / 3; i += 3 ) {

  					addFace( i, i + 1, i + 2 );

  				}

  			}

  		}

  		this.computeFaceNormals();

  		if ( geometry.boundingBox !== null ) {

  			this.boundingBox = geometry.boundingBox.clone();

  		}

  		if ( geometry.boundingSphere !== null ) {

  			this.boundingSphere = geometry.boundingSphere.clone();

  		}

  		return this;

  	},

  	center: function () {

  		this.computeBoundingBox();

  		this.boundingBox.getCenter( _offset$1 ).negate();

  		this.translate( _offset$1.x, _offset$1.y, _offset$1.z );

  		return this;

  	},

  	normalize: function () {

  		this.computeBoundingSphere();

  		var center = this.boundingSphere.center;
  		var radius = this.boundingSphere.radius;

  		var s = radius === 0 ? 1 : 1.0 / radius;

  		var matrix = new Matrix4();
  		matrix.set(
  			s, 0, 0, - s * center.x,
  			0, s, 0, - s * center.y,
  			0, 0, s, - s * center.z,
  			0, 0, 0, 1
  		);

  		this.applyMatrix4( matrix );

  		return this;

  	},

  	computeFaceNormals: function () {

  		var cb = new Vector3(), ab = new Vector3();

  		for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

  			var face = this.faces[ f ];

  			var vA = this.vertices[ face.a ];
  			var vB = this.vertices[ face.b ];
  			var vC = this.vertices[ face.c ];

  			cb.subVectors( vC, vB );
  			ab.subVectors( vA, vB );
  			cb.cross( ab );

  			cb.normalize();

  			face.normal.copy( cb );

  		}

  	},

  	computeVertexNormals: function ( areaWeighted ) {

  		if ( areaWeighted === undefined ) areaWeighted = true;

  		var v, vl, f, fl, face, vertices;

  		vertices = new Array( this.vertices.length );

  		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

  			vertices[ v ] = new Vector3();

  		}

  		if ( areaWeighted ) {

  			// vertex normals weighted by triangle areas
  			// http://www.iquilezles.org/www/articles/normals/normals.htm

  			var vA, vB, vC;
  			var cb = new Vector3(), ab = new Vector3();

  			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  				face = this.faces[ f ];

  				vA = this.vertices[ face.a ];
  				vB = this.vertices[ face.b ];
  				vC = this.vertices[ face.c ];

  				cb.subVectors( vC, vB );
  				ab.subVectors( vA, vB );
  				cb.cross( ab );

  				vertices[ face.a ].add( cb );
  				vertices[ face.b ].add( cb );
  				vertices[ face.c ].add( cb );

  			}

  		} else {

  			this.computeFaceNormals();

  			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  				face = this.faces[ f ];

  				vertices[ face.a ].add( face.normal );
  				vertices[ face.b ].add( face.normal );
  				vertices[ face.c ].add( face.normal );

  			}

  		}

  		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

  			vertices[ v ].normalize();

  		}

  		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  			face = this.faces[ f ];

  			var vertexNormals = face.vertexNormals;

  			if ( vertexNormals.length === 3 ) {

  				vertexNormals[ 0 ].copy( vertices[ face.a ] );
  				vertexNormals[ 1 ].copy( vertices[ face.b ] );
  				vertexNormals[ 2 ].copy( vertices[ face.c ] );

  			} else {

  				vertexNormals[ 0 ] = vertices[ face.a ].clone();
  				vertexNormals[ 1 ] = vertices[ face.b ].clone();
  				vertexNormals[ 2 ] = vertices[ face.c ].clone();

  			}

  		}

  		if ( this.faces.length > 0 ) {

  			this.normalsNeedUpdate = true;

  		}

  	},

  	computeFlatVertexNormals: function () {

  		var f, fl, face;

  		this.computeFaceNormals();

  		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  			face = this.faces[ f ];

  			var vertexNormals = face.vertexNormals;

  			if ( vertexNormals.length === 3 ) {

  				vertexNormals[ 0 ].copy( face.normal );
  				vertexNormals[ 1 ].copy( face.normal );
  				vertexNormals[ 2 ].copy( face.normal );

  			} else {

  				vertexNormals[ 0 ] = face.normal.clone();
  				vertexNormals[ 1 ] = face.normal.clone();
  				vertexNormals[ 2 ] = face.normal.clone();

  			}

  		}

  		if ( this.faces.length > 0 ) {

  			this.normalsNeedUpdate = true;

  		}

  	},

  	computeMorphNormals: function () {

  		var i, il, f, fl, face;

  		// save original normals
  		// - create temp variables on first access
  		//   otherwise just copy (for faster repeated calls)

  		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  			face = this.faces[ f ];

  			if ( ! face.__originalFaceNormal ) {

  				face.__originalFaceNormal = face.normal.clone();

  			} else {

  				face.__originalFaceNormal.copy( face.normal );

  			}

  			if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

  			for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

  				if ( ! face.__originalVertexNormals[ i ] ) {

  					face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

  				} else {

  					face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

  				}

  			}

  		}

  		// use temp geometry to compute face and vertex normals for each morph

  		var tmpGeo = new Geometry();
  		tmpGeo.faces = this.faces;

  		for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

  			// create on first access

  			if ( ! this.morphNormals[ i ] ) {

  				this.morphNormals[ i ] = {};
  				this.morphNormals[ i ].faceNormals = [];
  				this.morphNormals[ i ].vertexNormals = [];

  				var dstNormalsFace = this.morphNormals[ i ].faceNormals;
  				var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

  				var faceNormal, vertexNormals;

  				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  					faceNormal = new Vector3();
  					vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

  					dstNormalsFace.push( faceNormal );
  					dstNormalsVertex.push( vertexNormals );

  				}

  			}

  			var morphNormals = this.morphNormals[ i ];

  			// set vertices to morph target

  			tmpGeo.vertices = this.morphTargets[ i ].vertices;

  			// compute morph normals

  			tmpGeo.computeFaceNormals();
  			tmpGeo.computeVertexNormals();

  			// store morph normals

  			var faceNormal, vertexNormals;

  			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  				face = this.faces[ f ];

  				faceNormal = morphNormals.faceNormals[ f ];
  				vertexNormals = morphNormals.vertexNormals[ f ];

  				faceNormal.copy( face.normal );

  				vertexNormals.a.copy( face.vertexNormals[ 0 ] );
  				vertexNormals.b.copy( face.vertexNormals[ 1 ] );
  				vertexNormals.c.copy( face.vertexNormals[ 2 ] );

  			}

  		}

  		// restore original normals

  		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

  			face = this.faces[ f ];

  			face.normal = face.__originalFaceNormal;
  			face.vertexNormals = face.__originalVertexNormals;

  		}

  	},

  	computeBoundingBox: function () {

  		if ( this.boundingBox === null ) {

  			this.boundingBox = new Box3();

  		}

  		this.boundingBox.setFromPoints( this.vertices );

  	},

  	computeBoundingSphere: function () {

  		if ( this.boundingSphere === null ) {

  			this.boundingSphere = new Sphere();

  		}

  		this.boundingSphere.setFromPoints( this.vertices );

  	},

  	merge: function ( geometry, matrix, materialIndexOffset ) {

  		if ( ! ( geometry && geometry.isGeometry ) ) {

  			console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
  			return;

  		}

  		var normalMatrix,
  			vertexOffset = this.vertices.length,
  			vertices1 = this.vertices,
  			vertices2 = geometry.vertices,
  			faces1 = this.faces,
  			faces2 = geometry.faces,
  			colors1 = this.colors,
  			colors2 = geometry.colors;

  		if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

  		if ( matrix !== undefined ) {

  			normalMatrix = new Matrix3().getNormalMatrix( matrix );

  		}

  		// vertices

  		for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

  			var vertex = vertices2[ i ];

  			var vertexCopy = vertex.clone();

  			if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

  			vertices1.push( vertexCopy );

  		}

  		// colors

  		for ( var i = 0, il = colors2.length; i < il; i ++ ) {

  			colors1.push( colors2[ i ].clone() );

  		}

  		// faces

  		for ( i = 0, il = faces2.length; i < il; i ++ ) {

  			var face = faces2[ i ], faceCopy, normal, color,
  				faceVertexNormals = face.vertexNormals,
  				faceVertexColors = face.vertexColors;

  			faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
  			faceCopy.normal.copy( face.normal );

  			if ( normalMatrix !== undefined ) {

  				faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

  			}

  			for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

  				normal = faceVertexNormals[ j ].clone();

  				if ( normalMatrix !== undefined ) {

  					normal.applyMatrix3( normalMatrix ).normalize();

  				}

  				faceCopy.vertexNormals.push( normal );

  			}

  			faceCopy.color.copy( face.color );

  			for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

  				color = faceVertexColors[ j ];
  				faceCopy.vertexColors.push( color.clone() );

  			}

  			faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

  			faces1.push( faceCopy );

  		}

  		// uvs

  		for ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {

  			var faceVertexUvs2 = geometry.faceVertexUvs[ i ];

  			if ( this.faceVertexUvs[ i ] === undefined ) this.faceVertexUvs[ i ] = [];

  			for ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {

  				var uvs2 = faceVertexUvs2[ j ], uvsCopy = [];

  				for ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {

  					uvsCopy.push( uvs2[ k ].clone() );

  				}

  				this.faceVertexUvs[ i ].push( uvsCopy );

  			}

  		}

  	},

  	mergeMesh: function ( mesh ) {

  		if ( ! ( mesh && mesh.isMesh ) ) {

  			console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
  			return;

  		}

  		if ( mesh.matrixAutoUpdate ) mesh.updateMatrix();

  		this.merge( mesh.geometry, mesh.matrix );

  	},

  	/*
  	 * Checks for duplicate vertices with hashmap.
  	 * Duplicated vertices are removed
  	 * and faces' vertices are updated.
  	 */

  	mergeVertices: function () {

  		var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
  		var unique = [], changes = [];

  		var v, key;
  		var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
  		var precision = Math.pow( 10, precisionPoints );
  		var i, il, face;
  		var indices, j, jl;

  		for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

  			v = this.vertices[ i ];
  			key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

  			if ( verticesMap[ key ] === undefined ) {

  				verticesMap[ key ] = i;
  				unique.push( this.vertices[ i ] );
  				changes[ i ] = unique.length - 1;

  			} else {

  				//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
  				changes[ i ] = changes[ verticesMap[ key ] ];

  			}

  		}


  		// if faces are completely degenerate after merging vertices, we
  		// have to remove them from the geometry.
  		var faceIndicesToRemove = [];

  		for ( i = 0, il = this.faces.length; i < il; i ++ ) {

  			face = this.faces[ i ];

  			face.a = changes[ face.a ];
  			face.b = changes[ face.b ];
  			face.c = changes[ face.c ];

  			indices = [ face.a, face.b, face.c ];

  			// if any duplicate vertices are found in a Face3
  			// we have to remove the face as nothing can be saved
  			for ( var n = 0; n < 3; n ++ ) {

  				if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

  					faceIndicesToRemove.push( i );
  					break;

  				}

  			}

  		}

  		for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

  			var idx = faceIndicesToRemove[ i ];

  			this.faces.splice( idx, 1 );

  			for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

  				this.faceVertexUvs[ j ].splice( idx, 1 );

  			}

  		}

  		// Use unique set of vertices

  		var diff = this.vertices.length - unique.length;
  		this.vertices = unique;
  		return diff;

  	},

  	setFromPoints: function ( points ) {

  		this.vertices = [];

  		for ( var i = 0, l = points.length; i < l; i ++ ) {

  			var point = points[ i ];
  			this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

  		}

  		return this;

  	},

  	sortFacesByMaterialIndex: function () {

  		var faces = this.faces;
  		var length = faces.length;

  		// tag faces

  		for ( var i = 0; i < length; i ++ ) {

  			faces[ i ]._id = i;

  		}

  		// sort faces

  		function materialIndexSort( a, b ) {

  			return a.materialIndex - b.materialIndex;

  		}

  		faces.sort( materialIndexSort );

  		// sort uvs

  		var uvs1 = this.faceVertexUvs[ 0 ];
  		var uvs2 = this.faceVertexUvs[ 1 ];

  		var newUvs1, newUvs2;

  		if ( uvs1 && uvs1.length === length ) newUvs1 = [];
  		if ( uvs2 && uvs2.length === length ) newUvs2 = [];

  		for ( var i = 0; i < length; i ++ ) {

  			var id = faces[ i ]._id;

  			if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
  			if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

  		}

  		if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
  		if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

  	},

  	toJSON: function () {

  		var data = {
  			metadata: {
  				version: 4.5,
  				type: 'Geometry',
  				generator: 'Geometry.toJSON'
  			}
  		};

  		// standard Geometry serialization

  		data.uuid = this.uuid;
  		data.type = this.type;
  		if ( this.name !== '' ) data.name = this.name;

  		if ( this.parameters !== undefined ) {

  			var parameters = this.parameters;

  			for ( var key in parameters ) {

  				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

  			}

  			return data;

  		}

  		var vertices = [];

  		for ( var i = 0; i < this.vertices.length; i ++ ) {

  			var vertex = this.vertices[ i ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  		}

  		var faces = [];
  		var normals = [];
  		var normalsHash = {};
  		var colors = [];
  		var colorsHash = {};
  		var uvs = [];
  		var uvsHash = {};

  		for ( var i = 0; i < this.faces.length; i ++ ) {

  			var face = this.faces[ i ];

  			var hasMaterial = true;
  			var hasFaceUv = false; // deprecated
  			var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
  			var hasFaceNormal = face.normal.length() > 0;
  			var hasFaceVertexNormal = face.vertexNormals.length > 0;
  			var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
  			var hasFaceVertexColor = face.vertexColors.length > 0;

  			var faceType = 0;

  			faceType = setBit( faceType, 0, 0 ); // isQuad
  			faceType = setBit( faceType, 1, hasMaterial );
  			faceType = setBit( faceType, 2, hasFaceUv );
  			faceType = setBit( faceType, 3, hasFaceVertexUv );
  			faceType = setBit( faceType, 4, hasFaceNormal );
  			faceType = setBit( faceType, 5, hasFaceVertexNormal );
  			faceType = setBit( faceType, 6, hasFaceColor );
  			faceType = setBit( faceType, 7, hasFaceVertexColor );

  			faces.push( faceType );
  			faces.push( face.a, face.b, face.c );
  			faces.push( face.materialIndex );

  			if ( hasFaceVertexUv ) {

  				var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

  				faces.push(
  					getUvIndex( faceVertexUvs[ 0 ] ),
  					getUvIndex( faceVertexUvs[ 1 ] ),
  					getUvIndex( faceVertexUvs[ 2 ] )
  				);

  			}

  			if ( hasFaceNormal ) {

  				faces.push( getNormalIndex( face.normal ) );

  			}

  			if ( hasFaceVertexNormal ) {

  				var vertexNormals = face.vertexNormals;

  				faces.push(
  					getNormalIndex( vertexNormals[ 0 ] ),
  					getNormalIndex( vertexNormals[ 1 ] ),
  					getNormalIndex( vertexNormals[ 2 ] )
  				);

  			}

  			if ( hasFaceColor ) {

  				faces.push( getColorIndex( face.color ) );

  			}

  			if ( hasFaceVertexColor ) {

  				var vertexColors = face.vertexColors;

  				faces.push(
  					getColorIndex( vertexColors[ 0 ] ),
  					getColorIndex( vertexColors[ 1 ] ),
  					getColorIndex( vertexColors[ 2 ] )
  				);

  			}

  		}

  		function setBit( value, position, enabled ) {

  			return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

  		}

  		function getNormalIndex( normal ) {

  			var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

  			if ( normalsHash[ hash ] !== undefined ) {

  				return normalsHash[ hash ];

  			}

  			normalsHash[ hash ] = normals.length / 3;
  			normals.push( normal.x, normal.y, normal.z );

  			return normalsHash[ hash ];

  		}

  		function getColorIndex( color ) {

  			var hash = color.r.toString() + color.g.toString() + color.b.toString();

  			if ( colorsHash[ hash ] !== undefined ) {

  				return colorsHash[ hash ];

  			}

  			colorsHash[ hash ] = colors.length;
  			colors.push( color.getHex() );

  			return colorsHash[ hash ];

  		}

  		function getUvIndex( uv ) {

  			var hash = uv.x.toString() + uv.y.toString();

  			if ( uvsHash[ hash ] !== undefined ) {

  				return uvsHash[ hash ];

  			}

  			uvsHash[ hash ] = uvs.length / 2;
  			uvs.push( uv.x, uv.y );

  			return uvsHash[ hash ];

  		}

  		data.data = {};

  		data.data.vertices = vertices;
  		data.data.normals = normals;
  		if ( colors.length > 0 ) data.data.colors = colors;
  		if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
  		data.data.faces = faces;

  		return data;

  	},

  	clone: function () {

  		/*
  		 // Handle primitives

  		 var parameters = this.parameters;

  		 if ( parameters !== undefined ) {

  		 var values = [];

  		 for ( var key in parameters ) {

  		 values.push( parameters[ key ] );

  		 }

  		 var geometry = Object.create( this.constructor.prototype );
  		 this.constructor.apply( geometry, values );
  		 return geometry;

  		 }

  		 return new this.constructor().copy( this );
  		 */

  		return new Geometry().copy( this );

  	},

  	copy: function ( source ) {

  		var i, il, j, jl, k, kl;

  		// reset

  		this.vertices = [];
  		this.colors = [];
  		this.faces = [];
  		this.faceVertexUvs = [[]];
  		this.morphTargets = [];
  		this.morphNormals = [];
  		this.skinWeights = [];
  		this.skinIndices = [];
  		this.lineDistances = [];
  		this.boundingBox = null;
  		this.boundingSphere = null;

  		// name

  		this.name = source.name;

  		// vertices

  		var vertices = source.vertices;

  		for ( i = 0, il = vertices.length; i < il; i ++ ) {

  			this.vertices.push( vertices[ i ].clone() );

  		}

  		// colors

  		var colors = source.colors;

  		for ( i = 0, il = colors.length; i < il; i ++ ) {

  			this.colors.push( colors[ i ].clone() );

  		}

  		// faces

  		var faces = source.faces;

  		for ( i = 0, il = faces.length; i < il; i ++ ) {

  			this.faces.push( faces[ i ].clone() );

  		}

  		// face vertex uvs

  		for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

  			var faceVertexUvs = source.faceVertexUvs[ i ];

  			if ( this.faceVertexUvs[ i ] === undefined ) {

  				this.faceVertexUvs[ i ] = [];

  			}

  			for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

  				var uvs = faceVertexUvs[ j ], uvsCopy = [];

  				for ( k = 0, kl = uvs.length; k < kl; k ++ ) {

  					var uv = uvs[ k ];

  					uvsCopy.push( uv.clone() );

  				}

  				this.faceVertexUvs[ i ].push( uvsCopy );

  			}

  		}

  		// morph targets

  		var morphTargets = source.morphTargets;

  		for ( i = 0, il = morphTargets.length; i < il; i ++ ) {

  			var morphTarget = {};
  			morphTarget.name = morphTargets[ i ].name;

  			// vertices

  			if ( morphTargets[ i ].vertices !== undefined ) {

  				morphTarget.vertices = [];

  				for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {

  					morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );

  				}

  			}

  			// normals

  			if ( morphTargets[ i ].normals !== undefined ) {

  				morphTarget.normals = [];

  				for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {

  					morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );

  				}

  			}

  			this.morphTargets.push( morphTarget );

  		}

  		// morph normals

  		var morphNormals = source.morphNormals;

  		for ( i = 0, il = morphNormals.length; i < il; i ++ ) {

  			var morphNormal = {};

  			// vertex normals

  			if ( morphNormals[ i ].vertexNormals !== undefined ) {

  				morphNormal.vertexNormals = [];

  				for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {

  					var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
  					var destVertexNormal = {};

  					destVertexNormal.a = srcVertexNormal.a.clone();
  					destVertexNormal.b = srcVertexNormal.b.clone();
  					destVertexNormal.c = srcVertexNormal.c.clone();

  					morphNormal.vertexNormals.push( destVertexNormal );

  				}

  			}

  			// face normals

  			if ( morphNormals[ i ].faceNormals !== undefined ) {

  				morphNormal.faceNormals = [];

  				for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {

  					morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );

  				}

  			}

  			this.morphNormals.push( morphNormal );

  		}

  		// skin weights

  		var skinWeights = source.skinWeights;

  		for ( i = 0, il = skinWeights.length; i < il; i ++ ) {

  			this.skinWeights.push( skinWeights[ i ].clone() );

  		}

  		// skin indices

  		var skinIndices = source.skinIndices;

  		for ( i = 0, il = skinIndices.length; i < il; i ++ ) {

  			this.skinIndices.push( skinIndices[ i ].clone() );

  		}

  		// line distances

  		var lineDistances = source.lineDistances;

  		for ( i = 0, il = lineDistances.length; i < il; i ++ ) {

  			this.lineDistances.push( lineDistances[ i ] );

  		}

  		// bounding box

  		var boundingBox = source.boundingBox;

  		if ( boundingBox !== null ) {

  			this.boundingBox = boundingBox.clone();

  		}

  		// bounding sphere

  		var boundingSphere = source.boundingSphere;

  		if ( boundingSphere !== null ) {

  			this.boundingSphere = boundingSphere.clone();

  		}

  		// update flags

  		this.elementsNeedUpdate = source.elementsNeedUpdate;
  		this.verticesNeedUpdate = source.verticesNeedUpdate;
  		this.uvsNeedUpdate = source.uvsNeedUpdate;
  		this.normalsNeedUpdate = source.normalsNeedUpdate;
  		this.colorsNeedUpdate = source.colorsNeedUpdate;
  		this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
  		this.groupsNeedUpdate = source.groupsNeedUpdate;

  		return this;

  	},

  	dispose: function () {

  		this.dispatchEvent( { type: 'dispose' } );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  // BoxGeometry

  class BoxGeometry extends Geometry {

  	constructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {

  		super();

  		this.type = 'BoxGeometry';

  		this.parameters = {
  			width: width,
  			height: height,
  			depth: depth,
  			widthSegments: widthSegments,
  			heightSegments: heightSegments,
  			depthSegments: depthSegments
  		};

  		this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
  		this.mergeVertices();

  	}

  }

  // BoxBufferGeometry

  class BoxBufferGeometry extends BufferGeometry {

  	constructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {

  		super();

  		this.type = 'BoxBufferGeometry';

  		this.parameters = {
  			width: width,
  			height: height,
  			depth: depth,
  			widthSegments: widthSegments,
  			heightSegments: heightSegments,
  			depthSegments: depthSegments
  		};

  		var scope = this;

  		width = width || 1;
  		height = height || 1;
  		depth = depth || 1;

  		// segments

  		widthSegments = Math.floor( widthSegments ) || 1;
  		heightSegments = Math.floor( heightSegments ) || 1;
  		depthSegments = Math.floor( depthSegments ) || 1;

  		// buffers

  		var indices = [];
  		var vertices = [];
  		var normals = [];
  		var uvs = [];

  		// helper variables

  		var numberOfVertices = 0;
  		var groupStart = 0;

  		// build each side of the box geometry

  		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
  		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
  		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
  		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
  		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
  		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

  		// build geometry

  		this.setIndex( indices );
  		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

  			var segmentWidth = width / gridX;
  			var segmentHeight = height / gridY;

  			var widthHalf = width / 2;
  			var heightHalf = height / 2;
  			var depthHalf = depth / 2;

  			var gridX1 = gridX + 1;
  			var gridY1 = gridY + 1;

  			var vertexCounter = 0;
  			var groupCount = 0;

  			var ix, iy;

  			var vector = new Vector3();

  			// generate vertices, normals and uvs

  			for ( iy = 0; iy < gridY1; iy ++ ) {

  				var y = iy * segmentHeight - heightHalf;

  				for ( ix = 0; ix < gridX1; ix ++ ) {

  					var x = ix * segmentWidth - widthHalf;

  					// set values to correct vector component

  					vector[ u ] = x * udir;
  					vector[ v ] = y * vdir;
  					vector[ w ] = depthHalf;

  					// now apply vector to vertex buffer

  					vertices.push( vector.x, vector.y, vector.z );

  					// set values to correct vector component

  					vector[ u ] = 0;
  					vector[ v ] = 0;
  					vector[ w ] = depth > 0 ? 1 : - 1;

  					// now apply vector to normal buffer

  					normals.push( vector.x, vector.y, vector.z );

  					// uvs

  					uvs.push( ix / gridX );
  					uvs.push( 1 - ( iy / gridY ) );

  					// counters

  					vertexCounter += 1;

  				}

  			}

  			// indices

  			// 1. you need three indices to draw a single face
  			// 2. a single segment consists of two faces
  			// 3. so we need to generate six (2*3) indices per segment

  			for ( iy = 0; iy < gridY; iy ++ ) {

  				for ( ix = 0; ix < gridX; ix ++ ) {

  					var a = numberOfVertices + ix + gridX1 * iy;
  					var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
  					var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
  					var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

  					// faces

  					indices.push( a, b, d );
  					indices.push( b, c, d );

  					// increase counter

  					groupCount += 6;

  				}

  			}

  			// add a group to the geometry. this will ensure multi material support

  			scope.addGroup( groupStart, groupCount, materialIndex );

  			// calculate new start value for groups

  			groupStart += groupCount;

  			// update total number of vertices

  			numberOfVertices += vertexCounter;

  		}

  	}

  }

  /**
   * Uniform Utilities
   */

  function cloneUniforms( src ) {

  	var dst = {};

  	for ( var u in src ) {

  		dst[ u ] = {};

  		for ( var p in src[ u ] ) {

  			var property = src[ u ][ p ];

  			if ( property && ( property.isColor ||
  				property.isMatrix3 || property.isMatrix4 ||
  				property.isVector2 || property.isVector3 || property.isVector4 ||
  				property.isTexture ) ) {

  				dst[ u ][ p ] = property.clone();

  			} else if ( Array.isArray( property ) ) {

  				dst[ u ][ p ] = property.slice();

  			} else {

  				dst[ u ][ p ] = property;

  			}

  		}

  	}

  	return dst;

  }

  function mergeUniforms( uniforms ) {

  	var merged = {};

  	for ( var u = 0; u < uniforms.length; u ++ ) {

  		var tmp = cloneUniforms( uniforms[ u ] );

  		for ( var p in tmp ) {

  			merged[ p ] = tmp[ p ];

  		}

  	}

  	return merged;

  }

  // Legacy

  var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };

  var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

  var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

  /**
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  defines: { "label" : "value" },
   *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
   *
   *  fragmentShader: <string>,
   *  vertexShader: <string>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  lights: <bool>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function ShaderMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'ShaderMaterial';

  	this.defines = {};
  	this.uniforms = {};

  	this.vertexShader = default_vertex;
  	this.fragmentShader = default_fragment;

  	this.linewidth = 1;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;

  	this.fog = false; // set to use scene fog
  	this.lights = false; // set to use scene lights
  	this.clipping = false; // set to use user-defined clipping planes

  	this.skinning = false; // set to use skinning attribute streams
  	this.morphTargets = false; // set to use morph targets
  	this.morphNormals = false; // set to use morph normals

  	this.extensions = {
  		derivatives: false, // set to use derivatives
  		fragDepth: false, // set to use fragment depth values
  		drawBuffers: false, // set to use draw buffers
  		shaderTextureLOD: false // set to use shader texture LOD
  	};

  	// When rendered geometry doesn't include these attributes but the material does,
  	// use these default values in WebGL. This avoids errors when buffer data is missing.
  	this.defaultAttributeValues = {
  		'color': [ 1, 1, 1 ],
  		'uv': [ 0, 0 ],
  		'uv2': [ 0, 0 ]
  	};

  	this.index0AttributeName = undefined;
  	this.uniformsNeedUpdate = false;

  	if ( parameters !== undefined ) {

  		if ( parameters.attributes !== undefined ) {

  			console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

  		}

  		this.setValues( parameters );

  	}

  }

  ShaderMaterial.prototype = Object.create( Material.prototype );
  ShaderMaterial.prototype.constructor = ShaderMaterial;

  ShaderMaterial.prototype.isShaderMaterial = true;

  ShaderMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.fragmentShader = source.fragmentShader;
  	this.vertexShader = source.vertexShader;

  	this.uniforms = cloneUniforms( source.uniforms );

  	this.defines = Object.assign( {}, source.defines );

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;

  	this.lights = source.lights;
  	this.clipping = source.clipping;

  	this.skinning = source.skinning;

  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	this.extensions = source.extensions;

  	return this;

  };

  ShaderMaterial.prototype.toJSON = function ( meta ) {

  	var data = Material.prototype.toJSON.call( this, meta );

  	data.uniforms = {};

  	for ( var name in this.uniforms ) {

  		var uniform = this.uniforms[ name ];
  		var value = uniform.value;

  		if ( value && value.isTexture ) {

  			data.uniforms[ name ] = {
  				type: 't',
  				value: value.toJSON( meta ).uuid
  			};

  		} else if ( value && value.isColor ) {

  			data.uniforms[ name ] = {
  				type: 'c',
  				value: value.getHex()
  			};

  		} else if ( value && value.isVector2 ) {

  			data.uniforms[ name ] = {
  				type: 'v2',
  				value: value.toArray()
  			};

  		} else if ( value && value.isVector3 ) {

  			data.uniforms[ name ] = {
  				type: 'v3',
  				value: value.toArray()
  			};

  		} else if ( value && value.isVector4 ) {

  			data.uniforms[ name ] = {
  				type: 'v4',
  				value: value.toArray()
  			};

  		} else if ( value && value.isMatrix3 ) {

  			data.uniforms[ name ] = {
  				type: 'm3',
  				value: value.toArray()
  			};

  		} else if ( value && value.isMatrix4 ) {

  			data.uniforms[ name ] = {
  				type: 'm4',
  				value: value.toArray()
  			};

  		} else {

  			data.uniforms[ name ] = {
  				value: value
  			};

  			// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

  		}

  	}

  	if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;

  	data.vertexShader = this.vertexShader;
  	data.fragmentShader = this.fragmentShader;

  	var extensions = {};

  	for ( var key in this.extensions ) {

  		if ( this.extensions[ key ] === true ) extensions[ key ] = true;

  	}

  	if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;

  	return data;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author mikael emtinger / http://gomo.se/
   * @author WestLangley / http://github.com/WestLangley
  */

  function Camera() {

  	Object3D.call( this );

  	this.type = 'Camera';

  	this.matrixWorldInverse = new Matrix4();

  	this.projectionMatrix = new Matrix4();
  	this.projectionMatrixInverse = new Matrix4();

  }

  Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Camera,

  	isCamera: true,

  	copy: function ( source, recursive ) {

  		Object3D.prototype.copy.call( this, source, recursive );

  		this.matrixWorldInverse.copy( source.matrixWorldInverse );

  		this.projectionMatrix.copy( source.projectionMatrix );
  		this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

  		return this;

  	},

  	getWorldDirection: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Camera: .getWorldDirection() target is now required' );
  			target = new Vector3();

  		}

  		this.updateMatrixWorld( true );

  		var e = this.matrixWorld.elements;

  		return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();

  	},

  	updateMatrixWorld: function ( force ) {

  		Object3D.prototype.updateMatrixWorld.call( this, force );

  		this.matrixWorldInverse.getInverse( this.matrixWorld );

  	},

  	updateWorldMatrix: function ( updateParents, updateChildren ) {

  		Object3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );

  		this.matrixWorldInverse.getInverse( this.matrixWorld );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author greggman / http://games.greggman.com/
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * @author tschw
   */

  function PerspectiveCamera( fov, aspect, near, far ) {

  	Camera.call( this );

  	this.type = 'PerspectiveCamera';

  	this.fov = fov !== undefined ? fov : 50;
  	this.zoom = 1;

  	this.near = near !== undefined ? near : 0.1;
  	this.far = far !== undefined ? far : 2000;
  	this.focus = 10;

  	this.aspect = aspect !== undefined ? aspect : 1;
  	this.view = null;

  	this.filmGauge = 35;	// width of the film (default in millimeters)
  	this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

  	this.updateProjectionMatrix();

  }

  PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

  	constructor: PerspectiveCamera,

  	isPerspectiveCamera: true,

  	copy: function ( source, recursive ) {

  		Camera.prototype.copy.call( this, source, recursive );

  		this.fov = source.fov;
  		this.zoom = source.zoom;

  		this.near = source.near;
  		this.far = source.far;
  		this.focus = source.focus;

  		this.aspect = source.aspect;
  		this.view = source.view === null ? null : Object.assign( {}, source.view );

  		this.filmGauge = source.filmGauge;
  		this.filmOffset = source.filmOffset;

  		return this;

  	},

  	/**
  	 * Sets the FOV by focal length in respect to the current .filmGauge.
  	 *
  	 * The default film gauge is 35, so that the focal length can be specified for
  	 * a 35mm (full frame) camera.
  	 *
  	 * Values for focal length and film gauge must have the same unit.
  	 */
  	setFocalLength: function ( focalLength ) {

  		// see http://www.bobatkins.com/photography/technical/field_of_view.html
  		var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

  		this.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );
  		this.updateProjectionMatrix();

  	},

  	/**
  	 * Calculates the focal length from the current .fov and .filmGauge.
  	 */
  	getFocalLength: function () {

  		var vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );

  		return 0.5 * this.getFilmHeight() / vExtentSlope;

  	},

  	getEffectiveFOV: function () {

  		return MathUtils.RAD2DEG * 2 * Math.atan(
  			Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );

  	},

  	getFilmWidth: function () {

  		// film not completely covered in portrait format (aspect < 1)
  		return this.filmGauge * Math.min( this.aspect, 1 );

  	},

  	getFilmHeight: function () {

  		// film not completely covered in landscape format (aspect > 1)
  		return this.filmGauge / Math.max( this.aspect, 1 );

  	},

  	/**
  	 * Sets an offset in a larger frustum. This is useful for multi-window or
  	 * multi-monitor/multi-machine setups.
  	 *
  	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
  	 * the monitors are in grid like this
  	 *
  	 *   +---+---+---+
  	 *   | A | B | C |
  	 *   +---+---+---+
  	 *   | D | E | F |
  	 *   +---+---+---+
  	 *
  	 * then for each monitor you would call it like this
  	 *
  	 *   var w = 1920;
  	 *   var h = 1080;
  	 *   var fullWidth = w * 3;
  	 *   var fullHeight = h * 2;
  	 *
  	 *   --A--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
  	 *   --B--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
  	 *   --C--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
  	 *   --D--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
  	 *   --E--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
  	 *   --F--
  	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
  	 *
  	 *   Note there is no reason monitors have to be the same size or in a grid.
  	 */
  	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

  		this.aspect = fullWidth / fullHeight;

  		if ( this.view === null ) {

  			this.view = {
  				enabled: true,
  				fullWidth: 1,
  				fullHeight: 1,
  				offsetX: 0,
  				offsetY: 0,
  				width: 1,
  				height: 1
  			};

  		}

  		this.view.enabled = true;
  		this.view.fullWidth = fullWidth;
  		this.view.fullHeight = fullHeight;
  		this.view.offsetX = x;
  		this.view.offsetY = y;
  		this.view.width = width;
  		this.view.height = height;

  		this.updateProjectionMatrix();

  	},

  	clearViewOffset: function () {

  		if ( this.view !== null ) {

  			this.view.enabled = false;

  		}

  		this.updateProjectionMatrix();

  	},

  	updateProjectionMatrix: function () {

  		var near = this.near,
  			top = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom,
  			height = 2 * top,
  			width = this.aspect * height,
  			left = - 0.5 * width,
  			view = this.view;

  		if ( this.view !== null && this.view.enabled ) {

  			var fullWidth = view.fullWidth,
  				fullHeight = view.fullHeight;

  			left += view.offsetX * width / fullWidth;
  			top -= view.offsetY * height / fullHeight;
  			width *= view.width / fullWidth;
  			height *= view.height / fullHeight;

  		}

  		var skew = this.filmOffset;
  		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

  		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

  		this.projectionMatrixInverse.getInverse( this.projectionMatrix );

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		data.object.fov = this.fov;
  		data.object.zoom = this.zoom;

  		data.object.near = this.near;
  		data.object.far = this.far;
  		data.object.focus = this.focus;

  		data.object.aspect = this.aspect;

  		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

  		data.object.filmGauge = this.filmGauge;
  		data.object.filmOffset = this.filmOffset;

  		return data;

  	}

  } );

  /**
   * Camera for rendering cube maps
   *	- renders scene into axis-aligned cube
   *
   * @author alteredq / http://alteredqualia.com/
   */

  var fov = 90, aspect = 1;

  function CubeCamera( near, far, cubeResolution, options ) {

  	Object3D.call( this );

  	this.type = 'CubeCamera';

  	var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
  	cameraPX.up.set( 0, - 1, 0 );
  	cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
  	this.add( cameraPX );

  	var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
  	cameraNX.up.set( 0, - 1, 0 );
  	cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
  	this.add( cameraNX );

  	var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
  	cameraPY.up.set( 0, 0, 1 );
  	cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
  	this.add( cameraPY );

  	var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
  	cameraNY.up.set( 0, 0, - 1 );
  	cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
  	this.add( cameraNY );

  	var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
  	cameraPZ.up.set( 0, - 1, 0 );
  	cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
  	this.add( cameraPZ );

  	var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
  	cameraNZ.up.set( 0, - 1, 0 );
  	cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
  	this.add( cameraNZ );

  	options = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };

  	this.renderTarget = new WebGLCubeRenderTarget( cubeResolution, options );
  	this.renderTarget.texture.name = "CubeCamera";

  	this.update = function ( renderer, scene ) {

  		if ( this.parent === null ) this.updateMatrixWorld();

  		var currentRenderTarget = renderer.getRenderTarget();

  		var renderTarget = this.renderTarget;
  		var generateMipmaps = renderTarget.texture.generateMipmaps;

  		renderTarget.texture.generateMipmaps = false;

  		renderer.setRenderTarget( renderTarget, 0 );
  		renderer.render( scene, cameraPX );

  		renderer.setRenderTarget( renderTarget, 1 );
  		renderer.render( scene, cameraNX );

  		renderer.setRenderTarget( renderTarget, 2 );
  		renderer.render( scene, cameraPY );

  		renderer.setRenderTarget( renderTarget, 3 );
  		renderer.render( scene, cameraNY );

  		renderer.setRenderTarget( renderTarget, 4 );
  		renderer.render( scene, cameraPZ );

  		renderTarget.texture.generateMipmaps = generateMipmaps;

  		renderer.setRenderTarget( renderTarget, 5 );
  		renderer.render( scene, cameraNZ );

  		renderer.setRenderTarget( currentRenderTarget );

  	};

  	this.clear = function ( renderer, color, depth, stencil ) {

  		var currentRenderTarget = renderer.getRenderTarget();

  		var renderTarget = this.renderTarget;

  		for ( var i = 0; i < 6; i ++ ) {

  			renderer.setRenderTarget( renderTarget, i );

  			renderer.clear( color, depth, stencil );

  		}

  		renderer.setRenderTarget( currentRenderTarget );

  	};

  }

  CubeCamera.prototype = Object.create( Object3D.prototype );
  CubeCamera.prototype.constructor = CubeCamera;

  /**
   * @author alteredq / http://alteredqualia.com
   * @author WestLangley / http://github.com/WestLangley
   */

  function WebGLCubeRenderTarget( size, options, dummy ) {

  	if ( Number.isInteger( options ) ) {

  		console.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );

  		options = dummy;

  	}

  	WebGLRenderTarget.call( this, size, size, options );

  }

  WebGLCubeRenderTarget.prototype = Object.create( WebGLRenderTarget.prototype );
  WebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;

  WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;

  WebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function ( renderer, texture ) {

  	this.texture.type = texture.type;
  	this.texture.format = texture.format;
  	this.texture.encoding = texture.encoding;

  	var scene = new Scene();

  	var shader = {

  		uniforms: {
  			tEquirect: { value: null },
  		},

  		vertexShader: [

  			"varying vec3 vWorldDirection;",

  			"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {",

  			"	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );",

  			"}",

  			"void main() {",

  			"	vWorldDirection = transformDirection( position, modelMatrix );",

  			"	#include <begin_vertex>",
  			"	#include <project_vertex>",

  			"}"

  		].join( '\n' ),

  		fragmentShader: [

  			"uniform sampler2D tEquirect;",

  			"varying vec3 vWorldDirection;",

  			"#define RECIPROCAL_PI 0.31830988618",
  			"#define RECIPROCAL_PI2 0.15915494",

  			"void main() {",

  			"	vec3 direction = normalize( vWorldDirection );",

  			"	vec2 sampleUV;",

  			"	sampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;",

  			"	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;",

  			"	gl_FragColor = texture2D( tEquirect, sampleUV );",

  			"}"

  		].join( '\n' ),
  	};

  	var material = new ShaderMaterial( {

  		type: 'CubemapFromEquirect',

  		uniforms: cloneUniforms( shader.uniforms ),
  		vertexShader: shader.vertexShader,
  		fragmentShader: shader.fragmentShader,
  		side: BackSide,
  		blending: NoBlending

  	} );

  	material.uniforms.tEquirect.value = texture;

  	var mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );

  	scene.add( mesh );

  	var camera = new CubeCamera( 1, 10, 1 );

  	camera.renderTarget = this;
  	camera.renderTarget.texture.name = 'CubeCameraTexture';

  	camera.update( renderer, scene );

  	mesh.geometry.dispose();
  	mesh.material.dispose();

  	return this;

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

  	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

  	this.image = { data: data || null, width: width || 1, height: height || 1 };

  	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
  	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

  	this.generateMipmaps = false;
  	this.flipY = false;
  	this.unpackAlignment = 1;

  	this.needsUpdate = true;

  }

  DataTexture.prototype = Object.create( Texture.prototype );
  DataTexture.prototype.constructor = DataTexture;

  DataTexture.prototype.isDataTexture = true;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author bhouston / http://clara.io
   */

  var _sphere$1 = new Sphere();
  var _vector$5 = new Vector3();

  function Frustum( p0, p1, p2, p3, p4, p5 ) {

  	this.planes = [

  		( p0 !== undefined ) ? p0 : new Plane(),
  		( p1 !== undefined ) ? p1 : new Plane(),
  		( p2 !== undefined ) ? p2 : new Plane(),
  		( p3 !== undefined ) ? p3 : new Plane(),
  		( p4 !== undefined ) ? p4 : new Plane(),
  		( p5 !== undefined ) ? p5 : new Plane()

  	];

  }

  Object.assign( Frustum.prototype, {

  	set: function ( p0, p1, p2, p3, p4, p5 ) {

  		var planes = this.planes;

  		planes[ 0 ].copy( p0 );
  		planes[ 1 ].copy( p1 );
  		planes[ 2 ].copy( p2 );
  		planes[ 3 ].copy( p3 );
  		planes[ 4 ].copy( p4 );
  		planes[ 5 ].copy( p5 );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( frustum ) {

  		var planes = this.planes;

  		for ( var i = 0; i < 6; i ++ ) {

  			planes[ i ].copy( frustum.planes[ i ] );

  		}

  		return this;

  	},

  	setFromProjectionMatrix: function ( m ) {

  		var planes = this.planes;
  		var me = m.elements;
  		var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
  		var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
  		var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
  		var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

  		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
  		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
  		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
  		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
  		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
  		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

  		return this;

  	},

  	intersectsObject: function ( object ) {

  		var geometry = object.geometry;

  		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

  		_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );

  		return this.intersectsSphere( _sphere$1 );

  	},

  	intersectsSprite: function ( sprite ) {

  		_sphere$1.center.set( 0, 0, 0 );
  		_sphere$1.radius = 0.7071067811865476;
  		_sphere$1.applyMatrix4( sprite.matrixWorld );

  		return this.intersectsSphere( _sphere$1 );

  	},

  	intersectsSphere: function ( sphere ) {

  		var planes = this.planes;
  		var center = sphere.center;
  		var negRadius = - sphere.radius;

  		for ( var i = 0; i < 6; i ++ ) {

  			var distance = planes[ i ].distanceToPoint( center );

  			if ( distance < negRadius ) {

  				return false;

  			}

  		}

  		return true;

  	},

  	intersectsBox: function ( box ) {

  		var planes = this.planes;

  		for ( var i = 0; i < 6; i ++ ) {

  			var plane = planes[ i ];

  			// corner at max distance

  			_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;
  			_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;
  			_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;

  			if ( plane.distanceToPoint( _vector$5 ) < 0 ) {

  				return false;

  			}

  		}

  		return true;

  	},

  	containsPoint: function ( point ) {

  		var planes = this.planes;

  		for ( var i = 0; i < 6; i ++ ) {

  			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

  				return false;

  			}

  		}

  		return true;

  	}

  } );

  /**
   * Uniforms library for shared webgl shaders
   */

  var UniformsLib = {

  	common: {

  		diffuse: { value: new Color( 0xeeeeee ) },
  		opacity: { value: 1.0 },

  		map: { value: null },
  		uvTransform: { value: new Matrix3() },
  		uv2Transform: { value: new Matrix3() },

  		alphaMap: { value: null },

  	},

  	specularmap: {

  		specularMap: { value: null },

  	},

  	envmap: {

  		envMap: { value: null },
  		flipEnvMap: { value: - 1 },
  		reflectivity: { value: 1.0 },
  		refractionRatio: { value: 0.98 },
  		maxMipLevel: { value: 0 }

  	},

  	aomap: {

  		aoMap: { value: null },
  		aoMapIntensity: { value: 1 }

  	},

  	lightmap: {

  		lightMap: { value: null },
  		lightMapIntensity: { value: 1 }

  	},

  	emissivemap: {

  		emissiveMap: { value: null }

  	},

  	bumpmap: {

  		bumpMap: { value: null },
  		bumpScale: { value: 1 }

  	},

  	normalmap: {

  		normalMap: { value: null },
  		normalScale: { value: new Vector2( 1, 1 ) }

  	},

  	displacementmap: {

  		displacementMap: { value: null },
  		displacementScale: { value: 1 },
  		displacementBias: { value: 0 }

  	},

  	roughnessmap: {

  		roughnessMap: { value: null }

  	},

  	metalnessmap: {

  		metalnessMap: { value: null }

  	},

  	gradientmap: {

  		gradientMap: { value: null }

  	},

  	fog: {

  		fogDensity: { value: 0.00025 },
  		fogNear: { value: 1 },
  		fogFar: { value: 2000 },
  		fogColor: { value: new Color( 0xffffff ) }

  	},

  	lights: {

  		ambientLightColor: { value: [] },

  		lightProbe: { value: [] },

  		directionalLights: { value: [], properties: {
  			direction: {},
  			color: {}
  		} },

  		directionalLightShadows: { value: [], properties: {
  			shadowBias: {},
  			shadowRadius: {},
  			shadowMapSize: {}
  		} },

  		directionalShadowMap: { value: [] },
  		directionalShadowMatrix: { value: [] },

  		spotLights: { value: [], properties: {
  			color: {},
  			position: {},
  			direction: {},
  			distance: {},
  			coneCos: {},
  			penumbraCos: {},
  			decay: {}
  		} },

  		spotLightShadows: { value: [], properties: {
  			shadowBias: {},
  			shadowRadius: {},
  			shadowMapSize: {}
  		} },

  		spotShadowMap: { value: [] },
  		spotShadowMatrix: { value: [] },

  		pointLights: { value: [], properties: {
  			color: {},
  			position: {},
  			decay: {},
  			distance: {}
  		} },

  		pointLightShadows: { value: [], properties: {
  			shadowBias: {},
  			shadowRadius: {},
  			shadowMapSize: {},
  			shadowCameraNear: {},
  			shadowCameraFar: {}
  		} },

  		pointShadowMap: { value: [] },
  		pointShadowMatrix: { value: [] },

  		hemisphereLights: { value: [], properties: {
  			direction: {},
  			skyColor: {},
  			groundColor: {}
  		} },

  		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
  		rectAreaLights: { value: [], properties: {
  			color: {},
  			position: {},
  			width: {},
  			height: {}
  		} }

  	},

  	points: {

  		diffuse: { value: new Color( 0xeeeeee ) },
  		opacity: { value: 1.0 },
  		size: { value: 1.0 },
  		scale: { value: 1.0 },
  		map: { value: null },
  		alphaMap: { value: null },
  		uvTransform: { value: new Matrix3() }

  	},

  	sprite: {

  		diffuse: { value: new Color( 0xeeeeee ) },
  		opacity: { value: 1.0 },
  		center: { value: new Vector2( 0.5, 0.5 ) },
  		rotation: { value: 0.0 },
  		map: { value: null },
  		alphaMap: { value: null },
  		uvTransform: { value: new Matrix3() }

  	}

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLAnimation() {

  	var context = null;
  	var isAnimating = false;
  	var animationLoop = null;

  	function onAnimationFrame( time, frame ) {

  		if ( isAnimating === false ) return;

  		animationLoop( time, frame );

  		context.requestAnimationFrame( onAnimationFrame );

  	}

  	return {

  		start: function () {

  			if ( isAnimating === true ) return;
  			if ( animationLoop === null ) return;

  			context.requestAnimationFrame( onAnimationFrame );

  			isAnimating = true;

  		},

  		stop: function () {

  			isAnimating = false;

  		},

  		setAnimationLoop: function ( callback ) {

  			animationLoop = callback;

  		},

  		setContext: function ( value ) {

  			context = value;

  		}

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLAttributes( gl, capabilities ) {

  	var isWebGL2 = capabilities.isWebGL2;

  	var buffers = new WeakMap();

  	function createBuffer( attribute, bufferType ) {

  		var array = attribute.array;
  		var usage = attribute.usage;

  		var buffer = gl.createBuffer();

  		gl.bindBuffer( bufferType, buffer );
  		gl.bufferData( bufferType, array, usage );

  		attribute.onUploadCallback();

  		var type = 5126;

  		if ( array instanceof Float32Array ) {

  			type = 5126;

  		} else if ( array instanceof Float64Array ) {

  			console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

  		} else if ( array instanceof Uint16Array ) {

  			type = 5123;

  		} else if ( array instanceof Int16Array ) {

  			type = 5122;

  		} else if ( array instanceof Uint32Array ) {

  			type = 5125;

  		} else if ( array instanceof Int32Array ) {

  			type = 5124;

  		} else if ( array instanceof Int8Array ) {

  			type = 5120;

  		} else if ( array instanceof Uint8Array ) {

  			type = 5121;

  		}

  		return {
  			buffer: buffer,
  			type: type,
  			bytesPerElement: array.BYTES_PER_ELEMENT,
  			version: attribute.version
  		};

  	}

  	function updateBuffer( buffer, attribute, bufferType ) {

  		var array = attribute.array;
  		var updateRange = attribute.updateRange;

  		gl.bindBuffer( bufferType, buffer );

  		if ( updateRange.count === - 1 ) {

  			// Not using update ranges

  			gl.bufferSubData( bufferType, 0, array );

  		} else {

  			if ( isWebGL2 ) {

  				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
  					array, updateRange.offset, updateRange.count );

  			} else {

  				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
  					array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

  			}

  			updateRange.count = - 1; // reset range

  		}

  	}

  	//

  	function get( attribute ) {

  		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

  		return buffers.get( attribute );

  	}

  	function remove( attribute ) {

  		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

  		var data = buffers.get( attribute );

  		if ( data ) {

  			gl.deleteBuffer( data.buffer );

  			buffers.delete( attribute );

  		}

  	}

  	function update( attribute, bufferType ) {

  		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

  		var data = buffers.get( attribute );

  		if ( data === undefined ) {

  			buffers.set( attribute, createBuffer( attribute, bufferType ) );

  		} else if ( data.version < attribute.version ) {

  			updateBuffer( data.buffer, attribute, bufferType );

  			data.version = attribute.version;

  		}

  	}

  	return {

  		get: get,
  		remove: remove,
  		update: update

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  // PlaneGeometry

  function PlaneGeometry( width, height, widthSegments, heightSegments ) {

  	Geometry.call( this );

  	this.type = 'PlaneGeometry';

  	this.parameters = {
  		width: width,
  		height: height,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments
  	};

  	this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
  	this.mergeVertices();

  }

  PlaneGeometry.prototype = Object.create( Geometry.prototype );
  PlaneGeometry.prototype.constructor = PlaneGeometry;

  // PlaneBufferGeometry

  function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

  	BufferGeometry.call( this );

  	this.type = 'PlaneBufferGeometry';

  	this.parameters = {
  		width: width,
  		height: height,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments
  	};

  	width = width || 1;
  	height = height || 1;

  	var width_half = width / 2;
  	var height_half = height / 2;

  	var gridX = Math.floor( widthSegments ) || 1;
  	var gridY = Math.floor( heightSegments ) || 1;

  	var gridX1 = gridX + 1;
  	var gridY1 = gridY + 1;

  	var segment_width = width / gridX;
  	var segment_height = height / gridY;

  	var ix, iy;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// generate vertices, normals and uvs

  	for ( iy = 0; iy < gridY1; iy ++ ) {

  		var y = iy * segment_height - height_half;

  		for ( ix = 0; ix < gridX1; ix ++ ) {

  			var x = ix * segment_width - width_half;

  			vertices.push( x, - y, 0 );

  			normals.push( 0, 0, 1 );

  			uvs.push( ix / gridX );
  			uvs.push( 1 - ( iy / gridY ) );

  		}

  	}

  	// indices

  	for ( iy = 0; iy < gridY; iy ++ ) {

  		for ( ix = 0; ix < gridX; ix ++ ) {

  			var a = ix + gridX1 * iy;
  			var b = ix + gridX1 * ( iy + 1 );
  			var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
  			var d = ( ix + 1 ) + gridX1 * iy;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

  var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";

  var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

  var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";

  var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";

  var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

  var begin_vertex = "vec3 transformed = vec3( position );";

  var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

  var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";

  var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

  var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";

  var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

  var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";

  var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";

  var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

  var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

  var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

  var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

  var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}";

  var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_maxMipLevel 8.0\n#define cubeUV_minMipLevel 4.0\n#define cubeUV_maxTileSize 256.0\n#define cubeUV_minTileSize 16.0\nfloat getFace(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    float face = -1.0;\n    if (absDirection.x > absDirection.z) {\n      if (absDirection.x > absDirection.y)\n        face = direction.x > 0.0 ? 0.0 : 3.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    } else {\n      if (absDirection.z > absDirection.y)\n        face = direction.z > 0.0 ? 2.0 : 5.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    }\n    return face;\n}\nvec2 getUV(vec3 direction, float face) {\n    vec2 uv;\n    if (face == 0.0) {\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\n    } else if (face == 1.0) {\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\n    } else if (face == 2.0) {\n      uv = direction.xy / abs(direction.z);\n    } else if (face == 3.0) {\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\n    } else if (face == 4.0) {\n      uv = direction.xz / abs(direction.y);\n    } else {\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\n    }\n    return 0.5 * (uv + 1.0);\n}\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\n  float face = getFace(direction);\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\n  mipInt = max(mipInt, cubeUV_minMipLevel);\n  float faceSize = exp2(mipInt);\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\n  vec2 f = fract(uv);\n  uv += 0.5 - f;\n  if (face > 2.0) {\n    uv.y += faceSize;\n    face -= 3.0;\n  }\n  uv.x += face * faceSize;\n  if(mipInt < cubeUV_maxMipLevel){\n    uv.y += 2.0 * cubeUV_maxTileSize;\n  }\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\n  uv *= texelSize;\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x += texelSize;\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.y += texelSize;\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x -= texelSize;\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  vec3 tm = mix(tl, tr, f.x);\n  vec3 bm = mix(bl, br, f.x);\n  return mix(tm, bm, f.y);\n}\n#define r0 1.0\n#define v0 0.339\n#define m0 -2.0\n#define r1 0.8\n#define v1 0.276\n#define m1 -1.0\n#define r4 0.4\n#define v4 0.046\n#define m4 2.0\n#define r5 0.305\n#define v5 0.016\n#define m5 3.0\n#define r6 0.21\n#define v6 0.0038\n#define m6 4.0\nfloat roughnessToMip(float roughness) {\n  float mip = 0.0;\n  if (roughness >= r1) {\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\n  } else if (roughness >= r4) {\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\n  } else if (roughness >= r5) {\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\n  } else if (roughness >= r6) {\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\n  } else {\n    mip = -2.0 * log2(1.16 * roughness);  }\n  return mip;\n}\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\n  float mipF = fract(mip);\n  float mipInt = floor(mip);\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\n  if (mipF == 0.0) {\n    return vec4(color0, 1.0);\n  } else {\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\n    return vec4(mix(color0, color1, mipF), 1.0);\n  }\n}\n#endif";

  var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

  var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

  var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";

  var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

  var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

  var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

  var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";

  var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

  var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

  var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

  var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

  var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

  var fog_vertex = "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif";

  var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";

  var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

  var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

  var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";

  var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif";

  var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

  var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";

  var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";

  var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";

  var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

  var lights_toon_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";

  var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

  var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";

  var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif";

  var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

  var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

  var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif";

  var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";

  var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

  var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

  var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";

  var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";

  var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";

  var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

  var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

  var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

  var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

  var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

  var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";

  var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

  var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";

  var normal_fragment_begin = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";

  var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";

  var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif";

  var clearcoat_normal_fragment_begin = "#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";

  var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif";

  var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";

  var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";

  var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

  var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

  var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

  var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

  var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

  var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

  var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";

  var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

  var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";

  var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";

  var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

  var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";

  var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

  var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

  var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

  var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

  var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

  var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}";

  var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";

  var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";

  var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

  var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

  var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";

  var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";

  var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

  var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

  var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

  var cube_frag = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

  var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

  var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";

  var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";

  var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

  var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

  var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

  var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

  var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

  var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

  var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

  var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

  var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

  var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

  var meshtoon_frag = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  var meshtoon_vert = "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var meshphysical_frag = "#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

  var meshphysical_vert = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";

  var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

  var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

  var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

  var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

  var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

  var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

  var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

  var ShaderChunk = {
  	alphamap_fragment: alphamap_fragment,
  	alphamap_pars_fragment: alphamap_pars_fragment,
  	alphatest_fragment: alphatest_fragment,
  	aomap_fragment: aomap_fragment,
  	aomap_pars_fragment: aomap_pars_fragment,
  	begin_vertex: begin_vertex,
  	beginnormal_vertex: beginnormal_vertex,
  	bsdfs: bsdfs,
  	bumpmap_pars_fragment: bumpmap_pars_fragment,
  	clipping_planes_fragment: clipping_planes_fragment,
  	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
  	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
  	clipping_planes_vertex: clipping_planes_vertex,
  	color_fragment: color_fragment,
  	color_pars_fragment: color_pars_fragment,
  	color_pars_vertex: color_pars_vertex,
  	color_vertex: color_vertex,
  	common: common,
  	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
  	defaultnormal_vertex: defaultnormal_vertex,
  	displacementmap_pars_vertex: displacementmap_pars_vertex,
  	displacementmap_vertex: displacementmap_vertex,
  	emissivemap_fragment: emissivemap_fragment,
  	emissivemap_pars_fragment: emissivemap_pars_fragment,
  	encodings_fragment: encodings_fragment,
  	encodings_pars_fragment: encodings_pars_fragment,
  	envmap_fragment: envmap_fragment,
  	envmap_common_pars_fragment: envmap_common_pars_fragment,
  	envmap_pars_fragment: envmap_pars_fragment,
  	envmap_pars_vertex: envmap_pars_vertex,
  	envmap_physical_pars_fragment: envmap_physical_pars_fragment,
  	envmap_vertex: envmap_vertex,
  	fog_vertex: fog_vertex,
  	fog_pars_vertex: fog_pars_vertex,
  	fog_fragment: fog_fragment,
  	fog_pars_fragment: fog_pars_fragment,
  	gradientmap_pars_fragment: gradientmap_pars_fragment,
  	lightmap_fragment: lightmap_fragment,
  	lightmap_pars_fragment: lightmap_pars_fragment,
  	lights_lambert_vertex: lights_lambert_vertex,
  	lights_pars_begin: lights_pars_begin,
  	lights_toon_fragment: lights_toon_fragment,
  	lights_toon_pars_fragment: lights_toon_pars_fragment,
  	lights_phong_fragment: lights_phong_fragment,
  	lights_phong_pars_fragment: lights_phong_pars_fragment,
  	lights_physical_fragment: lights_physical_fragment,
  	lights_physical_pars_fragment: lights_physical_pars_fragment,
  	lights_fragment_begin: lights_fragment_begin,
  	lights_fragment_maps: lights_fragment_maps,
  	lights_fragment_end: lights_fragment_end,
  	logdepthbuf_fragment: logdepthbuf_fragment,
  	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
  	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
  	logdepthbuf_vertex: logdepthbuf_vertex,
  	map_fragment: map_fragment,
  	map_pars_fragment: map_pars_fragment,
  	map_particle_fragment: map_particle_fragment,
  	map_particle_pars_fragment: map_particle_pars_fragment,
  	metalnessmap_fragment: metalnessmap_fragment,
  	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
  	morphnormal_vertex: morphnormal_vertex,
  	morphtarget_pars_vertex: morphtarget_pars_vertex,
  	morphtarget_vertex: morphtarget_vertex,
  	normal_fragment_begin: normal_fragment_begin,
  	normal_fragment_maps: normal_fragment_maps,
  	normalmap_pars_fragment: normalmap_pars_fragment,
  	clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
  	clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
  	clearcoat_pars_fragment: clearcoat_pars_fragment,
  	packing: packing,
  	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
  	project_vertex: project_vertex,
  	dithering_fragment: dithering_fragment,
  	dithering_pars_fragment: dithering_pars_fragment,
  	roughnessmap_fragment: roughnessmap_fragment,
  	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
  	shadowmap_pars_fragment: shadowmap_pars_fragment,
  	shadowmap_pars_vertex: shadowmap_pars_vertex,
  	shadowmap_vertex: shadowmap_vertex,
  	shadowmask_pars_fragment: shadowmask_pars_fragment,
  	skinbase_vertex: skinbase_vertex,
  	skinning_pars_vertex: skinning_pars_vertex,
  	skinning_vertex: skinning_vertex,
  	skinnormal_vertex: skinnormal_vertex,
  	specularmap_fragment: specularmap_fragment,
  	specularmap_pars_fragment: specularmap_pars_fragment,
  	tonemapping_fragment: tonemapping_fragment,
  	tonemapping_pars_fragment: tonemapping_pars_fragment,
  	uv_pars_fragment: uv_pars_fragment,
  	uv_pars_vertex: uv_pars_vertex,
  	uv_vertex: uv_vertex,
  	uv2_pars_fragment: uv2_pars_fragment,
  	uv2_pars_vertex: uv2_pars_vertex,
  	uv2_vertex: uv2_vertex,
  	worldpos_vertex: worldpos_vertex,

  	background_frag: background_frag,
  	background_vert: background_vert,
  	cube_frag: cube_frag,
  	cube_vert: cube_vert,
  	depth_frag: depth_frag,
  	depth_vert: depth_vert,
  	distanceRGBA_frag: distanceRGBA_frag,
  	distanceRGBA_vert: distanceRGBA_vert,
  	equirect_frag: equirect_frag,
  	equirect_vert: equirect_vert,
  	linedashed_frag: linedashed_frag,
  	linedashed_vert: linedashed_vert,
  	meshbasic_frag: meshbasic_frag,
  	meshbasic_vert: meshbasic_vert,
  	meshlambert_frag: meshlambert_frag,
  	meshlambert_vert: meshlambert_vert,
  	meshmatcap_frag: meshmatcap_frag,
  	meshmatcap_vert: meshmatcap_vert,
  	meshtoon_frag: meshtoon_frag,
  	meshtoon_vert: meshtoon_vert,
  	meshphong_frag: meshphong_frag,
  	meshphong_vert: meshphong_vert,
  	meshphysical_frag: meshphysical_frag,
  	meshphysical_vert: meshphysical_vert,
  	normal_frag: normal_frag,
  	normal_vert: normal_vert,
  	points_frag: points_frag,
  	points_vert: points_vert,
  	shadow_frag: shadow_frag,
  	shadow_vert: shadow_vert,
  	sprite_frag: sprite_frag,
  	sprite_vert: sprite_vert
  };

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author mikael emtinger / http://gomo.se/
   */

  var ShaderLib = {

  	basic: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.specularmap,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.fog
  		] ),

  		vertexShader: ShaderChunk.meshbasic_vert,
  		fragmentShader: ShaderChunk.meshbasic_frag

  	},

  	lambert: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.specularmap,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: new Color( 0x000000 ) }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshlambert_vert,
  		fragmentShader: ShaderChunk.meshlambert_frag

  	},

  	phong: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.specularmap,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: new Color( 0x000000 ) },
  				specular: { value: new Color( 0x111111 ) },
  				shininess: { value: 30 }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshphong_vert,
  		fragmentShader: ShaderChunk.meshphong_frag

  	},

  	standard: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.envmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.roughnessmap,
  			UniformsLib.metalnessmap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: new Color( 0x000000 ) },
  				roughness: { value: 0.5 },
  				metalness: { value: 0.5 },
  				envMapIntensity: { value: 1 } // temporary
  			}
  		] ),

  		vertexShader: ShaderChunk.meshphysical_vert,
  		fragmentShader: ShaderChunk.meshphysical_frag

  	},

  	toon: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.specularmap,
  			UniformsLib.aomap,
  			UniformsLib.lightmap,
  			UniformsLib.emissivemap,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.gradientmap,
  			UniformsLib.fog,
  			UniformsLib.lights,
  			{
  				emissive: { value: new Color( 0x000000 ) },
  				specular: { value: new Color( 0x111111 ) },
  				shininess: { value: 30 }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshtoon_vert,
  		fragmentShader: ShaderChunk.meshtoon_frag

  	},

  	matcap: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			UniformsLib.fog,
  			{
  				matcap: { value: null }
  			}
  		] ),

  		vertexShader: ShaderChunk.meshmatcap_vert,
  		fragmentShader: ShaderChunk.meshmatcap_frag

  	},

  	points: {

  		uniforms: mergeUniforms( [
  			UniformsLib.points,
  			UniformsLib.fog
  		] ),

  		vertexShader: ShaderChunk.points_vert,
  		fragmentShader: ShaderChunk.points_frag

  	},

  	dashed: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.fog,
  			{
  				scale: { value: 1 },
  				dashSize: { value: 1 },
  				totalSize: { value: 2 }
  			}
  		] ),

  		vertexShader: ShaderChunk.linedashed_vert,
  		fragmentShader: ShaderChunk.linedashed_frag

  	},

  	depth: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.displacementmap
  		] ),

  		vertexShader: ShaderChunk.depth_vert,
  		fragmentShader: ShaderChunk.depth_frag

  	},

  	normal: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.bumpmap,
  			UniformsLib.normalmap,
  			UniformsLib.displacementmap,
  			{
  				opacity: { value: 1.0 }
  			}
  		] ),

  		vertexShader: ShaderChunk.normal_vert,
  		fragmentShader: ShaderChunk.normal_frag

  	},

  	sprite: {

  		uniforms: mergeUniforms( [
  			UniformsLib.sprite,
  			UniformsLib.fog
  		] ),

  		vertexShader: ShaderChunk.sprite_vert,
  		fragmentShader: ShaderChunk.sprite_frag

  	},

  	background: {

  		uniforms: {
  			uvTransform: { value: new Matrix3() },
  			t2D: { value: null },
  		},

  		vertexShader: ShaderChunk.background_vert,
  		fragmentShader: ShaderChunk.background_frag

  	},
  	/* -------------------------------------------------------------------------
  	//	Cube map shader
  	 ------------------------------------------------------------------------- */

  	cube: {

  		uniforms: mergeUniforms( [
  			UniformsLib.envmap,
  			{
  				opacity: { value: 1.0 }
  			}
  		] ),

  		vertexShader: ShaderChunk.cube_vert,
  		fragmentShader: ShaderChunk.cube_frag

  	},

  	equirect: {

  		uniforms: {
  			tEquirect: { value: null },
  		},

  		vertexShader: ShaderChunk.equirect_vert,
  		fragmentShader: ShaderChunk.equirect_frag

  	},

  	distanceRGBA: {

  		uniforms: mergeUniforms( [
  			UniformsLib.common,
  			UniformsLib.displacementmap,
  			{
  				referencePosition: { value: new Vector3() },
  				nearDistance: { value: 1 },
  				farDistance: { value: 1000 }
  			}
  		] ),

  		vertexShader: ShaderChunk.distanceRGBA_vert,
  		fragmentShader: ShaderChunk.distanceRGBA_frag

  	},

  	shadow: {

  		uniforms: mergeUniforms( [
  			UniformsLib.lights,
  			UniformsLib.fog,
  			{
  				color: { value: new Color( 0x00000 ) },
  				opacity: { value: 1.0 }
  			},
  		] ),

  		vertexShader: ShaderChunk.shadow_vert,
  		fragmentShader: ShaderChunk.shadow_frag

  	}

  };

  ShaderLib.physical = {

  	uniforms: mergeUniforms( [
  		ShaderLib.standard.uniforms,
  		{
  			clearcoat: { value: 0 },
  			clearcoatMap: { value: null },
  			clearcoatRoughness: { value: 0 },
  			clearcoatRoughnessMap: { value: null },
  			clearcoatNormalScale: { value: new Vector2( 1, 1 ) },
  			clearcoatNormalMap: { value: null },
  			sheen: { value: new Color( 0x000000 ) },
  			transparency: { value: 0 },
  		}
  	] ),

  	vertexShader: ShaderChunk.meshphysical_vert,
  	fragmentShader: ShaderChunk.meshphysical_frag

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLBackground( renderer, state, objects, premultipliedAlpha ) {

  	var clearColor = new Color( 0x000000 );
  	var clearAlpha = 0;

  	var planeMesh;
  	var boxMesh;

  	var currentBackground = null;
  	var currentBackgroundVersion = 0;
  	var currentTonemapping = null;

  	function render( renderList, scene, camera, forceClear ) {

  		var background = scene.background;

  		// Ignore background in AR
  		// TODO: Reconsider this.

  		var xr = renderer.xr;
  		var session = xr.getSession && xr.getSession();

  		if ( session && session.environmentBlendMode === 'additive' ) {

  			background = null;

  		}

  		if ( background === null ) {

  			setClear( clearColor, clearAlpha );

  		} else if ( background && background.isColor ) {

  			setClear( background, 1 );
  			forceClear = true;

  		}

  		if ( renderer.autoClear || forceClear ) {

  			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

  		}

  		if ( background && ( background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping ) ) {

  			if ( boxMesh === undefined ) {

  				boxMesh = new Mesh(
  					new BoxBufferGeometry( 1, 1, 1 ),
  					new ShaderMaterial( {
  						type: 'BackgroundCubeMaterial',
  						uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
  						vertexShader: ShaderLib.cube.vertexShader,
  						fragmentShader: ShaderLib.cube.fragmentShader,
  						side: BackSide,
  						depthTest: false,
  						depthWrite: false,
  						fog: false
  					} )
  				);

  				boxMesh.geometry.deleteAttribute( 'normal' );
  				boxMesh.geometry.deleteAttribute( 'uv' );

  				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

  					this.matrixWorld.copyPosition( camera.matrixWorld );

  				};

  				// enable code injection for non-built-in material
  				Object.defineProperty( boxMesh.material, 'envMap', {

  					get: function () {

  						return this.uniforms.envMap.value;

  					}

  				} );

  				objects.update( boxMesh );

  			}

  			var texture = background.isWebGLCubeRenderTarget ? background.texture : background;

  			boxMesh.material.uniforms.envMap.value = texture;
  			boxMesh.material.uniforms.flipEnvMap.value = texture.isCubeTexture ? - 1 : 1;

  			if ( currentBackground !== background ||
  				currentBackgroundVersion !== texture.version ||
  				currentTonemapping !== renderer.toneMapping ) {

  				boxMesh.material.needsUpdate = true;

  				currentBackground = background;
  				currentBackgroundVersion = texture.version;
  				currentTonemapping = renderer.toneMapping;

  			}

  			// push to the pre-sorted opaque render list
  			renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );

  		} else if ( background && background.isTexture ) {

  			if ( planeMesh === undefined ) {

  				planeMesh = new Mesh(
  					new PlaneBufferGeometry( 2, 2 ),
  					new ShaderMaterial( {
  						type: 'BackgroundMaterial',
  						uniforms: cloneUniforms( ShaderLib.background.uniforms ),
  						vertexShader: ShaderLib.background.vertexShader,
  						fragmentShader: ShaderLib.background.fragmentShader,
  						side: FrontSide,
  						depthTest: false,
  						depthWrite: false,
  						fog: false
  					} )
  				);

  				planeMesh.geometry.deleteAttribute( 'normal' );

  				// enable code injection for non-built-in material
  				Object.defineProperty( planeMesh.material, 'map', {

  					get: function () {

  						return this.uniforms.t2D.value;

  					}

  				} );

  				objects.update( planeMesh );

  			}

  			planeMesh.material.uniforms.t2D.value = background;

  			if ( background.matrixAutoUpdate === true ) {

  				background.updateMatrix();

  			}

  			planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );

  			if ( currentBackground !== background ||
  				currentBackgroundVersion !== background.version ||
  				currentTonemapping !== renderer.toneMapping ) {

  				planeMesh.material.needsUpdate = true;

  				currentBackground = background;
  				currentBackgroundVersion = background.version;
  				currentTonemapping = renderer.toneMapping;

  			}


  			// push to the pre-sorted opaque render list
  			renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );

  		}

  	}

  	function setClear( color, alpha ) {

  		state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

  	}

  	return {

  		getClearColor: function () {

  			return clearColor;

  		},
  		setClearColor: function ( color, alpha ) {

  			clearColor.set( color );
  			clearAlpha = alpha !== undefined ? alpha : 1;
  			setClear( clearColor, clearAlpha );

  		},
  		getClearAlpha: function () {

  			return clearAlpha;

  		},
  		setClearAlpha: function ( alpha ) {

  			clearAlpha = alpha;
  			setClear( clearColor, clearAlpha );

  		},
  		render: render

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLBufferRenderer( gl, extensions, info, capabilities ) {

  	var isWebGL2 = capabilities.isWebGL2;

  	var mode;

  	function setMode( value ) {

  		mode = value;

  	}

  	function render( start, count ) {

  		gl.drawArrays( mode, start, count );

  		info.update( count, mode );

  	}

  	function renderInstances( geometry, start, count, primcount ) {

  		if ( primcount === 0 ) return;

  		var extension, methodName;

  		if ( isWebGL2 ) {

  			extension = gl;
  			methodName = 'drawArraysInstanced';

  		} else {

  			extension = extensions.get( 'ANGLE_instanced_arrays' );
  			methodName = 'drawArraysInstancedANGLE';

  			if ( extension === null ) {

  				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
  				return;

  			}

  		}

  		extension[ methodName ]( mode, start, count, primcount );

  		info.update( count, mode, primcount );

  	}

  	//

  	this.setMode = setMode;
  	this.render = render;
  	this.renderInstances = renderInstances;

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLCapabilities( gl, extensions, parameters ) {

  	var maxAnisotropy;

  	function getMaxAnisotropy() {

  		if ( maxAnisotropy !== undefined ) return maxAnisotropy;

  		var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

  		if ( extension !== null ) {

  			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

  		} else {

  			maxAnisotropy = 0;

  		}

  		return maxAnisotropy;

  	}

  	function getMaxPrecision( precision ) {

  		if ( precision === 'highp' ) {

  			if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&
  				gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {

  				return 'highp';

  			}

  			precision = 'mediump';

  		}

  		if ( precision === 'mediump' ) {

  			if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&
  				gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {

  				return 'mediump';

  			}

  		}

  		return 'lowp';

  	}

  	/* eslint-disable no-undef */
  	var isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||
  		( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );
  	/* eslint-enable no-undef */

  	var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
  	var maxPrecision = getMaxPrecision( precision );

  	if ( maxPrecision !== precision ) {

  		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
  		precision = maxPrecision;

  	}

  	var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

  	var maxTextures = gl.getParameter( 34930 );
  	var maxVertexTextures = gl.getParameter( 35660 );
  	var maxTextureSize = gl.getParameter( 3379 );
  	var maxCubemapSize = gl.getParameter( 34076 );

  	var maxAttributes = gl.getParameter( 34921 );
  	var maxVertexUniforms = gl.getParameter( 36347 );
  	var maxVaryings = gl.getParameter( 36348 );
  	var maxFragmentUniforms = gl.getParameter( 36349 );

  	var vertexTextures = maxVertexTextures > 0;
  	var floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );
  	var floatVertexTextures = vertexTextures && floatFragmentTextures;

  	var maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;

  	return {

  		isWebGL2: isWebGL2,

  		getMaxAnisotropy: getMaxAnisotropy,
  		getMaxPrecision: getMaxPrecision,

  		precision: precision,
  		logarithmicDepthBuffer: logarithmicDepthBuffer,

  		maxTextures: maxTextures,
  		maxVertexTextures: maxVertexTextures,
  		maxTextureSize: maxTextureSize,
  		maxCubemapSize: maxCubemapSize,

  		maxAttributes: maxAttributes,
  		maxVertexUniforms: maxVertexUniforms,
  		maxVaryings: maxVaryings,
  		maxFragmentUniforms: maxFragmentUniforms,

  		vertexTextures: vertexTextures,
  		floatFragmentTextures: floatFragmentTextures,
  		floatVertexTextures: floatVertexTextures,

  		maxSamples: maxSamples

  	};

  }

  /**
   * @author tschw
   */

  function WebGLClipping() {

  	var scope = this,

  		globalState = null,
  		numGlobalPlanes = 0,
  		localClippingEnabled = false,
  		renderingShadows = false,

  		plane = new Plane(),
  		viewNormalMatrix = new Matrix3(),

  		uniform = { value: null, needsUpdate: false };

  	this.uniform = uniform;
  	this.numPlanes = 0;
  	this.numIntersection = 0;

  	this.init = function ( planes, enableLocalClipping, camera ) {

  		var enabled =
  			planes.length !== 0 ||
  			enableLocalClipping ||
  			// enable state of previous frame - the clipping code has to
  			// run another frame in order to reset the state:
  			numGlobalPlanes !== 0 ||
  			localClippingEnabled;

  		localClippingEnabled = enableLocalClipping;

  		globalState = projectPlanes( planes, camera, 0 );
  		numGlobalPlanes = planes.length;

  		return enabled;

  	};

  	this.beginShadows = function () {

  		renderingShadows = true;
  		projectPlanes( null );

  	};

  	this.endShadows = function () {

  		renderingShadows = false;
  		resetGlobalState();

  	};

  	this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

  		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

  			// there's no local clipping

  			if ( renderingShadows ) {

  				// there's no global clipping

  				projectPlanes( null );

  			} else {

  				resetGlobalState();

  			}

  		} else {

  			var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
  				lGlobal = nGlobal * 4,

  				dstArray = cache.clippingState || null;

  			uniform.value = dstArray; // ensure unique state

  			dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

  			for ( var i = 0; i !== lGlobal; ++ i ) {

  				dstArray[ i ] = globalState[ i ];

  			}

  			cache.clippingState = dstArray;
  			this.numIntersection = clipIntersection ? this.numPlanes : 0;
  			this.numPlanes += nGlobal;

  		}


  	};

  	function resetGlobalState() {

  		if ( uniform.value !== globalState ) {

  			uniform.value = globalState;
  			uniform.needsUpdate = numGlobalPlanes > 0;

  		}

  		scope.numPlanes = numGlobalPlanes;
  		scope.numIntersection = 0;

  	}

  	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

  		var nPlanes = planes !== null ? planes.length : 0,
  			dstArray = null;

  		if ( nPlanes !== 0 ) {

  			dstArray = uniform.value;

  			if ( skipTransform !== true || dstArray === null ) {

  				var flatSize = dstOffset + nPlanes * 4,
  					viewMatrix = camera.matrixWorldInverse;

  				viewNormalMatrix.getNormalMatrix( viewMatrix );

  				if ( dstArray === null || dstArray.length < flatSize ) {

  					dstArray = new Float32Array( flatSize );

  				}

  				for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

  					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

  					plane.normal.toArray( dstArray, i4 );
  					dstArray[ i4 + 3 ] = plane.constant;

  				}

  			}

  			uniform.value = dstArray;
  			uniform.needsUpdate = true;

  		}

  		scope.numPlanes = nPlanes;
  		scope.numIntersection = 0;

  		return dstArray;

  	}

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLExtensions( gl ) {

  	var extensions = {};

  	return {

  		get: function ( name ) {

  			if ( extensions[ name ] !== undefined ) {

  				return extensions[ name ];

  			}

  			var extension;

  			switch ( name ) {

  				case 'WEBGL_depth_texture':
  					extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
  					break;

  				case 'EXT_texture_filter_anisotropic':
  					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
  					break;

  				case 'WEBGL_compressed_texture_s3tc':
  					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
  					break;

  				case 'WEBGL_compressed_texture_pvrtc':
  					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
  					break;

  				default:
  					extension = gl.getExtension( name );

  			}

  			if ( extension === null ) {

  				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

  			}

  			extensions[ name ] = extension;

  			return extension;

  		}

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLGeometries( gl, attributes, info ) {

  	var geometries = new WeakMap();
  	var wireframeAttributes = new WeakMap();

  	function onGeometryDispose( event ) {

  		var geometry = event.target;
  		var buffergeometry = geometries.get( geometry );

  		if ( buffergeometry.index !== null ) {

  			attributes.remove( buffergeometry.index );

  		}

  		for ( var name in buffergeometry.attributes ) {

  			attributes.remove( buffergeometry.attributes[ name ] );

  		}

  		geometry.removeEventListener( 'dispose', onGeometryDispose );

  		geometries.delete( geometry );

  		var attribute = wireframeAttributes.get( buffergeometry );

  		if ( attribute ) {

  			attributes.remove( attribute );
  			wireframeAttributes.delete( buffergeometry );

  		}

  		//

  		info.memory.geometries --;

  	}

  	function get( object, geometry ) {

  		var buffergeometry = geometries.get( geometry );

  		if ( buffergeometry ) return buffergeometry;

  		geometry.addEventListener( 'dispose', onGeometryDispose );

  		if ( geometry.isBufferGeometry ) {

  			buffergeometry = geometry;

  		} else if ( geometry.isGeometry ) {

  			if ( geometry._bufferGeometry === undefined ) {

  				geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

  			}

  			buffergeometry = geometry._bufferGeometry;

  		}

  		geometries.set( geometry, buffergeometry );

  		info.memory.geometries ++;

  		return buffergeometry;

  	}

  	function update( geometry ) {

  		var index = geometry.index;
  		var geometryAttributes = geometry.attributes;

  		if ( index !== null ) {

  			attributes.update( index, 34963 );

  		}

  		for ( var name in geometryAttributes ) {

  			attributes.update( geometryAttributes[ name ], 34962 );

  		}

  		// morph targets

  		var morphAttributes = geometry.morphAttributes;

  		for ( var name in morphAttributes ) {

  			var array = morphAttributes[ name ];

  			for ( var i = 0, l = array.length; i < l; i ++ ) {

  				attributes.update( array[ i ], 34962 );

  			}

  		}

  	}

  	function updateWireframeAttribute( geometry ) {

  		var indices = [];

  		var geometryIndex = geometry.index;
  		var geometryPosition = geometry.attributes.position;
  		var version = 0;

  		if ( geometryIndex !== null ) {

  			var array = geometryIndex.array;
  			version = geometryIndex.version;

  			for ( var i = 0, l = array.length; i < l; i += 3 ) {

  				var a = array[ i + 0 ];
  				var b = array[ i + 1 ];
  				var c = array[ i + 2 ];

  				indices.push( a, b, b, c, c, a );

  			}

  		} else {

  			var array = geometryPosition.array;
  			version = geometryPosition.version;

  			for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

  				var a = i + 0;
  				var b = i + 1;
  				var c = i + 2;

  				indices.push( a, b, b, c, c, a );

  			}

  		}

  		var attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
  		attribute.version = version;

  		attributes.update( attribute, 34963 );

  		//

  		var previousAttribute = wireframeAttributes.get( geometry );

  		if ( previousAttribute ) attributes.remove( previousAttribute );

  		//

  		wireframeAttributes.set( geometry, attribute );

  	}

  	function getWireframeAttribute( geometry ) {

  		var currentAttribute = wireframeAttributes.get( geometry );

  		if ( currentAttribute ) {

  			var geometryIndex = geometry.index;

  			if ( geometryIndex !== null ) {

  				// if the attribute is obsolete, create a new one

  				if ( currentAttribute.version < geometryIndex.version ) {

  					updateWireframeAttribute( geometry );

  				}

  			}

  		} else {

  			updateWireframeAttribute( geometry );

  		}

  		return wireframeAttributes.get( geometry );

  	}

  	return {

  		get: get,
  		update: update,

  		getWireframeAttribute: getWireframeAttribute

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {

  	var isWebGL2 = capabilities.isWebGL2;

  	var mode;

  	function setMode( value ) {

  		mode = value;

  	}

  	var type, bytesPerElement;

  	function setIndex( value ) {

  		type = value.type;
  		bytesPerElement = value.bytesPerElement;

  	}

  	function render( start, count ) {

  		gl.drawElements( mode, count, type, start * bytesPerElement );

  		info.update( count, mode );

  	}

  	function renderInstances( geometry, start, count, primcount ) {

  		if ( primcount === 0 ) return;

  		var extension, methodName;

  		if ( isWebGL2 ) {

  			extension = gl;
  			methodName = 'drawElementsInstanced';

  		} else {

  			extension = extensions.get( 'ANGLE_instanced_arrays' );
  			methodName = 'drawElementsInstancedANGLE';

  			if ( extension === null ) {

  				console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
  				return;

  			}

  		}

  		extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );

  		info.update( count, mode, primcount );

  	}

  	//

  	this.setMode = setMode;
  	this.setIndex = setIndex;
  	this.render = render;
  	this.renderInstances = renderInstances;

  }

  /**
   * @author Mugen87 / https://github.com/Mugen87
   */

  function WebGLInfo( gl ) {

  	var memory = {
  		geometries: 0,
  		textures: 0
  	};

  	var render = {
  		frame: 0,
  		calls: 0,
  		triangles: 0,
  		points: 0,
  		lines: 0
  	};

  	function update( count, mode, instanceCount ) {

  		instanceCount = instanceCount || 1;

  		render.calls ++;

  		switch ( mode ) {

  			case 4:
  				render.triangles += instanceCount * ( count / 3 );
  				break;

  			case 1:
  				render.lines += instanceCount * ( count / 2 );
  				break;

  			case 3:
  				render.lines += instanceCount * ( count - 1 );
  				break;

  			case 2:
  				render.lines += instanceCount * count;
  				break;

  			case 0:
  				render.points += instanceCount * count;
  				break;

  			default:
  				console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
  				break;

  		}

  	}

  	function reset() {

  		render.frame ++;
  		render.calls = 0;
  		render.triangles = 0;
  		render.points = 0;
  		render.lines = 0;

  	}

  	return {
  		memory: memory,
  		render: render,
  		programs: null,
  		autoReset: true,
  		reset: reset,
  		update: update
  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function absNumericalSort( a, b ) {

  	return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

  }

  function WebGLMorphtargets( gl ) {

  	var influencesList = {};
  	var morphInfluences = new Float32Array( 8 );

  	function update( object, geometry, material, program ) {

  		var objectInfluences = object.morphTargetInfluences;

  		// When object doesn't have morph target influences defined, we treat it as a 0-length array
  		// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences

  		var length = objectInfluences === undefined ? 0 : objectInfluences.length;

  		var influences = influencesList[ geometry.id ];

  		if ( influences === undefined ) {

  			// initialise list

  			influences = [];

  			for ( var i = 0; i < length; i ++ ) {

  				influences[ i ] = [ i, 0 ];

  			}

  			influencesList[ geometry.id ] = influences;

  		}

  		var morphTargets = material.morphTargets && geometry.morphAttributes.position;
  		var morphNormals = material.morphNormals && geometry.morphAttributes.normal;

  		// Remove current morphAttributes

  		for ( var i = 0; i < length; i ++ ) {

  			var influence = influences[ i ];

  			if ( influence[ 1 ] !== 0 ) {

  				if ( morphTargets ) geometry.deleteAttribute( 'morphTarget' + i );
  				if ( morphNormals ) geometry.deleteAttribute( 'morphNormal' + i );

  			}

  		}

  		// Collect influences

  		for ( var i = 0; i < length; i ++ ) {

  			var influence = influences[ i ];

  			influence[ 0 ] = i;
  			influence[ 1 ] = objectInfluences[ i ];

  		}

  		influences.sort( absNumericalSort );

  		// Add morphAttributes

  		var morphInfluencesSum = 0;

  		for ( var i = 0; i < 8; i ++ ) {

  			var influence = influences[ i ];

  			if ( influence ) {

  				var index = influence[ 0 ];
  				var value = influence[ 1 ];

  				if ( value ) {

  					if ( morphTargets ) geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );
  					if ( morphNormals ) geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );

  					morphInfluences[ i ] = value;
  					morphInfluencesSum += value;
  					continue;

  				}

  			}

  			morphInfluences[ i ] = 0;

  		}

  		// GLSL shader uses formula baseinfluence * base + sum(target * influence)
  		// This allows us to switch between absolute morphs and relative morphs without changing shader code
  		// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
  		var morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

  		program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
  		program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

  	}

  	return {

  		update: update

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLObjects( gl, geometries, attributes, info ) {

  	var updateMap = new WeakMap();

  	function update( object ) {

  		var frame = info.render.frame;

  		var geometry = object.geometry;
  		var buffergeometry = geometries.get( object, geometry );

  		// Update once per frame

  		if ( updateMap.get( buffergeometry ) !== frame ) {

  			if ( geometry.isGeometry ) {

  				buffergeometry.updateFromObject( object );

  			}

  			geometries.update( buffergeometry );

  			updateMap.set( buffergeometry, frame );

  		}

  		if ( object.isInstancedMesh ) {

  			attributes.update( object.instanceMatrix, 34962 );

  		}

  		return buffergeometry;

  	}

  	function dispose() {

  		updateMap = new WeakMap();

  	}

  	return {

  		update: update,
  		dispose: dispose

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

  	images = images !== undefined ? images : [];
  	mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
  	format = format !== undefined ? format : RGBFormat;

  	Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

  	this.flipY = false;

  }

  CubeTexture.prototype = Object.create( Texture.prototype );
  CubeTexture.prototype.constructor = CubeTexture;

  CubeTexture.prototype.isCubeTexture = true;

  Object.defineProperty( CubeTexture.prototype, 'images', {

  	get: function () {

  		return this.image;

  	},

  	set: function ( value ) {

  		this.image = value;

  	}

  } );

  /**
   * @author Takahiro https://github.com/takahirox
   */

  function DataTexture2DArray( data, width, height, depth ) {

  	Texture.call( this, null );

  	this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };

  	this.magFilter = NearestFilter;
  	this.minFilter = NearestFilter;

  	this.wrapR = ClampToEdgeWrapping;

  	this.generateMipmaps = false;
  	this.flipY = false;

  	this.needsUpdate = true;

  }

  DataTexture2DArray.prototype = Object.create( Texture.prototype );
  DataTexture2DArray.prototype.constructor = DataTexture2DArray;
  DataTexture2DArray.prototype.isDataTexture2DArray = true;

  /**
   * @author Artur Trzesiok
   */

  function DataTexture3D( data, width, height, depth ) {

  	// We're going to add .setXXX() methods for setting properties later.
  	// Users can still set in DataTexture3D directly.
  	//
  	//	var texture = new THREE.DataTexture3D( data, width, height, depth );
  	// 	texture.anisotropy = 16;
  	//
  	// See #14839

  	Texture.call( this, null );

  	this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };

  	this.magFilter = NearestFilter;
  	this.minFilter = NearestFilter;

  	this.wrapR = ClampToEdgeWrapping;

  	this.generateMipmaps = false;
  	this.flipY = false;

  	this.needsUpdate = true;


  }

  DataTexture3D.prototype = Object.create( Texture.prototype );
  DataTexture3D.prototype.constructor = DataTexture3D;
  DataTexture3D.prototype.isDataTexture3D = true;

  /**
   * @author tschw
   * @author Mugen87 / https://github.com/Mugen87
   * @author mrdoob / http://mrdoob.com/
   *
   * Uniforms of a program.
   * Those form a tree structure with a special top-level container for the root,
   * which you get by calling 'new WebGLUniforms( gl, program )'.
   *
   *
   * Properties of inner nodes including the top-level container:
   *
   * .seq - array of nested uniforms
   * .map - nested uniforms by name
   *
   *
   * Methods of all nodes except the top-level container:
   *
   * .setValue( gl, value, [textures] )
   *
   * 		uploads a uniform value(s)
   *  	the 'textures' parameter is needed for sampler uniforms
   *
   *
   * Static methods of the top-level container (textures factorizations):
   *
   * .upload( gl, seq, values, textures )
   *
   * 		sets uniforms in 'seq' to 'values[id].value'
   *
   * .seqWithValue( seq, values ) : filteredSeq
   *
   * 		filters 'seq' entries with corresponding entry in values
   *
   *
   * Methods of the top-level container (textures factorizations):
   *
   * .setValue( gl, name, value, textures )
   *
   * 		sets uniform with  name 'name' to 'value'
   *
   * .setOptional( gl, obj, prop )
   *
   * 		like .set for an optional property of the object
   *
   */

  var emptyTexture = new Texture();
  var emptyTexture2dArray = new DataTexture2DArray();
  var emptyTexture3d = new DataTexture3D();
  var emptyCubeTexture = new CubeTexture();

  // --- Utilities ---

  // Array Caches (provide typed arrays for temporary by size)

  var arrayCacheF32 = [];
  var arrayCacheI32 = [];

  // Float32Array caches used for uploading Matrix uniforms

  var mat4array = new Float32Array( 16 );
  var mat3array = new Float32Array( 9 );
  var mat2array = new Float32Array( 4 );

  // Flattening for arrays of vectors and matrices

  function flatten( array, nBlocks, blockSize ) {

  	var firstElem = array[ 0 ];

  	if ( firstElem <= 0 || firstElem > 0 ) return array;
  	// unoptimized: ! isNaN( firstElem )
  	// see http://jacksondunstan.com/articles/983

  	var n = nBlocks * blockSize,
  		r = arrayCacheF32[ n ];

  	if ( r === undefined ) {

  		r = new Float32Array( n );
  		arrayCacheF32[ n ] = r;

  	}

  	if ( nBlocks !== 0 ) {

  		firstElem.toArray( r, 0 );

  		for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

  			offset += blockSize;
  			array[ i ].toArray( r, offset );

  		}

  	}

  	return r;

  }

  function arraysEqual( a, b ) {

  	if ( a.length !== b.length ) return false;

  	for ( var i = 0, l = a.length; i < l; i ++ ) {

  		if ( a[ i ] !== b[ i ] ) return false;

  	}

  	return true;

  }

  function copyArray( a, b ) {

  	for ( var i = 0, l = b.length; i < l; i ++ ) {

  		a[ i ] = b[ i ];

  	}

  }

  // Texture unit allocation

  function allocTexUnits( textures, n ) {

  	var r = arrayCacheI32[ n ];

  	if ( r === undefined ) {

  		r = new Int32Array( n );
  		arrayCacheI32[ n ] = r;

  	}

  	for ( var i = 0; i !== n; ++ i )
  		r[ i ] = textures.allocateTextureUnit();

  	return r;

  }

  // --- Setters ---

  // Note: Defining these methods externally, because they come in a bunch
  // and this way their names minify.

  // Single scalar

  function setValueV1f( gl, v ) {

  	var cache = this.cache;

  	if ( cache[ 0 ] === v ) return;

  	gl.uniform1f( this.addr, v );

  	cache[ 0 ] = v;

  }

  // Single float vector (from flat array or THREE.VectorN)

  function setValueV2f( gl, v ) {

  	var cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

  			gl.uniform2f( this.addr, v.x, v.y );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;

  		}

  	} else {

  		if ( arraysEqual( cache, v ) ) return;

  		gl.uniform2fv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  function setValueV3f( gl, v ) {

  	var cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

  			gl.uniform3f( this.addr, v.x, v.y, v.z );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;
  			cache[ 2 ] = v.z;

  		}

  	} else if ( v.r !== undefined ) {

  		if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

  			gl.uniform3f( this.addr, v.r, v.g, v.b );

  			cache[ 0 ] = v.r;
  			cache[ 1 ] = v.g;
  			cache[ 2 ] = v.b;

  		}

  	} else {

  		if ( arraysEqual( cache, v ) ) return;

  		gl.uniform3fv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  function setValueV4f( gl, v ) {

  	var cache = this.cache;

  	if ( v.x !== undefined ) {

  		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

  			gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

  			cache[ 0 ] = v.x;
  			cache[ 1 ] = v.y;
  			cache[ 2 ] = v.z;
  			cache[ 3 ] = v.w;

  		}

  	} else {

  		if ( arraysEqual( cache, v ) ) return;

  		gl.uniform4fv( this.addr, v );

  		copyArray( cache, v );

  	}

  }

  // Single matrix (from flat array or MatrixN)

  function setValueM2( gl, v ) {

  	var cache = this.cache;
  	var elements = v.elements;

  	if ( elements === undefined ) {

  		if ( arraysEqual( cache, v ) ) return;

  		gl.uniformMatrix2fv( this.addr, false, v );

  		copyArray( cache, v );

  	} else {

  		if ( arraysEqual( cache, elements ) ) return;

  		mat2array.set( elements );

  		gl.uniformMatrix2fv( this.addr, false, mat2array );

  		copyArray( cache, elements );

  	}

  }

  function setValueM3( gl, v ) {

  	var cache = this.cache;
  	var elements = v.elements;

  	if ( elements === undefined ) {

  		if ( arraysEqual( cache, v ) ) return;

  		gl.uniformMatrix3fv( this.addr, false, v );

  		copyArray( cache, v );

  	} else {

  		if ( arraysEqual( cache, elements ) ) return;

  		mat3array.set( elements );

  		gl.uniformMatrix3fv( this.addr, false, mat3array );

  		copyArray( cache, elements );

  	}

  }

  function setValueM4( gl, v ) {

  	var cache = this.cache;
  	var elements = v.elements;

  	if ( elements === undefined ) {

  		if ( arraysEqual( cache, v ) ) return;

  		gl.uniformMatrix4fv( this.addr, false, v );

  		copyArray( cache, v );

  	} else {

  		if ( arraysEqual( cache, elements ) ) return;

  		mat4array.set( elements );

  		gl.uniformMatrix4fv( this.addr, false, mat4array );

  		copyArray( cache, elements );

  	}

  }

  // Single texture (2D / Cube)

  function setValueT1( gl, v, textures ) {

  	var cache = this.cache;
  	var unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.safeSetTexture2D( v || emptyTexture, unit );

  }

  function setValueT2DArray1( gl, v, textures ) {

  	var cache = this.cache;
  	var unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.setTexture2DArray( v || emptyTexture2dArray, unit );

  }

  function setValueT3D1( gl, v, textures ) {

  	var cache = this.cache;
  	var unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.setTexture3D( v || emptyTexture3d, unit );

  }

  function setValueT6( gl, v, textures ) {

  	var cache = this.cache;
  	var unit = textures.allocateTextureUnit();

  	if ( cache[ 0 ] !== unit ) {

  		gl.uniform1i( this.addr, unit );
  		cache[ 0 ] = unit;

  	}

  	textures.safeSetTextureCube( v || emptyCubeTexture, unit );

  }

  // Integer / Boolean vectors or arrays thereof (always flat arrays)

  function setValueV1i( gl, v ) {

  	var cache = this.cache;

  	if ( cache[ 0 ] === v ) return;

  	gl.uniform1i( this.addr, v );

  	cache[ 0 ] = v;

  }

  function setValueV2i( gl, v ) {

  	var cache = this.cache;

  	if ( arraysEqual( cache, v ) ) return;

  	gl.uniform2iv( this.addr, v );

  	copyArray( cache, v );

  }

  function setValueV3i( gl, v ) {

  	var cache = this.cache;

  	if ( arraysEqual( cache, v ) ) return;

  	gl.uniform3iv( this.addr, v );

  	copyArray( cache, v );

  }

  function setValueV4i( gl, v ) {

  	var cache = this.cache;

  	if ( arraysEqual( cache, v ) ) return;

  	gl.uniform4iv( this.addr, v );

  	copyArray( cache, v );

  }

  // uint

  function setValueV1ui( gl, v ) {

  	var cache = this.cache;

  	if ( cache[ 0 ] === v ) return;

  	gl.uniform1ui( this.addr, v );

  	cache[ 0 ] = v;

  }

  // Helper to pick the right setter for the singular case

  function getSingularSetter( type ) {

  	switch ( type ) {

  		case 0x1406: return setValueV1f; // FLOAT
  		case 0x8b50: return setValueV2f; // _VEC2
  		case 0x8b51: return setValueV3f; // _VEC3
  		case 0x8b52: return setValueV4f; // _VEC4

  		case 0x8b5a: return setValueM2; // _MAT2
  		case 0x8b5b: return setValueM3; // _MAT3
  		case 0x8b5c: return setValueM4; // _MAT4

  		case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
  		case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
  		case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
  		case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4

  		case 0x1405: return setValueV1ui; // UINT

  		case 0x8b5e: // SAMPLER_2D
  		case 0x8d66: // SAMPLER_EXTERNAL_OES
  		case 0x8dca: // INT_SAMPLER_2D
  		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
  		case 0x8b62: // SAMPLER_2D_SHADOW
  			return setValueT1;

  		case 0x8b5f: // SAMPLER_3D
  		case 0x8dcb: // INT_SAMPLER_3D
  		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
  			return setValueT3D1;

  		case 0x8b60: // SAMPLER_CUBE
  		case 0x8dcc: // INT_SAMPLER_CUBE
  		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
  		case 0x8dc5: // SAMPLER_CUBE_SHADOW
  			return setValueT6;

  		case 0x8dc1: // SAMPLER_2D_ARRAY
  		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
  		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
  		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
  			return setValueT2DArray1;

  	}

  }

  // Array of scalars
  function setValueV1fArray( gl, v ) {

  	gl.uniform1fv( this.addr, v );

  }

  // Integer / Boolean vectors or arrays thereof (always flat arrays)
  function setValueV1iArray( gl, v ) {

  	gl.uniform1iv( this.addr, v );

  }

  function setValueV2iArray( gl, v ) {

  	gl.uniform2iv( this.addr, v );

  }

  function setValueV3iArray( gl, v ) {

  	gl.uniform3iv( this.addr, v );

  }

  function setValueV4iArray( gl, v ) {

  	gl.uniform4iv( this.addr, v );

  }


  // Array of vectors (flat or from THREE classes)

  function setValueV2fArray( gl, v ) {

  	var data = flatten( v, this.size, 2 );

  	gl.uniform2fv( this.addr, data );

  }

  function setValueV3fArray( gl, v ) {

  	var data = flatten( v, this.size, 3 );

  	gl.uniform3fv( this.addr, data );

  }

  function setValueV4fArray( gl, v ) {

  	var data = flatten( v, this.size, 4 );

  	gl.uniform4fv( this.addr, data );

  }

  // Array of matrices (flat or from THREE clases)

  function setValueM2Array( gl, v ) {

  	var data = flatten( v, this.size, 4 );

  	gl.uniformMatrix2fv( this.addr, false, data );

  }

  function setValueM3Array( gl, v ) {

  	var data = flatten( v, this.size, 9 );

  	gl.uniformMatrix3fv( this.addr, false, data );

  }

  function setValueM4Array( gl, v ) {

  	var data = flatten( v, this.size, 16 );

  	gl.uniformMatrix4fv( this.addr, false, data );

  }

  // Array of textures (2D / Cube)

  function setValueT1Array( gl, v, textures ) {

  	var n = v.length;

  	var units = allocTexUnits( textures, n );

  	gl.uniform1iv( this.addr, units );

  	for ( var i = 0; i !== n; ++ i ) {

  		textures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );

  	}

  }

  function setValueT6Array( gl, v, textures ) {

  	var n = v.length;

  	var units = allocTexUnits( textures, n );

  	gl.uniform1iv( this.addr, units );

  	for ( var i = 0; i !== n; ++ i ) {

  		textures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

  	}

  }

  // Helper to pick the right setter for a pure (bottom-level) array

  function getPureArraySetter( type ) {

  	switch ( type ) {

  		case 0x1406: return setValueV1fArray; // FLOAT
  		case 0x8b50: return setValueV2fArray; // _VEC2
  		case 0x8b51: return setValueV3fArray; // _VEC3
  		case 0x8b52: return setValueV4fArray; // _VEC4

  		case 0x8b5a: return setValueM2Array; // _MAT2
  		case 0x8b5b: return setValueM3Array; // _MAT3
  		case 0x8b5c: return setValueM4Array; // _MAT4

  		case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
  		case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
  		case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
  		case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4

  		case 0x8b5e: // SAMPLER_2D
  		case 0x8d66: // SAMPLER_EXTERNAL_OES
  		case 0x8dca: // INT_SAMPLER_2D
  		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
  		case 0x8b62: // SAMPLER_2D_SHADOW
  			return setValueT1Array;

  		case 0x8b60: // SAMPLER_CUBE
  		case 0x8dcc: // INT_SAMPLER_CUBE
  		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
  		case 0x8dc5: // SAMPLER_CUBE_SHADOW
  			return setValueT6Array;

  	}

  }

  // --- Uniform Classes ---

  function SingleUniform( id, activeInfo, addr ) {

  	this.id = id;
  	this.addr = addr;
  	this.cache = [];
  	this.setValue = getSingularSetter( activeInfo.type );

  	// this.path = activeInfo.name; // DEBUG

  }

  function PureArrayUniform( id, activeInfo, addr ) {

  	this.id = id;
  	this.addr = addr;
  	this.cache = [];
  	this.size = activeInfo.size;
  	this.setValue = getPureArraySetter( activeInfo.type );

  	// this.path = activeInfo.name; // DEBUG

  }

  PureArrayUniform.prototype.updateCache = function ( data ) {

  	var cache = this.cache;

  	if ( data instanceof Float32Array && cache.length !== data.length ) {

  		this.cache = new Float32Array( data.length );

  	}

  	copyArray( cache, data );

  };

  function StructuredUniform( id ) {

  	this.id = id;

  	this.seq = [];
  	this.map = {};

  }

  StructuredUniform.prototype.setValue = function ( gl, value, textures ) {

  	var seq = this.seq;

  	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

  		var u = seq[ i ];
  		u.setValue( gl, value[ u.id ], textures );

  	}

  };

  // --- Top-level ---

  // Parser - builds up the property tree from the path strings

  var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

  // extracts
  // 	- the identifier (member name or array index)
  //  - followed by an optional right bracket (found when array index)
  //  - followed by an optional left bracket or dot (type of subscript)
  //
  // Note: These portions can be read in a non-overlapping fashion and
  // allow straightforward parsing of the hierarchy that WebGL encodes
  // in the uniform names.

  function addUniform( container, uniformObject ) {

  	container.seq.push( uniformObject );
  	container.map[ uniformObject.id ] = uniformObject;

  }

  function parseUniform( activeInfo, addr, container ) {

  	var path = activeInfo.name,
  		pathLength = path.length;

  	// reset RegExp object, because of the early exit of a previous run
  	RePathPart.lastIndex = 0;

  	while ( true ) {

  		var match = RePathPart.exec( path ),
  			matchEnd = RePathPart.lastIndex,

  			id = match[ 1 ],
  			idIsIndex = match[ 2 ] === ']',
  			subscript = match[ 3 ];

  		if ( idIsIndex ) id = id | 0; // convert to integer

  		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

  			// bare name or "pure" bottom-level array "[0]" suffix

  			addUniform( container, subscript === undefined ?
  				new SingleUniform( id, activeInfo, addr ) :
  				new PureArrayUniform( id, activeInfo, addr ) );

  			break;

  		} else {

  			// step into inner node / create it in case it doesn't exist

  			var map = container.map, next = map[ id ];

  			if ( next === undefined ) {

  				next = new StructuredUniform( id );
  				addUniform( container, next );

  			}

  			container = next;

  		}

  	}

  }

  // Root Container

  function WebGLUniforms( gl, program ) {

  	this.seq = [];
  	this.map = {};

  	var n = gl.getProgramParameter( program, 35718 );

  	for ( var i = 0; i < n; ++ i ) {

  		var info = gl.getActiveUniform( program, i ),
  			addr = gl.getUniformLocation( program, info.name );

  		parseUniform( info, addr, this );

  	}

  }

  WebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {

  	var u = this.map[ name ];

  	if ( u !== undefined ) u.setValue( gl, value, textures );

  };

  WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

  	var v = object[ name ];

  	if ( v !== undefined ) this.setValue( gl, name, v );

  };


  // Static interface

  WebGLUniforms.upload = function ( gl, seq, values, textures ) {

  	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

  		var u = seq[ i ],
  			v = values[ u.id ];

  		if ( v.needsUpdate !== false ) {

  			// note: always updating when .needsUpdate is undefined
  			u.setValue( gl, v.value, textures );

  		}

  	}

  };

  WebGLUniforms.seqWithValue = function ( seq, values ) {

  	var r = [];

  	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

  		var u = seq[ i ];
  		if ( u.id in values ) r.push( u );

  	}

  	return r;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLShader( gl, type, string ) {

  	var shader = gl.createShader( type );

  	gl.shaderSource( shader, string );
  	gl.compileShader( shader );

  	return shader;

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var programIdCount = 0;

  function addLineNumbers( string ) {

  	var lines = string.split( '\n' );

  	for ( var i = 0; i < lines.length; i ++ ) {

  		lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

  	}

  	return lines.join( '\n' );

  }

  function getEncodingComponents( encoding ) {

  	switch ( encoding ) {

  		case LinearEncoding:
  			return [ 'Linear', '( value )' ];
  		case sRGBEncoding:
  			return [ 'sRGB', '( value )' ];
  		case RGBEEncoding:
  			return [ 'RGBE', '( value )' ];
  		case RGBM7Encoding:
  			return [ 'RGBM', '( value, 7.0 )' ];
  		case RGBM16Encoding:
  			return [ 'RGBM', '( value, 16.0 )' ];
  		case RGBDEncoding:
  			return [ 'RGBD', '( value, 256.0 )' ];
  		case GammaEncoding:
  			return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
  		case LogLuvEncoding:
  			return [ 'LogLuv', '( value )' ];
  		default:
  			throw new Error( 'unsupported encoding: ' + encoding );

  	}

  }

  function getShaderErrors( gl, shader, type ) {

  	var status = gl.getShaderParameter( shader, 35713 );
  	var log = gl.getShaderInfoLog( shader ).trim();

  	if ( status && log === '' ) return '';

  	// --enable-privileged-webgl-extension
  	// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

  	var source = gl.getShaderSource( shader );

  	return 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\n' + log + addLineNumbers( source );

  }

  function getTexelDecodingFunction( functionName, encoding ) {

  	var components = getEncodingComponents( encoding );
  	return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';

  }

  function getTexelEncodingFunction( functionName, encoding ) {

  	var components = getEncodingComponents( encoding );
  	return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';

  }

  function getToneMappingFunction( functionName, toneMapping ) {

  	var toneMappingName;

  	switch ( toneMapping ) {

  		case LinearToneMapping:
  			toneMappingName = 'Linear';
  			break;

  		case ReinhardToneMapping:
  			toneMappingName = 'Reinhard';
  			break;

  		case Uncharted2ToneMapping:
  			toneMappingName = 'Uncharted2';
  			break;

  		case CineonToneMapping:
  			toneMappingName = 'OptimizedCineon';
  			break;

  		case ACESFilmicToneMapping:
  			toneMappingName = 'ACESFilmic';
  			break;

  		default:
  			throw new Error( 'unsupported toneMapping: ' + toneMapping );

  	}

  	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

  }

  function generateExtensions( parameters ) {

  	var chunks = [
  		( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',
  		( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
  		( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',
  		( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
  	];

  	return chunks.filter( filterEmptyLine ).join( '\n' );

  }

  function generateDefines( defines ) {

  	var chunks = [];

  	for ( var name in defines ) {

  		var value = defines[ name ];

  		if ( value === false ) continue;

  		chunks.push( '#define ' + name + ' ' + value );

  	}

  	return chunks.join( '\n' );

  }

  function fetchAttributeLocations( gl, program ) {

  	var attributes = {};

  	var n = gl.getProgramParameter( program, 35721 );

  	for ( var i = 0; i < n; i ++ ) {

  		var info = gl.getActiveAttrib( program, i );
  		var name = info.name;

  		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

  		attributes[ name ] = gl.getAttribLocation( program, name );

  	}

  	return attributes;

  }

  function filterEmptyLine( string ) {

  	return string !== '';

  }

  function replaceLightNums( string, parameters ) {

  	return string
  		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
  		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
  		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
  		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
  		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
  		.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
  		.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
  		.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );

  }

  function replaceClippingPlaneNums( string, parameters ) {

  	return string
  		.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
  		.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

  }

  // Resolve Includes

  var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

  function resolveIncludes( string ) {

  	return string.replace( includePattern, includeReplacer );

  }

  function includeReplacer( match, include ) {

  	var string = ShaderChunk[ include ];

  	if ( string === undefined ) {

  		throw new Error( 'Can not resolve #include <' + include + '>' );

  	}

  	return resolveIncludes( string );

  }

  // Unroll Loops

  var deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
  var unrollLoopPattern = /#pragma unroll_loop_start[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}[\s]+?#pragma unroll_loop_end/g;

  function unrollLoops( string ) {

  	return string
  		.replace( unrollLoopPattern, loopReplacer )
  		.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );

  }

  function deprecatedLoopReplacer( match, start, end, snippet ) {

  	console.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );
  	return loopReplacer( match, start, end, snippet );

  }

  function loopReplacer( match, start, end, snippet ) {

  	var string = '';

  	for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

  		string += snippet
  			.replace( /\[ i \]/g, '[ ' + i + ' ]' )
  			.replace( /UNROLLED_LOOP_INDEX/g, i );

  	}

  	return string;

  }

  //

  function generatePrecision( parameters ) {

  	var precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";

  	if ( parameters.precision === "highp" ) {

  		precisionstring += "\n#define HIGH_PRECISION";

  	} else if ( parameters.precision === "mediump" ) {

  		precisionstring += "\n#define MEDIUM_PRECISION";

  	} else if ( parameters.precision === "lowp" ) {

  		precisionstring += "\n#define LOW_PRECISION";

  	}

  	return precisionstring;

  }

  function generateShadowMapTypeDefine( parameters ) {

  	var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

  	if ( parameters.shadowMapType === PCFShadowMap ) {

  		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

  	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

  		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

  	} else if ( parameters.shadowMapType === VSMShadowMap ) {

  		shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';

  	}

  	return shadowMapTypeDefine;

  }

  function generateEnvMapTypeDefine( parameters ) {

  	var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

  	if ( parameters.envMap ) {

  		switch ( parameters.envMapMode ) {

  			case CubeReflectionMapping:
  			case CubeRefractionMapping:
  				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
  				break;

  			case CubeUVReflectionMapping:
  			case CubeUVRefractionMapping:
  				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
  				break;

  			case EquirectangularReflectionMapping:
  			case EquirectangularRefractionMapping:
  				envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
  				break;

  			case SphericalReflectionMapping:
  				envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
  				break;

  		}

  	}

  	return envMapTypeDefine;

  }

  function generateEnvMapModeDefine( parameters ) {

  	var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

  	if ( parameters.envMap ) {

  		switch ( parameters.envMapMode ) {

  			case CubeRefractionMapping:
  			case EquirectangularRefractionMapping:
  				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
  				break;

  		}

  	}

  	return envMapModeDefine;

  }

  function generateEnvMapBlendingDefine( parameters ) {

  	var envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

  	if ( parameters.envMap ) {

  		switch ( parameters.combine ) {

  			case MultiplyOperation:
  				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
  				break;

  			case MixOperation:
  				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
  				break;

  			case AddOperation:
  				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
  				break;

  		}

  	}

  	return envMapBlendingDefine;

  }

  function WebGLProgram( renderer, cacheKey, parameters ) {

  	var gl = renderer.getContext();

  	var defines = parameters.defines;

  	var vertexShader = parameters.vertexShader;
  	var fragmentShader = parameters.fragmentShader;
  	var shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
  	var envMapTypeDefine = generateEnvMapTypeDefine( parameters );
  	var envMapModeDefine = generateEnvMapModeDefine( parameters );
  	var envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );


  	var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

  	var customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );

  	var customDefines = generateDefines( defines );

  	var program = gl.createProgram();

  	var prefixVertex, prefixFragment;

  	if ( parameters.isRawShaderMaterial ) {

  		prefixVertex = [

  			customDefines

  		].filter( filterEmptyLine ).join( '\n' );

  		if ( prefixVertex.length > 0 ) {

  			prefixVertex += '\n';

  		}

  		prefixFragment = [

  			customExtensions,
  			customDefines

  		].filter( filterEmptyLine ).join( '\n' );

  		if ( prefixFragment.length > 0 ) {

  			prefixFragment += '\n';

  		}

  	} else {

  		prefixVertex = [

  			generatePrecision( parameters ),

  			'#define SHADER_NAME ' + parameters.shaderName,

  			customDefines,

  			parameters.instancing ? '#define USE_INSTANCING' : '',
  			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

  			'#define GAMMA_FACTOR ' + gammaFactorDefine,

  			'#define MAX_BONES ' + parameters.maxBones,
  			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
  			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

  			parameters.map ? '#define USE_MAP' : '',
  			parameters.envMap ? '#define USE_ENVMAP' : '',
  			parameters.envMap ? '#define ' + envMapModeDefine : '',
  			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
  			parameters.aoMap ? '#define USE_AOMAP' : '',
  			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
  			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
  			parameters.normalMap ? '#define USE_NORMALMAP' : '',
  			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
  			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',

  			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
  			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
  			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
  			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
  			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
  			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
  			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
  			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

  			parameters.vertexTangents ? '#define USE_TANGENT' : '',
  			parameters.vertexColors ? '#define USE_COLOR' : '',
  			parameters.vertexUvs ? '#define USE_UV' : '',
  			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

  			parameters.flatShading ? '#define FLAT_SHADED' : '',

  			parameters.skinning ? '#define USE_SKINNING' : '',
  			parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

  			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
  			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
  			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
  			parameters.flipSided ? '#define FLIP_SIDED' : '',

  			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
  			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

  			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

  			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
  			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

  			'uniform mat4 modelMatrix;',
  			'uniform mat4 modelViewMatrix;',
  			'uniform mat4 projectionMatrix;',
  			'uniform mat4 viewMatrix;',
  			'uniform mat3 normalMatrix;',
  			'uniform vec3 cameraPosition;',
  			'uniform bool isOrthographic;',

  			'#ifdef USE_INSTANCING',

  			' attribute mat4 instanceMatrix;',

  			'#endif',

  			'attribute vec3 position;',
  			'attribute vec3 normal;',
  			'attribute vec2 uv;',

  			'#ifdef USE_TANGENT',

  			'	attribute vec4 tangent;',

  			'#endif',

  			'#ifdef USE_COLOR',

  			'	attribute vec3 color;',

  			'#endif',

  			'#ifdef USE_MORPHTARGETS',

  			'	attribute vec3 morphTarget0;',
  			'	attribute vec3 morphTarget1;',
  			'	attribute vec3 morphTarget2;',
  			'	attribute vec3 morphTarget3;',

  			'	#ifdef USE_MORPHNORMALS',

  			'		attribute vec3 morphNormal0;',
  			'		attribute vec3 morphNormal1;',
  			'		attribute vec3 morphNormal2;',
  			'		attribute vec3 morphNormal3;',

  			'	#else',

  			'		attribute vec3 morphTarget4;',
  			'		attribute vec3 morphTarget5;',
  			'		attribute vec3 morphTarget6;',
  			'		attribute vec3 morphTarget7;',

  			'	#endif',

  			'#endif',

  			'#ifdef USE_SKINNING',

  			'	attribute vec4 skinIndex;',
  			'	attribute vec4 skinWeight;',

  			'#endif',

  			'\n'

  		].filter( filterEmptyLine ).join( '\n' );

  		prefixFragment = [

  			customExtensions,

  			generatePrecision( parameters ),

  			'#define SHADER_NAME ' + parameters.shaderName,

  			customDefines,

  			parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer

  			'#define GAMMA_FACTOR ' + gammaFactorDefine,

  			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
  			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

  			parameters.map ? '#define USE_MAP' : '',
  			parameters.matcap ? '#define USE_MATCAP' : '',
  			parameters.envMap ? '#define USE_ENVMAP' : '',
  			parameters.envMap ? '#define ' + envMapTypeDefine : '',
  			parameters.envMap ? '#define ' + envMapModeDefine : '',
  			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
  			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
  			parameters.aoMap ? '#define USE_AOMAP' : '',
  			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
  			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
  			parameters.normalMap ? '#define USE_NORMALMAP' : '',
  			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
  			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',
  			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
  			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
  			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
  			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
  			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
  			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
  			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

  			parameters.sheen ? '#define USE_SHEEN' : '',

  			parameters.vertexTangents ? '#define USE_TANGENT' : '',
  			parameters.vertexColors ? '#define USE_COLOR' : '',
  			parameters.vertexUvs ? '#define USE_UV' : '',
  			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

  			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

  			parameters.flatShading ? '#define FLAT_SHADED' : '',

  			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
  			parameters.flipSided ? '#define FLIP_SIDED' : '',

  			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
  			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

  			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

  			parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',

  			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
  			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

  			( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',

  			'uniform mat4 viewMatrix;',
  			'uniform vec3 cameraPosition;',
  			'uniform bool isOrthographic;',

  			( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
  			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
  			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

  			parameters.dithering ? '#define DITHERING' : '',

  			( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding || parameters.lightMapEncoding ) ?
  				ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
  			parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
  			parameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',
  			parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
  			parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
  			parameters.lightMapEncoding ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',
  			parameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',

  			parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',

  			'\n'

  		].filter( filterEmptyLine ).join( '\n' );

  	}

  	vertexShader = resolveIncludes( vertexShader );
  	vertexShader = replaceLightNums( vertexShader, parameters );
  	vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

  	fragmentShader = resolveIncludes( fragmentShader );
  	fragmentShader = replaceLightNums( fragmentShader, parameters );
  	fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

  	vertexShader = unrollLoops( vertexShader );
  	fragmentShader = unrollLoops( fragmentShader );

  	if ( parameters.isWebGL2 && ! parameters.isRawShaderMaterial ) {

  		var isGLSL3ShaderMaterial = false;

  		var versionRegex = /^\s*#version\s+300\s+es\s*\n/;

  		if ( parameters.isShaderMaterial &&
  			vertexShader.match( versionRegex ) !== null &&
  			fragmentShader.match( versionRegex ) !== null ) {

  			isGLSL3ShaderMaterial = true;

  			vertexShader = vertexShader.replace( versionRegex, '' );
  			fragmentShader = fragmentShader.replace( versionRegex, '' );

  		}

  		// GLSL 3.0 conversion

  		prefixVertex = [
  			'#version 300 es\n',
  			'#define attribute in',
  			'#define varying out',
  			'#define texture2D texture'
  		].join( '\n' ) + '\n' + prefixVertex;

  		prefixFragment = [
  			'#version 300 es\n',
  			'#define varying in',
  			isGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',
  			isGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',
  			'#define gl_FragDepthEXT gl_FragDepth',
  			'#define texture2D texture',
  			'#define textureCube texture',
  			'#define texture2DProj textureProj',
  			'#define texture2DLodEXT textureLod',
  			'#define texture2DProjLodEXT textureProjLod',
  			'#define textureCubeLodEXT textureLod',
  			'#define texture2DGradEXT textureGrad',
  			'#define texture2DProjGradEXT textureProjGrad',
  			'#define textureCubeGradEXT textureGrad'
  		].join( '\n' ) + '\n' + prefixFragment;

  	}

  	var vertexGlsl = prefixVertex + vertexShader;
  	var fragmentGlsl = prefixFragment + fragmentShader;

  	// console.log( '*VERTEX*', vertexGlsl );
  	// console.log( '*FRAGMENT*', fragmentGlsl );

  	var glVertexShader = WebGLShader( gl, 35633, vertexGlsl );
  	var glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );

  	gl.attachShader( program, glVertexShader );
  	gl.attachShader( program, glFragmentShader );

  	// Force a particular attribute to index 0.

  	if ( parameters.index0AttributeName !== undefined ) {

  		gl.bindAttribLocation( program, 0, parameters.index0AttributeName );

  	} else if ( parameters.morphTargets === true ) {

  		// programs with morphTargets displace position out of attribute 0
  		gl.bindAttribLocation( program, 0, 'position' );

  	}

  	gl.linkProgram( program );

  	// check for link errors
  	if ( renderer.debug.checkShaderErrors ) {

  		var programLog = gl.getProgramInfoLog( program ).trim();
  		var vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
  		var fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

  		var runnable = true;
  		var haveDiagnostics = true;

  		if ( gl.getProgramParameter( program, 35714 ) === false ) {

  			runnable = false;

  			var vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
  			var fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );

  			console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );

  		} else if ( programLog !== '' ) {

  			console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

  		} else if ( vertexLog === '' || fragmentLog === '' ) {

  			haveDiagnostics = false;

  		}

  		if ( haveDiagnostics ) {

  			this.diagnostics = {

  				runnable: runnable,

  				programLog: programLog,

  				vertexShader: {

  					log: vertexLog,
  					prefix: prefixVertex

  				},

  				fragmentShader: {

  					log: fragmentLog,
  					prefix: prefixFragment

  				}

  			};

  		}

  	}

  	// clean up

  	gl.detachShader( program, glVertexShader );
  	gl.detachShader( program, glFragmentShader );

  	gl.deleteShader( glVertexShader );
  	gl.deleteShader( glFragmentShader );

  	// set up caching for uniform locations

  	var cachedUniforms;

  	this.getUniforms = function () {

  		if ( cachedUniforms === undefined ) {

  			cachedUniforms = new WebGLUniforms( gl, program );

  		}

  		return cachedUniforms;

  	};

  	// set up caching for attribute locations

  	var cachedAttributes;

  	this.getAttributes = function () {

  		if ( cachedAttributes === undefined ) {

  			cachedAttributes = fetchAttributeLocations( gl, program );

  		}

  		return cachedAttributes;

  	};

  	// free resource

  	this.destroy = function () {

  		gl.deleteProgram( program );
  		this.program = undefined;

  	};

  	//

  	this.name = parameters.shaderName;
  	this.id = programIdCount ++;
  	this.cacheKey = cacheKey;
  	this.usedTimes = 1;
  	this.program = program;
  	this.vertexShader = glVertexShader;
  	this.fragmentShader = glFragmentShader;

  	return this;

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLPrograms( renderer, extensions, capabilities ) {

  	var programs = [];

  	var isWebGL2 = capabilities.isWebGL2;
  	var logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
  	var floatVertexTextures = capabilities.floatVertexTextures;
  	var precision = capabilities.precision;
  	var maxVertexUniforms = capabilities.maxVertexUniforms;
  	var vertexTextures = capabilities.vertexTextures;

  	var shaderIDs = {
  		MeshDepthMaterial: 'depth',
  		MeshDistanceMaterial: 'distanceRGBA',
  		MeshNormalMaterial: 'normal',
  		MeshBasicMaterial: 'basic',
  		MeshLambertMaterial: 'lambert',
  		MeshPhongMaterial: 'phong',
  		MeshToonMaterial: 'toon',
  		MeshStandardMaterial: 'physical',
  		MeshPhysicalMaterial: 'physical',
  		MeshMatcapMaterial: 'matcap',
  		LineBasicMaterial: 'basic',
  		LineDashedMaterial: 'dashed',
  		PointsMaterial: 'points',
  		ShadowMaterial: 'shadow',
  		SpriteMaterial: 'sprite'
  	};

  	var parameterNames = [
  		"precision", "isWebGL2", "supportsVertexTextures", "outputEncoding", "instancing",
  		"map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "envMapCubeUV",
  		"lightMap", "lightMapEncoding", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "tangentSpaceNormalMap", "clearcoatMap", "clearcoatRoughnessMap", "clearcoatNormalMap", "displacementMap", "specularMap",
  		"roughnessMap", "metalnessMap", "gradientMap",
  		"alphaMap", "combine", "vertexColors", "vertexTangents", "vertexUvs", "uvsVertexOnly", "fog", "useFog", "fogExp2",
  		"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
  		"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
  		"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
  		"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
  		"numDirLightShadows", "numPointLightShadows", "numSpotLightShadows",
  		"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
  		"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering",
  		"sheen"
  	];

  	function getShaderObject( material, shaderID ) {

  		var shaderobject;

  		if ( shaderID ) {

  			var shader = ShaderLib[ shaderID ];

  			shaderobject = {
  				name: material.type,
  				uniforms: UniformsUtils.clone( shader.uniforms ),
  				vertexShader: shader.vertexShader,
  				fragmentShader: shader.fragmentShader
  			};

  		} else {

  			shaderobject = {
  				name: material.type,
  				uniforms: material.uniforms,
  				vertexShader: material.vertexShader,
  				fragmentShader: material.fragmentShader
  			};

  		}

  		return shaderobject;

  	}

  	function allocateBones( object ) {

  		var skeleton = object.skeleton;
  		var bones = skeleton.bones;

  		if ( floatVertexTextures ) {

  			return 1024;

  		} else {

  			// default for when object is not specified
  			// ( for example when prebuilding shader to be used with multiple objects )
  			//
  			//  - leave some extra space for other uniforms
  			//  - limit here is ANGLE's 254 max uniform vectors
  			//    (up to 54 should be safe)

  			var nVertexUniforms = maxVertexUniforms;
  			var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

  			var maxBones = Math.min( nVertexMatrices, bones.length );

  			if ( maxBones < bones.length ) {

  				console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
  				return 0;

  			}

  			return maxBones;

  		}

  	}

  	function getTextureEncodingFromMap( map ) {

  		var encoding;

  		if ( ! map ) {

  			encoding = LinearEncoding;

  		} else if ( map.isTexture ) {

  			encoding = map.encoding;

  		} else if ( map.isWebGLRenderTarget ) {

  			console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
  			encoding = map.texture.encoding;

  		}

  		return encoding;

  	}

  	this.getParameters = function ( material, lights, shadows, scene, nClipPlanes, nClipIntersection, object ) {

  		var fog = scene.fog;
  		var environment = material.isMeshStandardMaterial ? scene.environment : null;

  		var envMap = material.envMap || environment;

  		var shaderID = shaderIDs[ material.type ];

  		// heuristics to create shader parameters according to lights in the scene
  		// (not to blow over maxLights budget)

  		var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;

  		if ( material.precision !== null ) {

  			precision = capabilities.getMaxPrecision( material.precision );

  			if ( precision !== material.precision ) {

  				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

  			}

  		}

  		var shaderobject = getShaderObject( material, shaderID );
  		material.onBeforeCompile( shaderobject, renderer );

  		var currentRenderTarget = renderer.getRenderTarget();

  		var parameters = {

  			isWebGL2: isWebGL2,

  			shaderID: shaderID,
  			shaderName: shaderobject.name,

  			uniforms: shaderobject.uniforms,
  			vertexShader: shaderobject.vertexShader,
  			fragmentShader: shaderobject.fragmentShader,
  			defines: material.defines,

  			isRawShaderMaterial: material.isRawShaderMaterial,
  			isShaderMaterial: material.isShaderMaterial,

  			precision: precision,

  			instancing: object.isInstancedMesh === true,

  			supportsVertexTextures: vertexTextures,
  			outputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,
  			map: !! material.map,
  			mapEncoding: getTextureEncodingFromMap( material.map ),
  			matcap: !! material.matcap,
  			matcapEncoding: getTextureEncodingFromMap( material.matcap ),
  			envMap: !! envMap,
  			envMapMode: envMap && envMap.mapping,
  			envMapEncoding: getTextureEncodingFromMap( envMap ),
  			envMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),
  			lightMap: !! material.lightMap,
  			lightMapEncoding: getTextureEncodingFromMap( material.lightMap ),
  			aoMap: !! material.aoMap,
  			emissiveMap: !! material.emissiveMap,
  			emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),
  			bumpMap: !! material.bumpMap,
  			normalMap: !! material.normalMap,
  			objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
  			tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
  			clearcoatMap: !! material.clearcoatMap,
  			clearcoatRoughnessMap: !! material.clearcoatRoughnessMap,
  			clearcoatNormalMap: !! material.clearcoatNormalMap,
  			displacementMap: !! material.displacementMap,
  			roughnessMap: !! material.roughnessMap,
  			metalnessMap: !! material.metalnessMap,
  			specularMap: !! material.specularMap,
  			alphaMap: !! material.alphaMap,

  			gradientMap: !! material.gradientMap,

  			sheen: !! material.sheen,

  			combine: material.combine,

  			vertexTangents: ( material.normalMap && material.vertexTangents ),
  			vertexColors: material.vertexColors,
  			vertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,
  			uvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,

  			fog: !! fog,
  			useFog: material.fog,
  			fogExp2: ( fog && fog.isFogExp2 ),

  			flatShading: material.flatShading,

  			sizeAttenuation: material.sizeAttenuation,
  			logarithmicDepthBuffer: logarithmicDepthBuffer,

  			skinning: material.skinning && maxBones > 0,
  			maxBones: maxBones,
  			useVertexTexture: floatVertexTextures,

  			morphTargets: material.morphTargets,
  			morphNormals: material.morphNormals,
  			maxMorphTargets: renderer.maxMorphTargets,
  			maxMorphNormals: renderer.maxMorphNormals,

  			numDirLights: lights.directional.length,
  			numPointLights: lights.point.length,
  			numSpotLights: lights.spot.length,
  			numRectAreaLights: lights.rectArea.length,
  			numHemiLights: lights.hemi.length,

  			numDirLightShadows: lights.directionalShadowMap.length,
  			numPointLightShadows: lights.pointShadowMap.length,
  			numSpotLightShadows: lights.spotShadowMap.length,

  			numClippingPlanes: nClipPlanes,
  			numClipIntersection: nClipIntersection,

  			dithering: material.dithering,

  			shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
  			shadowMapType: renderer.shadowMap.type,

  			toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
  			physicallyCorrectLights: renderer.physicallyCorrectLights,

  			premultipliedAlpha: material.premultipliedAlpha,

  			alphaTest: material.alphaTest,
  			doubleSided: material.side === DoubleSide,
  			flipSided: material.side === BackSide,

  			depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,

  			index0AttributeName: material.index0AttributeName,

  			extensionDerivatives: material.extensions && material.extensions.derivatives,
  			extensionFragDepth: material.extensions && material.extensions.fragDepth,
  			extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
  			extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,

  			rendererExtensionFragDepth: isWebGL2 || extensions.get( 'EXT_frag_depth' ) !== null,
  			rendererExtensionDrawBuffers: isWebGL2 || extensions.get( 'WEBGL_draw_buffers' ) !== null,
  			rendererExtensionShaderTextureLod: isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) !== null,

  			onBeforeCompile: material.onBeforeCompile

  		};

  		return parameters;

  	};

  	this.getProgramCacheKey = function ( parameters ) {

  		var array = [];

  		if ( parameters.shaderID ) {

  			array.push( parameters.shaderID );

  		} else {

  			array.push( parameters.fragmentShader );
  			array.push( parameters.vertexShader );

  		}

  		if ( parameters.defines !== undefined ) {

  			for ( var name in parameters.defines ) {

  				array.push( name );
  				array.push( parameters.defines[ name ] );

  			}

  		}

  		if ( parameters.isRawShaderMaterial === undefined ) {

  			for ( var i = 0; i < parameterNames.length; i ++ ) {

  				array.push( parameters[ parameterNames[ i ] ] );

  			}

  			array.push( renderer.outputEncoding );
  			array.push( renderer.gammaFactor );

  		}

  		array.push( parameters.onBeforeCompile.toString() );

  		return array.join();

  	};

  	this.acquireProgram = function ( parameters, cacheKey ) {

  		var program;

  		// Check if code has been already compiled
  		for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

  			var preexistingProgram = programs[ p ];

  			if ( preexistingProgram.cacheKey === cacheKey ) {

  				program = preexistingProgram;
  				++ program.usedTimes;

  				break;

  			}

  		}

  		if ( program === undefined ) {

  			program = new WebGLProgram( renderer, cacheKey, parameters );
  			programs.push( program );

  		}

  		return program;

  	};

  	this.releaseProgram = function ( program ) {

  		if ( -- program.usedTimes === 0 ) {

  			// Remove from unordered set
  			var i = programs.indexOf( program );
  			programs[ i ] = programs[ programs.length - 1 ];
  			programs.pop();

  			// Free WebGL resources
  			program.destroy();

  		}

  	};

  	// Exposed for resource monitoring & error feedback via renderer.info:
  	this.programs = programs;

  }

  /**
   * @author fordacious / fordacious.github.io
   */

  function WebGLProperties() {

  	var properties = new WeakMap();

  	function get( object ) {

  		var map = properties.get( object );

  		if ( map === undefined ) {

  			map = {};
  			properties.set( object, map );

  		}

  		return map;

  	}

  	function remove( object ) {

  		properties.delete( object );

  	}

  	function update( object, key, value ) {

  		properties.get( object )[ key ] = value;

  	}

  	function dispose() {

  		properties = new WeakMap();

  	}

  	return {
  		get: get,
  		remove: remove,
  		update: update,
  		dispose: dispose
  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function painterSortStable( a, b ) {

  	if ( a.groupOrder !== b.groupOrder ) {

  		return a.groupOrder - b.groupOrder;

  	} else if ( a.renderOrder !== b.renderOrder ) {

  		return a.renderOrder - b.renderOrder;

  	} else if ( a.program !== b.program ) {

  		return a.program.id - b.program.id;

  	} else if ( a.material.id !== b.material.id ) {

  		return a.material.id - b.material.id;

  	} else if ( a.z !== b.z ) {

  		return a.z - b.z;

  	} else {

  		return a.id - b.id;

  	}

  }

  function reversePainterSortStable( a, b ) {

  	if ( a.groupOrder !== b.groupOrder ) {

  		return a.groupOrder - b.groupOrder;

  	} else if ( a.renderOrder !== b.renderOrder ) {

  		return a.renderOrder - b.renderOrder;

  	} else if ( a.z !== b.z ) {

  		return b.z - a.z;

  	} else {

  		return a.id - b.id;

  	}

  }


  function WebGLRenderList() {

  	var renderItems = [];
  	var renderItemsIndex = 0;

  	var opaque = [];
  	var transparent = [];

  	var defaultProgram = { id: - 1 };

  	function init() {

  		renderItemsIndex = 0;

  		opaque.length = 0;
  		transparent.length = 0;

  	}

  	function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

  		var renderItem = renderItems[ renderItemsIndex ];

  		if ( renderItem === undefined ) {

  			renderItem = {
  				id: object.id,
  				object: object,
  				geometry: geometry,
  				material: material,
  				program: material.program || defaultProgram,
  				groupOrder: groupOrder,
  				renderOrder: object.renderOrder,
  				z: z,
  				group: group
  			};

  			renderItems[ renderItemsIndex ] = renderItem;

  		} else {

  			renderItem.id = object.id;
  			renderItem.object = object;
  			renderItem.geometry = geometry;
  			renderItem.material = material;
  			renderItem.program = material.program || defaultProgram;
  			renderItem.groupOrder = groupOrder;
  			renderItem.renderOrder = object.renderOrder;
  			renderItem.z = z;
  			renderItem.group = group;

  		}

  		renderItemsIndex ++;

  		return renderItem;

  	}

  	function push( object, geometry, material, groupOrder, z, group ) {

  		var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

  		( material.transparent === true ? transparent : opaque ).push( renderItem );

  	}

  	function unshift( object, geometry, material, groupOrder, z, group ) {

  		var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

  		( material.transparent === true ? transparent : opaque ).unshift( renderItem );

  	}

  	function sort( customOpaqueSort, customTransparentSort ) {

  		if ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );
  		if ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );

  	}

  	function finish() {

  		// Clear references from inactive renderItems in the list

  		for ( var i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {

  			var renderItem = renderItems[ i ];

  			if ( renderItem.id === null ) break;

  			renderItem.id = null;
  			renderItem.object = null;
  			renderItem.geometry = null;
  			renderItem.material = null;
  			renderItem.program = null;
  			renderItem.group = null;

  		}

  	}

  	return {
  		opaque: opaque,
  		transparent: transparent,

  		init: init,
  		push: push,
  		unshift: unshift,
  		finish: finish,

  		sort: sort
  	};

  }

  function WebGLRenderLists() {

  	var lists = new WeakMap();

  	function onSceneDispose( event ) {

  		var scene = event.target;

  		scene.removeEventListener( 'dispose', onSceneDispose );

  		lists.delete( scene );

  	}

  	function get( scene, camera ) {

  		var cameras = lists.get( scene );
  		var list;
  		if ( cameras === undefined ) {

  			list = new WebGLRenderList();
  			lists.set( scene, new WeakMap() );
  			lists.get( scene ).set( camera, list );

  			scene.addEventListener( 'dispose', onSceneDispose );

  		} else {

  			list = cameras.get( camera );
  			if ( list === undefined ) {

  				list = new WebGLRenderList();
  				cameras.set( camera, list );

  			}

  		}

  		return list;

  	}

  	function dispose() {

  		lists = new WeakMap();

  	}

  	return {
  		get: get,
  		dispose: dispose
  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function UniformsCache() {

  	var lights = {};

  	return {

  		get: function ( light ) {

  			if ( lights[ light.id ] !== undefined ) {

  				return lights[ light.id ];

  			}

  			var uniforms;

  			switch ( light.type ) {

  				case 'DirectionalLight':
  					uniforms = {
  						direction: new Vector3(),
  						color: new Color()
  					};
  					break;

  				case 'SpotLight':
  					uniforms = {
  						position: new Vector3(),
  						direction: new Vector3(),
  						color: new Color(),
  						distance: 0,
  						coneCos: 0,
  						penumbraCos: 0,
  						decay: 0
  					};
  					break;

  				case 'PointLight':
  					uniforms = {
  						position: new Vector3(),
  						color: new Color(),
  						distance: 0,
  						decay: 0
  					};
  					break;

  				case 'HemisphereLight':
  					uniforms = {
  						direction: new Vector3(),
  						skyColor: new Color(),
  						groundColor: new Color()
  					};
  					break;

  				case 'RectAreaLight':
  					uniforms = {
  						color: new Color(),
  						position: new Vector3(),
  						halfWidth: new Vector3(),
  						halfHeight: new Vector3()
  					};
  					break;

  			}

  			lights[ light.id ] = uniforms;

  			return uniforms;

  		}

  	};

  }

  function ShadowUniformsCache() {

  	var lights = {};

  	return {

  		get: function ( light ) {

  			if ( lights[ light.id ] !== undefined ) {

  				return lights[ light.id ];

  			}

  			var uniforms;

  			switch ( light.type ) {

  				case 'DirectionalLight':
  					uniforms = {
  						shadowBias: 0,
  						shadowRadius: 1,
  						shadowMapSize: new Vector2()
  					};
  					break;

  				case 'SpotLight':
  					uniforms = {
  						shadowBias: 0,
  						shadowRadius: 1,
  						shadowMapSize: new Vector2()
  					};
  					break;

  				case 'PointLight':
  					uniforms = {
  						shadowBias: 0,
  						shadowRadius: 1,
  						shadowMapSize: new Vector2(),
  						shadowCameraNear: 1,
  						shadowCameraFar: 1000
  					};
  					break;

  				// TODO (abelnation): set RectAreaLight shadow uniforms

  			}

  			lights[ light.id ] = uniforms;

  			return uniforms;

  		}

  	};

  }



  var nextVersion = 0;

  function shadowCastingLightsFirst( lightA, lightB ) {

  	return ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );

  }

  function WebGLLights() {

  	var cache = new UniformsCache();

  	var shadowCache = ShadowUniformsCache();

  	var state = {

  		version: 0,

  		hash: {
  			directionalLength: - 1,
  			pointLength: - 1,
  			spotLength: - 1,
  			rectAreaLength: - 1,
  			hemiLength: - 1,

  			numDirectionalShadows: - 1,
  			numPointShadows: - 1,
  			numSpotShadows: - 1
  		},

  		ambient: [ 0, 0, 0 ],
  		probe: [],
  		directional: [],
  		directionalShadow: [],
  		directionalShadowMap: [],
  		directionalShadowMatrix: [],
  		spot: [],
  		spotShadow: [],
  		spotShadowMap: [],
  		spotShadowMatrix: [],
  		rectArea: [],
  		point: [],
  		pointShadow: [],
  		pointShadowMap: [],
  		pointShadowMatrix: [],
  		hemi: []

  	};

  	for ( var i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );

  	var vector3 = new Vector3();
  	var matrix4 = new Matrix4();
  	var matrix42 = new Matrix4();

  	function setup( lights, shadows, camera ) {

  		var r = 0, g = 0, b = 0;

  		for ( var i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );

  		var directionalLength = 0;
  		var pointLength = 0;
  		var spotLength = 0;
  		var rectAreaLength = 0;
  		var hemiLength = 0;

  		var numDirectionalShadows = 0;
  		var numPointShadows = 0;
  		var numSpotShadows = 0;

  		var viewMatrix = camera.matrixWorldInverse;

  		lights.sort( shadowCastingLightsFirst );

  		for ( var i = 0, l = lights.length; i < l; i ++ ) {

  			var light = lights[ i ];

  			var color = light.color;
  			var intensity = light.intensity;
  			var distance = light.distance;

  			var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

  			if ( light.isAmbientLight ) {

  				r += color.r * intensity;
  				g += color.g * intensity;
  				b += color.b * intensity;

  			} else if ( light.isLightProbe ) {

  				for ( var j = 0; j < 9; j ++ ) {

  					state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );

  				}

  			} else if ( light.isDirectionalLight ) {

  				var uniforms = cache.get( light );

  				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
  				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
  				vector3.setFromMatrixPosition( light.target.matrixWorld );
  				uniforms.direction.sub( vector3 );
  				uniforms.direction.transformDirection( viewMatrix );

  				if ( light.castShadow ) {

  					var shadow = light.shadow;

  					var shadowUniforms = shadowCache.get( light );

  					shadowUniforms.shadowBias = shadow.bias;
  					shadowUniforms.shadowRadius = shadow.radius;
  					shadowUniforms.shadowMapSize = shadow.mapSize;

  					state.directionalShadow[ directionalLength ] = shadowUniforms;
  					state.directionalShadowMap[ directionalLength ] = shadowMap;
  					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;

  					numDirectionalShadows ++;

  				}

  				state.directional[ directionalLength ] = uniforms;

  				directionalLength ++;

  			} else if ( light.isSpotLight ) {

  				var uniforms = cache.get( light );

  				uniforms.position.setFromMatrixPosition( light.matrixWorld );
  				uniforms.position.applyMatrix4( viewMatrix );

  				uniforms.color.copy( color ).multiplyScalar( intensity );
  				uniforms.distance = distance;

  				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
  				vector3.setFromMatrixPosition( light.target.matrixWorld );
  				uniforms.direction.sub( vector3 );
  				uniforms.direction.transformDirection( viewMatrix );

  				uniforms.coneCos = Math.cos( light.angle );
  				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
  				uniforms.decay = light.decay;

  				if ( light.castShadow ) {

  					var shadow = light.shadow;

  					var shadowUniforms = shadowCache.get( light );

  					shadowUniforms.shadowBias = shadow.bias;
  					shadowUniforms.shadowRadius = shadow.radius;
  					shadowUniforms.shadowMapSize = shadow.mapSize;

  					state.spotShadow[ spotLength ] = shadowUniforms;
  					state.spotShadowMap[ spotLength ] = shadowMap;
  					state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;

  					numSpotShadows ++;

  				}

  				state.spot[ spotLength ] = uniforms;

  				spotLength ++;

  			} else if ( light.isRectAreaLight ) {

  				var uniforms = cache.get( light );

  				// (a) intensity is the total visible light emitted
  				//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );

  				// (b) intensity is the brightness of the light
  				uniforms.color.copy( color ).multiplyScalar( intensity );

  				uniforms.position.setFromMatrixPosition( light.matrixWorld );
  				uniforms.position.applyMatrix4( viewMatrix );

  				// extract local rotation of light to derive width/height half vectors
  				matrix42.identity();
  				matrix4.copy( light.matrixWorld );
  				matrix4.premultiply( viewMatrix );
  				matrix42.extractRotation( matrix4 );

  				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
  				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

  				uniforms.halfWidth.applyMatrix4( matrix42 );
  				uniforms.halfHeight.applyMatrix4( matrix42 );

  				// TODO (abelnation): RectAreaLight distance?
  				// uniforms.distance = distance;

  				state.rectArea[ rectAreaLength ] = uniforms;

  				rectAreaLength ++;

  			} else if ( light.isPointLight ) {

  				var uniforms = cache.get( light );

  				uniforms.position.setFromMatrixPosition( light.matrixWorld );
  				uniforms.position.applyMatrix4( viewMatrix );

  				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
  				uniforms.distance = light.distance;
  				uniforms.decay = light.decay;

  				if ( light.castShadow ) {

  					var shadow = light.shadow;

  					var shadowUniforms = shadowCache.get( light );

  					shadowUniforms.shadowBias = shadow.bias;
  					shadowUniforms.shadowRadius = shadow.radius;
  					shadowUniforms.shadowMapSize = shadow.mapSize;
  					shadowUniforms.shadowCameraNear = shadow.camera.near;
  					shadowUniforms.shadowCameraFar = shadow.camera.far;

  					state.pointShadow[ pointLength ] = shadowUniforms;
  					state.pointShadowMap[ pointLength ] = shadowMap;
  					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;

  					numPointShadows ++;

  				}

  				state.point[ pointLength ] = uniforms;

  				pointLength ++;

  			} else if ( light.isHemisphereLight ) {

  				var uniforms = cache.get( light );

  				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
  				uniforms.direction.transformDirection( viewMatrix );
  				uniforms.direction.normalize();

  				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
  				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

  				state.hemi[ hemiLength ] = uniforms;

  				hemiLength ++;

  			}

  		}

  		state.ambient[ 0 ] = r;
  		state.ambient[ 1 ] = g;
  		state.ambient[ 2 ] = b;

  		var hash = state.hash;

  		if ( hash.directionalLength !== directionalLength ||
  			hash.pointLength !== pointLength ||
  			hash.spotLength !== spotLength ||
  			hash.rectAreaLength !== rectAreaLength ||
  			hash.hemiLength !== hemiLength ||
  			hash.numDirectionalShadows !== numDirectionalShadows ||
  			hash.numPointShadows !== numPointShadows ||
  			hash.numSpotShadows !== numSpotShadows ) {

  			state.directional.length = directionalLength;
  			state.spot.length = spotLength;
  			state.rectArea.length = rectAreaLength;
  			state.point.length = pointLength;
  			state.hemi.length = hemiLength;

  			state.directionalShadow.length = numDirectionalShadows;
  			state.directionalShadowMap.length = numDirectionalShadows;
  			state.pointShadow.length = numPointShadows;
  			state.pointShadowMap.length = numPointShadows;
  			state.spotShadow.length = numSpotShadows;
  			state.spotShadowMap.length = numSpotShadows;
  			state.directionalShadowMatrix.length = numDirectionalShadows;
  			state.pointShadowMatrix.length = numPointShadows;
  			state.spotShadowMatrix.length = numSpotShadows;

  			hash.directionalLength = directionalLength;
  			hash.pointLength = pointLength;
  			hash.spotLength = spotLength;
  			hash.rectAreaLength = rectAreaLength;
  			hash.hemiLength = hemiLength;

  			hash.numDirectionalShadows = numDirectionalShadows;
  			hash.numPointShadows = numPointShadows;
  			hash.numSpotShadows = numSpotShadows;

  			state.version = nextVersion ++;

  		}

  	}

  	return {
  		setup: setup,
  		state: state
  	};

  }

  /**
   * @author Mugen87 / https://github.com/Mugen87
   */

  function WebGLRenderState() {

  	var lights = new WebGLLights();

  	var lightsArray = [];
  	var shadowsArray = [];

  	function init() {

  		lightsArray.length = 0;
  		shadowsArray.length = 0;

  	}

  	function pushLight( light ) {

  		lightsArray.push( light );

  	}

  	function pushShadow( shadowLight ) {

  		shadowsArray.push( shadowLight );

  	}

  	function setupLights( camera ) {

  		lights.setup( lightsArray, shadowsArray, camera );

  	}

  	var state = {
  		lightsArray: lightsArray,
  		shadowsArray: shadowsArray,

  		lights: lights
  	};

  	return {
  		init: init,
  		state: state,
  		setupLights: setupLights,

  		pushLight: pushLight,
  		pushShadow: pushShadow
  	};

  }

  function WebGLRenderStates() {

  	var renderStates = new WeakMap();

  	function onSceneDispose( event ) {

  		var scene = event.target;

  		scene.removeEventListener( 'dispose', onSceneDispose );

  		renderStates.delete( scene );

  	}

  	function get( scene, camera ) {

  		var renderState;

  		if ( renderStates.has( scene ) === false ) {

  			renderState = new WebGLRenderState();
  			renderStates.set( scene, new WeakMap() );
  			renderStates.get( scene ).set( camera, renderState );

  			scene.addEventListener( 'dispose', onSceneDispose );

  		} else {

  			if ( renderStates.get( scene ).has( camera ) === false ) {

  				renderState = new WebGLRenderState();
  				renderStates.get( scene ).set( camera, renderState );

  			} else {

  				renderState = renderStates.get( scene ).get( camera );

  			}

  		}

  		return renderState;

  	}

  	function dispose() {

  		renderStates = new WeakMap();

  	}

  	return {
  		get: get,
  		dispose: dispose
  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author bhouston / https://clara.io
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *
   *  opacity: <float>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>
   * }
   */

  function MeshDepthMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshDepthMaterial';

  	this.depthPacking = BasicDepthPacking;

  	this.skinning = false;
  	this.morphTargets = false;

  	this.map = null;

  	this.alphaMap = null;

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;

  	this.fog = false;

  	this.setValues( parameters );

  }

  MeshDepthMaterial.prototype = Object.create( Material.prototype );
  MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

  MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

  MeshDepthMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.depthPacking = source.depthPacking;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;

  	this.map = source.map;

  	this.alphaMap = source.alphaMap;

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;

  	return this;

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *
   *  referencePosition: <float>,
   *  nearDistance: <float>,
   *  farDistance: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>
   *
   * }
   */

  function MeshDistanceMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshDistanceMaterial';

  	this.referencePosition = new Vector3();
  	this.nearDistance = 1;
  	this.farDistance = 1000;

  	this.skinning = false;
  	this.morphTargets = false;

  	this.map = null;

  	this.alphaMap = null;

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.fog = false;

  	this.setValues( parameters );

  }

  MeshDistanceMaterial.prototype = Object.create( Material.prototype );
  MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;

  MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

  MeshDistanceMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.referencePosition.copy( source.referencePosition );
  	this.nearDistance = source.nearDistance;
  	this.farDistance = source.farDistance;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;

  	this.map = source.map;

  	this.alphaMap = source.alphaMap;

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	return this;

  };

  var vsm_frag = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = sqrt( squared_mean - mean * mean );\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

  var vsm_vert = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {

  	var _frustum = new Frustum(),

  		_shadowMapSize = new Vector2(),
  		_viewportSize = new Vector2(),

  		_viewport = new Vector4(),

  		_depthMaterials = [],
  		_distanceMaterials = [],

  		_materialCache = {};

  	var shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };

  	var shadowMaterialVertical = new ShaderMaterial( {

  		defines: {
  			SAMPLE_RATE: 2.0 / 8.0,
  			HALF_SAMPLE_RATE: 1.0 / 8.0
  		},

  		uniforms: {
  			shadow_pass: { value: null },
  			resolution: { value: new Vector2() },
  			radius: { value: 4.0 }
  		},

  		vertexShader: vsm_vert,

  		fragmentShader: vsm_frag

  	} );

  	var shadowMaterialHorizonal = shadowMaterialVertical.clone();
  	shadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;

  	var fullScreenTri = new BufferGeometry();
  	fullScreenTri.setAttribute(
  		"position",
  		new BufferAttribute(
  			new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
  			3
  		)
  	);

  	var fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );

  	var scope = this;

  	this.enabled = false;

  	this.autoUpdate = true;
  	this.needsUpdate = false;

  	this.type = PCFShadowMap;

  	this.render = function ( lights, scene, camera ) {

  		if ( scope.enabled === false ) return;
  		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

  		if ( lights.length === 0 ) return;

  		var currentRenderTarget = _renderer.getRenderTarget();
  		var activeCubeFace = _renderer.getActiveCubeFace();
  		var activeMipmapLevel = _renderer.getActiveMipmapLevel();

  		var _state = _renderer.state;

  		// Set GL state for depth map.
  		_state.setBlending( NoBlending );
  		_state.buffers.color.setClear( 1, 1, 1, 1 );
  		_state.buffers.depth.setTest( true );
  		_state.setScissorTest( false );

  		// render depth map

  		for ( var i = 0, il = lights.length; i < il; i ++ ) {

  			var light = lights[ i ];
  			var shadow = light.shadow;

  			if ( shadow === undefined ) {

  				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
  				continue;

  			}

  			_shadowMapSize.copy( shadow.mapSize );

  			var shadowFrameExtents = shadow.getFrameExtents();

  			_shadowMapSize.multiply( shadowFrameExtents );

  			_viewportSize.copy( shadow.mapSize );

  			if ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {

  				console.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );

  				if ( _shadowMapSize.x > maxTextureSize ) {

  					_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );
  					_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
  					shadow.mapSize.x = _viewportSize.x;

  				}

  				if ( _shadowMapSize.y > maxTextureSize ) {

  					_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );
  					_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
  					shadow.mapSize.y = _viewportSize.y;

  				}

  			}

  			if ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

  				var pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };

  				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
  				shadow.map.texture.name = light.name + ".shadowMap";

  				shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );

  				shadow.camera.updateProjectionMatrix();

  			}

  			if ( shadow.map === null ) {

  				var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

  				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
  				shadow.map.texture.name = light.name + ".shadowMap";

  				shadow.camera.updateProjectionMatrix();

  			}

  			_renderer.setRenderTarget( shadow.map );
  			_renderer.clear();

  			var viewportCount = shadow.getViewportCount();

  			for ( var vp = 0; vp < viewportCount; vp ++ ) {

  				var viewport = shadow.getViewport( vp );

  				_viewport.set(
  					_viewportSize.x * viewport.x,
  					_viewportSize.y * viewport.y,
  					_viewportSize.x * viewport.z,
  					_viewportSize.y * viewport.w
  				);

  				_state.viewport( _viewport );

  				shadow.updateMatrices( light, vp );

  				_frustum = shadow.getFrustum();

  				renderObject( scene, camera, shadow.camera, light, this.type );

  			}

  			// do blur pass for VSM

  			if ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

  				VSMPass( shadow, camera );

  			}

  		}

  		scope.needsUpdate = false;

  		_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );

  	};

  	function VSMPass( shadow, camera ) {

  		var geometry = _objects.update( fullScreenMesh );

  		// vertical pass

  		shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
  		shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
  		shadowMaterialVertical.uniforms.radius.value = shadow.radius;
  		_renderer.setRenderTarget( shadow.mapPass );
  		_renderer.clear();
  		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );

  		// horizonal pass

  		shadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;
  		shadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;
  		shadowMaterialHorizonal.uniforms.radius.value = shadow.radius;
  		_renderer.setRenderTarget( shadow.map );
  		_renderer.clear();
  		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );

  	}

  	function getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {

  		var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;

  		var material = _depthMaterials[ index ];

  		if ( material === undefined ) {

  			material = new MeshDepthMaterial( {

  				depthPacking: RGBADepthPacking,

  				morphTargets: useMorphing,
  				skinning: useSkinning

  			} );

  			_depthMaterials[ index ] = material;

  		}

  		return material;

  	}

  	function getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {

  		var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;

  		var material = _distanceMaterials[ index ];

  		if ( material === undefined ) {

  			material = new MeshDistanceMaterial( {

  				morphTargets: useMorphing,
  				skinning: useSkinning

  			} );

  			_distanceMaterials[ index ] = material;

  		}

  		return material;

  	}

  	function getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {

  		var geometry = object.geometry;

  		var result = null;

  		var getMaterialVariant = getDepthMaterialVariant;
  		var customMaterial = object.customDepthMaterial;

  		if ( light.isPointLight === true ) {

  			getMaterialVariant = getDistanceMaterialVariant;
  			customMaterial = object.customDistanceMaterial;

  		}

  		if ( customMaterial === undefined ) {

  			var useMorphing = false;

  			if ( material.morphTargets === true ) {

  				if ( geometry.isBufferGeometry === true ) {

  					useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

  				} else if ( geometry.isGeometry === true ) {

  					useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

  				}

  			}

  			var useSkinning = false;

  			if ( object.isSkinnedMesh === true ) {

  				if ( material.skinning === true ) {

  					useSkinning = true;

  				} else {

  					console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );

  				}

  			}

  			var useInstancing = object.isInstancedMesh === true;

  			result = getMaterialVariant( useMorphing, useSkinning, useInstancing );

  		} else {

  			result = customMaterial;

  		}

  		if ( _renderer.localClippingEnabled &&
  				material.clipShadows === true &&
  				material.clippingPlanes.length !== 0 ) {

  			// in this case we need a unique material instance reflecting the
  			// appropriate state

  			var keyA = result.uuid, keyB = material.uuid;

  			var materialsForVariant = _materialCache[ keyA ];

  			if ( materialsForVariant === undefined ) {

  				materialsForVariant = {};
  				_materialCache[ keyA ] = materialsForVariant;

  			}

  			var cachedMaterial = materialsForVariant[ keyB ];

  			if ( cachedMaterial === undefined ) {

  				cachedMaterial = result.clone();
  				materialsForVariant[ keyB ] = cachedMaterial;

  			}

  			result = cachedMaterial;

  		}

  		result.visible = material.visible;
  		result.wireframe = material.wireframe;

  		if ( type === VSMShadowMap ) {

  			result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;

  		} else {

  			result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];

  		}

  		result.clipShadows = material.clipShadows;
  		result.clippingPlanes = material.clippingPlanes;
  		result.clipIntersection = material.clipIntersection;

  		result.wireframeLinewidth = material.wireframeLinewidth;
  		result.linewidth = material.linewidth;

  		if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {

  			result.referencePosition.setFromMatrixPosition( light.matrixWorld );
  			result.nearDistance = shadowCameraNear;
  			result.farDistance = shadowCameraFar;

  		}

  		return result;

  	}

  	function renderObject( object, camera, shadowCamera, light, type ) {

  		if ( object.visible === false ) return;

  		var visible = object.layers.test( camera.layers );

  		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

  			if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

  				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

  				var geometry = _objects.update( object );
  				var material = object.material;

  				if ( Array.isArray( material ) ) {

  					var groups = geometry.groups;

  					for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

  						var group = groups[ k ];
  						var groupMaterial = material[ group.materialIndex ];

  						if ( groupMaterial && groupMaterial.visible ) {

  							var depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );

  							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

  						}

  					}

  				} else if ( material.visible ) {

  					var depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );

  					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

  				}

  			}

  		}

  		var children = object.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			renderObject( children[ i ], camera, shadowCamera, light, type );

  		}

  	}

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLState( gl, extensions, capabilities ) {

  	var isWebGL2 = capabilities.isWebGL2;

  	function ColorBuffer() {

  		var locked = false;

  		var color = new Vector4();
  		var currentColorMask = null;
  		var currentColorClear = new Vector4( 0, 0, 0, 0 );

  		return {

  			setMask: function ( colorMask ) {

  				if ( currentColorMask !== colorMask && ! locked ) {

  					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
  					currentColorMask = colorMask;

  				}

  			},

  			setLocked: function ( lock ) {

  				locked = lock;

  			},

  			setClear: function ( r, g, b, a, premultipliedAlpha ) {

  				if ( premultipliedAlpha === true ) {

  					r *= a; g *= a; b *= a;

  				}

  				color.set( r, g, b, a );

  				if ( currentColorClear.equals( color ) === false ) {

  					gl.clearColor( r, g, b, a );
  					currentColorClear.copy( color );

  				}

  			},

  			reset: function () {

  				locked = false;

  				currentColorMask = null;
  				currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

  			}

  		};

  	}

  	function DepthBuffer() {

  		var locked = false;

  		var currentDepthMask = null;
  		var currentDepthFunc = null;
  		var currentDepthClear = null;

  		return {

  			setTest: function ( depthTest ) {

  				if ( depthTest ) {

  					enable( 2929 );

  				} else {

  					disable( 2929 );

  				}

  			},

  			setMask: function ( depthMask ) {

  				if ( currentDepthMask !== depthMask && ! locked ) {

  					gl.depthMask( depthMask );
  					currentDepthMask = depthMask;

  				}

  			},

  			setFunc: function ( depthFunc ) {

  				if ( currentDepthFunc !== depthFunc ) {

  					if ( depthFunc ) {

  						switch ( depthFunc ) {

  							case NeverDepth:

  								gl.depthFunc( 512 );
  								break;

  							case AlwaysDepth:

  								gl.depthFunc( 519 );
  								break;

  							case LessDepth:

  								gl.depthFunc( 513 );
  								break;

  							case LessEqualDepth:

  								gl.depthFunc( 515 );
  								break;

  							case EqualDepth:

  								gl.depthFunc( 514 );
  								break;

  							case GreaterEqualDepth:

  								gl.depthFunc( 518 );
  								break;

  							case GreaterDepth:

  								gl.depthFunc( 516 );
  								break;

  							case NotEqualDepth:

  								gl.depthFunc( 517 );
  								break;

  							default:

  								gl.depthFunc( 515 );

  						}

  					} else {

  						gl.depthFunc( 515 );

  					}

  					currentDepthFunc = depthFunc;

  				}

  			},

  			setLocked: function ( lock ) {

  				locked = lock;

  			},

  			setClear: function ( depth ) {

  				if ( currentDepthClear !== depth ) {

  					gl.clearDepth( depth );
  					currentDepthClear = depth;

  				}

  			},

  			reset: function () {

  				locked = false;

  				currentDepthMask = null;
  				currentDepthFunc = null;
  				currentDepthClear = null;

  			}

  		};

  	}

  	function StencilBuffer() {

  		var locked = false;

  		var currentStencilMask = null;
  		var currentStencilFunc = null;
  		var currentStencilRef = null;
  		var currentStencilFuncMask = null;
  		var currentStencilFail = null;
  		var currentStencilZFail = null;
  		var currentStencilZPass = null;
  		var currentStencilClear = null;

  		return {

  			setTest: function ( stencilTest ) {

  				if ( ! locked ) {

  					if ( stencilTest ) {

  						enable( 2960 );

  					} else {

  						disable( 2960 );

  					}

  				}

  			},

  			setMask: function ( stencilMask ) {

  				if ( currentStencilMask !== stencilMask && ! locked ) {

  					gl.stencilMask( stencilMask );
  					currentStencilMask = stencilMask;

  				}

  			},

  			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

  				if ( currentStencilFunc !== stencilFunc ||
  				     currentStencilRef 	!== stencilRef 	||
  				     currentStencilFuncMask !== stencilMask ) {

  					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

  					currentStencilFunc = stencilFunc;
  					currentStencilRef = stencilRef;
  					currentStencilFuncMask = stencilMask;

  				}

  			},

  			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

  				if ( currentStencilFail	 !== stencilFail 	||
  				     currentStencilZFail !== stencilZFail ||
  				     currentStencilZPass !== stencilZPass ) {

  					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

  					currentStencilFail = stencilFail;
  					currentStencilZFail = stencilZFail;
  					currentStencilZPass = stencilZPass;

  				}

  			},

  			setLocked: function ( lock ) {

  				locked = lock;

  			},

  			setClear: function ( stencil ) {

  				if ( currentStencilClear !== stencil ) {

  					gl.clearStencil( stencil );
  					currentStencilClear = stencil;

  				}

  			},

  			reset: function () {

  				locked = false;

  				currentStencilMask = null;
  				currentStencilFunc = null;
  				currentStencilRef = null;
  				currentStencilFuncMask = null;
  				currentStencilFail = null;
  				currentStencilZFail = null;
  				currentStencilZPass = null;
  				currentStencilClear = null;

  			}

  		};

  	}

  	//

  	var colorBuffer = new ColorBuffer();
  	var depthBuffer = new DepthBuffer();
  	var stencilBuffer = new StencilBuffer();

  	var maxVertexAttributes = gl.getParameter( 34921 );
  	var newAttributes = new Uint8Array( maxVertexAttributes );
  	var enabledAttributes = new Uint8Array( maxVertexAttributes );
  	var attributeDivisors = new Uint8Array( maxVertexAttributes );

  	var enabledCapabilities = {};

  	var currentProgram = null;

  	var currentBlendingEnabled = null;
  	var currentBlending = null;
  	var currentBlendEquation = null;
  	var currentBlendSrc = null;
  	var currentBlendDst = null;
  	var currentBlendEquationAlpha = null;
  	var currentBlendSrcAlpha = null;
  	var currentBlendDstAlpha = null;
  	var currentPremultipledAlpha = false;

  	var currentFlipSided = null;
  	var currentCullFace = null;

  	var currentLineWidth = null;

  	var currentPolygonOffsetFactor = null;
  	var currentPolygonOffsetUnits = null;

  	var maxTextures = gl.getParameter( 35661 );

  	var lineWidthAvailable = false;
  	var version = 0;
  	var glVersion = gl.getParameter( 7938 );

  	if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {

  		version = parseFloat( /^WebGL\ ([0-9])/.exec( glVersion )[ 1 ] );
  		lineWidthAvailable = ( version >= 1.0 );

  	} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {

  		version = parseFloat( /^OpenGL\ ES\ ([0-9])/.exec( glVersion )[ 1 ] );
  		lineWidthAvailable = ( version >= 2.0 );

  	}

  	var currentTextureSlot = null;
  	var currentBoundTextures = {};

  	var currentScissor = new Vector4();
  	var currentViewport = new Vector4();

  	function createTexture( type, target, count ) {

  		var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
  		var texture = gl.createTexture();

  		gl.bindTexture( type, texture );
  		gl.texParameteri( type, 10241, 9728 );
  		gl.texParameteri( type, 10240, 9728 );

  		for ( var i = 0; i < count; i ++ ) {

  			gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );

  		}

  		return texture;

  	}

  	var emptyTextures = {};
  	emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );
  	emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );

  	// init

  	colorBuffer.setClear( 0, 0, 0, 1 );
  	depthBuffer.setClear( 1 );
  	stencilBuffer.setClear( 0 );

  	enable( 2929 );
  	depthBuffer.setFunc( LessEqualDepth );

  	setFlipSided( false );
  	setCullFace( CullFaceBack );
  	enable( 2884 );

  	setBlending( NoBlending );

  	//

  	function initAttributes() {

  		for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

  			newAttributes[ i ] = 0;

  		}

  	}

  	function enableAttribute( attribute ) {

  		enableAttributeAndDivisor( attribute, 0 );

  	}

  	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

  		newAttributes[ attribute ] = 1;

  		if ( enabledAttributes[ attribute ] === 0 ) {

  			gl.enableVertexAttribArray( attribute );
  			enabledAttributes[ attribute ] = 1;

  		}

  		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

  			var extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );

  			extension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
  			attributeDivisors[ attribute ] = meshPerAttribute;

  		}

  	}

  	function disableUnusedAttributes() {

  		for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

  			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

  				gl.disableVertexAttribArray( i );
  				enabledAttributes[ i ] = 0;

  			}

  		}

  	}

  	function enable( id ) {

  		if ( enabledCapabilities[ id ] !== true ) {

  			gl.enable( id );
  			enabledCapabilities[ id ] = true;

  		}

  	}

  	function disable( id ) {

  		if ( enabledCapabilities[ id ] !== false ) {

  			gl.disable( id );
  			enabledCapabilities[ id ] = false;

  		}

  	}

  	function useProgram( program ) {

  		if ( currentProgram !== program ) {

  			gl.useProgram( program );

  			currentProgram = program;

  			return true;

  		}

  		return false;

  	}

  	var equationToGL = {
  		[ AddEquation ]: 32774,
  		[ SubtractEquation ]: 32778,
  		[ ReverseSubtractEquation ]: 32779
  	};

  	if ( isWebGL2 ) {

  		equationToGL[ MinEquation ] = 32775;
  		equationToGL[ MaxEquation ] = 32776;

  	} else {

  		var extension = extensions.get( 'EXT_blend_minmax' );

  		if ( extension !== null ) {

  			equationToGL[ MinEquation ] = extension.MIN_EXT;
  			equationToGL[ MaxEquation ] = extension.MAX_EXT;

  		}

  	}

  	var factorToGL = {
  		[ ZeroFactor ]: 0,
  		[ OneFactor ]: 1,
  		[ SrcColorFactor ]: 768,
  		[ SrcAlphaFactor ]: 770,
  		[ SrcAlphaSaturateFactor ]: 776,
  		[ DstColorFactor ]: 774,
  		[ DstAlphaFactor ]: 772,
  		[ OneMinusSrcColorFactor ]: 769,
  		[ OneMinusSrcAlphaFactor ]: 771,
  		[ OneMinusDstColorFactor ]: 775,
  		[ OneMinusDstAlphaFactor ]: 773
  	};

  	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

  		if ( blending === NoBlending ) {

  			if ( currentBlendingEnabled ) {

  				disable( 3042 );
  				currentBlendingEnabled = false;

  			}

  			return;

  		}

  		if ( ! currentBlendingEnabled ) {

  			enable( 3042 );
  			currentBlendingEnabled = true;

  		}

  		if ( blending !== CustomBlending ) {

  			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

  				if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {

  					gl.blendEquation( 32774 );

  					currentBlendEquation = AddEquation;
  					currentBlendEquationAlpha = AddEquation;

  				}

  				if ( premultipliedAlpha ) {

  					switch ( blending ) {

  						case NormalBlending:
  							gl.blendFuncSeparate( 1, 771, 1, 771 );
  							break;

  						case AdditiveBlending:
  							gl.blendFunc( 1, 1 );
  							break;

  						case SubtractiveBlending:
  							gl.blendFuncSeparate( 0, 0, 769, 771 );
  							break;

  						case MultiplyBlending:
  							gl.blendFuncSeparate( 0, 768, 0, 770 );
  							break;

  						default:
  							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
  							break;

  					}

  				} else {

  					switch ( blending ) {

  						case NormalBlending:
  							gl.blendFuncSeparate( 770, 771, 1, 771 );
  							break;

  						case AdditiveBlending:
  							gl.blendFunc( 770, 1 );
  							break;

  						case SubtractiveBlending:
  							gl.blendFunc( 0, 769 );
  							break;

  						case MultiplyBlending:
  							gl.blendFunc( 0, 768 );
  							break;

  						default:
  							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
  							break;

  					}

  				}

  				currentBlendSrc = null;
  				currentBlendDst = null;
  				currentBlendSrcAlpha = null;
  				currentBlendDstAlpha = null;

  				currentBlending = blending;
  				currentPremultipledAlpha = premultipliedAlpha;

  			}

  			return;

  		}

  		// custom blending

  		blendEquationAlpha = blendEquationAlpha || blendEquation;
  		blendSrcAlpha = blendSrcAlpha || blendSrc;
  		blendDstAlpha = blendDstAlpha || blendDst;

  		if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

  			gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );

  			currentBlendEquation = blendEquation;
  			currentBlendEquationAlpha = blendEquationAlpha;

  		}

  		if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

  			gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );

  			currentBlendSrc = blendSrc;
  			currentBlendDst = blendDst;
  			currentBlendSrcAlpha = blendSrcAlpha;
  			currentBlendDstAlpha = blendDstAlpha;

  		}

  		currentBlending = blending;
  		currentPremultipledAlpha = null;

  	}

  	function setMaterial( material, frontFaceCW ) {

  		material.side === DoubleSide
  			? disable( 2884 )
  			: enable( 2884 );

  		var flipSided = ( material.side === BackSide );
  		if ( frontFaceCW ) flipSided = ! flipSided;

  		setFlipSided( flipSided );

  		( material.blending === NormalBlending && material.transparent === false )
  			? setBlending( NoBlending )
  			: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

  		depthBuffer.setFunc( material.depthFunc );
  		depthBuffer.setTest( material.depthTest );
  		depthBuffer.setMask( material.depthWrite );
  		colorBuffer.setMask( material.colorWrite );

  		var stencilWrite = material.stencilWrite;
  		stencilBuffer.setTest( stencilWrite );
  		if ( stencilWrite ) {

  			stencilBuffer.setMask( material.stencilWriteMask );
  			stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
  			stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );

  		}

  		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

  	}

  	//

  	function setFlipSided( flipSided ) {

  		if ( currentFlipSided !== flipSided ) {

  			if ( flipSided ) {

  				gl.frontFace( 2304 );

  			} else {

  				gl.frontFace( 2305 );

  			}

  			currentFlipSided = flipSided;

  		}

  	}

  	function setCullFace( cullFace ) {

  		if ( cullFace !== CullFaceNone ) {

  			enable( 2884 );

  			if ( cullFace !== currentCullFace ) {

  				if ( cullFace === CullFaceBack ) {

  					gl.cullFace( 1029 );

  				} else if ( cullFace === CullFaceFront ) {

  					gl.cullFace( 1028 );

  				} else {

  					gl.cullFace( 1032 );

  				}

  			}

  		} else {

  			disable( 2884 );

  		}

  		currentCullFace = cullFace;

  	}

  	function setLineWidth( width ) {

  		if ( width !== currentLineWidth ) {

  			if ( lineWidthAvailable ) gl.lineWidth( width );

  			currentLineWidth = width;

  		}

  	}

  	function setPolygonOffset( polygonOffset, factor, units ) {

  		if ( polygonOffset ) {

  			enable( 32823 );

  			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

  				gl.polygonOffset( factor, units );

  				currentPolygonOffsetFactor = factor;
  				currentPolygonOffsetUnits = units;

  			}

  		} else {

  			disable( 32823 );

  		}

  	}

  	function setScissorTest( scissorTest ) {

  		if ( scissorTest ) {

  			enable( 3089 );

  		} else {

  			disable( 3089 );

  		}

  	}

  	// texture

  	function activeTexture( webglSlot ) {

  		if ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;

  		if ( currentTextureSlot !== webglSlot ) {

  			gl.activeTexture( webglSlot );
  			currentTextureSlot = webglSlot;

  		}

  	}

  	function bindTexture( webglType, webglTexture ) {

  		if ( currentTextureSlot === null ) {

  			activeTexture();

  		}

  		var boundTexture = currentBoundTextures[ currentTextureSlot ];

  		if ( boundTexture === undefined ) {

  			boundTexture = { type: undefined, texture: undefined };
  			currentBoundTextures[ currentTextureSlot ] = boundTexture;

  		}

  		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

  			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

  			boundTexture.type = webglType;
  			boundTexture.texture = webglTexture;

  		}

  	}

  	function unbindTexture() {

  		var boundTexture = currentBoundTextures[ currentTextureSlot ];

  		if ( boundTexture !== undefined && boundTexture.type !== undefined ) {

  			gl.bindTexture( boundTexture.type, null );

  			boundTexture.type = undefined;
  			boundTexture.texture = undefined;

  		}

  	}

  	function compressedTexImage2D() {

  		try {

  			gl.compressedTexImage2D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function texImage2D() {

  		try {

  			gl.texImage2D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	function texImage3D() {

  		try {

  			gl.texImage3D.apply( gl, arguments );

  		} catch ( error ) {

  			console.error( 'THREE.WebGLState:', error );

  		}

  	}

  	//

  	function scissor( scissor ) {

  		if ( currentScissor.equals( scissor ) === false ) {

  			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
  			currentScissor.copy( scissor );

  		}

  	}

  	function viewport( viewport ) {

  		if ( currentViewport.equals( viewport ) === false ) {

  			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
  			currentViewport.copy( viewport );

  		}

  	}

  	//

  	function reset() {

  		for ( var i = 0; i < enabledAttributes.length; i ++ ) {

  			if ( enabledAttributes[ i ] === 1 ) {

  				gl.disableVertexAttribArray( i );
  				enabledAttributes[ i ] = 0;

  			}

  		}

  		enabledCapabilities = {};

  		currentTextureSlot = null;
  		currentBoundTextures = {};

  		currentProgram = null;

  		currentBlending = null;

  		currentFlipSided = null;
  		currentCullFace = null;

  		colorBuffer.reset();
  		depthBuffer.reset();
  		stencilBuffer.reset();

  	}

  	return {

  		buffers: {
  			color: colorBuffer,
  			depth: depthBuffer,
  			stencil: stencilBuffer
  		},

  		initAttributes: initAttributes,
  		enableAttribute: enableAttribute,
  		enableAttributeAndDivisor: enableAttributeAndDivisor,
  		disableUnusedAttributes: disableUnusedAttributes,
  		enable: enable,
  		disable: disable,

  		useProgram: useProgram,

  		setBlending: setBlending,
  		setMaterial: setMaterial,

  		setFlipSided: setFlipSided,
  		setCullFace: setCullFace,

  		setLineWidth: setLineWidth,
  		setPolygonOffset: setPolygonOffset,

  		setScissorTest: setScissorTest,

  		activeTexture: activeTexture,
  		bindTexture: bindTexture,
  		unbindTexture: unbindTexture,
  		compressedTexImage2D: compressedTexImage2D,
  		texImage2D: texImage2D,
  		texImage3D: texImage3D,

  		scissor: scissor,
  		viewport: viewport,

  		reset: reset

  	};

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

  	var isWebGL2 = capabilities.isWebGL2;
  	var maxTextures = capabilities.maxTextures;
  	var maxCubemapSize = capabilities.maxCubemapSize;
  	var maxTextureSize = capabilities.maxTextureSize;
  	var maxSamples = capabilities.maxSamples;

  	var _videoTextures = new WeakMap();
  	var _canvas;

  	// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
  	// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
  	// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).

  	var useOffscreenCanvas = false;

  	try {

  		useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
  			&& ( new OffscreenCanvas( 1, 1 ).getContext( "2d" ) ) !== null;

  	} catch ( err ) {

  		// Ignore any errors

  	}

  	function createCanvas( width, height ) {

  		// Use OffscreenCanvas when available. Specially needed in web workers

  		return useOffscreenCanvas ?
  			new OffscreenCanvas( width, height ) :
  			document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );

  	}

  	function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {

  		var scale = 1;

  		// handle case if texture exceeds max size

  		if ( image.width > maxSize || image.height > maxSize ) {

  			scale = maxSize / Math.max( image.width, image.height );

  		}

  		// only perform resize if necessary

  		if ( scale < 1 || needsPowerOfTwo === true ) {

  			// only perform resize for certain image types

  			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
  				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
  				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

  				var floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;

  				var width = floor( scale * image.width );
  				var height = floor( scale * image.height );

  				if ( _canvas === undefined ) _canvas = createCanvas( width, height );

  				// cube textures can't reuse the same canvas

  				var canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;

  				canvas.width = width;
  				canvas.height = height;

  				var context = canvas.getContext( '2d' );
  				context.drawImage( image, 0, 0, width, height );

  				console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );

  				return canvas;

  			} else {

  				if ( 'data' in image ) {

  					console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );

  				}

  				return image;

  			}

  		}

  		return image;

  	}

  	function isPowerOfTwo( image ) {

  		return MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );

  	}

  	function textureNeedsPowerOfTwo( texture ) {

  		if ( isWebGL2 ) return false;

  		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
  			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

  	}

  	function textureNeedsGenerateMipmaps( texture, supportsMips ) {

  		return texture.generateMipmaps && supportsMips &&
  			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

  	}

  	function generateMipmap( target, texture, width, height ) {

  		_gl.generateMipmap( target );

  		var textureProperties = properties.get( texture );

  		// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11
  		textureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;

  	}

  	function getInternalFormat( internalFormatName, glFormat, glType ) {

  		if ( isWebGL2 === false ) return glFormat;

  		if ( internalFormatName !== null ) {

  			if ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];

  			console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );

  		}

  		var internalFormat = glFormat;

  		if ( glFormat === 6403 ) {

  			if ( glType === 5126 ) internalFormat = 33326;
  			if ( glType === 5131 ) internalFormat = 33325;
  			if ( glType === 5121 ) internalFormat = 33321;

  		}

  		if ( glFormat === 6407 ) {

  			if ( glType === 5126 ) internalFormat = 34837;
  			if ( glType === 5131 ) internalFormat = 34843;
  			if ( glType === 5121 ) internalFormat = 32849;

  		}

  		if ( glFormat === 6408 ) {

  			if ( glType === 5126 ) internalFormat = 34836;
  			if ( glType === 5131 ) internalFormat = 34842;
  			if ( glType === 5121 ) internalFormat = 32856;

  		}

  		if ( internalFormat === 33325 || internalFormat === 33326 ||
  			internalFormat === 34842 || internalFormat === 34836 ) {

  			extensions.get( 'EXT_color_buffer_float' );

  		}

  		return internalFormat;

  	}

  	// Fallback filters for non-power-of-2 textures

  	function filterFallback( f ) {

  		if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {

  			return 9728;

  		}

  		return 9729;

  	}

  	//

  	function onTextureDispose( event ) {

  		var texture = event.target;

  		texture.removeEventListener( 'dispose', onTextureDispose );

  		deallocateTexture( texture );

  		if ( texture.isVideoTexture ) {

  			_videoTextures.delete( texture );

  		}

  		info.memory.textures --;

  	}

  	function onRenderTargetDispose( event ) {

  		var renderTarget = event.target;

  		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

  		deallocateRenderTarget( renderTarget );

  		info.memory.textures --;

  	}

  	//

  	function deallocateTexture( texture ) {

  		var textureProperties = properties.get( texture );

  		if ( textureProperties.__webglInit === undefined ) return;

  		_gl.deleteTexture( textureProperties.__webglTexture );

  		properties.remove( texture );

  	}

  	function deallocateRenderTarget( renderTarget ) {

  		var renderTargetProperties = properties.get( renderTarget );
  		var textureProperties = properties.get( renderTarget.texture );

  		if ( ! renderTarget ) return;

  		if ( textureProperties.__webglTexture !== undefined ) {

  			_gl.deleteTexture( textureProperties.__webglTexture );

  		}

  		if ( renderTarget.depthTexture ) {

  			renderTarget.depthTexture.dispose();

  		}

  		if ( renderTarget.isWebGLCubeRenderTarget ) {

  			for ( var i = 0; i < 6; i ++ ) {

  				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
  				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

  			}

  		} else {

  			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
  			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
  			if ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );
  			if ( renderTargetProperties.__webglColorRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer );
  			if ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );

  		}

  		properties.remove( renderTarget.texture );
  		properties.remove( renderTarget );

  	}

  	//

  	var textureUnits = 0;

  	function resetTextureUnits() {

  		textureUnits = 0;

  	}

  	function allocateTextureUnit() {

  		var textureUnit = textureUnits;

  		if ( textureUnit >= maxTextures ) {

  			console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );

  		}

  		textureUnits += 1;

  		return textureUnit;

  	}

  	//

  	function setTexture2D( texture, slot ) {

  		var textureProperties = properties.get( texture );

  		if ( texture.isVideoTexture ) updateVideoTexture( texture );

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			var image = texture.image;

  			if ( image === undefined ) {

  				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );

  			} else if ( image.complete === false ) {

  				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );

  			} else {

  				uploadTexture( textureProperties, texture, slot );
  				return;

  			}

  		}

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( 3553, textureProperties.__webglTexture );

  	}

  	function setTexture2DArray( texture, slot ) {

  		var textureProperties = properties.get( texture );

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			uploadTexture( textureProperties, texture, slot );
  			return;

  		}

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( 35866, textureProperties.__webglTexture );

  	}

  	function setTexture3D( texture, slot ) {

  		var textureProperties = properties.get( texture );

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			uploadTexture( textureProperties, texture, slot );
  			return;

  		}

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( 32879, textureProperties.__webglTexture );

  	}

  	function setTextureCube( texture, slot ) {

  		if ( texture.image.length !== 6 ) return;

  		var textureProperties = properties.get( texture );

  		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

  			initTexture( textureProperties, texture );

  			state.activeTexture( 33984 + slot );
  			state.bindTexture( 34067, textureProperties.__webglTexture );

  			_gl.pixelStorei( 37440, texture.flipY );

  			var isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );
  			var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

  			var cubeImage = [];

  			for ( var i = 0; i < 6; i ++ ) {

  				if ( ! isCompressed && ! isDataTexture ) {

  					cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );

  				} else {

  					cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

  				}

  			}

  			var image = cubeImage[ 0 ],
  				supportsMips = isPowerOfTwo( image ) || isWebGL2,
  				glFormat = utils.convert( texture.format ),
  				glType = utils.convert( texture.type ),
  				glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );

  			setTextureParameters( 34067, texture, supportsMips );

  			var mipmaps;

  			if ( isCompressed ) {

  				for ( var i = 0; i < 6; i ++ ) {

  					mipmaps = cubeImage[ i ].mipmaps;

  					for ( var j = 0; j < mipmaps.length; j ++ ) {

  						var mipmap = mipmaps[ j ];

  						if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

  							if ( glFormat !== null ) {

  								state.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

  							} else {

  								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

  							}

  						} else {

  							state.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

  						}

  					}

  				}

  				textureProperties.__maxMipLevel = mipmaps.length - 1;

  			} else {

  				mipmaps = texture.mipmaps;

  				for ( var i = 0; i < 6; i ++ ) {

  					if ( isDataTexture ) {

  						state.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

  						for ( var j = 0; j < mipmaps.length; j ++ ) {

  							var mipmap = mipmaps[ j ];
  							var mipmapImage = mipmap.image[ i ].image;

  							state.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );

  						}

  					} else {

  						state.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );

  						for ( var j = 0; j < mipmaps.length; j ++ ) {

  							var mipmap = mipmaps[ j ];

  							state.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );

  						}

  					}

  				}

  				textureProperties.__maxMipLevel = mipmaps.length;

  			}

  			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

  				// We assume images for cube map have the same size.
  				generateMipmap( 34067, texture, image.width, image.height );

  			}

  			textureProperties.__version = texture.version;

  			if ( texture.onUpdate ) texture.onUpdate( texture );

  		} else {

  			state.activeTexture( 33984 + slot );
  			state.bindTexture( 34067, textureProperties.__webglTexture );

  		}

  	}

  	function setTextureCubeDynamic( texture, slot ) {

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( 34067, properties.get( texture ).__webglTexture );

  	}

  	var wrappingToGL = {
  		[ RepeatWrapping ]: 10497,
  		[ ClampToEdgeWrapping ]: 33071,
  		[ MirroredRepeatWrapping ]: 33648
  	};

  	var filterToGL = {
  		[ NearestFilter ]: 9728,
  		[ NearestMipmapNearestFilter ]: 9984,
  		[ NearestMipmapLinearFilter ]: 9986,

  		[ LinearFilter ]: 9729,
  		[ LinearMipmapNearestFilter ]: 9985,
  		[ LinearMipmapLinearFilter ]: 9987
  	};

  	function setTextureParameters( textureType, texture, supportsMips ) {

  		if ( supportsMips ) {

  			_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );
  			_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );

  			if ( textureType === 32879 || textureType === 35866 ) {

  				_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );

  			}

  			_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );
  			_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );

  		} else {

  			_gl.texParameteri( textureType, 10242, 33071 );
  			_gl.texParameteri( textureType, 10243, 33071 );

  			if ( textureType === 32879 || textureType === 35866 ) {

  				_gl.texParameteri( textureType, 32882, 33071 );

  			}

  			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

  				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );

  			}

  			_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );
  			_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );

  			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

  				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );

  			}

  		}

  		var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

  		if ( extension ) {

  			if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
  			if ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;

  			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

  				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
  				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

  			}

  		}

  	}

  	function initTexture( textureProperties, texture ) {

  		if ( textureProperties.__webglInit === undefined ) {

  			textureProperties.__webglInit = true;

  			texture.addEventListener( 'dispose', onTextureDispose );

  			textureProperties.__webglTexture = _gl.createTexture();

  			info.memory.textures ++;

  		}

  	}

  	function uploadTexture( textureProperties, texture, slot ) {

  		var textureType = 3553;

  		if ( texture.isDataTexture2DArray ) textureType = 35866;
  		if ( texture.isDataTexture3D ) textureType = 32879;

  		initTexture( textureProperties, texture );

  		state.activeTexture( 33984 + slot );
  		state.bindTexture( textureType, textureProperties.__webglTexture );

  		_gl.pixelStorei( 37440, texture.flipY );
  		_gl.pixelStorei( 37441, texture.premultiplyAlpha );
  		_gl.pixelStorei( 3317, texture.unpackAlignment );

  		var needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;
  		var image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );

  		var supportsMips = isPowerOfTwo( image ) || isWebGL2,
  			glFormat = utils.convert( texture.format ),
  			glType = utils.convert( texture.type ),
  			glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );

  		setTextureParameters( textureType, texture, supportsMips );

  		var mipmap, mipmaps = texture.mipmaps;

  		if ( texture.isDepthTexture ) {

  			// populate depth texture with dummy data

  			glInternalFormat = 6402;

  			if ( isWebGL2 ) {

  				if ( texture.type === FloatType ) {

  					glInternalFormat = 36012;

  				} else if ( texture.type === UnsignedIntType ) {

  					glInternalFormat = 33190;

  				} else if ( texture.type === UnsignedInt248Type ) {

  					glInternalFormat = 35056;

  				} else {

  					glInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D

  				}

  			} else {

  				if ( texture.type === FloatType ) {

  					console.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );

  				}

  			}

  			// validation checks for WebGL 1

  			if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {

  				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
  				// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
  				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
  				if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

  					console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

  					texture.type = UnsignedShortType;
  					glType = utils.convert( texture.type );

  				}

  			}

  			if ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {

  				// Depth stencil textures need the DEPTH_STENCIL internal format
  				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
  				glInternalFormat = 34041;

  				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
  				// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
  				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
  				if ( texture.type !== UnsignedInt248Type ) {

  					console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

  					texture.type = UnsignedInt248Type;
  					glType = utils.convert( texture.type );

  				}

  			}

  			//

  			state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

  		} else if ( texture.isDataTexture ) {

  			// use manually created mipmaps if available
  			// if there are no manual mipmaps
  			// set 0 level mipmap and then use GL to generate other mipmap levels

  			if ( mipmaps.length > 0 && supportsMips ) {

  				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

  					mipmap = mipmaps[ i ];
  					state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

  				}

  				texture.generateMipmaps = false;
  				textureProperties.__maxMipLevel = mipmaps.length - 1;

  			} else {

  				state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
  				textureProperties.__maxMipLevel = 0;

  			}

  		} else if ( texture.isCompressedTexture ) {

  			for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

  				mipmap = mipmaps[ i ];

  				if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

  					if ( glFormat !== null ) {

  						state.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

  					} else {

  						console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

  					}

  				} else {

  					state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

  				}

  			}

  			textureProperties.__maxMipLevel = mipmaps.length - 1;

  		} else if ( texture.isDataTexture2DArray ) {

  			state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
  			textureProperties.__maxMipLevel = 0;

  		} else if ( texture.isDataTexture3D ) {

  			state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
  			textureProperties.__maxMipLevel = 0;

  		} else {

  			// regular Texture (image, video, canvas)

  			// use manually created mipmaps if available
  			// if there are no manual mipmaps
  			// set 0 level mipmap and then use GL to generate other mipmap levels

  			if ( mipmaps.length > 0 && supportsMips ) {

  				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

  					mipmap = mipmaps[ i ];
  					state.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );

  				}

  				texture.generateMipmaps = false;
  				textureProperties.__maxMipLevel = mipmaps.length - 1;

  			} else {

  				state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );
  				textureProperties.__maxMipLevel = 0;

  			}

  		}

  		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

  			generateMipmap( textureType, texture, image.width, image.height );

  		}

  		textureProperties.__version = texture.version;

  		if ( texture.onUpdate ) texture.onUpdate( texture );

  	}

  	// Render targets

  	// Setup storage for target texture and bind it to correct framebuffer
  	function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

  		var glFormat = utils.convert( renderTarget.texture.format );
  		var glType = utils.convert( renderTarget.texture.type );
  		var glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );
  		state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
  		_gl.bindFramebuffer( 36160, framebuffer );
  		_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
  		_gl.bindFramebuffer( 36160, null );

  	}

  	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
  	function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {

  		_gl.bindRenderbuffer( 36161, renderbuffer );

  		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

  			var glInternalFormat = 33189;

  			if ( isMultisample ) {

  				var depthTexture = renderTarget.depthTexture;

  				if ( depthTexture && depthTexture.isDepthTexture ) {

  					if ( depthTexture.type === FloatType ) {

  						glInternalFormat = 36012;

  					} else if ( depthTexture.type === UnsignedIntType ) {

  						glInternalFormat = 33190;

  					}

  				}

  				var samples = getRenderTargetSamples( renderTarget );

  				_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

  			} else {

  				_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );

  			}

  			_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );

  		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

  			if ( isMultisample ) {

  				var samples = getRenderTargetSamples( renderTarget );

  				_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );

  			} else {

  				_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );

  			}


  			_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );

  		} else {

  			var glFormat = utils.convert( renderTarget.texture.format );
  			var glType = utils.convert( renderTarget.texture.type );
  			var glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );

  			if ( isMultisample ) {

  				var samples = getRenderTargetSamples( renderTarget );

  				_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

  			} else {

  				_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );

  			}

  		}

  		_gl.bindRenderbuffer( 36161, null );

  	}

  	// Setup resources for a Depth Texture for a FBO (needs an extension)
  	function setupDepthTexture( framebuffer, renderTarget ) {

  		var isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );
  		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

  		_gl.bindFramebuffer( 36160, framebuffer );

  		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

  			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

  		}

  		// upload an empty depth texture with framebuffer size
  		if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
  				renderTarget.depthTexture.image.width !== renderTarget.width ||
  				renderTarget.depthTexture.image.height !== renderTarget.height ) {

  			renderTarget.depthTexture.image.width = renderTarget.width;
  			renderTarget.depthTexture.image.height = renderTarget.height;
  			renderTarget.depthTexture.needsUpdate = true;

  		}

  		setTexture2D( renderTarget.depthTexture, 0 );

  		var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

  		if ( renderTarget.depthTexture.format === DepthFormat ) {

  			_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );

  		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

  			_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );

  		} else {

  			throw new Error( 'Unknown depthTexture format' );

  		}

  	}

  	// Setup GL resources for a non-texture depth buffer
  	function setupDepthRenderbuffer( renderTarget ) {

  		var renderTargetProperties = properties.get( renderTarget );

  		var isCube = ( renderTarget.isWebGLCubeRenderTarget === true );

  		if ( renderTarget.depthTexture ) {

  			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

  			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

  		} else {

  			if ( isCube ) {

  				renderTargetProperties.__webglDepthbuffer = [];

  				for ( var i = 0; i < 6; i ++ ) {

  					_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );
  					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
  					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );

  				}

  			} else {

  				_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
  				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
  				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );

  			}

  		}

  		_gl.bindFramebuffer( 36160, null );

  	}

  	// Set up GL resources for the render target
  	function setupRenderTarget( renderTarget ) {

  		var renderTargetProperties = properties.get( renderTarget );
  		var textureProperties = properties.get( renderTarget.texture );

  		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

  		textureProperties.__webglTexture = _gl.createTexture();

  		info.memory.textures ++;

  		var isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
  		var isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );
  		var supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;

  		// Handles WebGL2 RGBFormat fallback - #18858

  		if ( isWebGL2 && renderTarget.texture.format === RGBFormat && ( renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType ) ) {

  			renderTarget.texture.format = RGBAFormat;

  			console.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );

  		}

  		// Setup framebuffer

  		if ( isCube ) {

  			renderTargetProperties.__webglFramebuffer = [];

  			for ( var i = 0; i < 6; i ++ ) {

  				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

  			}

  		} else {

  			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

  			if ( isMultisample ) {

  				if ( isWebGL2 ) {

  					renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
  					renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();

  					_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );

  					var glFormat = utils.convert( renderTarget.texture.format );
  					var glType = utils.convert( renderTarget.texture.type );
  					var glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );
  					var samples = getRenderTargetSamples( renderTarget );
  					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

  					_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
  					_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );
  					_gl.bindRenderbuffer( 36161, null );

  					if ( renderTarget.depthBuffer ) {

  						renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
  						setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );

  					}

  					_gl.bindFramebuffer( 36160, null );


  				} else {

  					console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

  				}

  			}

  		}

  		// Setup color buffer

  		if ( isCube ) {

  			state.bindTexture( 34067, textureProperties.__webglTexture );
  			setTextureParameters( 34067, renderTarget.texture, supportsMips );

  			for ( var i = 0; i < 6; i ++ ) {

  				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );

  			}

  			if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {

  				generateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );

  			}

  			state.bindTexture( 34067, null );

  		} else {

  			state.bindTexture( 3553, textureProperties.__webglTexture );
  			setTextureParameters( 3553, renderTarget.texture, supportsMips );
  			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );

  			if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {

  				generateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );

  			}

  			state.bindTexture( 3553, null );

  		}

  		// Setup depth and stencil buffers

  		if ( renderTarget.depthBuffer ) {

  			setupDepthRenderbuffer( renderTarget );

  		}

  	}

  	function updateRenderTargetMipmap( renderTarget ) {

  		var texture = renderTarget.texture;
  		var supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;

  		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

  			var target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
  			var webglTexture = properties.get( texture ).__webglTexture;

  			state.bindTexture( target, webglTexture );
  			generateMipmap( target, texture, renderTarget.width, renderTarget.height );
  			state.bindTexture( target, null );

  		}

  	}

  	function updateMultisampleRenderTarget( renderTarget ) {

  		if ( renderTarget.isWebGLMultisampleRenderTarget ) {

  			if ( isWebGL2 ) {

  				var renderTargetProperties = properties.get( renderTarget );

  				_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );
  				_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );

  				var width = renderTarget.width;
  				var height = renderTarget.height;
  				var mask = 16384;

  				if ( renderTarget.depthBuffer ) mask |= 256;
  				if ( renderTarget.stencilBuffer ) mask |= 1024;

  				_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );

  				_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer ); // see #18905

  			} else {

  				console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

  			}

  		}

  	}

  	function getRenderTargetSamples( renderTarget ) {

  		return ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?
  			Math.min( maxSamples, renderTarget.samples ) : 0;

  	}

  	function updateVideoTexture( texture ) {

  		var frame = info.render.frame;

  		// Check the last frame we updated the VideoTexture

  		if ( _videoTextures.get( texture ) !== frame ) {

  			_videoTextures.set( texture, frame );
  			texture.update();

  		}

  	}

  	// backwards compatibility

  	var warnedTexture2D = false;
  	var warnedTextureCube = false;

  	function safeSetTexture2D( texture, slot ) {

  		if ( texture && texture.isWebGLRenderTarget ) {

  			if ( warnedTexture2D === false ) {

  				console.warn( "THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead." );
  				warnedTexture2D = true;

  			}

  			texture = texture.texture;

  		}

  		setTexture2D( texture, slot );

  	}

  	function safeSetTextureCube( texture, slot ) {

  		if ( texture && texture.isWebGLCubeRenderTarget ) {

  			if ( warnedTextureCube === false ) {

  				console.warn( "THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
  				warnedTextureCube = true;

  			}

  			texture = texture.texture;

  		}

  		// currently relying on the fact that WebGLCubeRenderTarget.texture is a Texture and NOT a CubeTexture
  		// TODO: unify these code paths
  		if ( ( texture && texture.isCubeTexture ) ||
  			( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

  			// CompressedTexture can have Array in image :/

  			// this function alone should take care of cube textures
  			setTextureCube( texture, slot );

  		} else {

  			// assumed: texture property of THREE.WebGLCubeRenderTarget
  			setTextureCubeDynamic( texture, slot );

  		}

  	}

  	//

  	this.allocateTextureUnit = allocateTextureUnit;
  	this.resetTextureUnits = resetTextureUnits;

  	this.setTexture2D = setTexture2D;
  	this.setTexture2DArray = setTexture2DArray;
  	this.setTexture3D = setTexture3D;
  	this.setTextureCube = setTextureCube;
  	this.setTextureCubeDynamic = setTextureCubeDynamic;
  	this.setupRenderTarget = setupRenderTarget;
  	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
  	this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;

  	this.safeSetTexture2D = safeSetTexture2D;
  	this.safeSetTextureCube = safeSetTextureCube;

  }

  /**
   * @author thespite / http://www.twitter.com/thespite
   */

  function WebGLUtils( gl, extensions, capabilities ) {

  	var isWebGL2 = capabilities.isWebGL2;

  	function convert( p ) {

  		var extension;

  		if ( p === UnsignedByteType ) return 5121;
  		if ( p === UnsignedShort4444Type ) return 32819;
  		if ( p === UnsignedShort5551Type ) return 32820;
  		if ( p === UnsignedShort565Type ) return 33635;

  		if ( p === ByteType ) return 5120;
  		if ( p === ShortType ) return 5122;
  		if ( p === UnsignedShortType ) return 5123;
  		if ( p === IntType ) return 5124;
  		if ( p === UnsignedIntType ) return 5125;
  		if ( p === FloatType ) return 5126;

  		if ( p === HalfFloatType ) {

  			if ( isWebGL2 ) return 5131;

  			extension = extensions.get( 'OES_texture_half_float' );

  			if ( extension !== null ) {

  				return extension.HALF_FLOAT_OES;

  			} else {

  				return null;

  			}

  		}

  		if ( p === AlphaFormat ) return 6406;
  		if ( p === RGBFormat ) return 6407;
  		if ( p === RGBAFormat ) return 6408;
  		if ( p === LuminanceFormat ) return 6409;
  		if ( p === LuminanceAlphaFormat ) return 6410;
  		if ( p === DepthFormat ) return 6402;
  		if ( p === DepthStencilFormat ) return 34041;
  		if ( p === RedFormat ) return 6403;

  		// WebGL2 formats.

  		if ( p === RedIntegerFormat ) return 36244;
  		if ( p === RGFormat ) return 33319;
  		if ( p === RGIntegerFormat ) return 33320;
  		if ( p === RGBIntegerFormat ) return 36248;
  		if ( p === RGBAIntegerFormat ) return 36249;

  		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
  			p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

  			if ( extension !== null ) {

  				if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
  				if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
  				if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
  				if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

  			} else {

  				return null;

  			}

  		}

  		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
  			p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

  			if ( extension !== null ) {

  				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
  				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
  				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
  				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

  			} else {

  				return null;

  			}

  		}

  		if ( p === RGB_ETC1_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

  			if ( extension !== null ) {

  				return extension.COMPRESSED_RGB_ETC1_WEBGL;

  			} else {

  				return null;

  			}

  		}

  		if ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_etc' );

  			if ( extension !== null ) {

  				if ( p === RGB_ETC2_Format ) return extension.COMPRESSED_RGB8_ETC2;
  				if ( p === RGBA_ETC2_EAC_Format ) return extension.COMPRESSED_RGBA8_ETC2_EAC;

  			}

  		}

  		if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
  			p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
  			p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
  			p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
  			p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||
  			p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||
  			p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||
  			p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||
  			p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||
  			p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {

  			extension = extensions.get( 'WEBGL_compressed_texture_astc' );

  			if ( extension !== null ) {

  				// TODO Complete?

  				return p;

  			} else {

  				return null;

  			}

  		}

  		if ( p === RGBA_BPTC_Format ) {

  			extension = extensions.get( 'EXT_texture_compression_bptc' );

  			if ( extension !== null ) {

  				// TODO Complete?

  				return p;

  			} else {

  				return null;

  			}

  		}

  		if ( p === UnsignedInt248Type ) {

  			if ( isWebGL2 ) return 34042;

  			extension = extensions.get( 'WEBGL_depth_texture' );

  			if ( extension !== null ) {

  				return extension.UNSIGNED_INT_24_8_WEBGL;

  			} else {

  				return null;

  			}

  		}

  	}

  	return { convert: convert };

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function ArrayCamera( array ) {

  	PerspectiveCamera.call( this );

  	this.cameras = array || [];

  }

  ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {

  	constructor: ArrayCamera,

  	isArrayCamera: true

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Group() {

  	Object3D.call( this );

  	this.type = 'Group';

  }

  Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Group,

  	isGroup: true

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function WebXRManager( renderer, gl ) {

  	var scope = this;

  	var session = null;

  	var framebufferScaleFactor = 1.0;

  	var referenceSpace = null;
  	var referenceSpaceType = 'local-floor';

  	var pose = null;

  	var controllers = [];
  	var inputSourcesMap = new Map();

  	//

  	var cameraL = new PerspectiveCamera();
  	cameraL.layers.enable( 1 );
  	cameraL.viewport = new Vector4();

  	var cameraR = new PerspectiveCamera();
  	cameraR.layers.enable( 2 );
  	cameraR.viewport = new Vector4();

  	var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
  	cameraVR.layers.enable( 1 );
  	cameraVR.layers.enable( 2 );

  	var _currentDepthNear = null;
  	var _currentDepthFar = null;

  	//

  	this.enabled = false;

  	this.isPresenting = false;

  	this.getController = function ( id ) {

  		var controller = controllers[ id ];

  		if ( controller === undefined ) {

  			controller = {};
  			controllers[ id ] = controller;

  		}

  		if ( controller.targetRay === undefined ) {

  			controller.targetRay = new Group();
  			controller.targetRay.matrixAutoUpdate = false;
  			controller.targetRay.visible = false;

  		}

  		return controller.targetRay;

  	};

  	this.getControllerGrip = function ( id ) {

  		var controller = controllers[ id ];

  		if ( controller === undefined ) {

  			controller = {};
  			controllers[ id ] = controller;

  		}

  		if ( controller.grip === undefined ) {

  			controller.grip = new Group();
  			controller.grip.matrixAutoUpdate = false;
  			controller.grip.visible = false;

  		}

  		return controller.grip;

  	};

  	//

  	function onSessionEvent( event ) {

  		var controller = inputSourcesMap.get( event.inputSource );

  		if ( controller ) {

  			if ( controller.targetRay ) {

  				controller.targetRay.dispatchEvent( { type: event.type } );

  			}

  			if ( controller.grip ) {

  				controller.grip.dispatchEvent( { type: event.type } );

  			}

  		}

  	}

  	function onSessionEnd() {

  		inputSourcesMap.forEach( function ( controller, inputSource ) {

  			if ( controller.targetRay ) {

  				controller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );
  				controller.targetRay.visible = false;

  			}

  			if ( controller.grip ) {

  				controller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );
  				controller.grip.visible = false;

  			}

  		} );

  		inputSourcesMap.clear();

  		//

  		renderer.setFramebuffer( null );
  		renderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830
  		animation.stop();

  		scope.isPresenting = false;

  		scope.dispatchEvent( { type: 'sessionend' } );

  	}

  	function onRequestReferenceSpace( value ) {

  		referenceSpace = value;

  		animation.setContext( session );
  		animation.start();

  		scope.isPresenting = true;

  		scope.dispatchEvent( { type: 'sessionstart' } );

  	}

  	this.setFramebufferScaleFactor = function ( value ) {

  		framebufferScaleFactor = value;

  		// Warn if function is used while presenting
  		if ( scope.isPresenting == true ) {

  			console.warn( "WebXRManager: Cannot change framebuffer scale while presenting VR content" );

  		}

  	};

  	this.setReferenceSpaceType = function ( value ) {

  		referenceSpaceType = value;

  	};

  	this.getReferenceSpace = function () {

  		return referenceSpace;

  	};

  	this.getSession = function () {

  		return session;

  	};

  	this.setSession = function ( value ) {

  		session = value;

  		if ( session !== null ) {

  			session.addEventListener( 'select', onSessionEvent );
  			session.addEventListener( 'selectstart', onSessionEvent );
  			session.addEventListener( 'selectend', onSessionEvent );
  			session.addEventListener( 'squeeze', onSessionEvent );
  			session.addEventListener( 'squeezestart', onSessionEvent );
  			session.addEventListener( 'squeezeend', onSessionEvent );
  			session.addEventListener( 'end', onSessionEnd );

  			var attributes = gl.getContextAttributes();

  			var layerInit = {
  				antialias: attributes.antialias,
  				alpha: attributes.alpha,
  				depth: attributes.depth,
  				stencil: attributes.stencil,
  				framebufferScaleFactor: framebufferScaleFactor
  			};

  			// eslint-disable-next-line no-undef
  			var baseLayer = new XRWebGLLayer( session, gl, layerInit );

  			session.updateRenderState( { baseLayer: baseLayer } );

  			session.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );

  			//

  			session.addEventListener( 'inputsourceschange', updateInputSources );

  		}

  	};

  	function updateInputSources( event ) {

  		var inputSources = session.inputSources;

  		// Assign inputSources to available controllers

  		for ( var i = 0; i < controllers.length; i ++ ) {

  			inputSourcesMap.set( inputSources[ i ], controllers[ i ] );

  		}

  		// Notify disconnected

  		for ( var i = 0; i < event.removed.length; i ++ ) {

  			var inputSource = event.removed[ i ];
  			var controller = inputSourcesMap.get( inputSource );

  			if ( controller ) {

  				if ( controller.targetRay ) {

  					controller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );

  				}

  				if ( controller.grip ) {

  					controller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );

  				}

  				inputSourcesMap.delete( inputSource );

  			}

  		}

  		// Notify connected

  		for ( var i = 0; i < event.added.length; i ++ ) {

  			var inputSource = event.added[ i ];
  			var controller = inputSourcesMap.get( inputSource );

  			if ( controller ) {

  				if ( controller.targetRay ) {

  					controller.targetRay.dispatchEvent( { type: 'connected', data: inputSource } );

  				}

  				if ( controller.grip ) {

  					controller.grip.dispatchEvent( { type: 'connected', data: inputSource } );

  				}

  			}

  		}

  	}

  	//

  	var cameraLPos = new Vector3();
  	var cameraRPos = new Vector3();

  	/**
  	 * @author jsantell / https://www.jsantell.com/
  	 *
  	 * Assumes 2 cameras that are parallel and share an X-axis, and that
  	 * the cameras' projection and world matrices have already been set.
  	 * And that near and far planes are identical for both cameras.
  	 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
  	 */
  	function setProjectionFromUnion( camera, cameraL, cameraR ) {

  		cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
  		cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );

  		var ipd = cameraLPos.distanceTo( cameraRPos );

  		var projL = cameraL.projectionMatrix.elements;
  		var projR = cameraR.projectionMatrix.elements;

  		// VR systems will have identical far and near planes, and
  		// most likely identical top and bottom frustum extents.
  		// Use the left camera for these values.
  		var near = projL[ 14 ] / ( projL[ 10 ] - 1 );
  		var far = projL[ 14 ] / ( projL[ 10 ] + 1 );
  		var topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
  		var bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];

  		var leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
  		var rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
  		var left = near * leftFov;
  		var right = near * rightFov;

  		// Calculate the new camera's position offset from the
  		// left camera. xOffset should be roughly half `ipd`.
  		var zOffset = ipd / ( - leftFov + rightFov );
  		var xOffset = zOffset * - leftFov;

  		// TODO: Better way to apply this offset?
  		cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
  		camera.translateX( xOffset );
  		camera.translateZ( zOffset );
  		camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
  		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

  		// Find the union of the frustum values of the cameras and scale
  		// the values so that the near plane's position does not change in world space,
  		// although must now be relative to the new union camera.
  		var near2 = near + zOffset;
  		var far2 = far + zOffset;
  		var left2 = left - xOffset;
  		var right2 = right + ( ipd - xOffset );
  		var top2 = topFov * far / far2 * near2;
  		var bottom2 = bottomFov * far / far2 * near2;

  		camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );

  	}

  	function updateCamera( camera, parent ) {

  		if ( parent === null ) {

  			camera.matrixWorld.copy( camera.matrix );

  		} else {

  			camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

  		}

  		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

  	}

  	this.getCamera = function ( camera ) {

  		cameraVR.near = cameraR.near = cameraL.near = camera.near;
  		cameraVR.far = cameraR.far = cameraL.far = camera.far;

  		if ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {

  			// Note that the new renderState won't apply until the next frame. See #18320

  			session.updateRenderState( {
  				depthNear: cameraVR.near,
  				depthFar: cameraVR.far
  			} );

  			_currentDepthNear = cameraVR.near;
  			_currentDepthFar = cameraVR.far;

  		}

  		var parent = camera.parent;
  		var cameras = cameraVR.cameras;

  		updateCamera( cameraVR, parent );

  		for ( var i = 0; i < cameras.length; i ++ ) {

  			updateCamera( cameras[ i ], parent );

  		}

  		// update camera and its children

  		camera.matrixWorld.copy( cameraVR.matrixWorld );

  		var children = camera.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			children[ i ].updateMatrixWorld( true );

  		}

  		setProjectionFromUnion( cameraVR, cameraL, cameraR );

  		return cameraVR;

  	};

  	// Animation Loop

  	var onAnimationFrameCallback = null;

  	function onAnimationFrame( time, frame ) {

  		pose = frame.getViewerPose( referenceSpace );

  		if ( pose !== null ) {

  			var views = pose.views;
  			var baseLayer = session.renderState.baseLayer;

  			renderer.setFramebuffer( baseLayer.framebuffer );

  			for ( var i = 0; i < views.length; i ++ ) {

  				var view = views[ i ];
  				var viewport = baseLayer.getViewport( view );

  				var camera = cameraVR.cameras[ i ];
  				camera.matrix.fromArray( view.transform.matrix );
  				camera.projectionMatrix.fromArray( view.projectionMatrix );
  				camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

  				if ( i === 0 ) {

  					cameraVR.matrix.copy( camera.matrix );

  				}

  			}

  		}

  		//

  		var inputSources = session.inputSources;

  		for ( var i = 0; i < controllers.length; i ++ ) {

  			var controller = controllers[ i ];

  			var inputSource = inputSources[ i ];

  			var inputPose = null;
  			var gripPose = null;

  			if ( inputSource ) {

  				if ( controller.targetRay ) {

  					inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );

  					if ( inputPose !== null ) {

  						controller.targetRay.matrix.fromArray( inputPose.transform.matrix );
  						controller.targetRay.matrix.decompose( controller.targetRay.position, controller.targetRay.rotation, controller.targetRay.scale );

  					}

  				}

  				if ( controller.grip && inputSource.gripSpace ) {

  					gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );

  					if ( gripPose !== null ) {

  						controller.grip.matrix.fromArray( gripPose.transform.matrix );
  						controller.grip.matrix.decompose( controller.grip.position, controller.grip.rotation, controller.grip.scale );

  					}

  				}

  			}

  			if ( controller.targetRay ) {

  				controller.targetRay.visible = inputPose !== null;

  			}

  			if ( controller.grip ) {

  				controller.grip.visible = gripPose !== null;

  			}

  		}

  		if ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );

  	}

  	var animation = new WebGLAnimation();
  	animation.setAnimationLoop( onAnimationFrame );

  	this.setAnimationLoop = function ( callback ) {

  		onAnimationFrameCallback = callback;

  	};

  	this.dispose = function () {};

  }

  Object.assign( WebXRManager.prototype, EventDispatcher.prototype );

  /**
   * @author supereggbert / http://www.paulbrunt.co.uk/
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   * @author szimek / https://github.com/szimek/
   * @author tschw
   */

  function WebGLRenderer( parameters ) {

  	parameters = parameters || {};

  	var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
  		_context = parameters.context !== undefined ? parameters.context : null,

  		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
  		_depth = parameters.depth !== undefined ? parameters.depth : true,
  		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
  		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
  		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
  		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
  		_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
  		_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;

  	var currentRenderList = null;
  	var currentRenderState = null;

  	// public properties

  	this.domElement = _canvas;

  	// Debug configuration container
  	this.debug = {

  		/**
  		 * Enables error checking and reporting when shader programs are being compiled
  		 * @type {boolean}
  		 */
  		checkShaderErrors: true
  	};

  	// clearing

  	this.autoClear = true;
  	this.autoClearColor = true;
  	this.autoClearDepth = true;
  	this.autoClearStencil = true;

  	// scene graph

  	this.sortObjects = true;

  	// user-defined clipping

  	this.clippingPlanes = [];
  	this.localClippingEnabled = false;

  	// physically based shading

  	this.gammaFactor = 2.0;	// for backwards compatibility
  	this.outputEncoding = LinearEncoding;

  	// physical lights

  	this.physicallyCorrectLights = false;

  	// tone mapping

  	this.toneMapping = LinearToneMapping;
  	this.toneMappingExposure = 1.0;
  	this.toneMappingWhitePoint = 1.0;

  	// morphs

  	this.maxMorphTargets = 8;
  	this.maxMorphNormals = 4;

  	// internal properties

  	var _this = this,

  		_isContextLost = false,

  		// internal state cache

  		_framebuffer = null,

  		_currentActiveCubeFace = 0,
  		_currentActiveMipmapLevel = 0,
  		_currentRenderTarget = null,
  		_currentFramebuffer = null,
  		_currentMaterialId = - 1,

  		// geometry and program caching

  		_currentGeometryProgram = {
  			geometry: null,
  			program: null,
  			wireframe: false
  		},

  		_currentCamera = null,
  		_currentArrayCamera = null,

  		_currentViewport = new Vector4(),
  		_currentScissor = new Vector4(),
  		_currentScissorTest = null,

  		//

  		_width = _canvas.width,
  		_height = _canvas.height,

  		_pixelRatio = 1,
  		_opaqueSort = null,
  		_transparentSort = null,

  		_viewport = new Vector4( 0, 0, _width, _height ),
  		_scissor = new Vector4( 0, 0, _width, _height ),
  		_scissorTest = false,

  		// frustum

  		_frustum = new Frustum(),

  		// clipping

  		_clipping = new WebGLClipping(),
  		_clippingEnabled = false,
  		_localClippingEnabled = false,

  		// camera matrices cache

  		_projScreenMatrix = new Matrix4(),

  		_vector3 = new Vector3();

  	function getTargetPixelRatio() {

  		return _currentRenderTarget === null ? _pixelRatio : 1;

  	}

  	// initialize

  	var _gl;

  	try {

  		var contextAttributes = {
  			alpha: _alpha,
  			depth: _depth,
  			stencil: _stencil,
  			antialias: _antialias,
  			premultipliedAlpha: _premultipliedAlpha,
  			preserveDrawingBuffer: _preserveDrawingBuffer,
  			powerPreference: _powerPreference,
  			failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,
  			xrCompatible: true
  		};

  		// event listeners must be registered before WebGL context is created, see #12753

  		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
  		_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );

  		_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );

  		if ( _gl === null ) {

  			if ( _canvas.getContext( 'webgl' ) !== null ) {

  				throw new Error( 'Error creating WebGL context with your selected attributes.' );

  			} else {

  				throw new Error( 'Error creating WebGL context.' );

  			}

  		}

  		// Some experimental-webgl implementations do not have getShaderPrecisionFormat

  		if ( _gl.getShaderPrecisionFormat === undefined ) {

  			_gl.getShaderPrecisionFormat = function () {

  				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

  			};

  		}

  	} catch ( error ) {

  		console.error( 'THREE.WebGLRenderer: ' + error.message );
  		throw error;

  	}

  	var extensions, capabilities, state, info;
  	var properties, textures, attributes, geometries, objects;
  	var programCache, renderLists, renderStates;

  	var background, morphtargets, bufferRenderer, indexedBufferRenderer;

  	var utils;

  	function initGLContext() {

  		extensions = new WebGLExtensions( _gl );

  		capabilities = new WebGLCapabilities( _gl, extensions, parameters );

  		if ( capabilities.isWebGL2 === false ) {

  			extensions.get( 'WEBGL_depth_texture' );
  			extensions.get( 'OES_texture_float' );
  			extensions.get( 'OES_texture_half_float' );
  			extensions.get( 'OES_texture_half_float_linear' );
  			extensions.get( 'OES_standard_derivatives' );
  			extensions.get( 'OES_element_index_uint' );
  			extensions.get( 'ANGLE_instanced_arrays' );

  		}

  		extensions.get( 'OES_texture_float_linear' );

  		utils = new WebGLUtils( _gl, extensions, capabilities );

  		state = new WebGLState( _gl, extensions, capabilities );
  		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );
  		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

  		info = new WebGLInfo( _gl );
  		properties = new WebGLProperties();
  		textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
  		attributes = new WebGLAttributes( _gl, capabilities );
  		geometries = new WebGLGeometries( _gl, attributes, info );
  		objects = new WebGLObjects( _gl, geometries, attributes, info );
  		morphtargets = new WebGLMorphtargets( _gl );
  		programCache = new WebGLPrograms( _this, extensions, capabilities );
  		renderLists = new WebGLRenderLists();
  		renderStates = new WebGLRenderStates();

  		background = new WebGLBackground( _this, state, objects, _premultipliedAlpha );

  		bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
  		indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );

  		info.programs = programCache.programs;

  		_this.capabilities = capabilities;
  		_this.extensions = extensions;
  		_this.properties = properties;
  		_this.renderLists = renderLists;
  		_this.state = state;
  		_this.info = info;

  	}

  	initGLContext();

  	// xr

  	var xr = new WebXRManager( _this, _gl );

  	this.xr = xr;

  	// shadow map

  	var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );

  	this.shadowMap = shadowMap;

  	// API

  	this.getContext = function () {

  		return _gl;

  	};

  	this.getContextAttributes = function () {

  		return _gl.getContextAttributes();

  	};

  	this.forceContextLoss = function () {

  		var extension = extensions.get( 'WEBGL_lose_context' );
  		if ( extension ) extension.loseContext();

  	};

  	this.forceContextRestore = function () {

  		var extension = extensions.get( 'WEBGL_lose_context' );
  		if ( extension ) extension.restoreContext();

  	};

  	this.getPixelRatio = function () {

  		return _pixelRatio;

  	};

  	this.setPixelRatio = function ( value ) {

  		if ( value === undefined ) return;

  		_pixelRatio = value;

  		this.setSize( _width, _height, false );

  	};

  	this.getSize = function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );

  			target = new Vector2();

  		}

  		return target.set( _width, _height );

  	};

  	this.setSize = function ( width, height, updateStyle ) {

  		if ( xr.isPresenting ) {

  			console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
  			return;

  		}

  		_width = width;
  		_height = height;

  		_canvas.width = Math.floor( width * _pixelRatio );
  		_canvas.height = Math.floor( height * _pixelRatio );

  		if ( updateStyle !== false ) {

  			_canvas.style.width = width + 'px';
  			_canvas.style.height = height + 'px';

  		}

  		this.setViewport( 0, 0, width, height );

  	};

  	this.getDrawingBufferSize = function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );

  			target = new Vector2();

  		}

  		return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();

  	};

  	this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

  		_width = width;
  		_height = height;

  		_pixelRatio = pixelRatio;

  		_canvas.width = Math.floor( width * pixelRatio );
  		_canvas.height = Math.floor( height * pixelRatio );

  		this.setViewport( 0, 0, width, height );

  	};

  	this.getCurrentViewport = function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );

  			target = new Vector4();

  		}

  		return target.copy( _currentViewport );

  	};

  	this.getViewport = function ( target ) {

  		return target.copy( _viewport );

  	};

  	this.setViewport = function ( x, y, width, height ) {

  		if ( x.isVector4 ) {

  			_viewport.set( x.x, x.y, x.z, x.w );

  		} else {

  			_viewport.set( x, y, width, height );

  		}

  		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

  	};

  	this.getScissor = function ( target ) {

  		return target.copy( _scissor );

  	};

  	this.setScissor = function ( x, y, width, height ) {

  		if ( x.isVector4 ) {

  			_scissor.set( x.x, x.y, x.z, x.w );

  		} else {

  			_scissor.set( x, y, width, height );

  		}

  		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );

  	};

  	this.getScissorTest = function () {

  		return _scissorTest;

  	};

  	this.setScissorTest = function ( boolean ) {

  		state.setScissorTest( _scissorTest = boolean );

  	};

  	this.setOpaqueSort = function ( method ) {

  		_opaqueSort = method;

  	};

  	this.setTransparentSort = function ( method ) {

  		_transparentSort = method;

  	};

  	// Clearing

  	this.getClearColor = function () {

  		return background.getClearColor();

  	};

  	this.setClearColor = function () {

  		background.setClearColor.apply( background, arguments );

  	};

  	this.getClearAlpha = function () {

  		return background.getClearAlpha();

  	};

  	this.setClearAlpha = function () {

  		background.setClearAlpha.apply( background, arguments );

  	};

  	this.clear = function ( color, depth, stencil ) {

  		var bits = 0;

  		if ( color === undefined || color ) bits |= 16384;
  		if ( depth === undefined || depth ) bits |= 256;
  		if ( stencil === undefined || stencil ) bits |= 1024;

  		_gl.clear( bits );

  	};

  	this.clearColor = function () {

  		this.clear( true, false, false );

  	};

  	this.clearDepth = function () {

  		this.clear( false, true, false );

  	};

  	this.clearStencil = function () {

  		this.clear( false, false, true );

  	};

  	//

  	this.dispose = function () {

  		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
  		_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );

  		renderLists.dispose();
  		renderStates.dispose();
  		properties.dispose();
  		objects.dispose();

  		xr.dispose();

  		animation.stop();

  		this.forceContextLoss();

  	};

  	// Events

  	function onContextLost( event ) {

  		event.preventDefault();

  		console.log( 'THREE.WebGLRenderer: Context Lost.' );

  		_isContextLost = true;

  	}

  	function onContextRestore( /* event */ ) {

  		console.log( 'THREE.WebGLRenderer: Context Restored.' );

  		_isContextLost = false;

  		initGLContext();

  	}

  	function onMaterialDispose( event ) {

  		var material = event.target;

  		material.removeEventListener( 'dispose', onMaterialDispose );

  		deallocateMaterial( material );

  	}

  	// Buffer deallocation

  	function deallocateMaterial( material ) {

  		releaseMaterialProgramReference( material );

  		properties.remove( material );

  	}


  	function releaseMaterialProgramReference( material ) {

  		var programInfo = properties.get( material ).program;

  		material.program = undefined;

  		if ( programInfo !== undefined ) {

  			programCache.releaseProgram( programInfo );

  		}

  	}

  	// Buffer rendering

  	function renderObjectImmediate( object, program ) {

  		object.render( function ( object ) {

  			_this.renderBufferImmediate( object, program );

  		} );

  	}

  	this.renderBufferImmediate = function ( object, program ) {

  		state.initAttributes();

  		var buffers = properties.get( object );

  		if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
  		if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
  		if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
  		if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

  		var programAttributes = program.getAttributes();

  		if ( object.hasPositions ) {

  			_gl.bindBuffer( 34962, buffers.position );
  			_gl.bufferData( 34962, object.positionArray, 35048 );

  			state.enableAttribute( programAttributes.position );
  			_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );

  		}

  		if ( object.hasNormals ) {

  			_gl.bindBuffer( 34962, buffers.normal );
  			_gl.bufferData( 34962, object.normalArray, 35048 );

  			state.enableAttribute( programAttributes.normal );
  			_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );

  		}

  		if ( object.hasUvs ) {

  			_gl.bindBuffer( 34962, buffers.uv );
  			_gl.bufferData( 34962, object.uvArray, 35048 );

  			state.enableAttribute( programAttributes.uv );
  			_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );

  		}

  		if ( object.hasColors ) {

  			_gl.bindBuffer( 34962, buffers.color );
  			_gl.bufferData( 34962, object.colorArray, 35048 );

  			state.enableAttribute( programAttributes.color );
  			_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );

  		}

  		state.disableUnusedAttributes();

  		_gl.drawArrays( 4, 0, object.count );

  		object.count = 0;

  	};

  	var tempScene = new Scene();

  	this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {

  		if ( scene === null ) scene = tempScene; // renderBufferDirect second parameter used to be fog (could be null)

  		var frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

  		var program = setProgram( camera, scene, material, object );

  		state.setMaterial( material, frontFaceCW );

  		var updateBuffers = false;

  		if ( _currentGeometryProgram.geometry !== geometry.id ||
  			_currentGeometryProgram.program !== program.id ||
  			_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {

  			_currentGeometryProgram.geometry = geometry.id;
  			_currentGeometryProgram.program = program.id;
  			_currentGeometryProgram.wireframe = material.wireframe === true;
  			updateBuffers = true;

  		}

  		if ( material.morphTargets || material.morphNormals ) {

  			morphtargets.update( object, geometry, material, program );

  			updateBuffers = true;

  		}

  		//

  		var index = geometry.index;
  		var position = geometry.attributes.position;

  		//

  		if ( index === null ) {

  			if ( position === undefined || position.count === 0 ) return;

  		} else if ( index.count === 0 ) {

  			return;

  		}

  		//

  		var rangeFactor = 1;

  		if ( material.wireframe === true ) {

  			index = geometries.getWireframeAttribute( geometry );
  			rangeFactor = 2;

  		}

  		var attribute;
  		var renderer = bufferRenderer;

  		if ( index !== null ) {

  			attribute = attributes.get( index );

  			renderer = indexedBufferRenderer;
  			renderer.setIndex( attribute );

  		}

  		if ( updateBuffers ) {

  			setupVertexAttributes( object, geometry, material, program );

  			if ( index !== null ) {

  				_gl.bindBuffer( 34963, attribute.buffer );

  			}

  		}

  		//

  		var dataCount = ( index !== null ) ? index.count : position.count;

  		var rangeStart = geometry.drawRange.start * rangeFactor;
  		var rangeCount = geometry.drawRange.count * rangeFactor;

  		var groupStart = group !== null ? group.start * rangeFactor : 0;
  		var groupCount = group !== null ? group.count * rangeFactor : Infinity;

  		var drawStart = Math.max( rangeStart, groupStart );
  		var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

  		var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

  		if ( drawCount === 0 ) return;

  		//

  		if ( object.isMesh ) {

  			if ( material.wireframe === true ) {

  				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
  				renderer.setMode( 1 );

  			} else {

  				renderer.setMode( 4 );

  			}

  		} else if ( object.isLine ) {

  			var lineWidth = material.linewidth;

  			if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

  			state.setLineWidth( lineWidth * getTargetPixelRatio() );

  			if ( object.isLineSegments ) {

  				renderer.setMode( 1 );

  			} else if ( object.isLineLoop ) {

  				renderer.setMode( 2 );

  			} else {

  				renderer.setMode( 3 );

  			}

  		} else if ( object.isPoints ) {

  			renderer.setMode( 0 );

  		} else if ( object.isSprite ) {

  			renderer.setMode( 4 );

  		}

  		if ( object.isInstancedMesh ) {

  			renderer.renderInstances( geometry, drawStart, drawCount, object.count );

  		} else if ( geometry.isInstancedBufferGeometry ) {

  			renderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );

  		} else {

  			renderer.render( drawStart, drawCount );

  		}

  	};

  	function setupVertexAttributes( object, geometry, material, program ) {

  		if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {

  			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;

  		}

  		state.initAttributes();

  		var geometryAttributes = geometry.attributes;

  		var programAttributes = program.getAttributes();

  		var materialDefaultAttributeValues = material.defaultAttributeValues;

  		for ( var name in programAttributes ) {

  			var programAttribute = programAttributes[ name ];

  			if ( programAttribute >= 0 ) {

  				var geometryAttribute = geometryAttributes[ name ];

  				if ( geometryAttribute !== undefined ) {

  					var normalized = geometryAttribute.normalized;
  					var size = geometryAttribute.itemSize;

  					var attribute = attributes.get( geometryAttribute );

  					// TODO Attribute may not be available on context restore

  					if ( attribute === undefined ) continue;

  					var buffer = attribute.buffer;
  					var type = attribute.type;
  					var bytesPerElement = attribute.bytesPerElement;

  					if ( geometryAttribute.isInterleavedBufferAttribute ) {

  						var data = geometryAttribute.data;
  						var stride = data.stride;
  						var offset = geometryAttribute.offset;

  						if ( data && data.isInstancedInterleavedBuffer ) {

  							state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );

  							if ( geometry.maxInstancedCount === undefined ) {

  								geometry.maxInstancedCount = data.meshPerAttribute * data.count;

  							}

  						} else {

  							state.enableAttribute( programAttribute );

  						}

  						_gl.bindBuffer( 34962, buffer );
  						_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );

  					} else {

  						if ( geometryAttribute.isInstancedBufferAttribute ) {

  							state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );

  							if ( geometry.maxInstancedCount === undefined ) {

  								geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

  							}

  						} else {

  							state.enableAttribute( programAttribute );

  						}

  						_gl.bindBuffer( 34962, buffer );
  						_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );

  					}

  				} else if ( name === 'instanceMatrix' ) {

  					var attribute = attributes.get( object.instanceMatrix );

  					// TODO Attribute may not be available on context restore

  					if ( attribute === undefined ) continue;

  					var buffer = attribute.buffer;
  					var type = attribute.type;

  					state.enableAttributeAndDivisor( programAttribute + 0, 1 );
  					state.enableAttributeAndDivisor( programAttribute + 1, 1 );
  					state.enableAttributeAndDivisor( programAttribute + 2, 1 );
  					state.enableAttributeAndDivisor( programAttribute + 3, 1 );

  					_gl.bindBuffer( 34962, buffer );

  					_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );
  					_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );
  					_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );
  					_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );

  				} else if ( materialDefaultAttributeValues !== undefined ) {

  					var value = materialDefaultAttributeValues[ name ];

  					if ( value !== undefined ) {

  						switch ( value.length ) {

  							case 2:
  								_gl.vertexAttrib2fv( programAttribute, value );
  								break;

  							case 3:
  								_gl.vertexAttrib3fv( programAttribute, value );
  								break;

  							case 4:
  								_gl.vertexAttrib4fv( programAttribute, value );
  								break;

  							default:
  								_gl.vertexAttrib1fv( programAttribute, value );

  						}

  					}

  				}

  			}

  		}

  		state.disableUnusedAttributes();

  	}

  	// Compile

  	this.compile = function ( scene, camera ) {

  		currentRenderState = renderStates.get( scene, camera );
  		currentRenderState.init();

  		scene.traverse( function ( object ) {

  			if ( object.isLight ) {

  				currentRenderState.pushLight( object );

  				if ( object.castShadow ) {

  					currentRenderState.pushShadow( object );

  				}

  			}

  		} );

  		currentRenderState.setupLights( camera );

  		var compiled = {};

  		scene.traverse( function ( object ) {

  			if ( object.material ) {

  				if ( Array.isArray( object.material ) ) {

  					for ( var i = 0; i < object.material.length; i ++ ) {

  						if ( object.material[ i ].uuid in compiled === false ) {

  							initMaterial( object.material[ i ], scene, object );
  							compiled[ object.material[ i ].uuid ] = true;

  						}

  					}

  				} else if ( object.material.uuid in compiled === false ) {

  					initMaterial( object.material, scene, object );
  					compiled[ object.material.uuid ] = true;

  				}

  			}

  		} );

  	};

  	// Animation Loop

  	var onAnimationFrameCallback = null;

  	function onAnimationFrame( time ) {

  		if ( xr.isPresenting ) return;
  		if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );

  	}

  	var animation = new WebGLAnimation();
  	animation.setAnimationLoop( onAnimationFrame );

  	if ( typeof window !== 'undefined' ) animation.setContext( window );

  	this.setAnimationLoop = function ( callback ) {

  		onAnimationFrameCallback = callback;
  		xr.setAnimationLoop( callback );

  		animation.start();

  	};

  	// Rendering

  	this.render = function ( scene, camera ) {

  		var renderTarget, forceClear;

  		if ( arguments[ 2 ] !== undefined ) {

  			console.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );
  			renderTarget = arguments[ 2 ];

  		}

  		if ( arguments[ 3 ] !== undefined ) {

  			console.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );
  			forceClear = arguments[ 3 ];

  		}

  		if ( ! ( camera && camera.isCamera ) ) {

  			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
  			return;

  		}

  		if ( _isContextLost ) return;

  		// reset caching for this frame

  		_currentGeometryProgram.geometry = null;
  		_currentGeometryProgram.program = null;
  		_currentGeometryProgram.wireframe = false;
  		_currentMaterialId = - 1;
  		_currentCamera = null;

  		// update scene graph

  		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

  		// update camera matrices and frustum

  		if ( camera.parent === null ) camera.updateMatrixWorld();

  		if ( xr.enabled && xr.isPresenting ) {

  			camera = xr.getCamera( camera );

  		}

  		//

  		currentRenderState = renderStates.get( scene, camera );
  		currentRenderState.init();

  		scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );

  		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
  		_frustum.setFromProjectionMatrix( _projScreenMatrix );

  		_localClippingEnabled = this.localClippingEnabled;
  		_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

  		currentRenderList = renderLists.get( scene, camera );
  		currentRenderList.init();

  		projectObject( scene, camera, 0, _this.sortObjects );

  		currentRenderList.finish();

  		if ( _this.sortObjects === true ) {

  			currentRenderList.sort( _opaqueSort, _transparentSort );

  		}

  		//

  		if ( _clippingEnabled ) _clipping.beginShadows();

  		var shadowsArray = currentRenderState.state.shadowsArray;

  		shadowMap.render( shadowsArray, scene, camera );

  		currentRenderState.setupLights( camera );

  		if ( _clippingEnabled ) _clipping.endShadows();

  		//

  		if ( this.info.autoReset ) this.info.reset();

  		if ( renderTarget !== undefined ) {

  			this.setRenderTarget( renderTarget );

  		}

  		//

  		background.render( currentRenderList, scene, camera, forceClear );

  		// render scene

  		var opaqueObjects = currentRenderList.opaque;
  		var transparentObjects = currentRenderList.transparent;

  		if ( scene.overrideMaterial ) {

  			var overrideMaterial = scene.overrideMaterial;

  			if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );
  			if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );

  		} else {

  			// opaque pass (front-to-back order)

  			if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );

  			// transparent pass (back-to-front order)

  			if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );

  		}

  		//

  		scene.onAfterRender( _this, scene, camera );

  		//

  		if ( _currentRenderTarget !== null ) {

  			// Generate mipmap if we're using any kind of mipmap filtering

  			textures.updateRenderTargetMipmap( _currentRenderTarget );

  			// resolve multisample renderbuffers to a single-sample texture if necessary

  			textures.updateMultisampleRenderTarget( _currentRenderTarget );

  		}

  		// Ensure depth buffer writing is enabled so it can be cleared on next render

  		state.buffers.depth.setTest( true );
  		state.buffers.depth.setMask( true );
  		state.buffers.color.setMask( true );

  		state.setPolygonOffset( false );

  		// _gl.finish();

  		currentRenderList = null;
  		currentRenderState = null;

  	};

  	function projectObject( object, camera, groupOrder, sortObjects ) {

  		if ( object.visible === false ) return;

  		var visible = object.layers.test( camera.layers );

  		if ( visible ) {

  			if ( object.isGroup ) {

  				groupOrder = object.renderOrder;

  			} else if ( object.isLOD ) {

  				if ( object.autoUpdate === true ) object.update( camera );

  			} else if ( object.isLight ) {

  				currentRenderState.pushLight( object );

  				if ( object.castShadow ) {

  					currentRenderState.pushShadow( object );

  				}

  			} else if ( object.isSprite ) {

  				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

  					if ( sortObjects ) {

  						_vector3.setFromMatrixPosition( object.matrixWorld )
  							.applyMatrix4( _projScreenMatrix );

  					}

  					var geometry = objects.update( object );
  					var material = object.material;

  					if ( material.visible ) {

  						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

  					}

  				}

  			} else if ( object.isImmediateRenderObject ) {

  				if ( sortObjects ) {

  					_vector3.setFromMatrixPosition( object.matrixWorld )
  						.applyMatrix4( _projScreenMatrix );

  				}

  				currentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );

  			} else if ( object.isMesh || object.isLine || object.isPoints ) {

  				if ( object.isSkinnedMesh ) {

  					// update skeleton only once in a frame

  					if ( object.skeleton.frame !== info.render.frame ) {

  						object.skeleton.update();
  						object.skeleton.frame = info.render.frame;

  					}

  				}

  				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

  					if ( sortObjects ) {

  						_vector3.setFromMatrixPosition( object.matrixWorld )
  							.applyMatrix4( _projScreenMatrix );

  					}

  					var geometry = objects.update( object );
  					var material = object.material;

  					if ( Array.isArray( material ) ) {

  						var groups = geometry.groups;

  						for ( var i = 0, l = groups.length; i < l; i ++ ) {

  							var group = groups[ i ];
  							var groupMaterial = material[ group.materialIndex ];

  							if ( groupMaterial && groupMaterial.visible ) {

  								currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );

  							}

  						}

  					} else if ( material.visible ) {

  						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

  					}

  				}

  			}

  		}

  		var children = object.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			projectObject( children[ i ], camera, groupOrder, sortObjects );

  		}

  	}

  	function renderObjects( renderList, scene, camera, overrideMaterial ) {

  		for ( var i = 0, l = renderList.length; i < l; i ++ ) {

  			var renderItem = renderList[ i ];

  			var object = renderItem.object;
  			var geometry = renderItem.geometry;
  			var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
  			var group = renderItem.group;

  			if ( camera.isArrayCamera ) {

  				_currentArrayCamera = camera;

  				var cameras = camera.cameras;

  				for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {

  					var camera2 = cameras[ j ];

  					if ( object.layers.test( camera2.layers ) ) {

  						state.viewport( _currentViewport.copy( camera2.viewport ) );

  						currentRenderState.setupLights( camera2 );

  						renderObject( object, scene, camera2, geometry, material, group );

  					}

  				}

  			} else {

  				_currentArrayCamera = null;

  				renderObject( object, scene, camera, geometry, material, group );

  			}

  		}

  	}

  	function renderObject( object, scene, camera, geometry, material, group ) {

  		object.onBeforeRender( _this, scene, camera, geometry, material, group );
  		currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

  		object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
  		object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

  		if ( object.isImmediateRenderObject ) {

  			var program = setProgram( camera, scene, material, object );

  			state.setMaterial( material );

  			_currentGeometryProgram.geometry = null;
  			_currentGeometryProgram.program = null;
  			_currentGeometryProgram.wireframe = false;

  			renderObjectImmediate( object, program );

  		} else {

  			_this.renderBufferDirect( camera, scene, geometry, material, object, group );

  		}

  		object.onAfterRender( _this, scene, camera, geometry, material, group );
  		currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

  	}

  	function initMaterial( material, scene, object ) {

  		var materialProperties = properties.get( material );

  		var lights = currentRenderState.state.lights;
  		var shadowsArray = currentRenderState.state.shadowsArray;

  		var lightsStateVersion = lights.state.version;

  		var parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, _clipping.numPlanes, _clipping.numIntersection, object );
  		var programCacheKey = programCache.getProgramCacheKey( parameters );

  		var program = materialProperties.program;
  		var programChange = true;

  		if ( program === undefined ) {

  			// new material
  			material.addEventListener( 'dispose', onMaterialDispose );

  		} else if ( program.cacheKey !== programCacheKey ) {

  			// changed glsl or parameters
  			releaseMaterialProgramReference( material );

  		} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {

  			materialProperties.lightsStateVersion = lightsStateVersion;

  			programChange = false;

  		} else if ( parameters.shaderID !== undefined ) {

  			// same glsl and uniform list
  			return;

  		} else {

  			// only rebuild uniform list
  			programChange = false;

  		}

  		if ( programChange ) {

  			program = programCache.acquireProgram( parameters, programCacheKey );

  			materialProperties.program = program;
  			materialProperties.uniforms = parameters.uniforms;
  			materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
  			materialProperties.outputEncoding = _this.outputEncoding;
  			material.program = program;

  		}

  		var programAttributes = program.getAttributes();

  		if ( material.morphTargets ) {

  			material.numSupportedMorphTargets = 0;

  			for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

  				if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {

  					material.numSupportedMorphTargets ++;

  				}

  			}

  		}

  		if ( material.morphNormals ) {

  			material.numSupportedMorphNormals = 0;

  			for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

  				if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {

  					material.numSupportedMorphNormals ++;

  				}

  			}

  		}

  		var uniforms = materialProperties.uniforms;

  		if ( ! material.isShaderMaterial &&
  			! material.isRawShaderMaterial ||
  			material.clipping === true ) {

  			materialProperties.numClippingPlanes = _clipping.numPlanes;
  			materialProperties.numIntersection = _clipping.numIntersection;
  			uniforms.clippingPlanes = _clipping.uniform;

  		}

  		materialProperties.fog = scene.fog;

  		// store the light setup it was created for

  		materialProperties.needsLights = materialNeedsLights( material );
  		materialProperties.lightsStateVersion = lightsStateVersion;

  		if ( materialProperties.needsLights ) {

  			// wire up the material to this renderer's lighting state

  			uniforms.ambientLightColor.value = lights.state.ambient;
  			uniforms.lightProbe.value = lights.state.probe;
  			uniforms.directionalLights.value = lights.state.directional;
  			uniforms.directionalLightShadows.value = lights.state.directionalShadow;
  			uniforms.spotLights.value = lights.state.spot;
  			uniforms.spotLightShadows.value = lights.state.spotShadow;
  			uniforms.rectAreaLights.value = lights.state.rectArea;
  			uniforms.pointLights.value = lights.state.point;
  			uniforms.pointLightShadows.value = lights.state.pointShadow;
  			uniforms.hemisphereLights.value = lights.state.hemi;

  			uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
  			uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
  			uniforms.spotShadowMap.value = lights.state.spotShadowMap;
  			uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
  			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
  			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
  			// TODO (abelnation): add area lights shadow info to uniforms

  		}

  		var progUniforms = materialProperties.program.getUniforms(),
  			uniformsList =
  				WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

  		materialProperties.uniformsList = uniformsList;

  	}

  	function setProgram( camera, scene, material, object ) {

  		textures.resetTextureUnits();

  		var fog = scene.fog;
  		var environment = material.isMeshStandardMaterial ? scene.environment : null;

  		var materialProperties = properties.get( material );
  		var lights = currentRenderState.state.lights;

  		if ( _clippingEnabled ) {

  			if ( _localClippingEnabled || camera !== _currentCamera ) {

  				var useCache =
  					camera === _currentCamera &&
  					material.id === _currentMaterialId;

  				// we might want to call this function with some ClippingGroup
  				// object instead of the material, once it becomes feasible
  				// (#8465, #8379)
  				_clipping.setState(
  					material.clippingPlanes, material.clipIntersection, material.clipShadows,
  					camera, materialProperties, useCache );

  			}

  		}

  		if ( material.version === materialProperties.__version ) {

  			if ( materialProperties.program === undefined ) {

  				initMaterial( material, scene, object );

  			} else if ( material.fog && materialProperties.fog !== fog ) {

  				initMaterial( material, scene, object );

  			} else if ( materialProperties.environment !== environment ) {

  				initMaterial( material, scene, object );

  			} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {

  				initMaterial( material, scene, object );

  			} else if ( materialProperties.numClippingPlanes !== undefined &&
  				( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
  				materialProperties.numIntersection !== _clipping.numIntersection ) ) {

  				initMaterial( material, scene, object );

  			} else if ( materialProperties.outputEncoding !== _this.outputEncoding ) {

  				initMaterial( material, scene, object );

  			}

  		} else {

  			initMaterial( material, scene, object );
  			materialProperties.__version = material.version;

  		}

  		var refreshProgram = false;
  		var refreshMaterial = false;
  		var refreshLights = false;

  		var program = materialProperties.program,
  			p_uniforms = program.getUniforms(),
  			m_uniforms = materialProperties.uniforms;

  		if ( state.useProgram( program.program ) ) {

  			refreshProgram = true;
  			refreshMaterial = true;
  			refreshLights = true;

  		}

  		if ( material.id !== _currentMaterialId ) {

  			_currentMaterialId = material.id;

  			refreshMaterial = true;

  		}

  		if ( refreshProgram || _currentCamera !== camera ) {

  			p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

  			if ( capabilities.logarithmicDepthBuffer ) {

  				p_uniforms.setValue( _gl, 'logDepthBufFC',
  					2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

  			}

  			if ( _currentCamera !== camera ) {

  				_currentCamera = camera;

  				// lighting uniforms depend on the camera so enforce an update
  				// now, in case this material supports lights - or later, when
  				// the next material that does gets activated:

  				refreshMaterial = true;		// set to true on material change
  				refreshLights = true;		// remains set until update done

  			}

  			// load material specific uniforms
  			// (shader material also gets them for the sake of genericity)

  			if ( material.isShaderMaterial ||
  				material.isMeshPhongMaterial ||
  				material.isMeshToonMaterial ||
  				material.isMeshStandardMaterial ||
  				material.envMap ) {

  				var uCamPos = p_uniforms.map.cameraPosition;

  				if ( uCamPos !== undefined ) {

  					uCamPos.setValue( _gl,
  						_vector3.setFromMatrixPosition( camera.matrixWorld ) );

  				}

  			}

  			if ( material.isMeshPhongMaterial ||
  				material.isMeshToonMaterial ||
  				material.isMeshLambertMaterial ||
  				material.isMeshBasicMaterial ||
  				material.isMeshStandardMaterial ||
  				material.isShaderMaterial ) {

  				p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );

  			}

  			if ( material.isMeshPhongMaterial ||
  				material.isMeshToonMaterial ||
  				material.isMeshLambertMaterial ||
  				material.isMeshBasicMaterial ||
  				material.isMeshStandardMaterial ||
  				material.isShaderMaterial ||
  				material.skinning ) {

  				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

  			}

  		}

  		// skinning uniforms must be set even if material didn't change
  		// auto-setting of texture unit for bone texture must go before other textures
  		// otherwise textures used for skinning can take over texture units reserved for other material textures

  		if ( material.skinning ) {

  			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
  			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

  			var skeleton = object.skeleton;

  			if ( skeleton ) {

  				var bones = skeleton.bones;

  				if ( capabilities.floatVertexTextures ) {

  					if ( skeleton.boneTexture === undefined ) {

  						// layout (1 matrix = 4 pixels)
  						//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
  						//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
  						//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
  						//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
  						//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


  						var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
  						size = MathUtils.ceilPowerOfTwo( size );
  						size = Math.max( size, 4 );

  						var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
  						boneMatrices.set( skeleton.boneMatrices ); // copy current values

  						var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );

  						skeleton.boneMatrices = boneMatrices;
  						skeleton.boneTexture = boneTexture;
  						skeleton.boneTextureSize = size;

  					}

  					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
  					p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

  				} else {

  					p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

  				}

  			}

  		}

  		if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {

  			materialProperties.receiveShadow = object.receiveShadow;
  			p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );

  		}

  		if ( refreshMaterial ) {

  			p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
  			p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );

  			if ( materialProperties.needsLights ) {

  				// the current material requires lighting info

  				// note: all lighting uniforms are always set correctly
  				// they simply reference the renderer's state for their
  				// values
  				//
  				// use the current material's .needsUpdate flags to set
  				// the GL state when required

  				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

  			}

  			// refresh uniforms common to several materials

  			if ( fog && material.fog ) {

  				refreshUniformsFog( m_uniforms, fog );

  			}

  			if ( material.isMeshBasicMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );

  			} else if ( material.isMeshLambertMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );
  				refreshUniformsLambert( m_uniforms, material );

  			} else if ( material.isMeshToonMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );
  				refreshUniformsToon( m_uniforms, material );

  			} else if ( material.isMeshPhongMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );
  				refreshUniformsPhong( m_uniforms, material );

  			} else if ( material.isMeshStandardMaterial ) {

  				refreshUniformsCommon( m_uniforms, material, environment );

  				if ( material.isMeshPhysicalMaterial ) {

  					refreshUniformsPhysical( m_uniforms, material, environment );

  				} else {

  					refreshUniformsStandard( m_uniforms, material, environment );

  				}

  			} else if ( material.isMeshMatcapMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );
  				refreshUniformsMatcap( m_uniforms, material );

  			} else if ( material.isMeshDepthMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );
  				refreshUniformsDepth( m_uniforms, material );

  			} else if ( material.isMeshDistanceMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );
  				refreshUniformsDistance( m_uniforms, material );

  			} else if ( material.isMeshNormalMaterial ) {

  				refreshUniformsCommon( m_uniforms, material );
  				refreshUniformsNormal( m_uniforms, material );

  			} else if ( material.isLineBasicMaterial ) {

  				refreshUniformsLine( m_uniforms, material );

  				if ( material.isLineDashedMaterial ) {

  					refreshUniformsDash( m_uniforms, material );

  				}

  			} else if ( material.isPointsMaterial ) {

  				refreshUniformsPoints( m_uniforms, material );

  			} else if ( material.isSpriteMaterial ) {

  				refreshUniformsSprites( m_uniforms, material );

  			} else if ( material.isShadowMaterial ) {

  				m_uniforms.color.value.copy( material.color );
  				m_uniforms.opacity.value = material.opacity;

  			}

  			// RectAreaLight Texture
  			// TODO (mrdoob): Find a nicer implementation

  			if ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;
  			if ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;

  			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );

  			if ( material.isShaderMaterial ) {

  				material.uniformsNeedUpdate = false; // #15581

  			}

  		}

  		if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

  			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
  			material.uniformsNeedUpdate = false;

  		}

  		if ( material.isSpriteMaterial ) {

  			p_uniforms.setValue( _gl, 'center', object.center );

  		}

  		// common matrices

  		p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
  		p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
  		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

  		return program;

  	}

  	// Uniforms (refresh uniforms objects)

  	function refreshUniformsCommon( uniforms, material, environment ) {

  		uniforms.opacity.value = material.opacity;

  		if ( material.color ) {

  			uniforms.diffuse.value.copy( material.color );

  		}

  		if ( material.emissive ) {

  			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

  		}

  		if ( material.map ) {

  			uniforms.map.value = material.map;

  		}

  		if ( material.alphaMap ) {

  			uniforms.alphaMap.value = material.alphaMap;

  		}

  		if ( material.specularMap ) {

  			uniforms.specularMap.value = material.specularMap;

  		}

  		var envMap = material.envMap || environment;

  		if ( envMap ) {

  			uniforms.envMap.value = envMap;

  			uniforms.flipEnvMap.value = envMap.isCubeTexture ? - 1 : 1;

  			uniforms.reflectivity.value = material.reflectivity;
  			uniforms.refractionRatio.value = material.refractionRatio;

  			uniforms.maxMipLevel.value = properties.get( envMap ).__maxMipLevel;

  		}

  		if ( material.lightMap ) {

  			uniforms.lightMap.value = material.lightMap;
  			uniforms.lightMapIntensity.value = material.lightMapIntensity;

  		}

  		if ( material.aoMap ) {

  			uniforms.aoMap.value = material.aoMap;
  			uniforms.aoMapIntensity.value = material.aoMapIntensity;

  		}

  		// uv repeat and offset setting priorities
  		// 1. color map
  		// 2. specular map
  		// 3. normal map
  		// 4. bump map
  		// 5. alpha map
  		// 6. emissive map

  		var uvScaleMap;

  		if ( material.map ) {

  			uvScaleMap = material.map;

  		} else if ( material.specularMap ) {

  			uvScaleMap = material.specularMap;

  		} else if ( material.displacementMap ) {

  			uvScaleMap = material.displacementMap;

  		} else if ( material.normalMap ) {

  			uvScaleMap = material.normalMap;

  		} else if ( material.bumpMap ) {

  			uvScaleMap = material.bumpMap;

  		} else if ( material.roughnessMap ) {

  			uvScaleMap = material.roughnessMap;

  		} else if ( material.metalnessMap ) {

  			uvScaleMap = material.metalnessMap;

  		} else if ( material.alphaMap ) {

  			uvScaleMap = material.alphaMap;

  		} else if ( material.emissiveMap ) {

  			uvScaleMap = material.emissiveMap;

  		}

  		if ( uvScaleMap !== undefined ) {

  			// backwards compatibility
  			if ( uvScaleMap.isWebGLRenderTarget ) {

  				uvScaleMap = uvScaleMap.texture;

  			}

  			if ( uvScaleMap.matrixAutoUpdate === true ) {

  				uvScaleMap.updateMatrix();

  			}

  			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

  		}

  		// uv repeat and offset setting priorities for uv2
  		// 1. ao map
  		// 2. light map

  		var uv2ScaleMap;

  		if ( material.aoMap ) {

  			uv2ScaleMap = material.aoMap;

  		} else if ( material.lightMap ) {

  			uv2ScaleMap = material.lightMap;

  		}

  		if ( uv2ScaleMap !== undefined ) {

  			// backwards compatibility
  			if ( uv2ScaleMap.isWebGLRenderTarget ) {

  				uv2ScaleMap = uv2ScaleMap.texture;

  			}

  			if ( uv2ScaleMap.matrixAutoUpdate === true ) {

  				uv2ScaleMap.updateMatrix();

  			}

  			uniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );

  		}

  	}

  	function refreshUniformsLine( uniforms, material ) {

  		uniforms.diffuse.value.copy( material.color );
  		uniforms.opacity.value = material.opacity;

  	}

  	function refreshUniformsDash( uniforms, material ) {

  		uniforms.dashSize.value = material.dashSize;
  		uniforms.totalSize.value = material.dashSize + material.gapSize;
  		uniforms.scale.value = material.scale;

  	}

  	function refreshUniformsPoints( uniforms, material ) {

  		uniforms.diffuse.value.copy( material.color );
  		uniforms.opacity.value = material.opacity;
  		uniforms.size.value = material.size * _pixelRatio;
  		uniforms.scale.value = _height * 0.5;

  		if ( material.map ) {

  			uniforms.map.value = material.map;

  		}

  		if ( material.alphaMap ) {

  			uniforms.alphaMap.value = material.alphaMap;

  		}

  		// uv repeat and offset setting priorities
  		// 1. color map
  		// 2. alpha map

  		var uvScaleMap;

  		if ( material.map ) {

  			uvScaleMap = material.map;

  		} else if ( material.alphaMap ) {

  			uvScaleMap = material.alphaMap;

  		}

  		if ( uvScaleMap !== undefined ) {

  			if ( uvScaleMap.matrixAutoUpdate === true ) {

  				uvScaleMap.updateMatrix();

  			}

  			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

  		}

  	}

  	function refreshUniformsSprites( uniforms, material ) {

  		uniforms.diffuse.value.copy( material.color );
  		uniforms.opacity.value = material.opacity;
  		uniforms.rotation.value = material.rotation;

  		if ( material.map ) {

  			uniforms.map.value = material.map;

  		}

  		if ( material.alphaMap ) {

  			uniforms.alphaMap.value = material.alphaMap;

  		}

  		// uv repeat and offset setting priorities
  		// 1. color map
  		// 2. alpha map

  		var uvScaleMap;

  		if ( material.map ) {

  			uvScaleMap = material.map;

  		} else if ( material.alphaMap ) {

  			uvScaleMap = material.alphaMap;

  		}

  		if ( uvScaleMap !== undefined ) {

  			if ( uvScaleMap.matrixAutoUpdate === true ) {

  				uvScaleMap.updateMatrix();

  			}

  			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

  		}

  	}

  	function refreshUniformsFog( uniforms, fog ) {

  		uniforms.fogColor.value.copy( fog.color );

  		if ( fog.isFog ) {

  			uniforms.fogNear.value = fog.near;
  			uniforms.fogFar.value = fog.far;

  		} else if ( fog.isFogExp2 ) {

  			uniforms.fogDensity.value = fog.density;

  		}

  	}

  	function refreshUniformsLambert( uniforms, material ) {

  		if ( material.emissiveMap ) {

  			uniforms.emissiveMap.value = material.emissiveMap;

  		}

  	}

  	function refreshUniformsPhong( uniforms, material ) {

  		uniforms.specular.value.copy( material.specular );
  		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

  		if ( material.emissiveMap ) {

  			uniforms.emissiveMap.value = material.emissiveMap;

  		}

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	function refreshUniformsToon( uniforms, material ) {

  		uniforms.specular.value.copy( material.specular );
  		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

  		if ( material.gradientMap ) {

  			uniforms.gradientMap.value = material.gradientMap;

  		}

  		if ( material.emissiveMap ) {

  			uniforms.emissiveMap.value = material.emissiveMap;

  		}

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	function refreshUniformsStandard( uniforms, material, environment ) {

  		uniforms.roughness.value = material.roughness;
  		uniforms.metalness.value = material.metalness;

  		if ( material.roughnessMap ) {

  			uniforms.roughnessMap.value = material.roughnessMap;

  		}

  		if ( material.metalnessMap ) {

  			uniforms.metalnessMap.value = material.metalnessMap;

  		}

  		if ( material.emissiveMap ) {

  			uniforms.emissiveMap.value = material.emissiveMap;

  		}

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  		if ( material.envMap || environment ) {

  			//uniforms.envMap.value = material.envMap; // part of uniforms common
  			uniforms.envMapIntensity.value = material.envMapIntensity;

  		}

  	}

  	function refreshUniformsPhysical( uniforms, material, environment ) {

  		refreshUniformsStandard( uniforms, material, environment );

  		uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common

  		uniforms.clearcoat.value = material.clearcoat;
  		uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
  		if ( material.sheen ) uniforms.sheen.value.copy( material.sheen );

  		if ( material.clearcoatMap ) {

  			uniforms.clearcoatMap.value = material.clearcoatMap;

  		}

  		if ( material.clearcoatRoughnessMap ) {

  			uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;

  		}

  		if ( material.clearcoatNormalMap ) {

  			uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );
  			uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

  			if ( material.side === BackSide ) {

  				uniforms.clearcoatNormalScale.value.negate();

  			}

  		}

  		uniforms.transparency.value = material.transparency;

  	}

  	function refreshUniformsMatcap( uniforms, material ) {

  		if ( material.matcap ) {

  			uniforms.matcap.value = material.matcap;

  		}

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	function refreshUniformsDepth( uniforms, material ) {

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	function refreshUniformsDistance( uniforms, material ) {

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  		uniforms.referencePosition.value.copy( material.referencePosition );
  		uniforms.nearDistance.value = material.nearDistance;
  		uniforms.farDistance.value = material.farDistance;

  	}

  	function refreshUniformsNormal( uniforms, material ) {

  		if ( material.bumpMap ) {

  			uniforms.bumpMap.value = material.bumpMap;
  			uniforms.bumpScale.value = material.bumpScale;
  			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;

  		}

  		if ( material.normalMap ) {

  			uniforms.normalMap.value = material.normalMap;
  			uniforms.normalScale.value.copy( material.normalScale );
  			if ( material.side === BackSide ) uniforms.normalScale.value.negate();

  		}

  		if ( material.displacementMap ) {

  			uniforms.displacementMap.value = material.displacementMap;
  			uniforms.displacementScale.value = material.displacementScale;
  			uniforms.displacementBias.value = material.displacementBias;

  		}

  	}

  	// If uniforms are marked as clean, they don't need to be loaded to the GPU.

  	function markUniformsLightsNeedsUpdate( uniforms, value ) {

  		uniforms.ambientLightColor.needsUpdate = value;
  		uniforms.lightProbe.needsUpdate = value;

  		uniforms.directionalLights.needsUpdate = value;
  		uniforms.directionalLightShadows.needsUpdate = value;
  		uniforms.pointLights.needsUpdate = value;
  		uniforms.pointLightShadows.needsUpdate = value;
  		uniforms.spotLights.needsUpdate = value;
  		uniforms.spotLightShadows.needsUpdate = value;
  		uniforms.rectAreaLights.needsUpdate = value;
  		uniforms.hemisphereLights.needsUpdate = value;

  	}

  	function materialNeedsLights( material ) {

  		return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
  			material.isMeshStandardMaterial || material.isShadowMaterial ||
  			( material.isShaderMaterial && material.lights === true );

  	}

  	//
  	this.setFramebuffer = function ( value ) {

  		if ( _framebuffer !== value && _currentRenderTarget === null ) _gl.bindFramebuffer( 36160, value );

  		_framebuffer = value;

  	};

  	this.getActiveCubeFace = function () {

  		return _currentActiveCubeFace;

  	};

  	this.getActiveMipmapLevel = function () {

  		return _currentActiveMipmapLevel;

  	};

  	this.getRenderTarget = function () {

  		return _currentRenderTarget;

  	};

  	this.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {

  		_currentRenderTarget = renderTarget;
  		_currentActiveCubeFace = activeCubeFace;
  		_currentActiveMipmapLevel = activeMipmapLevel;

  		if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

  			textures.setupRenderTarget( renderTarget );

  		}

  		var framebuffer = _framebuffer;
  		var isCube = false;

  		if ( renderTarget ) {

  			var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

  			if ( renderTarget.isWebGLCubeRenderTarget ) {

  				framebuffer = __webglFramebuffer[ activeCubeFace || 0 ];
  				isCube = true;

  			} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {

  				framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;

  			} else {

  				framebuffer = __webglFramebuffer;

  			}

  			_currentViewport.copy( renderTarget.viewport );
  			_currentScissor.copy( renderTarget.scissor );
  			_currentScissorTest = renderTarget.scissorTest;

  		} else {

  			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
  			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
  			_currentScissorTest = _scissorTest;

  		}

  		if ( _currentFramebuffer !== framebuffer ) {

  			_gl.bindFramebuffer( 36160, framebuffer );
  			_currentFramebuffer = framebuffer;

  		}

  		state.viewport( _currentViewport );
  		state.scissor( _currentScissor );
  		state.setScissorTest( _currentScissorTest );

  		if ( isCube ) {

  			var textureProperties = properties.get( renderTarget.texture );
  			_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );

  		}

  	};

  	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {

  		if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

  			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
  			return;

  		}

  		var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

  		if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {

  			framebuffer = framebuffer[ activeCubeFaceIndex ];

  		}

  		if ( framebuffer ) {

  			var restore = false;

  			if ( framebuffer !== _currentFramebuffer ) {

  				_gl.bindFramebuffer( 36160, framebuffer );

  				restore = true;

  			}

  			try {

  				var texture = renderTarget.texture;
  				var textureFormat = texture.format;
  				var textureType = texture.type;

  				if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {

  					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
  					return;

  				}

  				if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)
  					! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
  					! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {

  					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
  					return;

  				}

  				if ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {

  					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

  					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

  						_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

  					}

  				} else {

  					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

  				}

  			} finally {

  				if ( restore ) {

  					_gl.bindFramebuffer( 36160, _currentFramebuffer );

  				}

  			}

  		}

  	};

  	this.copyFramebufferToTexture = function ( position, texture, level ) {

  		if ( level === undefined ) level = 0;

  		var levelScale = Math.pow( 2, - level );
  		var width = Math.floor( texture.image.width * levelScale );
  		var height = Math.floor( texture.image.height * levelScale );
  		var glFormat = utils.convert( texture.format );

  		textures.setTexture2D( texture, 0 );

  		_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );

  		state.unbindTexture();

  	};

  	this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {

  		var width = srcTexture.image.width;
  		var height = srcTexture.image.height;
  		var glFormat = utils.convert( dstTexture.format );
  		var glType = utils.convert( dstTexture.type );

  		textures.setTexture2D( dstTexture, 0 );

  		if ( srcTexture.isDataTexture ) {

  			_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );

  		} else {

  			_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );

  		}

  		state.unbindTexture();

  	};

  	this.initTexture = function ( texture ) {

  		textures.setTexture2D( texture, 0 );

  		state.unbindTexture();

  	};

  	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

  		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef

  	}

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function FogExp2( color, density ) {

  	this.name = '';

  	this.color = new Color( color );
  	this.density = ( density !== undefined ) ? density : 0.00025;

  }

  Object.assign( FogExp2.prototype, {

  	isFogExp2: true,

  	clone: function () {

  		return new FogExp2( this.color, this.density );

  	},

  	toJSON: function ( /* meta */ ) {

  		return {
  			type: 'FogExp2',
  			color: this.color.getHex(),
  			density: this.density
  		};

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function Fog( color, near, far ) {

  	this.name = '';

  	this.color = new Color( color );

  	this.near = ( near !== undefined ) ? near : 1;
  	this.far = ( far !== undefined ) ? far : 1000;

  }

  Object.assign( Fog.prototype, {

  	isFog: true,

  	clone: function () {

  		return new Fog( this.color, this.near, this.far );

  	},

  	toJSON: function ( /* meta */ ) {

  		return {
  			type: 'Fog',
  			color: this.color.getHex(),
  			near: this.near,
  			far: this.far
  		};

  	}

  } );

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  function InterleavedBuffer( array, stride ) {

  	this.array = array;
  	this.stride = stride;
  	this.count = array !== undefined ? array.length / stride : 0;

  	this.usage = StaticDrawUsage;
  	this.updateRange = { offset: 0, count: - 1 };

  	this.version = 0;

  }

  Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {

  	set: function ( value ) {

  		if ( value === true ) this.version ++;

  	}

  } );

  Object.assign( InterleavedBuffer.prototype, {

  	isInterleavedBuffer: true,

  	onUploadCallback: function () {},

  	setUsage: function ( value ) {

  		this.usage = value;

  		return this;

  	},

  	copy: function ( source ) {

  		this.array = new source.array.constructor( source.array );
  		this.count = source.count;
  		this.stride = source.stride;
  		this.usage = source.usage;

  		return this;

  	},

  	copyAt: function ( index1, attribute, index2 ) {

  		index1 *= this.stride;
  		index2 *= attribute.stride;

  		for ( var i = 0, l = this.stride; i < l; i ++ ) {

  			this.array[ index1 + i ] = attribute.array[ index2 + i ];

  		}

  		return this;

  	},

  	set: function ( value, offset ) {

  		if ( offset === undefined ) offset = 0;

  		this.array.set( value, offset );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	onUpload: function ( callback ) {

  		this.onUploadCallback = callback;

  		return this;

  	}

  } );

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  var _vector$6 = new Vector3();

  function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

  	this.data = interleavedBuffer;
  	this.itemSize = itemSize;
  	this.offset = offset;

  	this.normalized = normalized === true;

  }

  Object.defineProperties( InterleavedBufferAttribute.prototype, {

  	count: {

  		get: function () {

  			return this.data.count;

  		}

  	},

  	array: {

  		get: function () {

  			return this.data.array;

  		}

  	}

  } );

  Object.assign( InterleavedBufferAttribute.prototype, {

  	isInterleavedBufferAttribute: true,

  	applyMatrix4: function ( m ) {

  		for ( var i = 0, l = this.data.count; i < l; i ++ ) {

  			_vector$6.x = this.getX( i );
  			_vector$6.y = this.getY( i );
  			_vector$6.z = this.getZ( i );

  			_vector$6.applyMatrix4( m );

  			this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );

  		}

  		return this;

  	},

  	setX: function ( index, x ) {

  		this.data.array[ index * this.data.stride + this.offset ] = x;

  		return this;

  	},

  	setY: function ( index, y ) {

  		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

  		return this;

  	},

  	setZ: function ( index, z ) {

  		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

  		return this;

  	},

  	setW: function ( index, w ) {

  		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

  		return this;

  	},

  	getX: function ( index ) {

  		return this.data.array[ index * this.data.stride + this.offset ];

  	},

  	getY: function ( index ) {

  		return this.data.array[ index * this.data.stride + this.offset + 1 ];

  	},

  	getZ: function ( index ) {

  		return this.data.array[ index * this.data.stride + this.offset + 2 ];

  	},

  	getW: function ( index ) {

  		return this.data.array[ index * this.data.stride + this.offset + 3 ];

  	},

  	setXY: function ( index, x, y ) {

  		index = index * this.data.stride + this.offset;

  		this.data.array[ index + 0 ] = x;
  		this.data.array[ index + 1 ] = y;

  		return this;

  	},

  	setXYZ: function ( index, x, y, z ) {

  		index = index * this.data.stride + this.offset;

  		this.data.array[ index + 0 ] = x;
  		this.data.array[ index + 1 ] = y;
  		this.data.array[ index + 2 ] = z;

  		return this;

  	},

  	setXYZW: function ( index, x, y, z, w ) {

  		index = index * this.data.stride + this.offset;

  		this.data.array[ index + 0 ] = x;
  		this.data.array[ index + 1 ] = y;
  		this.data.array[ index + 2 ] = z;
  		this.data.array[ index + 3 ] = w;

  		return this;

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  map: new THREE.Texture( <Image> ),
   *  alphaMap: new THREE.Texture( <Image> ),
   *  rotation: <float>,
   *  sizeAttenuation: <bool>
   * }
   */

  function SpriteMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'SpriteMaterial';

  	this.color = new Color( 0xffffff );

  	this.map = null;

  	this.alphaMap = null;

  	this.rotation = 0;

  	this.sizeAttenuation = true;

  	this.transparent = true;

  	this.setValues( parameters );

  }

  SpriteMaterial.prototype = Object.create( Material.prototype );
  SpriteMaterial.prototype.constructor = SpriteMaterial;
  SpriteMaterial.prototype.isSpriteMaterial = true;

  SpriteMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.map = source.map;

  	this.alphaMap = source.alphaMap;

  	this.rotation = source.rotation;

  	this.sizeAttenuation = source.sizeAttenuation;

  	return this;

  };

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   */

  var _geometry;

  var _intersectPoint = new Vector3();
  var _worldScale = new Vector3();
  var _mvPosition = new Vector3();

  var _alignedPosition = new Vector2();
  var _rotatedPosition = new Vector2();
  var _viewWorldMatrix = new Matrix4();

  var _vA$1 = new Vector3();
  var _vB$1 = new Vector3();
  var _vC$1 = new Vector3();

  var _uvA$1 = new Vector2();
  var _uvB$1 = new Vector2();
  var _uvC$1 = new Vector2();

  function Sprite( material ) {

  	Object3D.call( this );

  	this.type = 'Sprite';

  	if ( _geometry === undefined ) {

  		_geometry = new BufferGeometry();

  		var float32Array = new Float32Array( [
  			- 0.5, - 0.5, 0, 0, 0,
  			0.5, - 0.5, 0, 1, 0,
  			0.5, 0.5, 0, 1, 1,
  			- 0.5, 0.5, 0, 0, 1
  		] );

  		var interleavedBuffer = new InterleavedBuffer( float32Array, 5 );

  		_geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
  		_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
  		_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );

  	}

  	this.geometry = _geometry;
  	this.material = ( material !== undefined ) ? material : new SpriteMaterial();

  	this.center = new Vector2( 0.5, 0.5 );

  }

  Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Sprite,

  	isSprite: true,

  	raycast: function ( raycaster, intersects ) {

  		if ( raycaster.camera === null ) {

  			console.error( 'THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.' );

  		}

  		_worldScale.setFromMatrixScale( this.matrixWorld );

  		_viewWorldMatrix.copy( raycaster.camera.matrixWorld );
  		this.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );

  		_mvPosition.setFromMatrixPosition( this.modelViewMatrix );

  		if ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {

  			_worldScale.multiplyScalar( - _mvPosition.z );

  		}

  		var rotation = this.material.rotation;
  		var sin, cos;
  		if ( rotation !== 0 ) {

  			cos = Math.cos( rotation );
  			sin = Math.sin( rotation );

  		}

  		var center = this.center;

  		transformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
  		transformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
  		transformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );

  		_uvA$1.set( 0, 0 );
  		_uvB$1.set( 1, 0 );
  		_uvC$1.set( 1, 1 );

  		// check first triangle
  		var intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );

  		if ( intersect === null ) {

  			// check second triangle
  			transformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
  			_uvB$1.set( 0, 1 );

  			intersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );
  			if ( intersect === null ) {

  				return;

  			}

  		}

  		var distance = raycaster.ray.origin.distanceTo( _intersectPoint );

  		if ( distance < raycaster.near || distance > raycaster.far ) return;

  		intersects.push( {

  			distance: distance,
  			point: _intersectPoint.clone(),
  			uv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),
  			face: null,
  			object: this

  		} );

  	},

  	clone: function () {

  		return new this.constructor( this.material ).copy( this );

  	},

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source );

  		if ( source.center !== undefined ) this.center.copy( source.center );

  		return this;

  	}


  } );

  function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {

  	// compute position in camera space
  	_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );

  	// to check if rotation is not zero
  	if ( sin !== undefined ) {

  		_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );
  		_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );

  	} else {

  		_rotatedPosition.copy( _alignedPosition );

  	}


  	vertexPosition.copy( mvPosition );
  	vertexPosition.x += _rotatedPosition.x;
  	vertexPosition.y += _rotatedPosition.y;

  	// transform to world space
  	vertexPosition.applyMatrix4( _viewWorldMatrix );

  }

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   */

  var _v1$4 = new Vector3();
  var _v2$2 = new Vector3();

  function LOD() {

  	Object3D.call( this );

  	this._currentLevel = 0;

  	this.type = 'LOD';

  	Object.defineProperties( this, {
  		levels: {
  			enumerable: true,
  			value: []
  		}
  	} );

  	this.autoUpdate = true;

  }

  LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: LOD,

  	isLOD: true,

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source, false );

  		var levels = source.levels;

  		for ( var i = 0, l = levels.length; i < l; i ++ ) {

  			var level = levels[ i ];

  			this.addLevel( level.object.clone(), level.distance );

  		}

  		this.autoUpdate = source.autoUpdate;

  		return this;

  	},

  	addLevel: function ( object, distance ) {

  		if ( distance === undefined ) distance = 0;

  		distance = Math.abs( distance );

  		var levels = this.levels;

  		for ( var l = 0; l < levels.length; l ++ ) {

  			if ( distance < levels[ l ].distance ) {

  				break;

  			}

  		}

  		levels.splice( l, 0, { distance: distance, object: object } );

  		this.add( object );

  		return this;

  	},

  	getCurrentLevel: function () {

  		return this._currentLevel;

  	},

  	getObjectForDistance: function ( distance ) {

  		var levels = this.levels;

  		if ( levels.length > 0 ) {

  			for ( var i = 1, l = levels.length; i < l; i ++ ) {

  				if ( distance < levels[ i ].distance ) {

  					break;

  				}

  			}

  			return levels[ i - 1 ].object;

  		}

  		return null;

  	},

  	raycast: function ( raycaster, intersects ) {

  		var levels = this.levels;

  		if ( levels.length > 0 ) {

  			_v1$4.setFromMatrixPosition( this.matrixWorld );

  			var distance = raycaster.ray.origin.distanceTo( _v1$4 );

  			this.getObjectForDistance( distance ).raycast( raycaster, intersects );

  		}

  	},

  	update: function ( camera ) {

  		var levels = this.levels;

  		if ( levels.length > 1 ) {

  			_v1$4.setFromMatrixPosition( camera.matrixWorld );
  			_v2$2.setFromMatrixPosition( this.matrixWorld );

  			var distance = _v1$4.distanceTo( _v2$2 ) / camera.zoom;

  			levels[ 0 ].object.visible = true;

  			for ( var i = 1, l = levels.length; i < l; i ++ ) {

  				if ( distance >= levels[ i ].distance ) {

  					levels[ i - 1 ].object.visible = false;
  					levels[ i ].object.visible = true;

  				} else {

  					break;

  				}

  			}

  			this._currentLevel = i - 1;

  			for ( ; i < l; i ++ ) {

  				levels[ i ].object.visible = false;

  			}

  		}

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		if ( this.autoUpdate === false ) data.object.autoUpdate = false;

  		data.object.levels = [];

  		var levels = this.levels;

  		for ( var i = 0, l = levels.length; i < l; i ++ ) {

  			var level = levels[ i ];

  			data.object.levels.push( {
  				object: level.object.uuid,
  				distance: level.distance
  			} );

  		}

  		return data;

  	}

  } );

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author ikerr / http://verold.com
   */

  function SkinnedMesh( geometry, material ) {

  	if ( geometry && geometry.isGeometry ) {

  		console.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

  	}

  	Mesh.call( this, geometry, material );

  	this.type = 'SkinnedMesh';

  	this.bindMode = 'attached';
  	this.bindMatrix = new Matrix4();
  	this.bindMatrixInverse = new Matrix4();

  }

  SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

  	constructor: SkinnedMesh,

  	isSkinnedMesh: true,

  	bind: function ( skeleton, bindMatrix ) {

  		this.skeleton = skeleton;

  		if ( bindMatrix === undefined ) {

  			this.updateMatrixWorld( true );

  			this.skeleton.calculateInverses();

  			bindMatrix = this.matrixWorld;

  		}

  		this.bindMatrix.copy( bindMatrix );
  		this.bindMatrixInverse.getInverse( bindMatrix );

  	},

  	pose: function () {

  		this.skeleton.pose();

  	},

  	normalizeSkinWeights: function () {

  		var vector = new Vector4();

  		var skinWeight = this.geometry.attributes.skinWeight;

  		for ( var i = 0, l = skinWeight.count; i < l; i ++ ) {

  			vector.x = skinWeight.getX( i );
  			vector.y = skinWeight.getY( i );
  			vector.z = skinWeight.getZ( i );
  			vector.w = skinWeight.getW( i );

  			var scale = 1.0 / vector.manhattanLength();

  			if ( scale !== Infinity ) {

  				vector.multiplyScalar( scale );

  			} else {

  				vector.set( 1, 0, 0, 0 ); // do something reasonable

  			}

  			skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );

  		}

  	},

  	updateMatrixWorld: function ( force ) {

  		Mesh.prototype.updateMatrixWorld.call( this, force );

  		if ( this.bindMode === 'attached' ) {

  			this.bindMatrixInverse.getInverse( this.matrixWorld );

  		} else if ( this.bindMode === 'detached' ) {

  			this.bindMatrixInverse.getInverse( this.bindMatrix );

  		} else {

  			console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.geometry, this.material ).copy( this );

  	}

  } );

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author michael guerrero / http://realitymeltdown.com
   * @author ikerr / http://verold.com
   */

  var _offsetMatrix = new Matrix4();
  var _identityMatrix = new Matrix4();

  function Skeleton( bones, boneInverses ) {

  	// copy the bone array

  	bones = bones || [];

  	this.bones = bones.slice( 0 );
  	this.boneMatrices = new Float32Array( this.bones.length * 16 );

  	this.frame = - 1;

  	// use the supplied bone inverses or calculate the inverses

  	if ( boneInverses === undefined ) {

  		this.calculateInverses();

  	} else {

  		if ( this.bones.length === boneInverses.length ) {

  			this.boneInverses = boneInverses.slice( 0 );

  		} else {

  			console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );

  			this.boneInverses = [];

  			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

  				this.boneInverses.push( new Matrix4() );

  			}

  		}

  	}

  }

  Object.assign( Skeleton.prototype, {

  	calculateInverses: function () {

  		this.boneInverses = [];

  		for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

  			var inverse = new Matrix4();

  			if ( this.bones[ i ] ) {

  				inverse.getInverse( this.bones[ i ].matrixWorld );

  			}

  			this.boneInverses.push( inverse );

  		}

  	},

  	pose: function () {

  		var bone, i, il;

  		// recover the bind-time world matrices

  		for ( i = 0, il = this.bones.length; i < il; i ++ ) {

  			bone = this.bones[ i ];

  			if ( bone ) {

  				bone.matrixWorld.getInverse( this.boneInverses[ i ] );

  			}

  		}

  		// compute the local matrices, positions, rotations and scales

  		for ( i = 0, il = this.bones.length; i < il; i ++ ) {

  			bone = this.bones[ i ];

  			if ( bone ) {

  				if ( bone.parent && bone.parent.isBone ) {

  					bone.matrix.getInverse( bone.parent.matrixWorld );
  					bone.matrix.multiply( bone.matrixWorld );

  				} else {

  					bone.matrix.copy( bone.matrixWorld );

  				}

  				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

  			}

  		}

  	},

  	update: function () {

  		var bones = this.bones;
  		var boneInverses = this.boneInverses;
  		var boneMatrices = this.boneMatrices;
  		var boneTexture = this.boneTexture;

  		// flatten bone matrices to array

  		for ( var i = 0, il = bones.length; i < il; i ++ ) {

  			// compute the offset between the current and the original transform

  			var matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;

  			_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
  			_offsetMatrix.toArray( boneMatrices, i * 16 );

  		}

  		if ( boneTexture !== undefined ) {

  			boneTexture.needsUpdate = true;

  		}

  	},

  	clone: function () {

  		return new Skeleton( this.bones, this.boneInverses );

  	},

  	getBoneByName: function ( name ) {

  		for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

  			var bone = this.bones[ i ];

  			if ( bone.name === name ) {

  				return bone;

  			}

  		}

  		return undefined;

  	},

  	dispose: function ( ) {

  		if ( this.boneTexture ) {

  			this.boneTexture.dispose();

  			this.boneTexture = undefined;

  		}

  	}

  } );

  /**
   * @author mikael emtinger / http://gomo.se/
   * @author alteredq / http://alteredqualia.com/
   * @author ikerr / http://verold.com
   */

  function Bone() {

  	Object3D.call( this );

  	this.type = 'Bone';

  }

  Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Bone,

  	isBone: true

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _instanceLocalMatrix = new Matrix4();
  var _instanceWorldMatrix = new Matrix4();

  var _instanceIntersects = [];

  var _mesh = new Mesh();

  function InstancedMesh( geometry, material, count ) {

  	Mesh.call( this, geometry, material );

  	this.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );

  	this.count = count;

  	this.frustumCulled = false;

  }

  InstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

  	constructor: InstancedMesh,

  	isInstancedMesh: true,

  	getMatrixAt: function ( index, matrix ) {

  		matrix.fromArray( this.instanceMatrix.array, index * 16 );

  	},

  	raycast: function ( raycaster, intersects ) {

  		var matrixWorld = this.matrixWorld;
  		var raycastTimes = this.count;

  		_mesh.geometry = this.geometry;
  		_mesh.material = this.material;

  		if ( _mesh.material === undefined ) return;

  		for ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {

  			// calculate the world matrix for each instance

  			this.getMatrixAt( instanceId, _instanceLocalMatrix );

  			_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );

  			// the mesh represents this single instance

  			_mesh.matrixWorld = _instanceWorldMatrix;

  			_mesh.raycast( raycaster, _instanceIntersects );

  			// process the result of raycast

  			if ( _instanceIntersects.length > 0 ) {

  				_instanceIntersects[ 0 ].instanceId = instanceId;
  				_instanceIntersects[ 0 ].object = this;

  				intersects.push( _instanceIntersects[ 0 ] );

  				_instanceIntersects.length = 0;

  			}

  		}

  	},

  	setMatrixAt: function ( index, matrix ) {

  		matrix.toArray( this.instanceMatrix.array, index * 16 );

  	},

  	updateMorphTargets: function () {

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *
   *  linewidth: <float>,
   *  linecap: "round",
   *  linejoin: "round"
   * }
   */

  function LineBasicMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'LineBasicMaterial';

  	this.color = new Color( 0xffffff );

  	this.linewidth = 1;
  	this.linecap = 'round';
  	this.linejoin = 'round';

  	this.setValues( parameters );

  }

  LineBasicMaterial.prototype = Object.create( Material.prototype );
  LineBasicMaterial.prototype.constructor = LineBasicMaterial;

  LineBasicMaterial.prototype.isLineBasicMaterial = true;

  LineBasicMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.linewidth = source.linewidth;
  	this.linecap = source.linecap;
  	this.linejoin = source.linejoin;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _start = new Vector3();
  var _end = new Vector3();
  var _inverseMatrix$1 = new Matrix4();
  var _ray$1 = new Ray();
  var _sphere$2 = new Sphere();

  function Line( geometry, material, mode ) {

  	if ( mode === 1 ) {

  		console.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );

  	}

  	Object3D.call( this );

  	this.type = 'Line';

  	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
  	this.material = material !== undefined ? material : new LineBasicMaterial();

  }

  Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Line,

  	isLine: true,

  	computeLineDistances: function () {

  		var geometry = this.geometry;

  		if ( geometry.isBufferGeometry ) {

  			// we assume non-indexed geometry

  			if ( geometry.index === null ) {

  				var positionAttribute = geometry.attributes.position;
  				var lineDistances = [ 0 ];

  				for ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {

  					_start.fromBufferAttribute( positionAttribute, i - 1 );
  					_end.fromBufferAttribute( positionAttribute, i );

  					lineDistances[ i ] = lineDistances[ i - 1 ];
  					lineDistances[ i ] += _start.distanceTo( _end );

  				}

  				geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

  			} else {

  				console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

  			}

  		} else if ( geometry.isGeometry ) {

  			var vertices = geometry.vertices;
  			var lineDistances = geometry.lineDistances;

  			lineDistances[ 0 ] = 0;

  			for ( var i = 1, l = vertices.length; i < l; i ++ ) {

  				lineDistances[ i ] = lineDistances[ i - 1 ];
  				lineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );

  			}

  		}

  		return this;

  	},

  	raycast: function ( raycaster, intersects ) {

  		var geometry = this.geometry;
  		var matrixWorld = this.matrixWorld;
  		var threshold = raycaster.params.Line.threshold;

  		// Checking boundingSphere distance to ray

  		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

  		_sphere$2.copy( geometry.boundingSphere );
  		_sphere$2.applyMatrix4( matrixWorld );
  		_sphere$2.radius += threshold;

  		if ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) return;

  		//

  		_inverseMatrix$1.getInverse( matrixWorld );
  		_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );

  		var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
  		var localThresholdSq = localThreshold * localThreshold;

  		var vStart = new Vector3();
  		var vEnd = new Vector3();
  		var interSegment = new Vector3();
  		var interRay = new Vector3();
  		var step = ( this && this.isLineSegments ) ? 2 : 1;

  		if ( geometry.isBufferGeometry ) {

  			var index = geometry.index;
  			var attributes = geometry.attributes;
  			var positions = attributes.position.array;

  			if ( index !== null ) {

  				var indices = index.array;

  				for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

  					var a = indices[ i ];
  					var b = indices[ i + 1 ];

  					vStart.fromArray( positions, a * 3 );
  					vEnd.fromArray( positions, b * 3 );

  					var distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

  					if ( distSq > localThresholdSq ) continue;

  					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

  					var distance = raycaster.ray.origin.distanceTo( interRay );

  					if ( distance < raycaster.near || distance > raycaster.far ) continue;

  					intersects.push( {

  						distance: distance,
  						// What do we want? intersection point on the ray or on the segment??
  						// point: raycaster.ray.at( distance ),
  						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
  						index: i,
  						face: null,
  						faceIndex: null,
  						object: this

  					} );

  				}

  			} else {

  				for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

  					vStart.fromArray( positions, 3 * i );
  					vEnd.fromArray( positions, 3 * i + 3 );

  					var distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

  					if ( distSq > localThresholdSq ) continue;

  					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

  					var distance = raycaster.ray.origin.distanceTo( interRay );

  					if ( distance < raycaster.near || distance > raycaster.far ) continue;

  					intersects.push( {

  						distance: distance,
  						// What do we want? intersection point on the ray or on the segment??
  						// point: raycaster.ray.at( distance ),
  						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
  						index: i,
  						face: null,
  						faceIndex: null,
  						object: this

  					} );

  				}

  			}

  		} else if ( geometry.isGeometry ) {

  			var vertices = geometry.vertices;
  			var nbVertices = vertices.length;

  			for ( var i = 0; i < nbVertices - 1; i += step ) {

  				var distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

  				if ( distSq > localThresholdSq ) continue;

  				interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

  				var distance = raycaster.ray.origin.distanceTo( interRay );

  				if ( distance < raycaster.near || distance > raycaster.far ) continue;

  				intersects.push( {

  					distance: distance,
  					// What do we want? intersection point on the ray or on the segment??
  					// point: raycaster.ray.at( distance ),
  					point: interSegment.clone().applyMatrix4( this.matrixWorld ),
  					index: i,
  					face: null,
  					faceIndex: null,
  					object: this

  				} );

  			}

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.geometry, this.material ).copy( this );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _start$1 = new Vector3();
  var _end$1 = new Vector3();

  function LineSegments( geometry, material ) {

  	Line.call( this, geometry, material );

  	this.type = 'LineSegments';

  }

  LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

  	constructor: LineSegments,

  	isLineSegments: true,

  	computeLineDistances: function () {

  		var geometry = this.geometry;

  		if ( geometry.isBufferGeometry ) {

  			// we assume non-indexed geometry

  			if ( geometry.index === null ) {

  				var positionAttribute = geometry.attributes.position;
  				var lineDistances = [];

  				for ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {

  					_start$1.fromBufferAttribute( positionAttribute, i );
  					_end$1.fromBufferAttribute( positionAttribute, i + 1 );

  					lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
  					lineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );

  				}

  				geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

  			} else {

  				console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

  			}

  		} else if ( geometry.isGeometry ) {

  			var vertices = geometry.vertices;
  			var lineDistances = geometry.lineDistances;

  			for ( var i = 0, l = vertices.length; i < l; i += 2 ) {

  				_start$1.copy( vertices[ i ] );
  				_end$1.copy( vertices[ i + 1 ] );

  				lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
  				lineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );

  			}

  		}

  		return this;

  	}

  } );

  /**
   * @author mgreter / http://github.com/mgreter
   */

  function LineLoop( geometry, material ) {

  	Line.call( this, geometry, material );

  	this.type = 'LineLoop';

  }

  LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {

  	constructor: LineLoop,

  	isLineLoop: true,

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *  map: new THREE.Texture( <Image> ),
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  size: <float>,
   *  sizeAttenuation: <bool>
   *
   *  morphTargets: <bool>
   * }
   */

  function PointsMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'PointsMaterial';

  	this.color = new Color( 0xffffff );

  	this.map = null;

  	this.alphaMap = null;

  	this.size = 1;
  	this.sizeAttenuation = true;

  	this.morphTargets = false;

  	this.setValues( parameters );

  }

  PointsMaterial.prototype = Object.create( Material.prototype );
  PointsMaterial.prototype.constructor = PointsMaterial;

  PointsMaterial.prototype.isPointsMaterial = true;

  PointsMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.map = source.map;

  	this.alphaMap = source.alphaMap;

  	this.size = source.size;
  	this.sizeAttenuation = source.sizeAttenuation;

  	this.morphTargets = source.morphTargets;

  	return this;

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  var _inverseMatrix$2 = new Matrix4();
  var _ray$2 = new Ray();
  var _sphere$3 = new Sphere();
  var _position$1 = new Vector3();

  function Points( geometry, material ) {

  	Object3D.call( this );

  	this.type = 'Points';

  	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
  	this.material = material !== undefined ? material : new PointsMaterial();

  	this.updateMorphTargets();

  }

  Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Points,

  	isPoints: true,

  	raycast: function ( raycaster, intersects ) {

  		var geometry = this.geometry;
  		var matrixWorld = this.matrixWorld;
  		var threshold = raycaster.params.Points.threshold;

  		// Checking boundingSphere distance to ray

  		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

  		_sphere$3.copy( geometry.boundingSphere );
  		_sphere$3.applyMatrix4( matrixWorld );
  		_sphere$3.radius += threshold;

  		if ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;

  		//

  		_inverseMatrix$2.getInverse( matrixWorld );
  		_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );

  		var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
  		var localThresholdSq = localThreshold * localThreshold;

  		if ( geometry.isBufferGeometry ) {

  			var index = geometry.index;
  			var attributes = geometry.attributes;
  			var positions = attributes.position.array;

  			if ( index !== null ) {

  				var indices = index.array;

  				for ( var i = 0, il = indices.length; i < il; i ++ ) {

  					var a = indices[ i ];

  					_position$1.fromArray( positions, a * 3 );

  					testPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );

  				}

  			} else {

  				for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

  					_position$1.fromArray( positions, i * 3 );

  					testPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );

  				}

  			}

  		} else {

  			var vertices = geometry.vertices;

  			for ( var i = 0, l = vertices.length; i < l; i ++ ) {

  				testPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );

  			}

  		}

  	},

  	updateMorphTargets: function () {

  		var geometry = this.geometry;
  		var m, ml, name;

  		if ( geometry.isBufferGeometry ) {

  			var morphAttributes = geometry.morphAttributes;
  			var keys = Object.keys( morphAttributes );

  			if ( keys.length > 0 ) {

  				var morphAttribute = morphAttributes[ keys[ 0 ] ];

  				if ( morphAttribute !== undefined ) {

  					this.morphTargetInfluences = [];
  					this.morphTargetDictionary = {};

  					for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

  						name = morphAttribute[ m ].name || String( m );

  						this.morphTargetInfluences.push( 0 );
  						this.morphTargetDictionary[ name ] = m;

  					}

  				}

  			}

  		} else {

  			var morphTargets = geometry.morphTargets;

  			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

  				console.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );

  			}

  		}

  	},

  	clone: function () {

  		return new this.constructor( this.geometry, this.material ).copy( this );

  	}

  } );

  function testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {

  	var rayPointDistanceSq = _ray$2.distanceSqToPoint( point );

  	if ( rayPointDistanceSq < localThresholdSq ) {

  		var intersectPoint = new Vector3();

  		_ray$2.closestPointToPoint( point, intersectPoint );
  		intersectPoint.applyMatrix4( matrixWorld );

  		var distance = raycaster.ray.origin.distanceTo( intersectPoint );

  		if ( distance < raycaster.near || distance > raycaster.far ) return;

  		intersects.push( {

  			distance: distance,
  			distanceToRay: Math.sqrt( rayPointDistanceSq ),
  			point: intersectPoint,
  			index: index,
  			face: null,
  			object: object

  		} );

  	}

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

  	Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

  	this.format = format !== undefined ? format : RGBFormat;

  	this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
  	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;

  	this.generateMipmaps = false;

  }

  VideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {

  	constructor: VideoTexture,

  	isVideoTexture: true,

  	update: function () {

  		var video = this.image;

  		if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

  			this.needsUpdate = true;

  		}

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

  	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

  	this.image = { width: width, height: height };
  	this.mipmaps = mipmaps;

  	// no flipping for cube textures
  	// (also flipping doesn't work for compressed textures )

  	this.flipY = false;

  	// can't generate mipmaps for compressed textures
  	// mips must be embedded in DDS files

  	this.generateMipmaps = false;

  }

  CompressedTexture.prototype = Object.create( Texture.prototype );
  CompressedTexture.prototype.constructor = CompressedTexture;

  CompressedTexture.prototype.isCompressedTexture = true;

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

  	Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

  	this.needsUpdate = true;

  }

  CanvasTexture.prototype = Object.create( Texture.prototype );
  CanvasTexture.prototype.constructor = CanvasTexture;
  CanvasTexture.prototype.isCanvasTexture = true;

  /**
   * @author Matt DesLauriers / @mattdesl
   * @author atix / arthursilber.de
   */

  function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

  	format = format !== undefined ? format : DepthFormat;

  	if ( format !== DepthFormat && format !== DepthStencilFormat ) {

  		throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

  	}

  	if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;
  	if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

  	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

  	this.image = { width: width, height: height };

  	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
  	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

  	this.flipY = false;
  	this.generateMipmaps	= false;

  }

  DepthTexture.prototype = Object.create( Texture.prototype );
  DepthTexture.prototype.constructor = DepthTexture;
  DepthTexture.prototype.isDepthTexture = true;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  function WireframeGeometry( geometry ) {

  	BufferGeometry.call( this );

  	this.type = 'WireframeGeometry';

  	// buffer

  	var vertices = [];

  	// helper variables

  	var i, j, l, o, ol;
  	var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
  	var key, keys = [ 'a', 'b', 'c' ];
  	var vertex;

  	// different logic for Geometry and BufferGeometry

  	if ( geometry && geometry.isGeometry ) {

  		// create a data structure that contains all edges without duplicates

  		var faces = geometry.faces;

  		for ( i = 0, l = faces.length; i < l; i ++ ) {

  			var face = faces[ i ];

  			for ( j = 0; j < 3; j ++ ) {

  				edge1 = face[ keys[ j ] ];
  				edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
  				edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
  				edge[ 1 ] = Math.max( edge1, edge2 );

  				key = edge[ 0 ] + ',' + edge[ 1 ];

  				if ( edges[ key ] === undefined ) {

  					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

  				}

  			}

  		}

  		// generate vertices

  		for ( key in edges ) {

  			e = edges[ key ];

  			vertex = geometry.vertices[ e.index1 ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  			vertex = geometry.vertices[ e.index2 ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  		}

  	} else if ( geometry && geometry.isBufferGeometry ) {

  		var position, indices, groups;
  		var group, start, count;
  		var index1, index2;

  		vertex = new Vector3();

  		if ( geometry.index !== null ) {

  			// indexed BufferGeometry

  			position = geometry.attributes.position;
  			indices = geometry.index;
  			groups = geometry.groups;

  			if ( groups.length === 0 ) {

  				groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

  			}

  			// create a data structure that contains all eges without duplicates

  			for ( o = 0, ol = groups.length; o < ol; ++ o ) {

  				group = groups[ o ];

  				start = group.start;
  				count = group.count;

  				for ( i = start, l = ( start + count ); i < l; i += 3 ) {

  					for ( j = 0; j < 3; j ++ ) {

  						edge1 = indices.getX( i + j );
  						edge2 = indices.getX( i + ( j + 1 ) % 3 );
  						edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
  						edge[ 1 ] = Math.max( edge1, edge2 );

  						key = edge[ 0 ] + ',' + edge[ 1 ];

  						if ( edges[ key ] === undefined ) {

  							edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

  						}

  					}

  				}

  			}

  			// generate vertices

  			for ( key in edges ) {

  				e = edges[ key ];

  				vertex.fromBufferAttribute( position, e.index1 );
  				vertices.push( vertex.x, vertex.y, vertex.z );

  				vertex.fromBufferAttribute( position, e.index2 );
  				vertices.push( vertex.x, vertex.y, vertex.z );

  			}

  		} else {

  			// non-indexed BufferGeometry

  			position = geometry.attributes.position;

  			for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

  				for ( j = 0; j < 3; j ++ ) {

  					// three edges per triangle, an edge is represented as (index1, index2)
  					// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

  					index1 = 3 * i + j;
  					vertex.fromBufferAttribute( position, index1 );
  					vertices.push( vertex.x, vertex.y, vertex.z );

  					index2 = 3 * i + ( ( j + 1 ) % 3 );
  					vertex.fromBufferAttribute( position, index2 );
  					vertices.push( vertex.x, vertex.y, vertex.z );

  				}

  			}

  		}

  	}

  	// build geometry

  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

  }

  WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
  WireframeGeometry.prototype.constructor = WireframeGeometry;

  /**
   * @author zz85 / https://github.com/zz85
   * @author Mugen87 / https://github.com/Mugen87
   *
   * Parametric Surfaces Geometry
   * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html
   */

  // ParametricGeometry

  function ParametricGeometry( func, slices, stacks ) {

  	Geometry.call( this );

  	this.type = 'ParametricGeometry';

  	this.parameters = {
  		func: func,
  		slices: slices,
  		stacks: stacks
  	};

  	this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
  	this.mergeVertices();

  }

  ParametricGeometry.prototype = Object.create( Geometry.prototype );
  ParametricGeometry.prototype.constructor = ParametricGeometry;

  // ParametricBufferGeometry

  function ParametricBufferGeometry( func, slices, stacks ) {

  	BufferGeometry.call( this );

  	this.type = 'ParametricBufferGeometry';

  	this.parameters = {
  		func: func,
  		slices: slices,
  		stacks: stacks
  	};

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	var EPS = 0.00001;

  	var normal = new Vector3();

  	var p0 = new Vector3(), p1 = new Vector3();
  	var pu = new Vector3(), pv = new Vector3();

  	var i, j;

  	if ( func.length < 3 ) {

  		console.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );

  	}

  	// generate vertices, normals and uvs

  	var sliceCount = slices + 1;

  	for ( i = 0; i <= stacks; i ++ ) {

  		var v = i / stacks;

  		for ( j = 0; j <= slices; j ++ ) {

  			var u = j / slices;

  			// vertex

  			func( u, v, p0 );
  			vertices.push( p0.x, p0.y, p0.z );

  			// normal

  			// approximate tangent vectors via finite differences

  			if ( u - EPS >= 0 ) {

  				func( u - EPS, v, p1 );
  				pu.subVectors( p0, p1 );

  			} else {

  				func( u + EPS, v, p1 );
  				pu.subVectors( p1, p0 );

  			}

  			if ( v - EPS >= 0 ) {

  				func( u, v - EPS, p1 );
  				pv.subVectors( p0, p1 );

  			} else {

  				func( u, v + EPS, p1 );
  				pv.subVectors( p1, p0 );

  			}

  			// cross product of tangent vectors returns surface normal

  			normal.crossVectors( pu, pv ).normalize();
  			normals.push( normal.x, normal.y, normal.z );

  			// uv

  			uvs.push( u, v );

  		}

  	}

  	// generate indices

  	for ( i = 0; i < stacks; i ++ ) {

  		for ( j = 0; j < slices; j ++ ) {

  			var a = i * sliceCount + j;
  			var b = i * sliceCount + j + 1;
  			var c = ( i + 1 ) * sliceCount + j + 1;
  			var d = ( i + 1 ) * sliceCount + j;

  			// faces one and two

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

  /**
   * @author clockworkgeek / https://github.com/clockworkgeek
   * @author timothypratley / https://github.com/timothypratley
   * @author WestLangley / http://github.com/WestLangley
   * @author Mugen87 / https://github.com/Mugen87
   */

  // PolyhedronGeometry

  function PolyhedronGeometry( vertices, indices, radius, detail ) {

  	Geometry.call( this );

  	this.type = 'PolyhedronGeometry';

  	this.parameters = {
  		vertices: vertices,
  		indices: indices,
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
  	this.mergeVertices();

  }

  PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
  PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

  // PolyhedronBufferGeometry

  function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

  	BufferGeometry.call( this );

  	this.type = 'PolyhedronBufferGeometry';

  	this.parameters = {
  		vertices: vertices,
  		indices: indices,
  		radius: radius,
  		detail: detail
  	};

  	radius = radius || 1;
  	detail = detail || 0;

  	// default buffer data

  	var vertexBuffer = [];
  	var uvBuffer = [];

  	// the subdivision creates the vertex buffer data

  	subdivide( detail );

  	// all vertices should lie on a conceptual sphere with a given radius

  	applyRadius( radius );

  	// finally, create the uv data

  	generateUVs();

  	// build non-indexed geometry

  	this.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

  	if ( detail === 0 ) {

  		this.computeVertexNormals(); // flat normals

  	} else {

  		this.normalizeNormals(); // smooth normals

  	}

  	// helper functions

  	function subdivide( detail ) {

  		var a = new Vector3();
  		var b = new Vector3();
  		var c = new Vector3();

  		// iterate over all faces and apply a subdivison with the given detail value

  		for ( var i = 0; i < indices.length; i += 3 ) {

  			// get the vertices of the face

  			getVertexByIndex( indices[ i + 0 ], a );
  			getVertexByIndex( indices[ i + 1 ], b );
  			getVertexByIndex( indices[ i + 2 ], c );

  			// perform subdivision

  			subdivideFace( a, b, c, detail );

  		}

  	}

  	function subdivideFace( a, b, c, detail ) {

  		var cols = Math.pow( 2, detail );

  		// we use this multidimensional array as a data structure for creating the subdivision

  		var v = [];

  		var i, j;

  		// construct all of the vertices for this subdivision

  		for ( i = 0; i <= cols; i ++ ) {

  			v[ i ] = [];

  			var aj = a.clone().lerp( c, i / cols );
  			var bj = b.clone().lerp( c, i / cols );

  			var rows = cols - i;

  			for ( j = 0; j <= rows; j ++ ) {

  				if ( j === 0 && i === cols ) {

  					v[ i ][ j ] = aj;

  				} else {

  					v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

  				}

  			}

  		}

  		// construct all of the faces

  		for ( i = 0; i < cols; i ++ ) {

  			for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

  				var k = Math.floor( j / 2 );

  				if ( j % 2 === 0 ) {

  					pushVertex( v[ i ][ k + 1 ] );
  					pushVertex( v[ i + 1 ][ k ] );
  					pushVertex( v[ i ][ k ] );

  				} else {

  					pushVertex( v[ i ][ k + 1 ] );
  					pushVertex( v[ i + 1 ][ k + 1 ] );
  					pushVertex( v[ i + 1 ][ k ] );

  				}

  			}

  		}

  	}

  	function applyRadius( radius ) {

  		var vertex = new Vector3();

  		// iterate over the entire buffer and apply the radius to each vertex

  		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

  			vertex.x = vertexBuffer[ i + 0 ];
  			vertex.y = vertexBuffer[ i + 1 ];
  			vertex.z = vertexBuffer[ i + 2 ];

  			vertex.normalize().multiplyScalar( radius );

  			vertexBuffer[ i + 0 ] = vertex.x;
  			vertexBuffer[ i + 1 ] = vertex.y;
  			vertexBuffer[ i + 2 ] = vertex.z;

  		}

  	}

  	function generateUVs() {

  		var vertex = new Vector3();

  		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

  			vertex.x = vertexBuffer[ i + 0 ];
  			vertex.y = vertexBuffer[ i + 1 ];
  			vertex.z = vertexBuffer[ i + 2 ];

  			var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
  			var v = inclination( vertex ) / Math.PI + 0.5;
  			uvBuffer.push( u, 1 - v );

  		}

  		correctUVs();

  		correctSeam();

  	}

  	function correctSeam() {

  		// handle case when face straddles the seam, see #3269

  		for ( var i = 0; i < uvBuffer.length; i += 6 ) {

  			// uv data of a single face

  			var x0 = uvBuffer[ i + 0 ];
  			var x1 = uvBuffer[ i + 2 ];
  			var x2 = uvBuffer[ i + 4 ];

  			var max = Math.max( x0, x1, x2 );
  			var min = Math.min( x0, x1, x2 );

  			// 0.9 is somewhat arbitrary

  			if ( max > 0.9 && min < 0.1 ) {

  				if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
  				if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
  				if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;

  			}

  		}

  	}

  	function pushVertex( vertex ) {

  		vertexBuffer.push( vertex.x, vertex.y, vertex.z );

  	}

  	function getVertexByIndex( index, vertex ) {

  		var stride = index * 3;

  		vertex.x = vertices[ stride + 0 ];
  		vertex.y = vertices[ stride + 1 ];
  		vertex.z = vertices[ stride + 2 ];

  	}

  	function correctUVs() {

  		var a = new Vector3();
  		var b = new Vector3();
  		var c = new Vector3();

  		var centroid = new Vector3();

  		var uvA = new Vector2();
  		var uvB = new Vector2();
  		var uvC = new Vector2();

  		for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

  			a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
  			b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
  			c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

  			uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
  			uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
  			uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

  			centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

  			var azi = azimuth( centroid );

  			correctUV( uvA, j + 0, a, azi );
  			correctUV( uvB, j + 2, b, azi );
  			correctUV( uvC, j + 4, c, azi );

  		}

  	}

  	function correctUV( uv, stride, vector, azimuth ) {

  		if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

  			uvBuffer[ stride ] = uv.x - 1;

  		}

  		if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

  			uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

  		}

  	}

  	// Angle around the Y axis, counter-clockwise when looking from above.

  	function azimuth( vector ) {

  		return Math.atan2( vector.z, - vector.x );

  	}


  	// Angle above the XZ plane.

  	function inclination( vector ) {

  		return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

  	}

  }

  PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

  /**
   * @author timothypratley / https://github.com/timothypratley
   * @author Mugen87 / https://github.com/Mugen87
   */

  // TetrahedronGeometry

  function TetrahedronGeometry( radius, detail ) {

  	Geometry.call( this );

  	this.type = 'TetrahedronGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
  	this.mergeVertices();

  }

  TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
  TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

  // TetrahedronBufferGeometry

  function TetrahedronBufferGeometry( radius, detail ) {

  	var vertices = [
  		1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
  	];

  	var indices = [
  		2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
  	];

  	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

  	this.type = 'TetrahedronBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  }

  TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
  TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

  /**
   * @author timothypratley / https://github.com/timothypratley
   * @author Mugen87 / https://github.com/Mugen87
   */

  // OctahedronGeometry

  function OctahedronGeometry( radius, detail ) {

  	Geometry.call( this );

  	this.type = 'OctahedronGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
  	this.mergeVertices();

  }

  OctahedronGeometry.prototype = Object.create( Geometry.prototype );
  OctahedronGeometry.prototype.constructor = OctahedronGeometry;

  // OctahedronBufferGeometry

  function OctahedronBufferGeometry( radius, detail ) {

  	var vertices = [
  		1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
  		0, - 1, 0, 	0, 0, 1,	0, 0, - 1
  	];

  	var indices = [
  		0, 2, 4,	0, 4, 3,	0, 3, 5,
  		0, 5, 2,	1, 2, 5,	1, 5, 3,
  		1, 3, 4,	1, 4, 2
  	];

  	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

  	this.type = 'OctahedronBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  }

  OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
  OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

  /**
   * @author timothypratley / https://github.com/timothypratley
   * @author Mugen87 / https://github.com/Mugen87
   */

  // IcosahedronGeometry

  function IcosahedronGeometry( radius, detail ) {

  	Geometry.call( this );

  	this.type = 'IcosahedronGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
  	this.mergeVertices();

  }

  IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
  IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

  // IcosahedronBufferGeometry

  function IcosahedronBufferGeometry( radius, detail ) {

  	var t = ( 1 + Math.sqrt( 5 ) ) / 2;

  	var vertices = [
  		- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
  		 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
  		 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
  	];

  	var indices = [
  		 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
  		 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
  		 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
  		 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
  	];

  	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

  	this.type = 'IcosahedronBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  }

  IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
  IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

  /**
   * @author Abe Pazos / https://hamoid.com
   * @author Mugen87 / https://github.com/Mugen87
   */

  // DodecahedronGeometry

  function DodecahedronGeometry( radius, detail ) {

  	Geometry.call( this );

  	this.type = 'DodecahedronGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  	this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
  	this.mergeVertices();

  }

  DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
  DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

  // DodecahedronBufferGeometry

  function DodecahedronBufferGeometry( radius, detail ) {

  	var t = ( 1 + Math.sqrt( 5 ) ) / 2;
  	var r = 1 / t;

  	var vertices = [

  		// (Â±1, Â±1, Â±1)
  		- 1, - 1, - 1,	- 1, - 1, 1,
  		- 1, 1, - 1, - 1, 1, 1,
  		1, - 1, - 1, 1, - 1, 1,
  		1, 1, - 1, 1, 1, 1,

  		// (0, Â±1/Ï, Â±Ï)
  		 0, - r, - t, 0, - r, t,
  		 0, r, - t, 0, r, t,

  		// (Â±1/Ï, Â±Ï, 0)
  		- r, - t, 0, - r, t, 0,
  		 r, - t, 0, r, t, 0,

  		// (Â±Ï, 0, Â±1/Ï)
  		- t, 0, - r, t, 0, - r,
  		- t, 0, r, t, 0, r
  	];

  	var indices = [
  		3, 11, 7, 	3, 7, 15, 	3, 15, 13,
  		7, 19, 17, 	7, 17, 6, 	7, 6, 15,
  		17, 4, 8, 	17, 8, 10, 	17, 10, 6,
  		8, 0, 16, 	8, 16, 2, 	8, 2, 10,
  		0, 12, 1, 	0, 1, 18, 	0, 18, 16,
  		6, 10, 2, 	6, 2, 13, 	6, 13, 15,
  		2, 16, 18, 	2, 18, 3, 	2, 3, 13,
  		18, 1, 9, 	18, 9, 11, 	18, 11, 3,
  		4, 14, 12, 	4, 12, 0, 	4, 0, 8,
  		11, 9, 5, 	11, 5, 19, 	11, 19, 7,
  		19, 5, 14, 	19, 14, 4, 	19, 4, 17,
  		1, 12, 14, 	1, 14, 5, 	1, 5, 9
  	];

  	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

  	this.type = 'DodecahedronBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		detail: detail
  	};

  }

  DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
  DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

  /**
   * @author oosmoxiecode / https://github.com/oosmoxiecode
   * @author WestLangley / https://github.com/WestLangley
   * @author zz85 / https://github.com/zz85
   * @author miningold / https://github.com/miningold
   * @author jonobr1 / https://github.com/jonobr1
   * @author Mugen87 / https://github.com/Mugen87
   *
   */

  // TubeGeometry

  function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

  	Geometry.call( this );

  	this.type = 'TubeGeometry';

  	this.parameters = {
  		path: path,
  		tubularSegments: tubularSegments,
  		radius: radius,
  		radialSegments: radialSegments,
  		closed: closed
  	};

  	if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );

  	var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

  	// expose internals

  	this.tangents = bufferGeometry.tangents;
  	this.normals = bufferGeometry.normals;
  	this.binormals = bufferGeometry.binormals;

  	// create geometry

  	this.fromBufferGeometry( bufferGeometry );
  	this.mergeVertices();

  }

  TubeGeometry.prototype = Object.create( Geometry.prototype );
  TubeGeometry.prototype.constructor = TubeGeometry;

  // TubeBufferGeometry

  function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

  	BufferGeometry.call( this );

  	this.type = 'TubeBufferGeometry';

  	this.parameters = {
  		path: path,
  		tubularSegments: tubularSegments,
  		radius: radius,
  		radialSegments: radialSegments,
  		closed: closed
  	};

  	tubularSegments = tubularSegments || 64;
  	radius = radius || 1;
  	radialSegments = radialSegments || 8;
  	closed = closed || false;

  	var frames = path.computeFrenetFrames( tubularSegments, closed );

  	// expose internals

  	this.tangents = frames.tangents;
  	this.normals = frames.normals;
  	this.binormals = frames.binormals;

  	// helper variables

  	var vertex = new Vector3();
  	var normal = new Vector3();
  	var uv = new Vector2();
  	var P = new Vector3();

  	var i, j;

  	// buffer

  	var vertices = [];
  	var normals = [];
  	var uvs = [];
  	var indices = [];

  	// create buffer data

  	generateBufferData();

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	// functions

  	function generateBufferData() {

  		for ( i = 0; i < tubularSegments; i ++ ) {

  			generateSegment( i );

  		}

  		// if the geometry is not closed, generate the last row of vertices and normals
  		// at the regular position on the given path
  		//
  		// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

  		generateSegment( ( closed === false ) ? tubularSegments : 0 );

  		// uvs are generated in a separate function.
  		// this makes it easy compute correct values for closed geometries

  		generateUVs();

  		// finally create faces

  		generateIndices();

  	}

  	function generateSegment( i ) {

  		// we use getPointAt to sample evenly distributed points from the given path

  		P = path.getPointAt( i / tubularSegments, P );

  		// retrieve corresponding normal and binormal

  		var N = frames.normals[ i ];
  		var B = frames.binormals[ i ];

  		// generate normals and vertices for the current segment

  		for ( j = 0; j <= radialSegments; j ++ ) {

  			var v = j / radialSegments * Math.PI * 2;

  			var sin = Math.sin( v );
  			var cos = - Math.cos( v );

  			// normal

  			normal.x = ( cos * N.x + sin * B.x );
  			normal.y = ( cos * N.y + sin * B.y );
  			normal.z = ( cos * N.z + sin * B.z );
  			normal.normalize();

  			normals.push( normal.x, normal.y, normal.z );

  			// vertex

  			vertex.x = P.x + radius * normal.x;
  			vertex.y = P.y + radius * normal.y;
  			vertex.z = P.z + radius * normal.z;

  			vertices.push( vertex.x, vertex.y, vertex.z );

  		}

  	}

  	function generateIndices() {

  		for ( j = 1; j <= tubularSegments; j ++ ) {

  			for ( i = 1; i <= radialSegments; i ++ ) {

  				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
  				var b = ( radialSegments + 1 ) * j + ( i - 1 );
  				var c = ( radialSegments + 1 ) * j + i;
  				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

  				// faces

  				indices.push( a, b, d );
  				indices.push( b, c, d );

  			}

  		}

  	}

  	function generateUVs() {

  		for ( i = 0; i <= tubularSegments; i ++ ) {

  			for ( j = 0; j <= radialSegments; j ++ ) {

  				uv.x = i / tubularSegments;
  				uv.y = j / radialSegments;

  				uvs.push( uv.x, uv.y );

  			}

  		}

  	}

  }

  TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

  TubeBufferGeometry.prototype.toJSON = function () {

  	var data = BufferGeometry.prototype.toJSON.call( this );

  	data.path = this.parameters.path.toJSON();

  	return data;

  };

  /**
   * @author oosmoxiecode
   * @author Mugen87 / https://github.com/Mugen87
   *
   * based on http://www.blackpawn.com/texts/pqtorus/
   */

  // TorusKnotGeometry

  function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

  	Geometry.call( this );

  	this.type = 'TorusKnotGeometry';

  	this.parameters = {
  		radius: radius,
  		tube: tube,
  		tubularSegments: tubularSegments,
  		radialSegments: radialSegments,
  		p: p,
  		q: q
  	};

  	if ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

  	this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
  	this.mergeVertices();

  }

  TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
  TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

  // TorusKnotBufferGeometry

  function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

  	BufferGeometry.call( this );

  	this.type = 'TorusKnotBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		tube: tube,
  		tubularSegments: tubularSegments,
  		radialSegments: radialSegments,
  		p: p,
  		q: q
  	};

  	radius = radius || 1;
  	tube = tube || 0.4;
  	tubularSegments = Math.floor( tubularSegments ) || 64;
  	radialSegments = Math.floor( radialSegments ) || 8;
  	p = p || 2;
  	q = q || 3;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var i, j;

  	var vertex = new Vector3();
  	var normal = new Vector3();

  	var P1 = new Vector3();
  	var P2 = new Vector3();

  	var B = new Vector3();
  	var T = new Vector3();
  	var N = new Vector3();

  	// generate vertices, normals and uvs

  	for ( i = 0; i <= tubularSegments; ++ i ) {

  		// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

  		var u = i / tubularSegments * p * Math.PI * 2;

  		// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
  		// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

  		calculatePositionOnCurve( u, p, q, radius, P1 );
  		calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

  		// calculate orthonormal basis

  		T.subVectors( P2, P1 );
  		N.addVectors( P2, P1 );
  		B.crossVectors( T, N );
  		N.crossVectors( B, T );

  		// normalize B, N. T can be ignored, we don't use it

  		B.normalize();
  		N.normalize();

  		for ( j = 0; j <= radialSegments; ++ j ) {

  			// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
  			// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

  			var v = j / radialSegments * Math.PI * 2;
  			var cx = - tube * Math.cos( v );
  			var cy = tube * Math.sin( v );

  			// now calculate the final vertex position.
  			// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

  			vertex.x = P1.x + ( cx * N.x + cy * B.x );
  			vertex.y = P1.y + ( cx * N.y + cy * B.y );
  			vertex.z = P1.z + ( cx * N.z + cy * B.z );

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

  			normal.subVectors( vertex, P1 ).normalize();

  			normals.push( normal.x, normal.y, normal.z );

  			// uv

  			uvs.push( i / tubularSegments );
  			uvs.push( j / radialSegments );

  		}

  	}

  	// generate indices

  	for ( j = 1; j <= tubularSegments; j ++ ) {

  		for ( i = 1; i <= radialSegments; i ++ ) {

  			// indices

  			var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
  			var b = ( radialSegments + 1 ) * j + ( i - 1 );
  			var c = ( radialSegments + 1 ) * j + i;
  			var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	// this function calculates the current position on the torus curve

  	function calculatePositionOnCurve( u, p, q, radius, position ) {

  		var cu = Math.cos( u );
  		var su = Math.sin( u );
  		var quOverP = q / p * u;
  		var cs = Math.cos( quOverP );

  		position.x = radius * ( 2 + cs ) * 0.5 * cu;
  		position.y = radius * ( 2 + cs ) * su * 0.5;
  		position.z = radius * Math.sin( quOverP ) * 0.5;

  	}

  }

  TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

  /**
   * @author oosmoxiecode
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  // TorusGeometry

  function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

  	Geometry.call( this );

  	this.type = 'TorusGeometry';

  	this.parameters = {
  		radius: radius,
  		tube: tube,
  		radialSegments: radialSegments,
  		tubularSegments: tubularSegments,
  		arc: arc
  	};

  	this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
  	this.mergeVertices();

  }

  TorusGeometry.prototype = Object.create( Geometry.prototype );
  TorusGeometry.prototype.constructor = TorusGeometry;

  // TorusBufferGeometry

  function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

  	BufferGeometry.call( this );

  	this.type = 'TorusBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		tube: tube,
  		radialSegments: radialSegments,
  		tubularSegments: tubularSegments,
  		arc: arc
  	};

  	radius = radius || 1;
  	tube = tube || 0.4;
  	radialSegments = Math.floor( radialSegments ) || 8;
  	tubularSegments = Math.floor( tubularSegments ) || 6;
  	arc = arc || Math.PI * 2;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var center = new Vector3();
  	var vertex = new Vector3();
  	var normal = new Vector3();

  	var j, i;

  	// generate vertices, normals and uvs

  	for ( j = 0; j <= radialSegments; j ++ ) {

  		for ( i = 0; i <= tubularSegments; i ++ ) {

  			var u = i / tubularSegments * arc;
  			var v = j / radialSegments * Math.PI * 2;

  			// vertex

  			vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
  			vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
  			vertex.z = tube * Math.sin( v );

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal

  			center.x = radius * Math.cos( u );
  			center.y = radius * Math.sin( u );
  			normal.subVectors( vertex, center ).normalize();

  			normals.push( normal.x, normal.y, normal.z );

  			// uv

  			uvs.push( i / tubularSegments );
  			uvs.push( j / radialSegments );

  		}

  	}

  	// generate indices

  	for ( j = 1; j <= radialSegments; j ++ ) {

  		for ( i = 1; i <= tubularSegments; i ++ ) {

  			// indices

  			var a = ( tubularSegments + 1 ) * j + i - 1;
  			var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
  			var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
  			var d = ( tubularSegments + 1 ) * j + i;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

  /**
   * @author Mugen87 / https://github.com/Mugen87
   * Port from https://github.com/mapbox/earcut (v2.1.5)
   */

  var Earcut = {

  	triangulate: function ( data, holeIndices, dim ) {

  		dim = dim || 2;

  		var hasHoles = holeIndices && holeIndices.length,
  			outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,
  			outerNode = linkedList( data, 0, outerLen, dim, true ),
  			triangles = [];

  		if ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;

  		var minX, minY, maxX, maxY, x, y, invSize;

  		if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );

  		// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
  		if ( data.length > 80 * dim ) {

  			minX = maxX = data[ 0 ];
  			minY = maxY = data[ 1 ];

  			for ( var i = dim; i < outerLen; i += dim ) {

  				x = data[ i ];
  				y = data[ i + 1 ];
  				if ( x < minX ) minX = x;
  				if ( y < minY ) minY = y;
  				if ( x > maxX ) maxX = x;
  				if ( y > maxY ) maxY = y;

  			}

  			// minX, minY and invSize are later used to transform coords into integers for z-order calculation
  			invSize = Math.max( maxX - minX, maxY - minY );
  			invSize = invSize !== 0 ? 1 / invSize : 0;

  		}

  		earcutLinked( outerNode, triangles, dim, minX, minY, invSize );

  		return triangles;

  	}

  };

  // create a circular doubly linked list from polygon points in the specified winding order
  function linkedList( data, start, end, dim, clockwise ) {

  	var i, last;

  	if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {

  		for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

  	} else {

  		for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

  	}

  	if ( last && equals( last, last.next ) ) {

  		removeNode( last );
  		last = last.next;

  	}

  	return last;

  }

  // eliminate colinear or duplicate points
  function filterPoints( start, end ) {

  	if ( ! start ) return start;
  	if ( ! end ) end = start;

  	var p = start,
  		again;
  	do {

  		again = false;

  		if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {

  			removeNode( p );
  			p = end = p.prev;
  			if ( p === p.next ) break;
  			again = true;

  		} else {

  			p = p.next;

  		}

  	} while ( again || p !== end );

  	return end;

  }

  // main ear slicing loop which triangulates a polygon (given as a linked list)
  function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {

  	if ( ! ear ) return;

  	// interlink polygon nodes in z-order
  	if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );

  	var stop = ear,
  		prev, next;

  	// iterate through ears, slicing them one by one
  	while ( ear.prev !== ear.next ) {

  		prev = ear.prev;
  		next = ear.next;

  		if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {

  			// cut off the triangle
  			triangles.push( prev.i / dim );
  			triangles.push( ear.i / dim );
  			triangles.push( next.i / dim );

  			removeNode( ear );

  			// skipping the next vertex leads to less sliver triangles
  			ear = next.next;
  			stop = next.next;

  			continue;

  		}

  		ear = next;

  		// if we looped through the whole remaining polygon and can't find any more ears
  		if ( ear === stop ) {

  			// try filtering points and slicing again
  			if ( ! pass ) {

  				earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );

  				// if this didn't work, try curing all small self-intersections locally

  			} else if ( pass === 1 ) {

  				ear = cureLocalIntersections( ear, triangles, dim );
  				earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );

  				// as a last resort, try splitting the remaining polygon into two

  			} else if ( pass === 2 ) {

  				splitEarcut( ear, triangles, dim, minX, minY, invSize );

  			}

  			break;

  		}

  	}

  }

  // check whether a polygon node forms a valid ear with adjacent nodes
  function isEar( ear ) {

  	var a = ear.prev,
  		b = ear,
  		c = ear.next;

  	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

  	// now make sure we don't have other points inside the potential ear
  	var p = ear.next.next;

  	while ( p !== ear.prev ) {

  		if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
  			area( p.prev, p, p.next ) >= 0 ) return false;
  		p = p.next;

  	}

  	return true;

  }

  function isEarHashed( ear, minX, minY, invSize ) {

  	var a = ear.prev,
  		b = ear,
  		c = ear.next;

  	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

  	// triangle bbox; min & max are calculated like this for speed
  	var minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
  		minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
  		maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
  		maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );

  	// z-order range for the current triangle bbox;
  	var minZ = zOrder( minTX, minTY, minX, minY, invSize ),
  		maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );

  	var p = ear.prevZ,
  		n = ear.nextZ;

  	// look for points inside the triangle in both directions
  	while ( p && p.z >= minZ && n && n.z <= maxZ ) {

  		if ( p !== ear.prev && p !== ear.next &&
  			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
  			area( p.prev, p, p.next ) >= 0 ) return false;
  		p = p.prevZ;

  		if ( n !== ear.prev && n !== ear.next &&
  			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
  			area( n.prev, n, n.next ) >= 0 ) return false;
  		n = n.nextZ;

  	}

  	// look for remaining points in decreasing z-order
  	while ( p && p.z >= minZ ) {

  		if ( p !== ear.prev && p !== ear.next &&
  			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
  			area( p.prev, p, p.next ) >= 0 ) return false;
  		p = p.prevZ;

  	}

  	// look for remaining points in increasing z-order
  	while ( n && n.z <= maxZ ) {

  		if ( n !== ear.prev && n !== ear.next &&
  			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
  			area( n.prev, n, n.next ) >= 0 ) return false;
  		n = n.nextZ;

  	}

  	return true;

  }

  // go through all polygon nodes and cure small local self-intersections
  function cureLocalIntersections( start, triangles, dim ) {

  	var p = start;
  	do {

  		var a = p.prev,
  			b = p.next.next;

  		if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {

  			triangles.push( a.i / dim );
  			triangles.push( p.i / dim );
  			triangles.push( b.i / dim );

  			// remove two nodes involved
  			removeNode( p );
  			removeNode( p.next );

  			p = start = b;

  		}

  		p = p.next;

  	} while ( p !== start );

  	return p;

  }

  // try splitting polygon into two and triangulate them independently
  function splitEarcut( start, triangles, dim, minX, minY, invSize ) {

  	// look for a valid diagonal that divides the polygon into two
  	var a = start;
  	do {

  		var b = a.next.next;
  		while ( b !== a.prev ) {

  			if ( a.i !== b.i && isValidDiagonal( a, b ) ) {

  				// split the polygon in two by the diagonal
  				var c = splitPolygon( a, b );

  				// filter colinear points around the cuts
  				a = filterPoints( a, a.next );
  				c = filterPoints( c, c.next );

  				// run earcut on each half
  				earcutLinked( a, triangles, dim, minX, minY, invSize );
  				earcutLinked( c, triangles, dim, minX, minY, invSize );
  				return;

  			}

  			b = b.next;

  		}

  		a = a.next;

  	} while ( a !== start );

  }

  // link every hole into the outer loop, producing a single-ring polygon without holes
  function eliminateHoles( data, holeIndices, outerNode, dim ) {

  	var queue = [],
  		i, len, start, end, list;

  	for ( i = 0, len = holeIndices.length; i < len; i ++ ) {

  		start = holeIndices[ i ] * dim;
  		end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
  		list = linkedList( data, start, end, dim, false );
  		if ( list === list.next ) list.steiner = true;
  		queue.push( getLeftmost( list ) );

  	}

  	queue.sort( compareX );

  	// process holes from left to right
  	for ( i = 0; i < queue.length; i ++ ) {

  		eliminateHole( queue[ i ], outerNode );
  		outerNode = filterPoints( outerNode, outerNode.next );

  	}

  	return outerNode;

  }

  function compareX( a, b ) {

  	return a.x - b.x;

  }

  // find a bridge between vertices that connects hole with an outer ring and and link it
  function eliminateHole( hole, outerNode ) {

  	outerNode = findHoleBridge( hole, outerNode );
  	if ( outerNode ) {

  		var b = splitPolygon( outerNode, hole );
  		filterPoints( b, b.next );

  	}

  }

  // David Eberly's algorithm for finding a bridge between hole and outer polygon
  function findHoleBridge( hole, outerNode ) {

  	var p = outerNode,
  		hx = hole.x,
  		hy = hole.y,
  		qx = - Infinity,
  		m;

  	// find a segment intersected by a ray from the hole's leftmost point to the left;
  	// segment's endpoint with lesser x will be potential connection point
  	do {

  		if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {

  			var x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );
  			if ( x <= hx && x > qx ) {

  				qx = x;
  				if ( x === hx ) {

  					if ( hy === p.y ) return p;
  					if ( hy === p.next.y ) return p.next;

  				}

  				m = p.x < p.next.x ? p : p.next;

  			}

  		}

  		p = p.next;

  	} while ( p !== outerNode );

  	if ( ! m ) return null;

  	if ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint

  	// look for points inside the triangle of hole point, segment intersection and endpoint;
  	// if there are no points found, we have a valid connection;
  	// otherwise choose the point of the minimum angle with the ray as connection point

  	var stop = m,
  		mx = m.x,
  		my = m.y,
  		tanMin = Infinity,
  		tan;

  	p = m.next;

  	while ( p !== stop ) {

  		if ( hx >= p.x && p.x >= mx && hx !== p.x &&
  				pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {

  			tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential

  			if ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {

  				m = p;
  				tanMin = tan;

  			}

  		}

  		p = p.next;

  	}

  	return m;

  }

  // interlink polygon nodes in z-order
  function indexCurve( start, minX, minY, invSize ) {

  	var p = start;
  	do {

  		if ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );
  		p.prevZ = p.prev;
  		p.nextZ = p.next;
  		p = p.next;

  	} while ( p !== start );

  	p.prevZ.nextZ = null;
  	p.prevZ = null;

  	sortLinked( p );

  }

  // Simon Tatham's linked list merge sort algorithm
  // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
  function sortLinked( list ) {

  	var i, p, q, e, tail, numMerges, pSize, qSize,
  		inSize = 1;

  	do {

  		p = list;
  		list = null;
  		tail = null;
  		numMerges = 0;

  		while ( p ) {

  			numMerges ++;
  			q = p;
  			pSize = 0;
  			for ( i = 0; i < inSize; i ++ ) {

  				pSize ++;
  				q = q.nextZ;
  				if ( ! q ) break;

  			}

  			qSize = inSize;

  			while ( pSize > 0 || ( qSize > 0 && q ) ) {

  				if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {

  					e = p;
  					p = p.nextZ;
  					pSize --;

  				} else {

  					e = q;
  					q = q.nextZ;
  					qSize --;

  				}

  				if ( tail ) tail.nextZ = e;
  				else list = e;

  				e.prevZ = tail;
  				tail = e;

  			}

  			p = q;

  		}

  		tail.nextZ = null;
  		inSize *= 2;

  	} while ( numMerges > 1 );

  	return list;

  }

  // z-order of a point given coords and inverse of the longer side of data bbox
  function zOrder( x, y, minX, minY, invSize ) {

  	// coords are transformed into non-negative 15-bit integer range
  	x = 32767 * ( x - minX ) * invSize;
  	y = 32767 * ( y - minY ) * invSize;

  	x = ( x | ( x << 8 ) ) & 0x00FF00FF;
  	x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
  	x = ( x | ( x << 2 ) ) & 0x33333333;
  	x = ( x | ( x << 1 ) ) & 0x55555555;

  	y = ( y | ( y << 8 ) ) & 0x00FF00FF;
  	y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
  	y = ( y | ( y << 2 ) ) & 0x33333333;
  	y = ( y | ( y << 1 ) ) & 0x55555555;

  	return x | ( y << 1 );

  }

  // find the leftmost node of a polygon ring
  function getLeftmost( start ) {

  	var p = start,
  		leftmost = start;
  	do {

  		if ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;
  		p = p.next;

  	} while ( p !== start );

  	return leftmost;

  }

  // check if a point lies within a convex triangle
  function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {

  	return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
  		   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
  		   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;

  }

  // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
  function isValidDiagonal( a, b ) {

  	return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&
  		   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );

  }

  // signed area of a triangle
  function area( p, q, r ) {

  	return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );

  }

  // check if two points are equal
  function equals( p1, p2 ) {

  	return p1.x === p2.x && p1.y === p2.y;

  }

  // check if two segments intersect
  function intersects( p1, q1, p2, q2 ) {

  	if ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||
  		( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;
  	return area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&
  		   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;

  }

  // check if a polygon diagonal intersects any polygon segments
  function intersectsPolygon( a, b ) {

  	var p = a;
  	do {

  		if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
  				intersects( p, p.next, a, b ) ) return true;
  		p = p.next;

  	} while ( p !== a );

  	return false;

  }

  // check if a polygon diagonal is locally inside the polygon
  function locallyInside( a, b ) {

  	return area( a.prev, a, a.next ) < 0 ?
  		area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
  		area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;

  }

  // check if the middle point of a polygon diagonal is inside the polygon
  function middleInside( a, b ) {

  	var p = a,
  		inside = false,
  		px = ( a.x + b.x ) / 2,
  		py = ( a.y + b.y ) / 2;
  	do {

  		if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
  				( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )
  			inside = ! inside;
  		p = p.next;

  	} while ( p !== a );

  	return inside;

  }

  // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
  // if one belongs to the outer ring and another to a hole, it merges it into a single ring
  function splitPolygon( a, b ) {

  	var a2 = new Node( a.i, a.x, a.y ),
  		b2 = new Node( b.i, b.x, b.y ),
  		an = a.next,
  		bp = b.prev;

  	a.next = b;
  	b.prev = a;

  	a2.next = an;
  	an.prev = a2;

  	b2.next = a2;
  	a2.prev = b2;

  	bp.next = b2;
  	b2.prev = bp;

  	return b2;

  }

  // create a node and optionally link it with previous one (in a circular doubly linked list)
  function insertNode( i, x, y, last ) {

  	var p = new Node( i, x, y );

  	if ( ! last ) {

  		p.prev = p;
  		p.next = p;

  	} else {

  		p.next = last.next;
  		p.prev = last;
  		last.next.prev = p;
  		last.next = p;

  	}

  	return p;

  }

  function removeNode( p ) {

  	p.next.prev = p.prev;
  	p.prev.next = p.next;

  	if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;
  	if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;

  }

  function Node( i, x, y ) {

  	// vertex index in coordinates array
  	this.i = i;

  	// vertex coordinates
  	this.x = x;
  	this.y = y;

  	// previous and next vertex nodes in a polygon ring
  	this.prev = null;
  	this.next = null;

  	// z-order curve value
  	this.z = null;

  	// previous and next nodes in z-order
  	this.prevZ = null;
  	this.nextZ = null;

  	// indicates whether this is a steiner point
  	this.steiner = false;

  }

  function signedArea( data, start, end, dim ) {

  	var sum = 0;
  	for ( var i = start, j = end - dim; i < end; i += dim ) {

  		sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
  		j = i;

  	}

  	return sum;

  }

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   */

  var ShapeUtils = {

  	// calculate area of the contour polygon

  	area: function ( contour ) {

  		var n = contour.length;
  		var a = 0.0;

  		for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

  			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

  		}

  		return a * 0.5;

  	},

  	isClockWise: function ( pts ) {

  		return ShapeUtils.area( pts ) < 0;

  	},

  	triangulateShape: function ( contour, holes ) {

  		var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
  		var holeIndices = []; // array of hole indices
  		var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

  		removeDupEndPts( contour );
  		addContour( vertices, contour );

  		//

  		var holeIndex = contour.length;

  		holes.forEach( removeDupEndPts );

  		for ( var i = 0; i < holes.length; i ++ ) {

  			holeIndices.push( holeIndex );
  			holeIndex += holes[ i ].length;
  			addContour( vertices, holes[ i ] );

  		}

  		//

  		var triangles = Earcut.triangulate( vertices, holeIndices );

  		//

  		for ( var i = 0; i < triangles.length; i += 3 ) {

  			faces.push( triangles.slice( i, i + 3 ) );

  		}

  		return faces;

  	}

  };

  function removeDupEndPts( points ) {

  	var l = points.length;

  	if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

  		points.pop();

  	}

  }

  function addContour( vertices, contour ) {

  	for ( var i = 0; i < contour.length; i ++ ) {

  		vertices.push( contour[ i ].x );
  		vertices.push( contour[ i ].y );

  	}

  }

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   *
   * Creates extruded geometry from a path shape.
   *
   * parameters = {
   *
   *  curveSegments: <int>, // number of points on the curves
   *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
   *  depth: <float>, // Depth to extrude the shape
   *
   *  bevelEnabled: <bool>, // turn on bevel
   *  bevelThickness: <float>, // how deep into the original shape bevel goes
   *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
   *  bevelOffset: <float>, // how far from shape outline does bevel start
   *  bevelSegments: <int>, // number of bevel layers
   *
   *  extrudePath: <THREE.Curve> // curve to extrude shape along
   *
   *  UVGenerator: <Object> // object that provides UV generator functions
   *
   * }
   */

  // ExtrudeGeometry

  function ExtrudeGeometry( shapes, options ) {

  	Geometry.call( this );

  	this.type = 'ExtrudeGeometry';

  	this.parameters = {
  		shapes: shapes,
  		options: options
  	};

  	this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
  	this.mergeVertices();

  }

  ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
  ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

  ExtrudeGeometry.prototype.toJSON = function () {

  	var data = Geometry.prototype.toJSON.call( this );

  	var shapes = this.parameters.shapes;
  	var options = this.parameters.options;

  	return toJSON( shapes, options, data );

  };

  // ExtrudeBufferGeometry

  function ExtrudeBufferGeometry( shapes, options ) {

  	BufferGeometry.call( this );

  	this.type = 'ExtrudeBufferGeometry';

  	this.parameters = {
  		shapes: shapes,
  		options: options
  	};

  	shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

  	var scope = this;

  	var verticesArray = [];
  	var uvArray = [];

  	for ( var i = 0, l = shapes.length; i < l; i ++ ) {

  		var shape = shapes[ i ];
  		addShape( shape );

  	}

  	// build geometry

  	this.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );

  	this.computeVertexNormals();

  	// functions

  	function addShape( shape ) {

  		var placeholder = [];

  		// options

  		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
  		var steps = options.steps !== undefined ? options.steps : 1;
  		var depth = options.depth !== undefined ? options.depth : 100;

  		var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
  		var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
  		var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
  		var bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
  		var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

  		var extrudePath = options.extrudePath;

  		var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;

  		// deprecated options

  		if ( options.amount !== undefined ) {

  			console.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );
  			depth = options.amount;

  		}

  		//

  		var extrudePts, extrudeByPath = false;
  		var splineTube, binormal, normal, position2;

  		if ( extrudePath ) {

  			extrudePts = extrudePath.getSpacedPoints( steps );

  			extrudeByPath = true;
  			bevelEnabled = false; // bevels not supported for path extrusion

  			// SETUP TNB variables

  			// TODO1 - have a .isClosed in spline?

  			splineTube = extrudePath.computeFrenetFrames( steps, false );

  			// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

  			binormal = new Vector3();
  			normal = new Vector3();
  			position2 = new Vector3();

  		}

  		// Safeguards if bevels are not enabled

  		if ( ! bevelEnabled ) {

  			bevelSegments = 0;
  			bevelThickness = 0;
  			bevelSize = 0;
  			bevelOffset = 0;

  		}

  		// Variables initialization

  		var ahole, h, hl; // looping of holes

  		var shapePoints = shape.extractPoints( curveSegments );

  		var vertices = shapePoints.shape;
  		var holes = shapePoints.holes;

  		var reverse = ! ShapeUtils.isClockWise( vertices );

  		if ( reverse ) {

  			vertices = vertices.reverse();

  			// Maybe we should also check if holes are in the opposite direction, just to be safe ...

  			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

  				ahole = holes[ h ];

  				if ( ShapeUtils.isClockWise( ahole ) ) {

  					holes[ h ] = ahole.reverse();

  				}

  			}

  		}


  		var faces = ShapeUtils.triangulateShape( vertices, holes );

  		/* Vertices */

  		var contour = vertices; // vertices has all points but contour has only points of circumference

  		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

  			ahole = holes[ h ];

  			vertices = vertices.concat( ahole );

  		}


  		function scalePt2( pt, vec, size ) {

  			if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

  			return vec.clone().multiplyScalar( size ).add( pt );

  		}

  		var b, bs, t, z,
  			vert, vlen = vertices.length,
  			face, flen = faces.length;


  		// Find directions for point movement


  		function getBevelVec( inPt, inPrev, inNext ) {

  			// computes for inPt the corresponding point inPt' on a new contour
  			//   shifted by 1 unit (length of normalized vector) to the left
  			// if we walk along contour clockwise, this new contour is outside the old one
  			//
  			// inPt' is the intersection of the two lines parallel to the two
  			//  adjacent edges of inPt at a distance of 1 unit on the left side.

  			var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

  			// good reading for geometry algorithms (here: line-line intersection)
  			// http://geomalgorithms.com/a05-_intersect-1.html

  			var v_prev_x = inPt.x - inPrev.x,
  				v_prev_y = inPt.y - inPrev.y;
  			var v_next_x = inNext.x - inPt.x,
  				v_next_y = inNext.y - inPt.y;

  			var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

  			// check for collinear edges
  			var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

  			if ( Math.abs( collinear0 ) > Number.EPSILON ) {

  				// not collinear

  				// length of vectors for normalizing

  				var v_prev_len = Math.sqrt( v_prev_lensq );
  				var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

  				// shift adjacent points by unit vectors to the left

  				var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
  				var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

  				var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
  				var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

  				// scaling factor for v_prev to intersection point

  				var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
  						( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
  					( v_prev_x * v_next_y - v_prev_y * v_next_x );

  				// vector from inPt to intersection point

  				v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
  				v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

  				// Don't normalize!, otherwise sharp corners become ugly
  				//  but prevent crazy spikes
  				var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
  				if ( v_trans_lensq <= 2 ) {

  					return new Vector2( v_trans_x, v_trans_y );

  				} else {

  					shrink_by = Math.sqrt( v_trans_lensq / 2 );

  				}

  			} else {

  				// handle special case of collinear edges

  				var direction_eq = false; // assumes: opposite
  				if ( v_prev_x > Number.EPSILON ) {

  					if ( v_next_x > Number.EPSILON ) {

  						direction_eq = true;

  					}

  				} else {

  					if ( v_prev_x < - Number.EPSILON ) {

  						if ( v_next_x < - Number.EPSILON ) {

  							direction_eq = true;

  						}

  					} else {

  						if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

  							direction_eq = true;

  						}

  					}

  				}

  				if ( direction_eq ) {

  					// console.log("Warning: lines are a straight sequence");
  					v_trans_x = - v_prev_y;
  					v_trans_y = v_prev_x;
  					shrink_by = Math.sqrt( v_prev_lensq );

  				} else {

  					// console.log("Warning: lines are a straight spike");
  					v_trans_x = v_prev_x;
  					v_trans_y = v_prev_y;
  					shrink_by = Math.sqrt( v_prev_lensq / 2 );

  				}

  			}

  			return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

  		}


  		var contourMovements = [];

  		for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

  			if ( j === il ) j = 0;
  			if ( k === il ) k = 0;

  			//  (j)---(i)---(k)
  			// console.log('i,j,k', i, j , k)

  			contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

  		}

  		var holesMovements = [],
  			oneHoleMovements, verticesMovements = contourMovements.concat();

  		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

  			ahole = holes[ h ];

  			oneHoleMovements = [];

  			for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

  				if ( j === il ) j = 0;
  				if ( k === il ) k = 0;

  				//  (j)---(i)---(k)
  				oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

  			}

  			holesMovements.push( oneHoleMovements );
  			verticesMovements = verticesMovements.concat( oneHoleMovements );

  		}


  		// Loop bevelSegments, 1 for the front, 1 for the back

  		for ( b = 0; b < bevelSegments; b ++ ) {

  			//for ( b = bevelSegments; b > 0; b -- ) {

  			t = b / bevelSegments;
  			z = bevelThickness * Math.cos( t * Math.PI / 2 );
  			bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

  			// contract shape

  			for ( i = 0, il = contour.length; i < il; i ++ ) {

  				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

  				v( vert.x, vert.y, - z );

  			}

  			// expand holes

  			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

  				ahole = holes[ h ];
  				oneHoleMovements = holesMovements[ h ];

  				for ( i = 0, il = ahole.length; i < il; i ++ ) {

  					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

  					v( vert.x, vert.y, - z );

  				}

  			}

  		}

  		bs = bevelSize + bevelOffset;

  		// Back facing vertices

  		for ( i = 0; i < vlen; i ++ ) {

  			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

  			if ( ! extrudeByPath ) {

  				v( vert.x, vert.y, 0 );

  			} else {

  				// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

  				normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
  				binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

  				position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

  				v( position2.x, position2.y, position2.z );

  			}

  		}

  		// Add stepped vertices...
  		// Including front facing vertices

  		var s;

  		for ( s = 1; s <= steps; s ++ ) {

  			for ( i = 0; i < vlen; i ++ ) {

  				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

  				if ( ! extrudeByPath ) {

  					v( vert.x, vert.y, depth / steps * s );

  				} else {

  					// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

  					normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
  					binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

  					position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

  					v( position2.x, position2.y, position2.z );

  				}

  			}

  		}


  		// Add bevel segments planes

  		//for ( b = 1; b <= bevelSegments; b ++ ) {
  		for ( b = bevelSegments - 1; b >= 0; b -- ) {

  			t = b / bevelSegments;
  			z = bevelThickness * Math.cos( t * Math.PI / 2 );
  			bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

  			// contract shape

  			for ( i = 0, il = contour.length; i < il; i ++ ) {

  				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
  				v( vert.x, vert.y, depth + z );

  			}

  			// expand holes

  			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

  				ahole = holes[ h ];
  				oneHoleMovements = holesMovements[ h ];

  				for ( i = 0, il = ahole.length; i < il; i ++ ) {

  					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

  					if ( ! extrudeByPath ) {

  						v( vert.x, vert.y, depth + z );

  					} else {

  						v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

  					}

  				}

  			}

  		}

  		/* Faces */

  		// Top and bottom faces

  		buildLidFaces();

  		// Sides faces

  		buildSideFaces();


  		/////  Internal functions

  		function buildLidFaces() {

  			var start = verticesArray.length / 3;

  			if ( bevelEnabled ) {

  				var layer = 0; // steps + 1
  				var offset = vlen * layer;

  				// Bottom faces

  				for ( i = 0; i < flen; i ++ ) {

  					face = faces[ i ];
  					f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

  				}

  				layer = steps + bevelSegments * 2;
  				offset = vlen * layer;

  				// Top faces

  				for ( i = 0; i < flen; i ++ ) {

  					face = faces[ i ];
  					f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

  				}

  			} else {

  				// Bottom faces

  				for ( i = 0; i < flen; i ++ ) {

  					face = faces[ i ];
  					f3( face[ 2 ], face[ 1 ], face[ 0 ] );

  				}

  				// Top faces

  				for ( i = 0; i < flen; i ++ ) {

  					face = faces[ i ];
  					f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

  				}

  			}

  			scope.addGroup( start, verticesArray.length / 3 - start, 0 );

  		}

  		// Create faces for the z-sides of the shape

  		function buildSideFaces() {

  			var start = verticesArray.length / 3;
  			var layeroffset = 0;
  			sidewalls( contour, layeroffset );
  			layeroffset += contour.length;

  			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

  				ahole = holes[ h ];
  				sidewalls( ahole, layeroffset );

  				//, true
  				layeroffset += ahole.length;

  			}


  			scope.addGroup( start, verticesArray.length / 3 - start, 1 );


  		}

  		function sidewalls( contour, layeroffset ) {

  			var j, k;
  			i = contour.length;

  			while ( -- i >= 0 ) {

  				j = i;
  				k = i - 1;
  				if ( k < 0 ) k = contour.length - 1;

  				//console.log('b', i,j, i-1, k,vertices.length);

  				var s = 0,
  					sl = steps + bevelSegments * 2;

  				for ( s = 0; s < sl; s ++ ) {

  					var slen1 = vlen * s;
  					var slen2 = vlen * ( s + 1 );

  					var a = layeroffset + j + slen1,
  						b = layeroffset + k + slen1,
  						c = layeroffset + k + slen2,
  						d = layeroffset + j + slen2;

  					f4( a, b, c, d );

  				}

  			}

  		}

  		function v( x, y, z ) {

  			placeholder.push( x );
  			placeholder.push( y );
  			placeholder.push( z );

  		}


  		function f3( a, b, c ) {

  			addVertex( a );
  			addVertex( b );
  			addVertex( c );

  			var nextIndex = verticesArray.length / 3;
  			var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

  			addUV( uvs[ 0 ] );
  			addUV( uvs[ 1 ] );
  			addUV( uvs[ 2 ] );

  		}

  		function f4( a, b, c, d ) {

  			addVertex( a );
  			addVertex( b );
  			addVertex( d );

  			addVertex( b );
  			addVertex( c );
  			addVertex( d );


  			var nextIndex = verticesArray.length / 3;
  			var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

  			addUV( uvs[ 0 ] );
  			addUV( uvs[ 1 ] );
  			addUV( uvs[ 3 ] );

  			addUV( uvs[ 1 ] );
  			addUV( uvs[ 2 ] );
  			addUV( uvs[ 3 ] );

  		}

  		function addVertex( index ) {

  			verticesArray.push( placeholder[ index * 3 + 0 ] );
  			verticesArray.push( placeholder[ index * 3 + 1 ] );
  			verticesArray.push( placeholder[ index * 3 + 2 ] );

  		}


  		function addUV( vector2 ) {

  			uvArray.push( vector2.x );
  			uvArray.push( vector2.y );

  		}

  	}

  }

  ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

  ExtrudeBufferGeometry.prototype.toJSON = function () {

  	var data = BufferGeometry.prototype.toJSON.call( this );

  	var shapes = this.parameters.shapes;
  	var options = this.parameters.options;

  	return toJSON( shapes, options, data );

  };

  //

  var WorldUVGenerator = {

  	generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

  		var a_x = vertices[ indexA * 3 ];
  		var a_y = vertices[ indexA * 3 + 1 ];
  		var b_x = vertices[ indexB * 3 ];
  		var b_y = vertices[ indexB * 3 + 1 ];
  		var c_x = vertices[ indexC * 3 ];
  		var c_y = vertices[ indexC * 3 + 1 ];

  		return [
  			new Vector2( a_x, a_y ),
  			new Vector2( b_x, b_y ),
  			new Vector2( c_x, c_y )
  		];

  	},

  	generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

  		var a_x = vertices[ indexA * 3 ];
  		var a_y = vertices[ indexA * 3 + 1 ];
  		var a_z = vertices[ indexA * 3 + 2 ];
  		var b_x = vertices[ indexB * 3 ];
  		var b_y = vertices[ indexB * 3 + 1 ];
  		var b_z = vertices[ indexB * 3 + 2 ];
  		var c_x = vertices[ indexC * 3 ];
  		var c_y = vertices[ indexC * 3 + 1 ];
  		var c_z = vertices[ indexC * 3 + 2 ];
  		var d_x = vertices[ indexD * 3 ];
  		var d_y = vertices[ indexD * 3 + 1 ];
  		var d_z = vertices[ indexD * 3 + 2 ];

  		if ( Math.abs( a_y - b_y ) < 0.01 ) {

  			return [
  				new Vector2( a_x, 1 - a_z ),
  				new Vector2( b_x, 1 - b_z ),
  				new Vector2( c_x, 1 - c_z ),
  				new Vector2( d_x, 1 - d_z )
  			];

  		} else {

  			return [
  				new Vector2( a_y, 1 - a_z ),
  				new Vector2( b_y, 1 - b_z ),
  				new Vector2( c_y, 1 - c_z ),
  				new Vector2( d_y, 1 - d_z )
  			];

  		}

  	}
  };

  function toJSON( shapes, options, data ) {

  	//

  	data.shapes = [];

  	if ( Array.isArray( shapes ) ) {

  		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

  			var shape = shapes[ i ];

  			data.shapes.push( shape.uuid );

  		}

  	} else {

  		data.shapes.push( shapes.uuid );

  	}

  	//

  	if ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();

  	return data;

  }

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * @author alteredq / http://alteredqualia.com/
   *
   * Text = 3D Text
   *
   * parameters = {
   *  font: <THREE.Font>, // font
   *
   *  size: <float>, // size of the text
   *  height: <float>, // thickness to extrude text
   *  curveSegments: <int>, // number of points on the curves
   *
   *  bevelEnabled: <bool>, // turn on bevel
   *  bevelThickness: <float>, // how deep into text bevel goes
   *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel
   *  bevelOffset: <float> // how far from text outline does bevel start
   * }
   */

  // TextGeometry

  function TextGeometry( text, parameters ) {

  	Geometry.call( this );

  	this.type = 'TextGeometry';

  	this.parameters = {
  		text: text,
  		parameters: parameters
  	};

  	this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
  	this.mergeVertices();

  }

  TextGeometry.prototype = Object.create( Geometry.prototype );
  TextGeometry.prototype.constructor = TextGeometry;

  // TextBufferGeometry

  function TextBufferGeometry( text, parameters ) {

  	parameters = parameters || {};

  	var font = parameters.font;

  	if ( ! ( font && font.isFont ) ) {

  		console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
  		return new Geometry();

  	}

  	var shapes = font.generateShapes( text, parameters.size );

  	// translate parameters to ExtrudeGeometry API

  	parameters.depth = parameters.height !== undefined ? parameters.height : 50;

  	// defaults

  	if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
  	if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
  	if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

  	ExtrudeBufferGeometry.call( this, shapes, parameters );

  	this.type = 'TextBufferGeometry';

  }

  TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
  TextBufferGeometry.prototype.constructor = TextBufferGeometry;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author benaadams / https://twitter.com/ben_a_adams
   * @author Mugen87 / https://github.com/Mugen87
   */

  // SphereGeometry

  function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

  	Geometry.call( this );

  	this.type = 'SphereGeometry';

  	this.parameters = {
  		radius: radius,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments,
  		phiStart: phiStart,
  		phiLength: phiLength,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
  	this.mergeVertices();

  }

  SphereGeometry.prototype = Object.create( Geometry.prototype );
  SphereGeometry.prototype.constructor = SphereGeometry;

  // SphereBufferGeometry

  function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

  	BufferGeometry.call( this );

  	this.type = 'SphereBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		widthSegments: widthSegments,
  		heightSegments: heightSegments,
  		phiStart: phiStart,
  		phiLength: phiLength,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	radius = radius || 1;

  	widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
  	heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

  	phiStart = phiStart !== undefined ? phiStart : 0;
  	phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

  	thetaStart = thetaStart !== undefined ? thetaStart : 0;
  	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

  	var thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );

  	var ix, iy;

  	var index = 0;
  	var grid = [];

  	var vertex = new Vector3();
  	var normal = new Vector3();

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// generate vertices, normals and uvs

  	for ( iy = 0; iy <= heightSegments; iy ++ ) {

  		var verticesRow = [];

  		var v = iy / heightSegments;

  		// special case for the poles

  		var uOffset = 0;

  		if ( iy == 0 && thetaStart == 0 ) {

  			uOffset = 0.5 / widthSegments;

  		} else if ( iy == heightSegments && thetaEnd == Math.PI ) {

  			uOffset = - 0.5 / widthSegments;

  		}

  		for ( ix = 0; ix <= widthSegments; ix ++ ) {

  			var u = ix / widthSegments;

  			// vertex

  			vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
  			vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
  			vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal

  			normal.copy( vertex ).normalize();
  			normals.push( normal.x, normal.y, normal.z );

  			// uv

  			uvs.push( u + uOffset, 1 - v );

  			verticesRow.push( index ++ );

  		}

  		grid.push( verticesRow );

  	}

  	// indices

  	for ( iy = 0; iy < heightSegments; iy ++ ) {

  		for ( ix = 0; ix < widthSegments; ix ++ ) {

  			var a = grid[ iy ][ ix + 1 ];
  			var b = grid[ iy ][ ix ];
  			var c = grid[ iy + 1 ][ ix ];
  			var d = grid[ iy + 1 ][ ix + 1 ];

  			if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
  			if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

  /**
   * @author Kaleb Murphy
   * @author Mugen87 / https://github.com/Mugen87
   */

  // RingGeometry

  function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

  	Geometry.call( this );

  	this.type = 'RingGeometry';

  	this.parameters = {
  		innerRadius: innerRadius,
  		outerRadius: outerRadius,
  		thetaSegments: thetaSegments,
  		phiSegments: phiSegments,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
  	this.mergeVertices();

  }

  RingGeometry.prototype = Object.create( Geometry.prototype );
  RingGeometry.prototype.constructor = RingGeometry;

  // RingBufferGeometry

  function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

  	BufferGeometry.call( this );

  	this.type = 'RingBufferGeometry';

  	this.parameters = {
  		innerRadius: innerRadius,
  		outerRadius: outerRadius,
  		thetaSegments: thetaSegments,
  		phiSegments: phiSegments,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	innerRadius = innerRadius || 0.5;
  	outerRadius = outerRadius || 1;

  	thetaStart = thetaStart !== undefined ? thetaStart : 0;
  	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

  	thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
  	phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// some helper variables

  	var segment;
  	var radius = innerRadius;
  	var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
  	var vertex = new Vector3();
  	var uv = new Vector2();
  	var j, i;

  	// generate vertices, normals and uvs

  	for ( j = 0; j <= phiSegments; j ++ ) {

  		for ( i = 0; i <= thetaSegments; i ++ ) {

  			// values are generate from the inside of the ring to the outside

  			segment = thetaStart + i / thetaSegments * thetaLength;

  			// vertex

  			vertex.x = radius * Math.cos( segment );
  			vertex.y = radius * Math.sin( segment );

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal

  			normals.push( 0, 0, 1 );

  			// uv

  			uv.x = ( vertex.x / outerRadius + 1 ) / 2;
  			uv.y = ( vertex.y / outerRadius + 1 ) / 2;

  			uvs.push( uv.x, uv.y );

  		}

  		// increase the radius for next row of vertices

  		radius += radiusStep;

  	}

  	// indices

  	for ( j = 0; j < phiSegments; j ++ ) {

  		var thetaSegmentLevel = j * ( thetaSegments + 1 );

  		for ( i = 0; i < thetaSegments; i ++ ) {

  			segment = i + thetaSegmentLevel;

  			var a = segment;
  			var b = segment + thetaSegments + 1;
  			var c = segment + thetaSegments + 2;
  			var d = segment + 1;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  RingBufferGeometry.prototype.constructor = RingBufferGeometry;

  /**
   * @author zz85 / https://github.com/zz85
   * @author bhouston / http://clara.io
   * @author Mugen87 / https://github.com/Mugen87
   */

  // LatheGeometry

  function LatheGeometry( points, segments, phiStart, phiLength ) {

  	Geometry.call( this );

  	this.type = 'LatheGeometry';

  	this.parameters = {
  		points: points,
  		segments: segments,
  		phiStart: phiStart,
  		phiLength: phiLength
  	};

  	this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
  	this.mergeVertices();

  }

  LatheGeometry.prototype = Object.create( Geometry.prototype );
  LatheGeometry.prototype.constructor = LatheGeometry;

  // LatheBufferGeometry

  function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

  	BufferGeometry.call( this );

  	this.type = 'LatheBufferGeometry';

  	this.parameters = {
  		points: points,
  		segments: segments,
  		phiStart: phiStart,
  		phiLength: phiLength
  	};

  	segments = Math.floor( segments ) || 12;
  	phiStart = phiStart || 0;
  	phiLength = phiLength || Math.PI * 2;

  	// clamp phiLength so it's in range of [ 0, 2PI ]

  	phiLength = MathUtils.clamp( phiLength, 0, Math.PI * 2 );


  	// buffers

  	var indices = [];
  	var vertices = [];
  	var uvs = [];

  	// helper variables

  	var base;
  	var inverseSegments = 1.0 / segments;
  	var vertex = new Vector3();
  	var uv = new Vector2();
  	var i, j;

  	// generate vertices and uvs

  	for ( i = 0; i <= segments; i ++ ) {

  		var phi = phiStart + i * inverseSegments * phiLength;

  		var sin = Math.sin( phi );
  		var cos = Math.cos( phi );

  		for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

  			// vertex

  			vertex.x = points[ j ].x * sin;
  			vertex.y = points[ j ].y;
  			vertex.z = points[ j ].x * cos;

  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// uv

  			uv.x = i / segments;
  			uv.y = j / ( points.length - 1 );

  			uvs.push( uv.x, uv.y );


  		}

  	}

  	// indices

  	for ( i = 0; i < segments; i ++ ) {

  		for ( j = 0; j < ( points.length - 1 ); j ++ ) {

  			base = j + i * points.length;

  			var a = base;
  			var b = base + points.length;
  			var c = base + points.length + 1;
  			var d = base + 1;

  			// faces

  			indices.push( a, b, d );
  			indices.push( b, c, d );

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	// generate normals

  	this.computeVertexNormals();

  	// if the geometry is closed, we need to average the normals along the seam.
  	// because the corresponding vertices are identical (but still have different UVs).

  	if ( phiLength === Math.PI * 2 ) {

  		var normals = this.attributes.normal.array;
  		var n1 = new Vector3();
  		var n2 = new Vector3();
  		var n = new Vector3();

  		// this is the buffer offset for the last line of vertices

  		base = segments * points.length * 3;

  		for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

  			// select the normal of the vertex in the first line

  			n1.x = normals[ j + 0 ];
  			n1.y = normals[ j + 1 ];
  			n1.z = normals[ j + 2 ];

  			// select the normal of the vertex in the last line

  			n2.x = normals[ base + j + 0 ];
  			n2.y = normals[ base + j + 1 ];
  			n2.z = normals[ base + j + 2 ];

  			// average normals

  			n.addVectors( n1, n2 ).normalize();

  			// assign the new values to both normals

  			normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
  			normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
  			normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

  		}

  	}

  }

  LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

  /**
   * @author jonobr1 / http://jonobr1.com
   * @author Mugen87 / https://github.com/Mugen87
   */

  // ShapeGeometry

  function ShapeGeometry( shapes, curveSegments ) {

  	Geometry.call( this );

  	this.type = 'ShapeGeometry';

  	if ( typeof curveSegments === 'object' ) {

  		console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );

  		curveSegments = curveSegments.curveSegments;

  	}

  	this.parameters = {
  		shapes: shapes,
  		curveSegments: curveSegments
  	};

  	this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
  	this.mergeVertices();

  }

  ShapeGeometry.prototype = Object.create( Geometry.prototype );
  ShapeGeometry.prototype.constructor = ShapeGeometry;

  ShapeGeometry.prototype.toJSON = function () {

  	var data = Geometry.prototype.toJSON.call( this );

  	var shapes = this.parameters.shapes;

  	return toJSON$1( shapes, data );

  };

  // ShapeBufferGeometry

  function ShapeBufferGeometry( shapes, curveSegments ) {

  	BufferGeometry.call( this );

  	this.type = 'ShapeBufferGeometry';

  	this.parameters = {
  		shapes: shapes,
  		curveSegments: curveSegments
  	};

  	curveSegments = curveSegments || 12;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var groupStart = 0;
  	var groupCount = 0;

  	// allow single and array values for "shapes" parameter

  	if ( Array.isArray( shapes ) === false ) {

  		addShape( shapes );

  	} else {

  		for ( var i = 0; i < shapes.length; i ++ ) {

  			addShape( shapes[ i ] );

  			this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

  			groupStart += groupCount;
  			groupCount = 0;

  		}

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


  	// helper functions

  	function addShape( shape ) {

  		var i, l, shapeHole;

  		var indexOffset = vertices.length / 3;
  		var points = shape.extractPoints( curveSegments );

  		var shapeVertices = points.shape;
  		var shapeHoles = points.holes;

  		// check direction of vertices

  		if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

  			shapeVertices = shapeVertices.reverse();

  		}

  		for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

  			shapeHole = shapeHoles[ i ];

  			if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

  				shapeHoles[ i ] = shapeHole.reverse();

  			}

  		}

  		var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

  		// join vertices of inner and outer paths to a single array

  		for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

  			shapeHole = shapeHoles[ i ];
  			shapeVertices = shapeVertices.concat( shapeHole );

  		}

  		// vertices, normals, uvs

  		for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {

  			var vertex = shapeVertices[ i ];

  			vertices.push( vertex.x, vertex.y, 0 );
  			normals.push( 0, 0, 1 );
  			uvs.push( vertex.x, vertex.y ); // world uvs

  		}

  		// incides

  		for ( i = 0, l = faces.length; i < l; i ++ ) {

  			var face = faces[ i ];

  			var a = face[ 0 ] + indexOffset;
  			var b = face[ 1 ] + indexOffset;
  			var c = face[ 2 ] + indexOffset;

  			indices.push( a, b, c );
  			groupCount += 3;

  		}

  	}

  }

  ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

  ShapeBufferGeometry.prototype.toJSON = function () {

  	var data = BufferGeometry.prototype.toJSON.call( this );

  	var shapes = this.parameters.shapes;

  	return toJSON$1( shapes, data );

  };

  //

  function toJSON$1( shapes, data ) {

  	data.shapes = [];

  	if ( Array.isArray( shapes ) ) {

  		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

  			var shape = shapes[ i ];

  			data.shapes.push( shape.uuid );

  		}

  	} else {

  		data.shapes.push( shapes.uuid );

  	}

  	return data;

  }

  /**
   * @author WestLangley / http://github.com/WestLangley
   * @author Mugen87 / https://github.com/Mugen87
   */

  function EdgesGeometry( geometry, thresholdAngle ) {

  	BufferGeometry.call( this );

  	this.type = 'EdgesGeometry';

  	this.parameters = {
  		thresholdAngle: thresholdAngle
  	};

  	thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

  	// buffer

  	var vertices = [];

  	// helper variables

  	var thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );
  	var edge = [ 0, 0 ], edges = {}, edge1, edge2;
  	var key, keys = [ 'a', 'b', 'c' ];

  	// prepare source geometry

  	var geometry2;

  	if ( geometry.isBufferGeometry ) {

  		geometry2 = new Geometry();
  		geometry2.fromBufferGeometry( geometry );

  	} else {

  		geometry2 = geometry.clone();

  	}

  	geometry2.mergeVertices();
  	geometry2.computeFaceNormals();

  	var sourceVertices = geometry2.vertices;
  	var faces = geometry2.faces;

  	// now create a data structure where each entry represents an edge with its adjoining faces

  	for ( var i = 0, l = faces.length; i < l; i ++ ) {

  		var face = faces[ i ];

  		for ( var j = 0; j < 3; j ++ ) {

  			edge1 = face[ keys[ j ] ];
  			edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
  			edge[ 0 ] = Math.min( edge1, edge2 );
  			edge[ 1 ] = Math.max( edge1, edge2 );

  			key = edge[ 0 ] + ',' + edge[ 1 ];

  			if ( edges[ key ] === undefined ) {

  				edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };

  			} else {

  				edges[ key ].face2 = i;

  			}

  		}

  	}

  	// generate vertices

  	for ( key in edges ) {

  		var e = edges[ key ];

  		// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

  		if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {

  			var vertex = sourceVertices[ e.index1 ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  			vertex = sourceVertices[ e.index2 ];
  			vertices.push( vertex.x, vertex.y, vertex.z );

  		}

  	}

  	// build geometry

  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

  }

  EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
  EdgesGeometry.prototype.constructor = EdgesGeometry;

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  // CylinderGeometry

  function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

  	Geometry.call( this );

  	this.type = 'CylinderGeometry';

  	this.parameters = {
  		radiusTop: radiusTop,
  		radiusBottom: radiusBottom,
  		height: height,
  		radialSegments: radialSegments,
  		heightSegments: heightSegments,
  		openEnded: openEnded,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
  	this.mergeVertices();

  }

  CylinderGeometry.prototype = Object.create( Geometry.prototype );
  CylinderGeometry.prototype.constructor = CylinderGeometry;

  // CylinderBufferGeometry

  function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

  	BufferGeometry.call( this );

  	this.type = 'CylinderBufferGeometry';

  	this.parameters = {
  		radiusTop: radiusTop,
  		radiusBottom: radiusBottom,
  		height: height,
  		radialSegments: radialSegments,
  		heightSegments: heightSegments,
  		openEnded: openEnded,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	var scope = this;

  	radiusTop = radiusTop !== undefined ? radiusTop : 1;
  	radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
  	height = height || 1;

  	radialSegments = Math.floor( radialSegments ) || 8;
  	heightSegments = Math.floor( heightSegments ) || 1;

  	openEnded = openEnded !== undefined ? openEnded : false;
  	thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
  	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var index = 0;
  	var indexArray = [];
  	var halfHeight = height / 2;
  	var groupStart = 0;

  	// generate geometry

  	generateTorso();

  	if ( openEnded === false ) {

  		if ( radiusTop > 0 ) generateCap( true );
  		if ( radiusBottom > 0 ) generateCap( false );

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  	function generateTorso() {

  		var x, y;
  		var normal = new Vector3();
  		var vertex = new Vector3();

  		var groupCount = 0;

  		// this will be used to calculate the normal
  		var slope = ( radiusBottom - radiusTop ) / height;

  		// generate vertices, normals and uvs

  		for ( y = 0; y <= heightSegments; y ++ ) {

  			var indexRow = [];

  			var v = y / heightSegments;

  			// calculate the radius of the current row

  			var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

  			for ( x = 0; x <= radialSegments; x ++ ) {

  				var u = x / radialSegments;

  				var theta = u * thetaLength + thetaStart;

  				var sinTheta = Math.sin( theta );
  				var cosTheta = Math.cos( theta );

  				// vertex

  				vertex.x = radius * sinTheta;
  				vertex.y = - v * height + halfHeight;
  				vertex.z = radius * cosTheta;
  				vertices.push( vertex.x, vertex.y, vertex.z );

  				// normal

  				normal.set( sinTheta, slope, cosTheta ).normalize();
  				normals.push( normal.x, normal.y, normal.z );

  				// uv

  				uvs.push( u, 1 - v );

  				// save index of vertex in respective row

  				indexRow.push( index ++ );

  			}

  			// now save vertices of the row in our index array

  			indexArray.push( indexRow );

  		}

  		// generate indices

  		for ( x = 0; x < radialSegments; x ++ ) {

  			for ( y = 0; y < heightSegments; y ++ ) {

  				// we use the index array to access the correct indices

  				var a = indexArray[ y ][ x ];
  				var b = indexArray[ y + 1 ][ x ];
  				var c = indexArray[ y + 1 ][ x + 1 ];
  				var d = indexArray[ y ][ x + 1 ];

  				// faces

  				indices.push( a, b, d );
  				indices.push( b, c, d );

  				// update group counter

  				groupCount += 6;

  			}

  		}

  		// add a group to the geometry. this will ensure multi material support

  		scope.addGroup( groupStart, groupCount, 0 );

  		// calculate new start value for groups

  		groupStart += groupCount;

  	}

  	function generateCap( top ) {

  		var x, centerIndexStart, centerIndexEnd;

  		var uv = new Vector2();
  		var vertex = new Vector3();

  		var groupCount = 0;

  		var radius = ( top === true ) ? radiusTop : radiusBottom;
  		var sign = ( top === true ) ? 1 : - 1;

  		// save the index of the first center vertex
  		centerIndexStart = index;

  		// first we generate the center vertex data of the cap.
  		// because the geometry needs one set of uvs per face,
  		// we must generate a center vertex per face/segment

  		for ( x = 1; x <= radialSegments; x ++ ) {

  			// vertex

  			vertices.push( 0, halfHeight * sign, 0 );

  			// normal

  			normals.push( 0, sign, 0 );

  			// uv

  			uvs.push( 0.5, 0.5 );

  			// increase index

  			index ++;

  		}

  		// save the index of the last center vertex

  		centerIndexEnd = index;

  		// now we generate the surrounding vertices, normals and uvs

  		for ( x = 0; x <= radialSegments; x ++ ) {

  			var u = x / radialSegments;
  			var theta = u * thetaLength + thetaStart;

  			var cosTheta = Math.cos( theta );
  			var sinTheta = Math.sin( theta );

  			// vertex

  			vertex.x = radius * sinTheta;
  			vertex.y = halfHeight * sign;
  			vertex.z = radius * cosTheta;
  			vertices.push( vertex.x, vertex.y, vertex.z );

  			// normal

  			normals.push( 0, sign, 0 );

  			// uv

  			uv.x = ( cosTheta * 0.5 ) + 0.5;
  			uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
  			uvs.push( uv.x, uv.y );

  			// increase index

  			index ++;

  		}

  		// generate indices

  		for ( x = 0; x < radialSegments; x ++ ) {

  			var c = centerIndexStart + x;
  			var i = centerIndexEnd + x;

  			if ( top === true ) {

  				// face top

  				indices.push( i, i + 1, c );

  			} else {

  				// face bottom

  				indices.push( i + 1, i, c );

  			}

  			groupCount += 3;

  		}

  		// add a group to the geometry. this will ensure multi material support

  		scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

  		// calculate new start value for groups

  		groupStart += groupCount;

  	}

  }

  CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

  /**
   * @author abelnation / http://github.com/abelnation
   */

  // ConeGeometry

  function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

  	CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

  	this.type = 'ConeGeometry';

  	this.parameters = {
  		radius: radius,
  		height: height,
  		radialSegments: radialSegments,
  		heightSegments: heightSegments,
  		openEnded: openEnded,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  }

  ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
  ConeGeometry.prototype.constructor = ConeGeometry;

  // ConeBufferGeometry

  function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

  	CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

  	this.type = 'ConeBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		height: height,
  		radialSegments: radialSegments,
  		heightSegments: heightSegments,
  		openEnded: openEnded,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  }

  ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
  ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   * @author Mugen87 / https://github.com/Mugen87
   * @author hughes
   */

  // CircleGeometry

  function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

  	Geometry.call( this );

  	this.type = 'CircleGeometry';

  	this.parameters = {
  		radius: radius,
  		segments: segments,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
  	this.mergeVertices();

  }

  CircleGeometry.prototype = Object.create( Geometry.prototype );
  CircleGeometry.prototype.constructor = CircleGeometry;

  // CircleBufferGeometry

  function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

  	BufferGeometry.call( this );

  	this.type = 'CircleBufferGeometry';

  	this.parameters = {
  		radius: radius,
  		segments: segments,
  		thetaStart: thetaStart,
  		thetaLength: thetaLength
  	};

  	radius = radius || 1;
  	segments = segments !== undefined ? Math.max( 3, segments ) : 8;

  	thetaStart = thetaStart !== undefined ? thetaStart : 0;
  	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

  	// buffers

  	var indices = [];
  	var vertices = [];
  	var normals = [];
  	var uvs = [];

  	// helper variables

  	var i, s;
  	var vertex = new Vector3();
  	var uv = new Vector2();

  	// center point

  	vertices.push( 0, 0, 0 );
  	normals.push( 0, 0, 1 );
  	uvs.push( 0.5, 0.5 );

  	for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {

  		var segment = thetaStart + s / segments * thetaLength;

  		// vertex

  		vertex.x = radius * Math.cos( segment );
  		vertex.y = radius * Math.sin( segment );

  		vertices.push( vertex.x, vertex.y, vertex.z );

  		// normal

  		normals.push( 0, 0, 1 );

  		// uvs

  		uv.x = ( vertices[ i ] / radius + 1 ) / 2;
  		uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

  		uvs.push( uv.x, uv.y );

  	}

  	// indices

  	for ( i = 1; i <= segments; i ++ ) {

  		indices.push( i, i + 1, 0 );

  	}

  	// build geometry

  	this.setIndex( indices );
  	this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
  	this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

  }

  CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
  CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;



  var Geometries = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	WireframeGeometry: WireframeGeometry,
  	ParametricGeometry: ParametricGeometry,
  	ParametricBufferGeometry: ParametricBufferGeometry,
  	TetrahedronGeometry: TetrahedronGeometry,
  	TetrahedronBufferGeometry: TetrahedronBufferGeometry,
  	OctahedronGeometry: OctahedronGeometry,
  	OctahedronBufferGeometry: OctahedronBufferGeometry,
  	IcosahedronGeometry: IcosahedronGeometry,
  	IcosahedronBufferGeometry: IcosahedronBufferGeometry,
  	DodecahedronGeometry: DodecahedronGeometry,
  	DodecahedronBufferGeometry: DodecahedronBufferGeometry,
  	PolyhedronGeometry: PolyhedronGeometry,
  	PolyhedronBufferGeometry: PolyhedronBufferGeometry,
  	TubeGeometry: TubeGeometry,
  	TubeBufferGeometry: TubeBufferGeometry,
  	TorusKnotGeometry: TorusKnotGeometry,
  	TorusKnotBufferGeometry: TorusKnotBufferGeometry,
  	TorusGeometry: TorusGeometry,
  	TorusBufferGeometry: TorusBufferGeometry,
  	TextGeometry: TextGeometry,
  	TextBufferGeometry: TextBufferGeometry,
  	SphereGeometry: SphereGeometry,
  	SphereBufferGeometry: SphereBufferGeometry,
  	RingGeometry: RingGeometry,
  	RingBufferGeometry: RingBufferGeometry,
  	PlaneGeometry: PlaneGeometry,
  	PlaneBufferGeometry: PlaneBufferGeometry,
  	LatheGeometry: LatheGeometry,
  	LatheBufferGeometry: LatheBufferGeometry,
  	ShapeGeometry: ShapeGeometry,
  	ShapeBufferGeometry: ShapeBufferGeometry,
  	ExtrudeGeometry: ExtrudeGeometry,
  	ExtrudeBufferGeometry: ExtrudeBufferGeometry,
  	EdgesGeometry: EdgesGeometry,
  	ConeGeometry: ConeGeometry,
  	ConeBufferGeometry: ConeBufferGeometry,
  	CylinderGeometry: CylinderGeometry,
  	CylinderBufferGeometry: CylinderBufferGeometry,
  	CircleGeometry: CircleGeometry,
  	CircleBufferGeometry: CircleBufferGeometry,
  	BoxGeometry: BoxGeometry,
  	BoxBufferGeometry: BoxBufferGeometry
  });

  /**
   * @author mrdoob / http://mrdoob.com/
   *
   * parameters = {
   *  color: <THREE.Color>
   * }
   */

  function ShadowMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'ShadowMaterial';

  	this.color = new Color( 0x000000 );
  	this.transparent = true;

  	this.setValues( parameters );

  }

  ShadowMaterial.prototype = Object.create( Material.prototype );
  ShadowMaterial.prototype.constructor = ShadowMaterial;

  ShadowMaterial.prototype.isShadowMaterial = true;

  ShadowMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function RawShaderMaterial( parameters ) {

  	ShaderMaterial.call( this, parameters );

  	this.type = 'RawShaderMaterial';

  }

  RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
  RawShaderMaterial.prototype.constructor = RawShaderMaterial;

  RawShaderMaterial.prototype.isRawShaderMaterial = true;

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *  color: <hex>,
   *  roughness: <float>,
   *  metalness: <float>,
   *  opacity: <float>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  emissive: <hex>,
   *  emissiveIntensity: <float>
   *  emissiveMap: new THREE.Texture( <Image> ),
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  roughnessMap: new THREE.Texture( <Image> ),
   *
   *  metalnessMap: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
   *  envMapIntensity: <float>
   *
   *  refractionRatio: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshStandardMaterial( parameters ) {

  	Material.call( this );

  	this.defines = { 'STANDARD': '' };

  	this.type = 'MeshStandardMaterial';

  	this.color = new Color( 0xffffff ); // diffuse
  	this.roughness = 1.0;
  	this.metalness = 0.0;

  	this.map = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.emissive = new Color( 0x000000 );
  	this.emissiveIntensity = 1.0;
  	this.emissiveMap = null;

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.roughnessMap = null;

  	this.metalnessMap = null;

  	this.alphaMap = null;

  	this.envMap = null;
  	this.envMapIntensity = 1.0;

  	this.refractionRatio = 0.98;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.vertexTangents = false;

  	this.setValues( parameters );

  }

  MeshStandardMaterial.prototype = Object.create( Material.prototype );
  MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

  MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

  MeshStandardMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.defines = { 'STANDARD': '' };

  	this.color.copy( source.color );
  	this.roughness = source.roughness;
  	this.metalness = source.metalness;

  	this.map = source.map;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.emissive.copy( source.emissive );
  	this.emissiveMap = source.emissiveMap;
  	this.emissiveIntensity = source.emissiveIntensity;

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.roughnessMap = source.roughnessMap;

  	this.metalnessMap = source.metalnessMap;

  	this.alphaMap = source.alphaMap;

  	this.envMap = source.envMap;
  	this.envMapIntensity = source.envMapIntensity;

  	this.refractionRatio = source.refractionRatio;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	this.vertexTangents = source.vertexTangents;

  	return this;

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *  clearcoat: <float>,
   *  clearcoatMap: new THREE.Texture( <Image> ),
   *  clearcoatRoughness: <float>,
   *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),
   *  clearcoatNormalScale: <Vector2>,
   *  clearcoatNormalMap: new THREE.Texture( <Image> ),
   *
   *  reflectivity: <float>,
   *
   *  sheen: <Color>,
   *
   *  transparency: <float>
   * }
   */

  function MeshPhysicalMaterial( parameters ) {

  	MeshStandardMaterial.call( this );

  	this.defines = {

  		'STANDARD': '',
  		'PHYSICAL': ''

  	};

  	this.type = 'MeshPhysicalMaterial';

  	this.clearcoat = 0.0;
  	this.clearcoatMap = null;
  	this.clearcoatRoughness = 0.0;
  	this.clearcoatRoughnessMap = null;
  	this.clearcoatNormalScale = new Vector2( 1, 1 );
  	this.clearcoatNormalMap = null;

  	this.reflectivity = 0.5; // maps to F0 = 0.04

  	this.sheen = null; // null will disable sheen bsdf

  	this.transparency = 0.0;

  	this.setValues( parameters );

  }

  MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
  MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

  MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

  MeshPhysicalMaterial.prototype.copy = function ( source ) {

  	MeshStandardMaterial.prototype.copy.call( this, source );

  	this.defines = {

  		'STANDARD': '',
  		'PHYSICAL': ''

  	};

  	this.clearcoat = source.clearcoat;
  	this.clearcoatMap = source.clearcoatMap;
  	this.clearcoatRoughness = source.clearcoatRoughness;
  	this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
  	this.clearcoatNormalMap = source.clearcoatNormalMap;
  	this.clearcoatNormalScale.copy( source.clearcoatNormalScale );

  	this.reflectivity = source.reflectivity;

  	if ( source.sheen ) {

  		this.sheen = ( this.sheen || new Color() ).copy( source.sheen );

  	} else {

  		this.sheen = null;

  	}

  	this.transparency = source.transparency;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  specular: <hex>,
   *  shininess: <float>,
   *  opacity: <float>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  emissive: <hex>,
   *  emissiveIntensity: <float>
   *  emissiveMap: new THREE.Texture( <Image> ),
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  specularMap: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
   *  combine: THREE.MultiplyOperation,
   *  reflectivity: <float>,
   *  refractionRatio: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshPhongMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshPhongMaterial';

  	this.color = new Color( 0xffffff ); // diffuse
  	this.specular = new Color( 0x111111 );
  	this.shininess = 30;

  	this.map = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.emissive = new Color( 0x000000 );
  	this.emissiveIntensity = 1.0;
  	this.emissiveMap = null;

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.specularMap = null;

  	this.alphaMap = null;

  	this.envMap = null;
  	this.combine = MultiplyOperation;
  	this.reflectivity = 1;
  	this.refractionRatio = 0.98;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshPhongMaterial.prototype = Object.create( Material.prototype );
  MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

  MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

  MeshPhongMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );
  	this.specular.copy( source.specular );
  	this.shininess = source.shininess;

  	this.map = source.map;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.emissive.copy( source.emissive );
  	this.emissiveMap = source.emissiveMap;
  	this.emissiveIntensity = source.emissiveIntensity;

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.specularMap = source.specularMap;

  	this.alphaMap = source.alphaMap;

  	this.envMap = source.envMap;
  	this.combine = source.combine;
  	this.reflectivity = source.reflectivity;
  	this.refractionRatio = source.refractionRatio;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author takahirox / http://github.com/takahirox
   *
   * parameters = {
   *  color: <hex>,
   *  specular: <hex>,
   *  shininess: <float>,
   *
   *  map: new THREE.Texture( <Image> ),
   *  gradientMap: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  emissive: <hex>,
   *  emissiveIntensity: <float>
   *  emissiveMap: new THREE.Texture( <Image> ),
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  specularMap: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshToonMaterial( parameters ) {

  	Material.call( this );

  	this.defines = { 'TOON': '' };

  	this.type = 'MeshToonMaterial';

  	this.color = new Color( 0xffffff );
  	this.specular = new Color( 0x111111 );
  	this.shininess = 30;

  	this.map = null;
  	this.gradientMap = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.emissive = new Color( 0x000000 );
  	this.emissiveIntensity = 1.0;
  	this.emissiveMap = null;

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.specularMap = null;

  	this.alphaMap = null;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshToonMaterial.prototype = Object.create( Material.prototype );
  MeshToonMaterial.prototype.constructor = MeshToonMaterial;

  MeshToonMaterial.prototype.isMeshToonMaterial = true;

  MeshToonMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );
  	this.specular.copy( source.specular );
  	this.shininess = source.shininess;

  	this.map = source.map;
  	this.gradientMap = source.gradientMap;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.emissive.copy( source.emissive );
  	this.emissiveMap = source.emissiveMap;
  	this.emissiveIntensity = source.emissiveIntensity;

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.specularMap = source.specularMap;

  	this.alphaMap = source.alphaMap;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *  opacity: <float>,
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshNormalMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshNormalMaterial';

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;

  	this.fog = false;

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshNormalMaterial.prototype = Object.create( Material.prototype );
  MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

  MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

  MeshNormalMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  lightMap: new THREE.Texture( <Image> ),
   *  lightMapIntensity: <float>
   *
   *  aoMap: new THREE.Texture( <Image> ),
   *  aoMapIntensity: <float>
   *
   *  emissive: <hex>,
   *  emissiveIntensity: <float>
   *  emissiveMap: new THREE.Texture( <Image> ),
   *
   *  specularMap: new THREE.Texture( <Image> ),
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
   *  combine: THREE.Multiply,
   *  reflectivity: <float>,
   *  refractionRatio: <float>,
   *
   *  wireframe: <boolean>,
   *  wireframeLinewidth: <float>,
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshLambertMaterial( parameters ) {

  	Material.call( this );

  	this.type = 'MeshLambertMaterial';

  	this.color = new Color( 0xffffff ); // diffuse

  	this.map = null;

  	this.lightMap = null;
  	this.lightMapIntensity = 1.0;

  	this.aoMap = null;
  	this.aoMapIntensity = 1.0;

  	this.emissive = new Color( 0x000000 );
  	this.emissiveIntensity = 1.0;
  	this.emissiveMap = null;

  	this.specularMap = null;

  	this.alphaMap = null;

  	this.envMap = null;
  	this.combine = MultiplyOperation;
  	this.reflectivity = 1;
  	this.refractionRatio = 0.98;

  	this.wireframe = false;
  	this.wireframeLinewidth = 1;
  	this.wireframeLinecap = 'round';
  	this.wireframeLinejoin = 'round';

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshLambertMaterial.prototype = Object.create( Material.prototype );
  MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

  MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

  MeshLambertMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.color.copy( source.color );

  	this.map = source.map;

  	this.lightMap = source.lightMap;
  	this.lightMapIntensity = source.lightMapIntensity;

  	this.aoMap = source.aoMap;
  	this.aoMapIntensity = source.aoMapIntensity;

  	this.emissive.copy( source.emissive );
  	this.emissiveMap = source.emissiveMap;
  	this.emissiveIntensity = source.emissiveIntensity;

  	this.specularMap = source.specularMap;

  	this.alphaMap = source.alphaMap;

  	this.envMap = source.envMap;
  	this.combine = source.combine;
  	this.reflectivity = source.reflectivity;
  	this.refractionRatio = source.refractionRatio;

  	this.wireframe = source.wireframe;
  	this.wireframeLinewidth = source.wireframeLinewidth;
  	this.wireframeLinecap = source.wireframeLinecap;
  	this.wireframeLinejoin = source.wireframeLinejoin;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *
   *  matcap: new THREE.Texture( <Image> ),
   *
   *  map: new THREE.Texture( <Image> ),
   *
   *  bumpMap: new THREE.Texture( <Image> ),
   *  bumpScale: <float>,
   *
   *  normalMap: new THREE.Texture( <Image> ),
   *  normalMapType: THREE.TangentSpaceNormalMap,
   *  normalScale: <Vector2>,
   *
   *  displacementMap: new THREE.Texture( <Image> ),
   *  displacementScale: <float>,
   *  displacementBias: <float>,
   *
   *  alphaMap: new THREE.Texture( <Image> ),
   *
   *  skinning: <bool>,
   *  morphTargets: <bool>,
   *  morphNormals: <bool>
   * }
   */

  function MeshMatcapMaterial( parameters ) {

  	Material.call( this );

  	this.defines = { 'MATCAP': '' };

  	this.type = 'MeshMatcapMaterial';

  	this.color = new Color( 0xffffff ); // diffuse

  	this.matcap = null;

  	this.map = null;

  	this.bumpMap = null;
  	this.bumpScale = 1;

  	this.normalMap = null;
  	this.normalMapType = TangentSpaceNormalMap;
  	this.normalScale = new Vector2( 1, 1 );

  	this.displacementMap = null;
  	this.displacementScale = 1;
  	this.displacementBias = 0;

  	this.alphaMap = null;

  	this.skinning = false;
  	this.morphTargets = false;
  	this.morphNormals = false;

  	this.setValues( parameters );

  }

  MeshMatcapMaterial.prototype = Object.create( Material.prototype );
  MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;

  MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;

  MeshMatcapMaterial.prototype.copy = function ( source ) {

  	Material.prototype.copy.call( this, source );

  	this.defines = { 'MATCAP': '' };

  	this.color.copy( source.color );

  	this.matcap = source.matcap;

  	this.map = source.map;

  	this.bumpMap = source.bumpMap;
  	this.bumpScale = source.bumpScale;

  	this.normalMap = source.normalMap;
  	this.normalMapType = source.normalMapType;
  	this.normalScale.copy( source.normalScale );

  	this.displacementMap = source.displacementMap;
  	this.displacementScale = source.displacementScale;
  	this.displacementBias = source.displacementBias;

  	this.alphaMap = source.alphaMap;

  	this.skinning = source.skinning;
  	this.morphTargets = source.morphTargets;
  	this.morphNormals = source.morphNormals;

  	return this;

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   *
   * parameters = {
   *  color: <hex>,
   *  opacity: <float>,
   *
   *  linewidth: <float>,
   *
   *  scale: <float>,
   *  dashSize: <float>,
   *  gapSize: <float>
   * }
   */

  function LineDashedMaterial( parameters ) {

  	LineBasicMaterial.call( this );

  	this.type = 'LineDashedMaterial';

  	this.scale = 1;
  	this.dashSize = 3;
  	this.gapSize = 1;

  	this.setValues( parameters );

  }

  LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
  LineDashedMaterial.prototype.constructor = LineDashedMaterial;

  LineDashedMaterial.prototype.isLineDashedMaterial = true;

  LineDashedMaterial.prototype.copy = function ( source ) {

  	LineBasicMaterial.prototype.copy.call( this, source );

  	this.scale = source.scale;
  	this.dashSize = source.dashSize;
  	this.gapSize = source.gapSize;

  	return this;

  };



  var Materials = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	ShadowMaterial: ShadowMaterial,
  	SpriteMaterial: SpriteMaterial,
  	RawShaderMaterial: RawShaderMaterial,
  	ShaderMaterial: ShaderMaterial,
  	PointsMaterial: PointsMaterial,
  	MeshPhysicalMaterial: MeshPhysicalMaterial,
  	MeshStandardMaterial: MeshStandardMaterial,
  	MeshPhongMaterial: MeshPhongMaterial,
  	MeshToonMaterial: MeshToonMaterial,
  	MeshNormalMaterial: MeshNormalMaterial,
  	MeshLambertMaterial: MeshLambertMaterial,
  	MeshDepthMaterial: MeshDepthMaterial,
  	MeshDistanceMaterial: MeshDistanceMaterial,
  	MeshBasicMaterial: MeshBasicMaterial,
  	MeshMatcapMaterial: MeshMatcapMaterial,
  	LineDashedMaterial: LineDashedMaterial,
  	LineBasicMaterial: LineBasicMaterial,
  	Material: Material
  });

  /**
   * @author tschw
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   */

  var AnimationUtils = {

  	// same as Array.prototype.slice, but also works on typed arrays
  	arraySlice: function ( array, from, to ) {

  		if ( AnimationUtils.isTypedArray( array ) ) {

  			// in ios9 array.subarray(from, undefined) will return empty array
  			// but array.subarray(from) or array.subarray(from, len) is correct
  			return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

  		}

  		return array.slice( from, to );

  	},

  	// converts an array to a specific type
  	convertArray: function ( array, type, forceClone ) {

  		if ( ! array || // let 'undefined' and 'null' pass
  			! forceClone && array.constructor === type ) return array;

  		if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

  			return new type( array ); // create typed array

  		}

  		return Array.prototype.slice.call( array ); // create Array

  	},

  	isTypedArray: function ( object ) {

  		return ArrayBuffer.isView( object ) &&
  			! ( object instanceof DataView );

  	},

  	// returns an array by which times and values can be sorted
  	getKeyframeOrder: function ( times ) {

  		function compareTime( i, j ) {

  			return times[ i ] - times[ j ];

  		}

  		var n = times.length;
  		var result = new Array( n );
  		for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

  		result.sort( compareTime );

  		return result;

  	},

  	// uses the array previously returned by 'getKeyframeOrder' to sort data
  	sortedArray: function ( values, stride, order ) {

  		var nValues = values.length;
  		var result = new values.constructor( nValues );

  		for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

  			var srcOffset = order[ i ] * stride;

  			for ( var j = 0; j !== stride; ++ j ) {

  				result[ dstOffset ++ ] = values[ srcOffset + j ];

  			}

  		}

  		return result;

  	},

  	// function for parsing AOS keyframe formats
  	flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

  		var i = 1, key = jsonKeys[ 0 ];

  		while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

  			key = jsonKeys[ i ++ ];

  		}

  		if ( key === undefined ) return; // no data

  		var value = key[ valuePropertyName ];
  		if ( value === undefined ) return; // no data

  		if ( Array.isArray( value ) ) {

  			do {

  				value = key[ valuePropertyName ];

  				if ( value !== undefined ) {

  					times.push( key.time );
  					values.push.apply( values, value ); // push all elements

  				}

  				key = jsonKeys[ i ++ ];

  			} while ( key !== undefined );

  		} else if ( value.toArray !== undefined ) {

  			// ...assume THREE.Math-ish

  			do {

  				value = key[ valuePropertyName ];

  				if ( value !== undefined ) {

  					times.push( key.time );
  					value.toArray( values, values.length );

  				}

  				key = jsonKeys[ i ++ ];

  			} while ( key !== undefined );

  		} else {

  			// otherwise push as-is

  			do {

  				value = key[ valuePropertyName ];

  				if ( value !== undefined ) {

  					times.push( key.time );
  					values.push( value );

  				}

  				key = jsonKeys[ i ++ ];

  			} while ( key !== undefined );

  		}

  	},

  	subclip: function ( sourceClip, name, startFrame, endFrame, fps ) {

  		fps = fps || 30;

  		var clip = sourceClip.clone();

  		clip.name = name;

  		var tracks = [];

  		for ( var i = 0; i < clip.tracks.length; ++ i ) {

  			var track = clip.tracks[ i ];
  			var valueSize = track.getValueSize();

  			var times = [];
  			var values = [];

  			for ( var j = 0; j < track.times.length; ++ j ) {

  				var frame = track.times[ j ] * fps;

  				if ( frame < startFrame || frame >= endFrame ) continue;

  				times.push( track.times[ j ] );

  				for ( var k = 0; k < valueSize; ++ k ) {

  					values.push( track.values[ j * valueSize + k ] );

  				}

  			}

  			if ( times.length === 0 ) continue;

  			track.times = AnimationUtils.convertArray( times, track.times.constructor );
  			track.values = AnimationUtils.convertArray( values, track.values.constructor );

  			tracks.push( track );

  		}

  		clip.tracks = tracks;

  		// find minimum .times value across all tracks in the trimmed clip

  		var minStartTime = Infinity;

  		for ( var i = 0; i < clip.tracks.length; ++ i ) {

  			if ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {

  				minStartTime = clip.tracks[ i ].times[ 0 ];

  			}

  		}

  		// shift all tracks such that clip begins at t=0

  		for ( var i = 0; i < clip.tracks.length; ++ i ) {

  			clip.tracks[ i ].shift( - 1 * minStartTime );

  		}

  		clip.resetDuration();

  		return clip;

  	}

  };

  /**
   * Abstract base class of interpolants over parametric samples.
   *
   * The parameter domain is one dimensional, typically the time or a path
   * along a curve defined by the data.
   *
   * The sample values can have any dimensionality and derived classes may
   * apply special interpretations to the data.
   *
   * This class provides the interval seek in a Template Method, deferring
   * the actual interpolation to derived classes.
   *
   * Time complexity is O(1) for linear access crossing at most two points
   * and O(log N) for random access, where N is the number of positions.
   *
   * References:
   *
   * 		http://www.oodesign.com/template-method-pattern.html
   *
   * @author tschw
   */

  function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	this.parameterPositions = parameterPositions;
  	this._cachedIndex = 0;

  	this.resultBuffer = resultBuffer !== undefined ?
  		resultBuffer : new sampleValues.constructor( sampleSize );
  	this.sampleValues = sampleValues;
  	this.valueSize = sampleSize;

  }

  Object.assign( Interpolant.prototype, {

  	evaluate: function ( t ) {

  		var pp = this.parameterPositions,
  			i1 = this._cachedIndex,

  			t1 = pp[ i1 ],
  			t0 = pp[ i1 - 1 ];

  		validate_interval: {

  			seek: {

  				var right;

  				linear_scan: {

  					//- See http://jsperf.com/comparison-to-undefined/3
  					//- slower code:
  					//-
  					//- 				if ( t >= t1 || t1 === undefined ) {
  					forward_scan: if ( ! ( t < t1 ) ) {

  						for ( var giveUpAt = i1 + 2; ; ) {

  							if ( t1 === undefined ) {

  								if ( t < t0 ) break forward_scan;

  								// after end

  								i1 = pp.length;
  								this._cachedIndex = i1;
  								return this.afterEnd_( i1 - 1, t, t0 );

  							}

  							if ( i1 === giveUpAt ) break; // this loop

  							t0 = t1;
  							t1 = pp[ ++ i1 ];

  							if ( t < t1 ) {

  								// we have arrived at the sought interval
  								break seek;

  							}

  						}

  						// prepare binary search on the right side of the index
  						right = pp.length;
  						break linear_scan;

  					}

  					//- slower code:
  					//-					if ( t < t0 || t0 === undefined ) {
  					if ( ! ( t >= t0 ) ) {

  						// looping?

  						var t1global = pp[ 1 ];

  						if ( t < t1global ) {

  							i1 = 2; // + 1, using the scan for the details
  							t0 = t1global;

  						}

  						// linear reverse scan

  						for ( var giveUpAt = i1 - 2; ; ) {

  							if ( t0 === undefined ) {

  								// before start

  								this._cachedIndex = 0;
  								return this.beforeStart_( 0, t, t1 );

  							}

  							if ( i1 === giveUpAt ) break; // this loop

  							t1 = t0;
  							t0 = pp[ -- i1 - 1 ];

  							if ( t >= t0 ) {

  								// we have arrived at the sought interval
  								break seek;

  							}

  						}

  						// prepare binary search on the left side of the index
  						right = i1;
  						i1 = 0;
  						break linear_scan;

  					}

  					// the interval is valid

  					break validate_interval;

  				} // linear scan

  				// binary search

  				while ( i1 < right ) {

  					var mid = ( i1 + right ) >>> 1;

  					if ( t < pp[ mid ] ) {

  						right = mid;

  					} else {

  						i1 = mid + 1;

  					}

  				}

  				t1 = pp[ i1 ];
  				t0 = pp[ i1 - 1 ];

  				// check boundary cases, again

  				if ( t0 === undefined ) {

  					this._cachedIndex = 0;
  					return this.beforeStart_( 0, t, t1 );

  				}

  				if ( t1 === undefined ) {

  					i1 = pp.length;
  					this._cachedIndex = i1;
  					return this.afterEnd_( i1 - 1, t0, t );

  				}

  			} // seek

  			this._cachedIndex = i1;

  			this.intervalChanged_( i1, t0, t1 );

  		} // validate_interval

  		return this.interpolate_( i1, t0, t, t1 );

  	},

  	settings: null, // optional, subclass-specific settings structure
  	// Note: The indirection allows central control of many interpolants.

  	// --- Protected interface

  	DefaultSettings_: {},

  	getSettings_: function () {

  		return this.settings || this.DefaultSettings_;

  	},

  	copySampleValue_: function ( index ) {

  		// copies a sample value to the result buffer

  		var result = this.resultBuffer,
  			values = this.sampleValues,
  			stride = this.valueSize,
  			offset = index * stride;

  		for ( var i = 0; i !== stride; ++ i ) {

  			result[ i ] = values[ offset + i ];

  		}

  		return result;

  	},

  	// Template methods for derived classes:

  	interpolate_: function ( /* i1, t0, t, t1 */ ) {

  		throw new Error( 'call to abstract method' );
  		// implementations shall return this.resultBuffer

  	},

  	intervalChanged_: function ( /* i1, t0, t1 */ ) {

  		// empty

  	}

  } );

  // DECLARE ALIAS AFTER assign prototype
  Object.assign( Interpolant.prototype, {

  	//( 0, t, t0 ), returns this.resultBuffer
  	beforeStart_: Interpolant.prototype.copySampleValue_,

  	//( N-1, tN-1, t ), returns this.resultBuffer
  	afterEnd_: Interpolant.prototype.copySampleValue_,

  } );

  /**
   * Fast and simple cubic spline interpolant.
   *
   * It was derived from a Hermitian construction setting the first derivative
   * at each sample position to the linear slope between neighboring positions
   * over their parameter interval.
   *
   * @author tschw
   */

  function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

  	this._weightPrev = - 0;
  	this._offsetPrev = - 0;
  	this._weightNext = - 0;
  	this._offsetNext = - 0;

  }

  CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

  	constructor: CubicInterpolant,

  	DefaultSettings_: {

  		endingStart: ZeroCurvatureEnding,
  		endingEnd: ZeroCurvatureEnding

  	},

  	intervalChanged_: function ( i1, t0, t1 ) {

  		var pp = this.parameterPositions,
  			iPrev = i1 - 2,
  			iNext = i1 + 1,

  			tPrev = pp[ iPrev ],
  			tNext = pp[ iNext ];

  		if ( tPrev === undefined ) {

  			switch ( this.getSettings_().endingStart ) {

  				case ZeroSlopeEnding:

  					// f'(t0) = 0
  					iPrev = i1;
  					tPrev = 2 * t0 - t1;

  					break;

  				case WrapAroundEnding:

  					// use the other end of the curve
  					iPrev = pp.length - 2;
  					tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

  					break;

  				default: // ZeroCurvatureEnding

  					// f''(t0) = 0 a.k.a. Natural Spline
  					iPrev = i1;
  					tPrev = t1;

  			}

  		}

  		if ( tNext === undefined ) {

  			switch ( this.getSettings_().endingEnd ) {

  				case ZeroSlopeEnding:

  					// f'(tN) = 0
  					iNext = i1;
  					tNext = 2 * t1 - t0;

  					break;

  				case WrapAroundEnding:

  					// use the other end of the curve
  					iNext = 1;
  					tNext = t1 + pp[ 1 ] - pp[ 0 ];

  					break;

  				default: // ZeroCurvatureEnding

  					// f''(tN) = 0, a.k.a. Natural Spline
  					iNext = i1 - 1;
  					tNext = t0;

  			}

  		}

  		var halfDt = ( t1 - t0 ) * 0.5,
  			stride = this.valueSize;

  		this._weightPrev = halfDt / ( t0 - tPrev );
  		this._weightNext = halfDt / ( tNext - t1 );
  		this._offsetPrev = iPrev * stride;
  		this._offsetNext = iNext * stride;

  	},

  	interpolate_: function ( i1, t0, t, t1 ) {

  		var result = this.resultBuffer,
  			values = this.sampleValues,
  			stride = this.valueSize,

  			o1 = i1 * stride,		o0 = o1 - stride,
  			oP = this._offsetPrev, 	oN = this._offsetNext,
  			wP = this._weightPrev,	wN = this._weightNext,

  			p = ( t - t0 ) / ( t1 - t0 ),
  			pp = p * p,
  			ppp = pp * p;

  		// evaluate polynomials

  		var sP = - wP * ppp + 2 * wP * pp - wP * p;
  		var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
  		var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
  		var sN = wN * ppp - wN * pp;

  		// combine data linearly

  		for ( var i = 0; i !== stride; ++ i ) {

  			result[ i ] =
  					sP * values[ oP + i ] +
  					s0 * values[ o0 + i ] +
  					s1 * values[ o1 + i ] +
  					sN * values[ oN + i ];

  		}

  		return result;

  	}

  } );

  /**
   * @author tschw
   */

  function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

  }

  LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

  	constructor: LinearInterpolant,

  	interpolate_: function ( i1, t0, t, t1 ) {

  		var result = this.resultBuffer,
  			values = this.sampleValues,
  			stride = this.valueSize,

  			offset1 = i1 * stride,
  			offset0 = offset1 - stride,

  			weight1 = ( t - t0 ) / ( t1 - t0 ),
  			weight0 = 1 - weight1;

  		for ( var i = 0; i !== stride; ++ i ) {

  			result[ i ] =
  					values[ offset0 + i ] * weight0 +
  					values[ offset1 + i ] * weight1;

  		}

  		return result;

  	}

  } );

  /**
   *
   * Interpolant that evaluates to the sample value at the position preceeding
   * the parameter.
   *
   * @author tschw
   */

  function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

  }

  DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

  	constructor: DiscreteInterpolant,

  	interpolate_: function ( i1 /*, t0, t, t1 */ ) {

  		return this.copySampleValue_( i1 - 1 );

  	}

  } );

  /**
   *
   * A timed sequence of keyframes for a specific property.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function KeyframeTrack( name, times, values, interpolation ) {

  	if ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );
  	if ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );

  	this.name = name;

  	this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
  	this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

  	this.setInterpolation( interpolation || this.DefaultInterpolation );

  }

  // Static methods

  Object.assign( KeyframeTrack, {

  	// Serialization (in static context, because of constructor invocation
  	// and automatic invocation of .toJSON):

  	toJSON: function ( track ) {

  		var trackType = track.constructor;

  		var json;

  		// derived classes can define a static toJSON method
  		if ( trackType.toJSON !== undefined ) {

  			json = trackType.toJSON( track );

  		} else {

  			// by default, we assume the data can be serialized as-is
  			json = {

  				'name': track.name,
  				'times': AnimationUtils.convertArray( track.times, Array ),
  				'values': AnimationUtils.convertArray( track.values, Array )

  			};

  			var interpolation = track.getInterpolation();

  			if ( interpolation !== track.DefaultInterpolation ) {

  				json.interpolation = interpolation;

  			}

  		}

  		json.type = track.ValueTypeName; // mandatory

  		return json;

  	}

  } );

  Object.assign( KeyframeTrack.prototype, {

  	constructor: KeyframeTrack,

  	TimeBufferType: Float32Array,

  	ValueBufferType: Float32Array,

  	DefaultInterpolation: InterpolateLinear,

  	InterpolantFactoryMethodDiscrete: function ( result ) {

  		return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );

  	},

  	InterpolantFactoryMethodLinear: function ( result ) {

  		return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );

  	},

  	InterpolantFactoryMethodSmooth: function ( result ) {

  		return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );

  	},

  	setInterpolation: function ( interpolation ) {

  		var factoryMethod;

  		switch ( interpolation ) {

  			case InterpolateDiscrete:

  				factoryMethod = this.InterpolantFactoryMethodDiscrete;

  				break;

  			case InterpolateLinear:

  				factoryMethod = this.InterpolantFactoryMethodLinear;

  				break;

  			case InterpolateSmooth:

  				factoryMethod = this.InterpolantFactoryMethodSmooth;

  				break;

  		}

  		if ( factoryMethod === undefined ) {

  			var message = "unsupported interpolation for " +
  				this.ValueTypeName + " keyframe track named " + this.name;

  			if ( this.createInterpolant === undefined ) {

  				// fall back to default, unless the default itself is messed up
  				if ( interpolation !== this.DefaultInterpolation ) {

  					this.setInterpolation( this.DefaultInterpolation );

  				} else {

  					throw new Error( message ); // fatal, in this case

  				}

  			}

  			console.warn( 'THREE.KeyframeTrack:', message );
  			return this;

  		}

  		this.createInterpolant = factoryMethod;

  		return this;

  	},

  	getInterpolation: function () {

  		switch ( this.createInterpolant ) {

  			case this.InterpolantFactoryMethodDiscrete:

  				return InterpolateDiscrete;

  			case this.InterpolantFactoryMethodLinear:

  				return InterpolateLinear;

  			case this.InterpolantFactoryMethodSmooth:

  				return InterpolateSmooth;

  		}

  	},

  	getValueSize: function () {

  		return this.values.length / this.times.length;

  	},

  	// move all keyframes either forwards or backwards in time
  	shift: function ( timeOffset ) {

  		if ( timeOffset !== 0.0 ) {

  			var times = this.times;

  			for ( var i = 0, n = times.length; i !== n; ++ i ) {

  				times[ i ] += timeOffset;

  			}

  		}

  		return this;

  	},

  	// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  	scale: function ( timeScale ) {

  		if ( timeScale !== 1.0 ) {

  			var times = this.times;

  			for ( var i = 0, n = times.length; i !== n; ++ i ) {

  				times[ i ] *= timeScale;

  			}

  		}

  		return this;

  	},

  	// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  	trim: function ( startTime, endTime ) {

  		var times = this.times,
  			nKeys = times.length,
  			from = 0,
  			to = nKeys - 1;

  		while ( from !== nKeys && times[ from ] < startTime ) {

  			++ from;

  		}

  		while ( to !== - 1 && times[ to ] > endTime ) {

  			-- to;

  		}

  		++ to; // inclusive -> exclusive bound

  		if ( from !== 0 || to !== nKeys ) {

  			// empty tracks are forbidden, so keep at least one keyframe
  			if ( from >= to ) {

  				to = Math.max( to, 1 );
  				from = to - 1;

  			}

  			var stride = this.getValueSize();
  			this.times = AnimationUtils.arraySlice( times, from, to );
  			this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );

  		}

  		return this;

  	},

  	// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  	validate: function () {

  		var valid = true;

  		var valueSize = this.getValueSize();
  		if ( valueSize - Math.floor( valueSize ) !== 0 ) {

  			console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
  			valid = false;

  		}

  		var times = this.times,
  			values = this.values,

  			nKeys = times.length;

  		if ( nKeys === 0 ) {

  			console.error( 'THREE.KeyframeTrack: Track is empty.', this );
  			valid = false;

  		}

  		var prevTime = null;

  		for ( var i = 0; i !== nKeys; i ++ ) {

  			var currTime = times[ i ];

  			if ( typeof currTime === 'number' && isNaN( currTime ) ) {

  				console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
  				valid = false;
  				break;

  			}

  			if ( prevTime !== null && prevTime > currTime ) {

  				console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
  				valid = false;
  				break;

  			}

  			prevTime = currTime;

  		}

  		if ( values !== undefined ) {

  			if ( AnimationUtils.isTypedArray( values ) ) {

  				for ( var i = 0, n = values.length; i !== n; ++ i ) {

  					var value = values[ i ];

  					if ( isNaN( value ) ) {

  						console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
  						valid = false;
  						break;

  					}

  				}

  			}

  		}

  		return valid;

  	},

  	// removes equivalent sequential keys as common in morph target sequences
  	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  	optimize: function () {

  		// times or values may be shared with other tracks, so overwriting is unsafe
  		var times = AnimationUtils.arraySlice( this.times ),
  			values = AnimationUtils.arraySlice( this.values ),
  			stride = this.getValueSize(),

  			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

  			writeIndex = 1,
  			lastIndex = times.length - 1;

  		for ( var i = 1; i < lastIndex; ++ i ) {

  			var keep = false;

  			var time = times[ i ];
  			var timeNext = times[ i + 1 ];

  			// remove adjacent keyframes scheduled at the same time

  			if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

  				if ( ! smoothInterpolation ) {

  					// remove unnecessary keyframes same as their neighbors

  					var offset = i * stride,
  						offsetP = offset - stride,
  						offsetN = offset + stride;

  					for ( var j = 0; j !== stride; ++ j ) {

  						var value = values[ offset + j ];

  						if ( value !== values[ offsetP + j ] ||
  							value !== values[ offsetN + j ] ) {

  							keep = true;
  							break;

  						}

  					}

  				} else {

  					keep = true;

  				}

  			}

  			// in-place compaction

  			if ( keep ) {

  				if ( i !== writeIndex ) {

  					times[ writeIndex ] = times[ i ];

  					var readOffset = i * stride,
  						writeOffset = writeIndex * stride;

  					for ( var j = 0; j !== stride; ++ j ) {

  						values[ writeOffset + j ] = values[ readOffset + j ];

  					}

  				}

  				++ writeIndex;

  			}

  		}

  		// flush last keyframe (compaction looks ahead)

  		if ( lastIndex > 0 ) {

  			times[ writeIndex ] = times[ lastIndex ];

  			for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {

  				values[ writeOffset + j ] = values[ readOffset + j ];

  			}

  			++ writeIndex;

  		}

  		if ( writeIndex !== times.length ) {

  			this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
  			this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

  		} else {

  			this.times = times;
  			this.values = values;

  		}

  		return this;

  	},

  	clone: function () {

  		var times = AnimationUtils.arraySlice( this.times, 0 );
  		var values = AnimationUtils.arraySlice( this.values, 0 );

  		var TypedKeyframeTrack = this.constructor;
  		var track = new TypedKeyframeTrack( this.name, times, values );

  		// Interpolant argument to constructor is not saved, so copy the factory method directly.
  		track.createInterpolant = this.createInterpolant;

  		return track;

  	}

  } );

  /**
   *
   * A Track of Boolean keyframe values.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function BooleanKeyframeTrack( name, times, values ) {

  	KeyframeTrack.call( this, name, times, values );

  }

  BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: BooleanKeyframeTrack,

  	ValueTypeName: 'bool',
  	ValueBufferType: Array,

  	DefaultInterpolation: InterpolateDiscrete,

  	InterpolantFactoryMethodLinear: undefined,
  	InterpolantFactoryMethodSmooth: undefined

  	// Note: Actually this track could have a optimized / compressed
  	// representation of a single value and a custom interpolant that
  	// computes "firstValue ^ isOdd( index )".

  } );

  /**
   *
   * A Track of keyframe values that represent color.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function ColorKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: ColorKeyframeTrack,

  	ValueTypeName: 'color'

  	// ValueBufferType is inherited

  	// DefaultInterpolation is inherited

  	// Note: Very basic implementation and nothing special yet.
  	// However, this is the place for color space parameterization.

  } );

  /**
   *
   * A Track of numeric keyframe values.
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function NumberKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: NumberKeyframeTrack,

  	ValueTypeName: 'number'

  	// ValueBufferType is inherited

  	// DefaultInterpolation is inherited

  } );

  /**
   * Spherical linear unit quaternion interpolant.
   *
   * @author tschw
   */

  function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

  }

  QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

  	constructor: QuaternionLinearInterpolant,

  	interpolate_: function ( i1, t0, t, t1 ) {

  		var result = this.resultBuffer,
  			values = this.sampleValues,
  			stride = this.valueSize,

  			offset = i1 * stride,

  			alpha = ( t - t0 ) / ( t1 - t0 );

  		for ( var end = offset + stride; offset !== end; offset += 4 ) {

  			Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );

  		}

  		return result;

  	}

  } );

  /**
   *
   * A Track of quaternion keyframe values.
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function QuaternionKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: QuaternionKeyframeTrack,

  	ValueTypeName: 'quaternion',

  	// ValueBufferType is inherited

  	DefaultInterpolation: InterpolateLinear,

  	InterpolantFactoryMethodLinear: function ( result ) {

  		return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );

  	},

  	InterpolantFactoryMethodSmooth: undefined // not yet implemented

  } );

  /**
   *
   * A Track that interpolates Strings
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function StringKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: StringKeyframeTrack,

  	ValueTypeName: 'string',
  	ValueBufferType: Array,

  	DefaultInterpolation: InterpolateDiscrete,

  	InterpolantFactoryMethodLinear: undefined,

  	InterpolantFactoryMethodSmooth: undefined

  } );

  /**
   *
   * A Track of vectored keyframe values.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function VectorKeyframeTrack( name, times, values, interpolation ) {

  	KeyframeTrack.call( this, name, times, values, interpolation );

  }

  VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

  	constructor: VectorKeyframeTrack,

  	ValueTypeName: 'vector'

  	// ValueBufferType is inherited

  	// DefaultInterpolation is inherited

  } );

  /**
   *
   * Reusable set of Tracks that represent an animation.
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   */

  function AnimationClip( name, duration, tracks ) {

  	this.name = name;
  	this.tracks = tracks;
  	this.duration = ( duration !== undefined ) ? duration : - 1;

  	this.uuid = MathUtils.generateUUID();

  	// this means it should figure out its duration by scanning the tracks
  	if ( this.duration < 0 ) {

  		this.resetDuration();

  	}

  }

  function getTrackTypeForValueTypeName( typeName ) {

  	switch ( typeName.toLowerCase() ) {

  		case 'scalar':
  		case 'double':
  		case 'float':
  		case 'number':
  		case 'integer':

  			return NumberKeyframeTrack;

  		case 'vector':
  		case 'vector2':
  		case 'vector3':
  		case 'vector4':

  			return VectorKeyframeTrack;

  		case 'color':

  			return ColorKeyframeTrack;

  		case 'quaternion':

  			return QuaternionKeyframeTrack;

  		case 'bool':
  		case 'boolean':

  			return BooleanKeyframeTrack;

  		case 'string':

  			return StringKeyframeTrack;

  	}

  	throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );

  }

  function parseKeyframeTrack( json ) {

  	if ( json.type === undefined ) {

  		throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );

  	}

  	var trackType = getTrackTypeForValueTypeName( json.type );

  	if ( json.times === undefined ) {

  		var times = [], values = [];

  		AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

  		json.times = times;
  		json.values = values;

  	}

  	// derived classes can define a static parse method
  	if ( trackType.parse !== undefined ) {

  		return trackType.parse( json );

  	} else {

  		// by default, we assume a constructor compatible with the base
  		return new trackType( json.name, json.times, json.values, json.interpolation );

  	}

  }

  Object.assign( AnimationClip, {

  	parse: function ( json ) {

  		var tracks = [],
  			jsonTracks = json.tracks,
  			frameTime = 1.0 / ( json.fps || 1.0 );

  		for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

  			tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );

  		}

  		return new AnimationClip( json.name, json.duration, tracks );

  	},

  	toJSON: function ( clip ) {

  		var tracks = [],
  			clipTracks = clip.tracks;

  		var json = {

  			'name': clip.name,
  			'duration': clip.duration,
  			'tracks': tracks,
  			'uuid': clip.uuid

  		};

  		for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

  			tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

  		}

  		return json;

  	},

  	CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {

  		var numMorphTargets = morphTargetSequence.length;
  		var tracks = [];

  		for ( var i = 0; i < numMorphTargets; i ++ ) {

  			var times = [];
  			var values = [];

  			times.push(
  				( i + numMorphTargets - 1 ) % numMorphTargets,
  				i,
  				( i + 1 ) % numMorphTargets );

  			values.push( 0, 1, 0 );

  			var order = AnimationUtils.getKeyframeOrder( times );
  			times = AnimationUtils.sortedArray( times, 1, order );
  			values = AnimationUtils.sortedArray( values, 1, order );

  			// if there is a key at the first frame, duplicate it as the
  			// last frame as well for perfect loop.
  			if ( ! noLoop && times[ 0 ] === 0 ) {

  				times.push( numMorphTargets );
  				values.push( values[ 0 ] );

  			}

  			tracks.push(
  				new NumberKeyframeTrack(
  					'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
  					times, values
  				).scale( 1.0 / fps ) );

  		}

  		return new AnimationClip( name, - 1, tracks );

  	},

  	findByName: function ( objectOrClipArray, name ) {

  		var clipArray = objectOrClipArray;

  		if ( ! Array.isArray( objectOrClipArray ) ) {

  			var o = objectOrClipArray;
  			clipArray = o.geometry && o.geometry.animations || o.animations;

  		}

  		for ( var i = 0; i < clipArray.length; i ++ ) {

  			if ( clipArray[ i ].name === name ) {

  				return clipArray[ i ];

  			}

  		}

  		return null;

  	},

  	CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {

  		var animationToMorphTargets = {};

  		// tested with https://regex101.com/ on trick sequences
  		// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
  		var pattern = /^([\w-]*?)([\d]+)$/;

  		// sort morph target names into animation groups based
  		// patterns like Walk_001, Walk_002, Run_001, Run_002
  		for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

  			var morphTarget = morphTargets[ i ];
  			var parts = morphTarget.name.match( pattern );

  			if ( parts && parts.length > 1 ) {

  				var name = parts[ 1 ];

  				var animationMorphTargets = animationToMorphTargets[ name ];
  				if ( ! animationMorphTargets ) {

  					animationToMorphTargets[ name ] = animationMorphTargets = [];

  				}

  				animationMorphTargets.push( morphTarget );

  			}

  		}

  		var clips = [];

  		for ( var name in animationToMorphTargets ) {

  			clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

  		}

  		return clips;

  	},

  	// parse the animation.hierarchy format
  	parseAnimation: function ( animation, bones ) {

  		if ( ! animation ) {

  			console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
  			return null;

  		}

  		var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

  			// only return track if there are actually keys.
  			if ( animationKeys.length !== 0 ) {

  				var times = [];
  				var values = [];

  				AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

  				// empty keys are filtered out, so check again
  				if ( times.length !== 0 ) {

  					destTracks.push( new trackType( trackName, times, values ) );

  				}

  			}

  		};

  		var tracks = [];

  		var clipName = animation.name || 'default';
  		// automatic length determination in AnimationClip.
  		var duration = animation.length || - 1;
  		var fps = animation.fps || 30;

  		var hierarchyTracks = animation.hierarchy || [];

  		for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

  			var animationKeys = hierarchyTracks[ h ].keys;

  			// skip empty tracks
  			if ( ! animationKeys || animationKeys.length === 0 ) continue;

  			// process morph targets
  			if ( animationKeys[ 0 ].morphTargets ) {

  				// figure out all morph targets used in this track
  				var morphTargetNames = {};

  				for ( var k = 0; k < animationKeys.length; k ++ ) {

  					if ( animationKeys[ k ].morphTargets ) {

  						for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

  							morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

  						}

  					}

  				}

  				// create a track for each morph target with all zero
  				// morphTargetInfluences except for the keys in which
  				// the morphTarget is named.
  				for ( var morphTargetName in morphTargetNames ) {

  					var times = [];
  					var values = [];

  					for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {

  						var animationKey = animationKeys[ k ];

  						times.push( animationKey.time );
  						values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

  					}

  					tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

  				}

  				duration = morphTargetNames.length * ( fps || 1.0 );

  			} else {

  				// ...assume skeletal animation

  				var boneName = '.bones[' + bones[ h ].name + ']';

  				addNonemptyTrack(
  					VectorKeyframeTrack, boneName + '.position',
  					animationKeys, 'pos', tracks );

  				addNonemptyTrack(
  					QuaternionKeyframeTrack, boneName + '.quaternion',
  					animationKeys, 'rot', tracks );

  				addNonemptyTrack(
  					VectorKeyframeTrack, boneName + '.scale',
  					animationKeys, 'scl', tracks );

  			}

  		}

  		if ( tracks.length === 0 ) {

  			return null;

  		}

  		var clip = new AnimationClip( clipName, duration, tracks );

  		return clip;

  	}

  } );

  Object.assign( AnimationClip.prototype, {

  	resetDuration: function () {

  		var tracks = this.tracks, duration = 0;

  		for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

  			var track = this.tracks[ i ];

  			duration = Math.max( duration, track.times[ track.times.length - 1 ] );

  		}

  		this.duration = duration;

  		return this;

  	},

  	trim: function () {

  		for ( var i = 0; i < this.tracks.length; i ++ ) {

  			this.tracks[ i ].trim( 0, this.duration );

  		}

  		return this;

  	},

  	validate: function () {

  		var valid = true;

  		for ( var i = 0; i < this.tracks.length; i ++ ) {

  			valid = valid && this.tracks[ i ].validate();

  		}

  		return valid;

  	},

  	optimize: function () {

  		for ( var i = 0; i < this.tracks.length; i ++ ) {

  			this.tracks[ i ].optimize();

  		}

  		return this;

  	},

  	clone: function () {

  		var tracks = [];

  		for ( var i = 0; i < this.tracks.length; i ++ ) {

  			tracks.push( this.tracks[ i ].clone() );

  		}

  		return new AnimationClip( this.name, this.duration, tracks );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var Cache = {

  	enabled: false,

  	files: {},

  	add: function ( key, file ) {

  		if ( this.enabled === false ) return;

  		// console.log( 'THREE.Cache', 'Adding key:', key );

  		this.files[ key ] = file;

  	},

  	get: function ( key ) {

  		if ( this.enabled === false ) return;

  		// console.log( 'THREE.Cache', 'Checking key:', key );

  		return this.files[ key ];

  	},

  	remove: function ( key ) {

  		delete this.files[ key ];

  	},

  	clear: function () {

  		this.files = {};

  	}

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function LoadingManager( onLoad, onProgress, onError ) {

  	var scope = this;

  	var isLoading = false;
  	var itemsLoaded = 0;
  	var itemsTotal = 0;
  	var urlModifier = undefined;
  	var handlers = [];

  	// Refer to #5689 for the reason why we don't set .onStart
  	// in the constructor

  	this.onStart = undefined;
  	this.onLoad = onLoad;
  	this.onProgress = onProgress;
  	this.onError = onError;

  	this.itemStart = function ( url ) {

  		itemsTotal ++;

  		if ( isLoading === false ) {

  			if ( scope.onStart !== undefined ) {

  				scope.onStart( url, itemsLoaded, itemsTotal );

  			}

  		}

  		isLoading = true;

  	};

  	this.itemEnd = function ( url ) {

  		itemsLoaded ++;

  		if ( scope.onProgress !== undefined ) {

  			scope.onProgress( url, itemsLoaded, itemsTotal );

  		}

  		if ( itemsLoaded === itemsTotal ) {

  			isLoading = false;

  			if ( scope.onLoad !== undefined ) {

  				scope.onLoad();

  			}

  		}

  	};

  	this.itemError = function ( url ) {

  		if ( scope.onError !== undefined ) {

  			scope.onError( url );

  		}

  	};

  	this.resolveURL = function ( url ) {

  		if ( urlModifier ) {

  			return urlModifier( url );

  		}

  		return url;

  	};

  	this.setURLModifier = function ( transform ) {

  		urlModifier = transform;

  		return this;

  	};

  	this.addHandler = function ( regex, loader ) {

  		handlers.push( regex, loader );

  		return this;

  	};

  	this.removeHandler = function ( regex ) {

  		var index = handlers.indexOf( regex );

  		if ( index !== - 1 ) {

  			handlers.splice( index, 2 );

  		}

  		return this;

  	};

  	this.getHandler = function ( file ) {

  		for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

  			var regex = handlers[ i ];
  			var loader = handlers[ i + 1 ];

  			if ( regex.global ) regex.lastIndex = 0; // see #17920

  			if ( regex.test( file ) ) {

  				return loader;

  			}

  		}

  		return null;

  	};

  }

  var DefaultLoadingManager = new LoadingManager();

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function Loader( manager ) {

  	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

  	this.crossOrigin = 'anonymous';
  	this.path = '';
  	this.resourcePath = '';

  }

  Object.assign( Loader.prototype, {

  	load: function ( /* url, onLoad, onProgress, onError */ ) {},

  	parse: function ( /* data */ ) {},

  	setCrossOrigin: function ( crossOrigin ) {

  		this.crossOrigin = crossOrigin;
  		return this;

  	},

  	setPath: function ( path ) {

  		this.path = path;
  		return this;

  	},

  	setResourcePath: function ( resourcePath ) {

  		this.resourcePath = resourcePath;
  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var loading = {};

  function FileLoader( manager ) {

  	Loader.call( this, manager );

  }

  FileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  	constructor: FileLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		if ( url === undefined ) url = '';

  		if ( this.path !== undefined ) url = this.path + url;

  		url = this.manager.resolveURL( url );

  		var scope = this;

  		var cached = Cache.get( url );

  		if ( cached !== undefined ) {

  			scope.manager.itemStart( url );

  			setTimeout( function () {

  				if ( onLoad ) onLoad( cached );

  				scope.manager.itemEnd( url );

  			}, 0 );

  			return cached;

  		}

  		// Check if request is duplicate

  		if ( loading[ url ] !== undefined ) {

  			loading[ url ].push( {

  				onLoad: onLoad,
  				onProgress: onProgress,
  				onError: onError

  			} );

  			return;

  		}

  		// Check for data: URI
  		var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
  		var dataUriRegexResult = url.match( dataUriRegex );

  		// Safari can not handle Data URIs through XMLHttpRequest so process manually
  		if ( dataUriRegexResult ) {

  			var mimeType = dataUriRegexResult[ 1 ];
  			var isBase64 = !! dataUriRegexResult[ 2 ];
  			var data = dataUriRegexResult[ 3 ];

  			data = decodeURIComponent( data );

  			if ( isBase64 ) data = atob( data );

  			try {

  				var response;
  				var responseType = ( this.responseType || '' ).toLowerCase();

  				switch ( responseType ) {

  					case 'arraybuffer':
  					case 'blob':

  						var view = new Uint8Array( data.length );

  						for ( var i = 0; i < data.length; i ++ ) {

  							view[ i ] = data.charCodeAt( i );

  						}

  						if ( responseType === 'blob' ) {

  							response = new Blob( [ view.buffer ], { type: mimeType } );

  						} else {

  							response = view.buffer;

  						}

  						break;

  					case 'document':

  						var parser = new DOMParser();
  						response = parser.parseFromString( data, mimeType );

  						break;

  					case 'json':

  						response = JSON.parse( data );

  						break;

  					default: // 'text' or other

  						response = data;

  						break;

  				}

  				// Wait for next browser tick like standard XMLHttpRequest event dispatching does
  				setTimeout( function () {

  					if ( onLoad ) onLoad( response );

  					scope.manager.itemEnd( url );

  				}, 0 );

  			} catch ( error ) {

  				// Wait for next browser tick like standard XMLHttpRequest event dispatching does
  				setTimeout( function () {

  					if ( onError ) onError( error );

  					scope.manager.itemError( url );
  					scope.manager.itemEnd( url );

  				}, 0 );

  			}

  		} else {

  			// Initialise array for duplicate requests

  			loading[ url ] = [];

  			loading[ url ].push( {

  				onLoad: onLoad,
  				onProgress: onProgress,
  				onError: onError

  			} );

  			var request = new XMLHttpRequest();

  			request.open( 'GET', url, true );

  			request.addEventListener( 'load', function ( event ) {

  				var response = this.response;

  				var callbacks = loading[ url ];

  				delete loading[ url ];

  				if ( this.status === 200 || this.status === 0 ) {

  					// Some browsers return HTTP Status 0 when using non-http protocol
  					// e.g. 'file://' or 'data://'. Handle as success.

  					if ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );

  					// Add to cache only on HTTP success, so that we do not cache
  					// error response bodies as proper responses to requests.
  					Cache.add( url, response );

  					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  						var callback = callbacks[ i ];
  						if ( callback.onLoad ) callback.onLoad( response );

  					}

  					scope.manager.itemEnd( url );

  				} else {

  					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  						var callback = callbacks[ i ];
  						if ( callback.onError ) callback.onError( event );

  					}

  					scope.manager.itemError( url );
  					scope.manager.itemEnd( url );

  				}

  			}, false );

  			request.addEventListener( 'progress', function ( event ) {

  				var callbacks = loading[ url ];

  				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  					var callback = callbacks[ i ];
  					if ( callback.onProgress ) callback.onProgress( event );

  				}

  			}, false );

  			request.addEventListener( 'error', function ( event ) {

  				var callbacks = loading[ url ];

  				delete loading[ url ];

  				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  					var callback = callbacks[ i ];
  					if ( callback.onError ) callback.onError( event );

  				}

  				scope.manager.itemError( url );
  				scope.manager.itemEnd( url );

  			}, false );

  			request.addEventListener( 'abort', function ( event ) {

  				var callbacks = loading[ url ];

  				delete loading[ url ];

  				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

  					var callback = callbacks[ i ];
  					if ( callback.onError ) callback.onError( event );

  				}

  				scope.manager.itemError( url );
  				scope.manager.itemEnd( url );

  			}, false );

  			if ( this.responseType !== undefined ) request.responseType = this.responseType;
  			if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

  			if ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );

  			for ( var header in this.requestHeader ) {

  				request.setRequestHeader( header, this.requestHeader[ header ] );

  			}

  			request.send( null );

  		}

  		scope.manager.itemStart( url );

  		return request;

  	},

  	setResponseType: function ( value ) {

  		this.responseType = value;
  		return this;

  	},

  	setWithCredentials: function ( value ) {

  		this.withCredentials = value;
  		return this;

  	},

  	setMimeType: function ( value ) {

  		this.mimeType = value;
  		return this;

  	},

  	setRequestHeader: function ( value ) {

  		this.requestHeader = value;
  		return this;

  	}

  } );

  /**
   * @author bhouston / http://clara.io/
   */

  function AnimationLoader( manager ) {

  	Loader.call( this, manager );

  }

  AnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  	constructor: AnimationLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var loader = new FileLoader( scope.manager );
  		loader.setPath( scope.path );
  		loader.load( url, function ( text ) {

  			onLoad( scope.parse( JSON.parse( text ) ) );

  		}, onProgress, onError );

  	},

  	parse: function ( json ) {

  		var animations = [];

  		for ( var i = 0; i < json.length; i ++ ) {

  			var clip = AnimationClip.parse( json[ i ] );

  			animations.push( clip );

  		}

  		return animations;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   *
   * Abstract Base class to block based textures loader (dds, pvr, ...)
   *
   * Sub classes have to implement the parse() method which will be used in load().
   */

  function CompressedTextureLoader( manager ) {

  	Loader.call( this, manager );

  }

  CompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  	constructor: CompressedTextureLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var images = [];

  		var texture = new CompressedTexture();
  		texture.image = images;

  		var loader = new FileLoader( this.manager );
  		loader.setPath( this.path );
  		loader.setResponseType( 'arraybuffer' );

  		function loadTexture( i ) {

  			loader.load( url[ i ], function ( buffer ) {

  				var texDatas = scope.parse( buffer, true );

  				images[ i ] = {
  					width: texDatas.width,
  					height: texDatas.height,
  					format: texDatas.format,
  					mipmaps: texDatas.mipmaps
  				};

  				loaded += 1;

  				if ( loaded === 6 ) {

  					if ( texDatas.mipmapCount === 1 )
  						texture.minFilter = LinearFilter;

  					texture.format = texDatas.format;
  					texture.needsUpdate = true;

  					if ( onLoad ) onLoad( texture );

  				}

  			}, onProgress, onError );

  		}

  		if ( Array.isArray( url ) ) {

  			var loaded = 0;

  			for ( var i = 0, il = url.length; i < il; ++ i ) {

  				loadTexture( i );

  			}

  		} else {

  			// compressed cubemap texture stored in a single DDS file

  			loader.load( url, function ( buffer ) {

  				var texDatas = scope.parse( buffer, true );

  				if ( texDatas.isCubemap ) {

  					var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

  					for ( var f = 0; f < faces; f ++ ) {

  						images[ f ] = { mipmaps: [] };

  						for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

  							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
  							images[ f ].format = texDatas.format;
  							images[ f ].width = texDatas.width;
  							images[ f ].height = texDatas.height;

  						}

  					}

  				} else {

  					texture.image.width = texDatas.width;
  					texture.image.height = texDatas.height;
  					texture.mipmaps = texDatas.mipmaps;

  				}

  				if ( texDatas.mipmapCount === 1 ) {

  					texture.minFilter = LinearFilter;

  				}

  				texture.format = texDatas.format;
  				texture.needsUpdate = true;

  				if ( onLoad ) onLoad( texture );

  			}, onProgress, onError );

  		}

  		return texture;

  	}

  } );

  /**
   * @author Nikos M. / https://github.com/foo123/
   *
   * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
   *
   * Sub classes have to implement the parse() method which will be used in load().
   */

  function DataTextureLoader( manager ) {

  	Loader.call( this, manager );

  }

  DataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  	constructor: DataTextureLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var texture = new DataTexture();

  		var loader = new FileLoader( this.manager );
  		loader.setResponseType( 'arraybuffer' );
  		loader.setPath( this.path );
  		loader.load( url, function ( buffer ) {

  			var texData = scope.parse( buffer );

  			if ( ! texData ) return;

  			if ( texData.image !== undefined ) {

  				texture.image = texData.image;

  			} else if ( texData.data !== undefined ) {

  				texture.image.width = texData.width;
  				texture.image.height = texData.height;
  				texture.image.data = texData.data;

  			}

  			texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
  			texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;

  			texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
  			texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;

  			texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;

  			if ( texData.format !== undefined ) {

  				texture.format = texData.format;

  			}
  			if ( texData.type !== undefined ) {

  				texture.type = texData.type;

  			}

  			if ( texData.mipmaps !== undefined ) {

  				texture.mipmaps = texData.mipmaps;
  				texture.minFilter = LinearMipmapLinearFilter; // presumably...

  			}

  			if ( texData.mipmapCount === 1 ) {

  				texture.minFilter = LinearFilter;

  			}

  			texture.needsUpdate = true;

  			if ( onLoad ) onLoad( texture, texData );

  		}, onProgress, onError );


  		return texture;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function ImageLoader( manager ) {

  	Loader.call( this, manager );

  }

  ImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  	constructor: ImageLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		if ( this.path !== undefined ) url = this.path + url;

  		url = this.manager.resolveURL( url );

  		var scope = this;

  		var cached = Cache.get( url );

  		if ( cached !== undefined ) {

  			scope.manager.itemStart( url );

  			setTimeout( function () {

  				if ( onLoad ) onLoad( cached );

  				scope.manager.itemEnd( url );

  			}, 0 );

  			return cached;

  		}

  		var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );

  		function onImageLoad() {

  			image.removeEventListener( 'load', onImageLoad, false );
  			image.removeEventListener( 'error', onImageError, false );

  			Cache.add( url, this );

  			if ( onLoad ) onLoad( this );

  			scope.manager.itemEnd( url );

  		}

  		function onImageError( event ) {

  			image.removeEventListener( 'load', onImageLoad, false );
  			image.removeEventListener( 'error', onImageError, false );

  			if ( onError ) onError( event );

  			scope.manager.itemError( url );
  			scope.manager.itemEnd( url );

  		}

  		image.addEventListener( 'load', onImageLoad, false );
  		image.addEventListener( 'error', onImageError, false );

  		if ( url.substr( 0, 5 ) !== 'data:' ) {

  			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

  		}

  		scope.manager.itemStart( url );

  		image.src = url;

  		return image;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */


  function CubeTextureLoader( manager ) {

  	Loader.call( this, manager );

  }

  CubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  	constructor: CubeTextureLoader,

  	load: function ( urls, onLoad, onProgress, onError ) {

  		var texture = new CubeTexture();

  		var loader = new ImageLoader( this.manager );
  		loader.setCrossOrigin( this.crossOrigin );
  		loader.setPath( this.path );

  		var loaded = 0;

  		function loadTexture( i ) {

  			loader.load( urls[ i ], function ( image ) {

  				texture.images[ i ] = image;

  				loaded ++;

  				if ( loaded === 6 ) {

  					texture.needsUpdate = true;

  					if ( onLoad ) onLoad( texture );

  				}

  			}, undefined, onError );

  		}

  		for ( var i = 0; i < urls.length; ++ i ) {

  			loadTexture( i );

  		}

  		return texture;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function TextureLoader( manager ) {

  	Loader.call( this, manager );

  }

  TextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  	constructor: TextureLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var texture = new Texture();

  		var loader = new ImageLoader( this.manager );
  		loader.setCrossOrigin( this.crossOrigin );
  		loader.setPath( this.path );

  		loader.load( url, function ( image ) {

  			texture.image = image;

  			// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
  			var isJPEG = url.search( /\.jpe?g($|\?)/i ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

  			texture.format = isJPEG ? RGBFormat : RGBAFormat;
  			texture.needsUpdate = true;

  			if ( onLoad !== undefined ) {

  				onLoad( texture );

  			}

  		}, onProgress, onError );

  		return texture;

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * Extensible curve object
   *
   * Some common of curve methods:
   * .getPoint( t, optionalTarget ), .getTangent( t )
   * .getPointAt( u, optionalTarget ), .getTangentAt( u )
   * .getPoints(), .getSpacedPoints()
   * .getLength()
   * .updateArcLengths()
   *
   * This following curves inherit from THREE.Curve:
   *
   * -- 2D curves --
   * THREE.ArcCurve
   * THREE.CubicBezierCurve
   * THREE.EllipseCurve
   * THREE.LineCurve
   * THREE.QuadraticBezierCurve
   * THREE.SplineCurve
   *
   * -- 3D curves --
   * THREE.CatmullRomCurve3
   * THREE.CubicBezierCurve3
   * THREE.LineCurve3
   * THREE.QuadraticBezierCurve3
   *
   * A series of curves can be represented as a THREE.CurvePath.
   *
   **/

  /**************************************************************
   *	Abstract Curve base class
   **************************************************************/

  function Curve() {

  	this.type = 'Curve';

  	this.arcLengthDivisions = 200;

  }

  Object.assign( Curve.prototype, {

  	// Virtual base class method to overwrite and implement in subclasses
  	//	- t [0 .. 1]

  	getPoint: function ( /* t, optionalTarget */ ) {

  		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
  		return null;

  	},

  	// Get point at relative position in curve according to arc length
  	// - u [0 .. 1]

  	getPointAt: function ( u, optionalTarget ) {

  		var t = this.getUtoTmapping( u );
  		return this.getPoint( t, optionalTarget );

  	},

  	// Get sequence of points using getPoint( t )

  	getPoints: function ( divisions ) {

  		if ( divisions === undefined ) divisions = 5;

  		var points = [];

  		for ( var d = 0; d <= divisions; d ++ ) {

  			points.push( this.getPoint( d / divisions ) );

  		}

  		return points;

  	},

  	// Get sequence of points using getPointAt( u )

  	getSpacedPoints: function ( divisions ) {

  		if ( divisions === undefined ) divisions = 5;

  		var points = [];

  		for ( var d = 0; d <= divisions; d ++ ) {

  			points.push( this.getPointAt( d / divisions ) );

  		}

  		return points;

  	},

  	// Get total curve arc length

  	getLength: function () {

  		var lengths = this.getLengths();
  		return lengths[ lengths.length - 1 ];

  	},

  	// Get list of cumulative segment lengths

  	getLengths: function ( divisions ) {

  		if ( divisions === undefined ) divisions = this.arcLengthDivisions;

  		if ( this.cacheArcLengths &&
  			( this.cacheArcLengths.length === divisions + 1 ) &&
  			! this.needsUpdate ) {

  			return this.cacheArcLengths;

  		}

  		this.needsUpdate = false;

  		var cache = [];
  		var current, last = this.getPoint( 0 );
  		var p, sum = 0;

  		cache.push( 0 );

  		for ( p = 1; p <= divisions; p ++ ) {

  			current = this.getPoint( p / divisions );
  			sum += current.distanceTo( last );
  			cache.push( sum );
  			last = current;

  		}

  		this.cacheArcLengths = cache;

  		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

  	},

  	updateArcLengths: function () {

  		this.needsUpdate = true;
  		this.getLengths();

  	},

  	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

  	getUtoTmapping: function ( u, distance ) {

  		var arcLengths = this.getLengths();

  		var i = 0, il = arcLengths.length;

  		var targetArcLength; // The targeted u distance value to get

  		if ( distance ) {

  			targetArcLength = distance;

  		} else {

  			targetArcLength = u * arcLengths[ il - 1 ];

  		}

  		// binary search for the index with largest value smaller than target u distance

  		var low = 0, high = il - 1, comparison;

  		while ( low <= high ) {

  			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

  			comparison = arcLengths[ i ] - targetArcLength;

  			if ( comparison < 0 ) {

  				low = i + 1;

  			} else if ( comparison > 0 ) {

  				high = i - 1;

  			} else {

  				high = i;
  				break;

  				// DONE

  			}

  		}

  		i = high;

  		if ( arcLengths[ i ] === targetArcLength ) {

  			return i / ( il - 1 );

  		}

  		// we could get finer grain at lengths, or use simple interpolation between two points

  		var lengthBefore = arcLengths[ i ];
  		var lengthAfter = arcLengths[ i + 1 ];

  		var segmentLength = lengthAfter - lengthBefore;

  		// determine where we are between the 'before' and 'after' points

  		var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

  		// add that fractional amount to t

  		var t = ( i + segmentFraction ) / ( il - 1 );

  		return t;

  	},

  	// Returns a unit vector tangent at t
  	// In case any sub curve does not implement its tangent derivation,
  	// 2 points a small delta apart will be used to find its gradient
  	// which seems to give a reasonable approximation

  	getTangent: function ( t ) {

  		var delta = 0.0001;
  		var t1 = t - delta;
  		var t2 = t + delta;

  		// Capping in case of danger

  		if ( t1 < 0 ) t1 = 0;
  		if ( t2 > 1 ) t2 = 1;

  		var pt1 = this.getPoint( t1 );
  		var pt2 = this.getPoint( t2 );

  		var vec = pt2.clone().sub( pt1 );
  		return vec.normalize();

  	},

  	getTangentAt: function ( u ) {

  		var t = this.getUtoTmapping( u );
  		return this.getTangent( t );

  	},

  	computeFrenetFrames: function ( segments, closed ) {

  		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

  		var normal = new Vector3();

  		var tangents = [];
  		var normals = [];
  		var binormals = [];

  		var vec = new Vector3();
  		var mat = new Matrix4();

  		var i, u, theta;

  		// compute the tangent vectors for each segment on the curve

  		for ( i = 0; i <= segments; i ++ ) {

  			u = i / segments;

  			tangents[ i ] = this.getTangentAt( u );
  			tangents[ i ].normalize();

  		}

  		// select an initial normal vector perpendicular to the first tangent vector,
  		// and in the direction of the minimum tangent xyz component

  		normals[ 0 ] = new Vector3();
  		binormals[ 0 ] = new Vector3();
  		var min = Number.MAX_VALUE;
  		var tx = Math.abs( tangents[ 0 ].x );
  		var ty = Math.abs( tangents[ 0 ].y );
  		var tz = Math.abs( tangents[ 0 ].z );

  		if ( tx <= min ) {

  			min = tx;
  			normal.set( 1, 0, 0 );

  		}

  		if ( ty <= min ) {

  			min = ty;
  			normal.set( 0, 1, 0 );

  		}

  		if ( tz <= min ) {

  			normal.set( 0, 0, 1 );

  		}

  		vec.crossVectors( tangents[ 0 ], normal ).normalize();

  		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
  		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


  		// compute the slowly-varying normal and binormal vectors for each segment on the curve

  		for ( i = 1; i <= segments; i ++ ) {

  			normals[ i ] = normals[ i - 1 ].clone();

  			binormals[ i ] = binormals[ i - 1 ].clone();

  			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

  			if ( vec.length() > Number.EPSILON ) {

  				vec.normalize();

  				theta = Math.acos( MathUtils.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

  				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

  			}

  			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

  		}

  		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

  		if ( closed === true ) {

  			theta = Math.acos( MathUtils.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
  			theta /= segments;

  			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

  				theta = - theta;

  			}

  			for ( i = 1; i <= segments; i ++ ) {

  				// twist a little...
  				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
  				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

  			}

  		}

  		return {
  			tangents: tangents,
  			normals: normals,
  			binormals: binormals
  		};

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( source ) {

  		this.arcLengthDivisions = source.arcLengthDivisions;

  		return this;

  	},

  	toJSON: function () {

  		var data = {
  			metadata: {
  				version: 4.5,
  				type: 'Curve',
  				generator: 'Curve.toJSON'
  			}
  		};

  		data.arcLengthDivisions = this.arcLengthDivisions;
  		data.type = this.type;

  		return data;

  	},

  	fromJSON: function ( json ) {

  		this.arcLengthDivisions = json.arcLengthDivisions;

  		return this;

  	}

  } );

  function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

  	Curve.call( this );

  	this.type = 'EllipseCurve';

  	this.aX = aX || 0;
  	this.aY = aY || 0;

  	this.xRadius = xRadius || 1;
  	this.yRadius = yRadius || 1;

  	this.aStartAngle = aStartAngle || 0;
  	this.aEndAngle = aEndAngle || 2 * Math.PI;

  	this.aClockwise = aClockwise || false;

  	this.aRotation = aRotation || 0;

  }

  EllipseCurve.prototype = Object.create( Curve.prototype );
  EllipseCurve.prototype.constructor = EllipseCurve;

  EllipseCurve.prototype.isEllipseCurve = true;

  EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	var twoPi = Math.PI * 2;
  	var deltaAngle = this.aEndAngle - this.aStartAngle;
  	var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

  	// ensures that deltaAngle is 0 .. 2 PI
  	while ( deltaAngle < 0 ) deltaAngle += twoPi;
  	while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

  	if ( deltaAngle < Number.EPSILON ) {

  		if ( samePoints ) {

  			deltaAngle = 0;

  		} else {

  			deltaAngle = twoPi;

  		}

  	}

  	if ( this.aClockwise === true && ! samePoints ) {

  		if ( deltaAngle === twoPi ) {

  			deltaAngle = - twoPi;

  		} else {

  			deltaAngle = deltaAngle - twoPi;

  		}

  	}

  	var angle = this.aStartAngle + t * deltaAngle;
  	var x = this.aX + this.xRadius * Math.cos( angle );
  	var y = this.aY + this.yRadius * Math.sin( angle );

  	if ( this.aRotation !== 0 ) {

  		var cos = Math.cos( this.aRotation );
  		var sin = Math.sin( this.aRotation );

  		var tx = x - this.aX;
  		var ty = y - this.aY;

  		// Rotate the point about the center of the ellipse.
  		x = tx * cos - ty * sin + this.aX;
  		y = tx * sin + ty * cos + this.aY;

  	}

  	return point.set( x, y );

  };

  EllipseCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.aX = source.aX;
  	this.aY = source.aY;

  	this.xRadius = source.xRadius;
  	this.yRadius = source.yRadius;

  	this.aStartAngle = source.aStartAngle;
  	this.aEndAngle = source.aEndAngle;

  	this.aClockwise = source.aClockwise;

  	this.aRotation = source.aRotation;

  	return this;

  };


  EllipseCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.aX = this.aX;
  	data.aY = this.aY;

  	data.xRadius = this.xRadius;
  	data.yRadius = this.yRadius;

  	data.aStartAngle = this.aStartAngle;
  	data.aEndAngle = this.aEndAngle;

  	data.aClockwise = this.aClockwise;

  	data.aRotation = this.aRotation;

  	return data;

  };

  EllipseCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.aX = json.aX;
  	this.aY = json.aY;

  	this.xRadius = json.xRadius;
  	this.yRadius = json.yRadius;

  	this.aStartAngle = json.aStartAngle;
  	this.aEndAngle = json.aEndAngle;

  	this.aClockwise = json.aClockwise;

  	this.aRotation = json.aRotation;

  	return this;

  };

  function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

  	EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

  	this.type = 'ArcCurve';

  }

  ArcCurve.prototype = Object.create( EllipseCurve.prototype );
  ArcCurve.prototype.constructor = ArcCurve;

  ArcCurve.prototype.isArcCurve = true;

  /**
   * @author zz85 https://github.com/zz85
   *
   * Centripetal CatmullRom Curve - which is useful for avoiding
   * cusps and self-intersections in non-uniform catmull rom curves.
   * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
   *
   * curve.type accepts centripetal(default), chordal and catmullrom
   * curve.tension is used for catmullrom which defaults to 0.5
   */


  /*
  Based on an optimized c++ solution in
   - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
   - http://ideone.com/NoEbVM

  This CubicPoly class could be used for reusing some variables and calculations,
  but for three.js curve use, it could be possible inlined and flatten into a single function call
  which can be placed in CurveUtils.
  */

  function CubicPoly() {

  	var c0 = 0, c1 = 0, c2 = 0, c3 = 0;

  	/*
  	 * Compute coefficients for a cubic polynomial
  	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
  	 * such that
  	 *   p(0) = x0, p(1) = x1
  	 *  and
  	 *   p'(0) = t0, p'(1) = t1.
  	 */
  	function init( x0, x1, t0, t1 ) {

  		c0 = x0;
  		c1 = t0;
  		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
  		c3 = 2 * x0 - 2 * x1 + t0 + t1;

  	}

  	return {

  		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

  			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

  		},

  		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

  			// compute tangents when parameterized in [t1,t2]
  			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
  			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

  			// rescale tangents for parametrization in [0,1]
  			t1 *= dt1;
  			t2 *= dt1;

  			init( x1, x2, t1, t2 );

  		},

  		calc: function ( t ) {

  			var t2 = t * t;
  			var t3 = t2 * t;
  			return c0 + c1 * t + c2 * t2 + c3 * t3;

  		}

  	};

  }

  //

  var tmp = new Vector3();
  var px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();

  function CatmullRomCurve3( points, closed, curveType, tension ) {

  	Curve.call( this );

  	this.type = 'CatmullRomCurve3';

  	this.points = points || [];
  	this.closed = closed || false;
  	this.curveType = curveType || 'centripetal';
  	this.tension = tension || 0.5;

  }

  CatmullRomCurve3.prototype = Object.create( Curve.prototype );
  CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

  CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

  CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector3();

  	var points = this.points;
  	var l = points.length;

  	var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
  	var intPoint = Math.floor( p );
  	var weight = p - intPoint;

  	if ( this.closed ) {

  		intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;

  	} else if ( weight === 0 && intPoint === l - 1 ) {

  		intPoint = l - 2;
  		weight = 1;

  	}

  	var p0, p1, p2, p3; // 4 points

  	if ( this.closed || intPoint > 0 ) {

  		p0 = points[ ( intPoint - 1 ) % l ];

  	} else {

  		// extrapolate first point
  		tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
  		p0 = tmp;

  	}

  	p1 = points[ intPoint % l ];
  	p2 = points[ ( intPoint + 1 ) % l ];

  	if ( this.closed || intPoint + 2 < l ) {

  		p3 = points[ ( intPoint + 2 ) % l ];

  	} else {

  		// extrapolate last point
  		tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
  		p3 = tmp;

  	}

  	if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

  		// init Centripetal / Chordal Catmull-Rom
  		var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
  		var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
  		var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
  		var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

  		// safety check for repeated points
  		if ( dt1 < 1e-4 ) dt1 = 1.0;
  		if ( dt0 < 1e-4 ) dt0 = dt1;
  		if ( dt2 < 1e-4 ) dt2 = dt1;

  		px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
  		py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
  		pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

  	} else if ( this.curveType === 'catmullrom' ) {

  		px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
  		py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
  		pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

  	}

  	point.set(
  		px.calc( weight ),
  		py.calc( weight ),
  		pz.calc( weight )
  	);

  	return point;

  };

  CatmullRomCurve3.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.points = [];

  	for ( var i = 0, l = source.points.length; i < l; i ++ ) {

  		var point = source.points[ i ];

  		this.points.push( point.clone() );

  	}

  	this.closed = source.closed;
  	this.curveType = source.curveType;
  	this.tension = source.tension;

  	return this;

  };

  CatmullRomCurve3.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.points = [];

  	for ( var i = 0, l = this.points.length; i < l; i ++ ) {

  		var point = this.points[ i ];
  		data.points.push( point.toArray() );

  	}

  	data.closed = this.closed;
  	data.curveType = this.curveType;
  	data.tension = this.tension;

  	return data;

  };

  CatmullRomCurve3.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.points = [];

  	for ( var i = 0, l = json.points.length; i < l; i ++ ) {

  		var point = json.points[ i ];
  		this.points.push( new Vector3().fromArray( point ) );

  	}

  	this.closed = json.closed;
  	this.curveType = json.curveType;
  	this.tension = json.tension;

  	return this;

  };

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   *
   * Bezier Curves formulas obtained from
   * http://en.wikipedia.org/wiki/BÃ©zier_curve
   */

  function CatmullRom( t, p0, p1, p2, p3 ) {

  	var v0 = ( p2 - p0 ) * 0.5;
  	var v1 = ( p3 - p1 ) * 0.5;
  	var t2 = t * t;
  	var t3 = t * t2;
  	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

  }

  //

  function QuadraticBezierP0( t, p ) {

  	var k = 1 - t;
  	return k * k * p;

  }

  function QuadraticBezierP1( t, p ) {

  	return 2 * ( 1 - t ) * t * p;

  }

  function QuadraticBezierP2( t, p ) {

  	return t * t * p;

  }

  function QuadraticBezier( t, p0, p1, p2 ) {

  	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
  		QuadraticBezierP2( t, p2 );

  }

  //

  function CubicBezierP0( t, p ) {

  	var k = 1 - t;
  	return k * k * k * p;

  }

  function CubicBezierP1( t, p ) {

  	var k = 1 - t;
  	return 3 * k * k * t * p;

  }

  function CubicBezierP2( t, p ) {

  	return 3 * ( 1 - t ) * t * t * p;

  }

  function CubicBezierP3( t, p ) {

  	return t * t * t * p;

  }

  function CubicBezier( t, p0, p1, p2, p3 ) {

  	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
  		CubicBezierP3( t, p3 );

  }

  function CubicBezierCurve( v0, v1, v2, v3 ) {

  	Curve.call( this );

  	this.type = 'CubicBezierCurve';

  	this.v0 = v0 || new Vector2();
  	this.v1 = v1 || new Vector2();
  	this.v2 = v2 || new Vector2();
  	this.v3 = v3 || new Vector2();

  }

  CubicBezierCurve.prototype = Object.create( Curve.prototype );
  CubicBezierCurve.prototype.constructor = CubicBezierCurve;

  CubicBezierCurve.prototype.isCubicBezierCurve = true;

  CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

  	point.set(
  		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
  		CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
  	);

  	return point;

  };

  CubicBezierCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v0.copy( source.v0 );
  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );
  	this.v3.copy( source.v3 );

  	return this;

  };

  CubicBezierCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v0 = this.v0.toArray();
  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();
  	data.v3 = this.v3.toArray();

  	return data;

  };

  CubicBezierCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v0.fromArray( json.v0 );
  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );
  	this.v3.fromArray( json.v3 );

  	return this;

  };

  function CubicBezierCurve3( v0, v1, v2, v3 ) {

  	Curve.call( this );

  	this.type = 'CubicBezierCurve3';

  	this.v0 = v0 || new Vector3();
  	this.v1 = v1 || new Vector3();
  	this.v2 = v2 || new Vector3();
  	this.v3 = v3 || new Vector3();

  }

  CubicBezierCurve3.prototype = Object.create( Curve.prototype );
  CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;

  CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

  CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector3();

  	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

  	point.set(
  		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
  		CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
  		CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
  	);

  	return point;

  };

  CubicBezierCurve3.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v0.copy( source.v0 );
  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );
  	this.v3.copy( source.v3 );

  	return this;

  };

  CubicBezierCurve3.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v0 = this.v0.toArray();
  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();
  	data.v3 = this.v3.toArray();

  	return data;

  };

  CubicBezierCurve3.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v0.fromArray( json.v0 );
  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );
  	this.v3.fromArray( json.v3 );

  	return this;

  };

  function LineCurve( v1, v2 ) {

  	Curve.call( this );

  	this.type = 'LineCurve';

  	this.v1 = v1 || new Vector2();
  	this.v2 = v2 || new Vector2();

  }

  LineCurve.prototype = Object.create( Curve.prototype );
  LineCurve.prototype.constructor = LineCurve;

  LineCurve.prototype.isLineCurve = true;

  LineCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	if ( t === 1 ) {

  		point.copy( this.v2 );

  	} else {

  		point.copy( this.v2 ).sub( this.v1 );
  		point.multiplyScalar( t ).add( this.v1 );

  	}

  	return point;

  };

  // Line curve is linear, so we can overwrite default getPointAt

  LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {

  	return this.getPoint( u, optionalTarget );

  };

  LineCurve.prototype.getTangent = function ( /* t */ ) {

  	var tangent = this.v2.clone().sub( this.v1 );

  	return tangent.normalize();

  };

  LineCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );

  	return this;

  };

  LineCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();

  	return data;

  };

  LineCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );

  	return this;

  };

  function LineCurve3( v1, v2 ) {

  	Curve.call( this );

  	this.type = 'LineCurve3';

  	this.v1 = v1 || new Vector3();
  	this.v2 = v2 || new Vector3();

  }

  LineCurve3.prototype = Object.create( Curve.prototype );
  LineCurve3.prototype.constructor = LineCurve3;

  LineCurve3.prototype.isLineCurve3 = true;

  LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector3();

  	if ( t === 1 ) {

  		point.copy( this.v2 );

  	} else {

  		point.copy( this.v2 ).sub( this.v1 );
  		point.multiplyScalar( t ).add( this.v1 );

  	}

  	return point;

  };

  // Line curve is linear, so we can overwrite default getPointAt

  LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {

  	return this.getPoint( u, optionalTarget );

  };

  LineCurve3.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );

  	return this;

  };

  LineCurve3.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();

  	return data;

  };

  LineCurve3.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );

  	return this;

  };

  function QuadraticBezierCurve( v0, v1, v2 ) {

  	Curve.call( this );

  	this.type = 'QuadraticBezierCurve';

  	this.v0 = v0 || new Vector2();
  	this.v1 = v1 || new Vector2();
  	this.v2 = v2 || new Vector2();

  }

  QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
  QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

  QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

  QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	var v0 = this.v0, v1 = this.v1, v2 = this.v2;

  	point.set(
  		QuadraticBezier( t, v0.x, v1.x, v2.x ),
  		QuadraticBezier( t, v0.y, v1.y, v2.y )
  	);

  	return point;

  };

  QuadraticBezierCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v0.copy( source.v0 );
  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );

  	return this;

  };

  QuadraticBezierCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v0 = this.v0.toArray();
  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();

  	return data;

  };

  QuadraticBezierCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v0.fromArray( json.v0 );
  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );

  	return this;

  };

  function QuadraticBezierCurve3( v0, v1, v2 ) {

  	Curve.call( this );

  	this.type = 'QuadraticBezierCurve3';

  	this.v0 = v0 || new Vector3();
  	this.v1 = v1 || new Vector3();
  	this.v2 = v2 || new Vector3();

  }

  QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
  QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;

  QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

  QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector3();

  	var v0 = this.v0, v1 = this.v1, v2 = this.v2;

  	point.set(
  		QuadraticBezier( t, v0.x, v1.x, v2.x ),
  		QuadraticBezier( t, v0.y, v1.y, v2.y ),
  		QuadraticBezier( t, v0.z, v1.z, v2.z )
  	);

  	return point;

  };

  QuadraticBezierCurve3.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.v0.copy( source.v0 );
  	this.v1.copy( source.v1 );
  	this.v2.copy( source.v2 );

  	return this;

  };

  QuadraticBezierCurve3.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.v0 = this.v0.toArray();
  	data.v1 = this.v1.toArray();
  	data.v2 = this.v2.toArray();

  	return data;

  };

  QuadraticBezierCurve3.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.v0.fromArray( json.v0 );
  	this.v1.fromArray( json.v1 );
  	this.v2.fromArray( json.v2 );

  	return this;

  };

  function SplineCurve( points /* array of Vector2 */ ) {

  	Curve.call( this );

  	this.type = 'SplineCurve';

  	this.points = points || [];

  }

  SplineCurve.prototype = Object.create( Curve.prototype );
  SplineCurve.prototype.constructor = SplineCurve;

  SplineCurve.prototype.isSplineCurve = true;

  SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {

  	var point = optionalTarget || new Vector2();

  	var points = this.points;
  	var p = ( points.length - 1 ) * t;

  	var intPoint = Math.floor( p );
  	var weight = p - intPoint;

  	var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
  	var p1 = points[ intPoint ];
  	var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
  	var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

  	point.set(
  		CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
  		CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
  	);

  	return point;

  };

  SplineCurve.prototype.copy = function ( source ) {

  	Curve.prototype.copy.call( this, source );

  	this.points = [];

  	for ( var i = 0, l = source.points.length; i < l; i ++ ) {

  		var point = source.points[ i ];

  		this.points.push( point.clone() );

  	}

  	return this;

  };

  SplineCurve.prototype.toJSON = function () {

  	var data = Curve.prototype.toJSON.call( this );

  	data.points = [];

  	for ( var i = 0, l = this.points.length; i < l; i ++ ) {

  		var point = this.points[ i ];
  		data.points.push( point.toArray() );

  	}

  	return data;

  };

  SplineCurve.prototype.fromJSON = function ( json ) {

  	Curve.prototype.fromJSON.call( this, json );

  	this.points = [];

  	for ( var i = 0, l = json.points.length; i < l; i ++ ) {

  		var point = json.points[ i ];
  		this.points.push( new Vector2().fromArray( point ) );

  	}

  	return this;

  };



  var Curves = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	ArcCurve: ArcCurve,
  	CatmullRomCurve3: CatmullRomCurve3,
  	CubicBezierCurve: CubicBezierCurve,
  	CubicBezierCurve3: CubicBezierCurve3,
  	EllipseCurve: EllipseCurve,
  	LineCurve: LineCurve,
  	LineCurve3: LineCurve3,
  	QuadraticBezierCurve: QuadraticBezierCurve,
  	QuadraticBezierCurve3: QuadraticBezierCurve3,
  	SplineCurve: SplineCurve
  });

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   *
   **/

  /**************************************************************
   *	Curved Path - a curve path is simply a array of connected
   *  curves, but retains the api of a curve
   **************************************************************/

  function CurvePath() {

  	Curve.call( this );

  	this.type = 'CurvePath';

  	this.curves = [];
  	this.autoClose = false; // Automatically closes the path

  }

  CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

  	constructor: CurvePath,

  	add: function ( curve ) {

  		this.curves.push( curve );

  	},

  	closePath: function () {

  		// Add a line curve if start and end of lines are not connected
  		var startPoint = this.curves[ 0 ].getPoint( 0 );
  		var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

  		if ( ! startPoint.equals( endPoint ) ) {

  			this.curves.push( new LineCurve( endPoint, startPoint ) );

  		}

  	},

  	// To get accurate point with reference to
  	// entire path distance at time t,
  	// following has to be done:

  	// 1. Length of each sub path have to be known
  	// 2. Locate and identify type of curve
  	// 3. Get t for the curve
  	// 4. Return curve.getPointAt(t')

  	getPoint: function ( t ) {

  		var d = t * this.getLength();
  		var curveLengths = this.getCurveLengths();
  		var i = 0;

  		// To think about boundaries points.

  		while ( i < curveLengths.length ) {

  			if ( curveLengths[ i ] >= d ) {

  				var diff = curveLengths[ i ] - d;
  				var curve = this.curves[ i ];

  				var segmentLength = curve.getLength();
  				var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

  				return curve.getPointAt( u );

  			}

  			i ++;

  		}

  		return null;

  		// loop where sum != 0, sum > d , sum+1 <d

  	},

  	// We cannot use the default THREE.Curve getPoint() with getLength() because in
  	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  	// getPoint() depends on getLength

  	getLength: function () {

  		var lens = this.getCurveLengths();
  		return lens[ lens.length - 1 ];

  	},

  	// cacheLengths must be recalculated.
  	updateArcLengths: function () {

  		this.needsUpdate = true;
  		this.cacheLengths = null;
  		this.getCurveLengths();

  	},

  	// Compute lengths and cache them
  	// We cannot overwrite getLengths() because UtoT mapping uses it.

  	getCurveLengths: function () {

  		// We use cache values if curves and cache array are same length

  		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

  			return this.cacheLengths;

  		}

  		// Get length of sub-curve
  		// Push sums into cached array

  		var lengths = [], sums = 0;

  		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

  			sums += this.curves[ i ].getLength();
  			lengths.push( sums );

  		}

  		this.cacheLengths = lengths;

  		return lengths;

  	},

  	getSpacedPoints: function ( divisions ) {

  		if ( divisions === undefined ) divisions = 40;

  		var points = [];

  		for ( var i = 0; i <= divisions; i ++ ) {

  			points.push( this.getPoint( i / divisions ) );

  		}

  		if ( this.autoClose ) {

  			points.push( points[ 0 ] );

  		}

  		return points;

  	},

  	getPoints: function ( divisions ) {

  		divisions = divisions || 12;

  		var points = [], last;

  		for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

  			var curve = curves[ i ];
  			var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
  				: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1
  					: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
  						: divisions;

  			var pts = curve.getPoints( resolution );

  			for ( var j = 0; j < pts.length; j ++ ) {

  				var point = pts[ j ];

  				if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

  				points.push( point );
  				last = point;

  			}

  		}

  		if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {

  			points.push( points[ 0 ] );

  		}

  		return points;

  	},

  	copy: function ( source ) {

  		Curve.prototype.copy.call( this, source );

  		this.curves = [];

  		for ( var i = 0, l = source.curves.length; i < l; i ++ ) {

  			var curve = source.curves[ i ];

  			this.curves.push( curve.clone() );

  		}

  		this.autoClose = source.autoClose;

  		return this;

  	},

  	toJSON: function () {

  		var data = Curve.prototype.toJSON.call( this );

  		data.autoClose = this.autoClose;
  		data.curves = [];

  		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

  			var curve = this.curves[ i ];
  			data.curves.push( curve.toJSON() );

  		}

  		return data;

  	},

  	fromJSON: function ( json ) {

  		Curve.prototype.fromJSON.call( this, json );

  		this.autoClose = json.autoClose;
  		this.curves = [];

  		for ( var i = 0, l = json.curves.length; i < l; i ++ ) {

  			var curve = json.curves[ i ];
  			this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );

  		}

  		return this;

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * Creates free form 2d path using series of points, lines or curves.
   **/

  function Path( points ) {

  	CurvePath.call( this );

  	this.type = 'Path';

  	this.currentPoint = new Vector2();

  	if ( points ) {

  		this.setFromPoints( points );

  	}

  }

  Path.prototype = Object.assign( Object.create( CurvePath.prototype ), {

  	constructor: Path,

  	setFromPoints: function ( points ) {

  		this.moveTo( points[ 0 ].x, points[ 0 ].y );

  		for ( var i = 1, l = points.length; i < l; i ++ ) {

  			this.lineTo( points[ i ].x, points[ i ].y );

  		}

  		return this;

  	},

  	moveTo: function ( x, y ) {

  		this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

  		return this;

  	},

  	lineTo: function ( x, y ) {

  		var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
  		this.curves.push( curve );

  		this.currentPoint.set( x, y );

  		return this;

  	},

  	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

  		var curve = new QuadraticBezierCurve(
  			this.currentPoint.clone(),
  			new Vector2( aCPx, aCPy ),
  			new Vector2( aX, aY )
  		);

  		this.curves.push( curve );

  		this.currentPoint.set( aX, aY );

  		return this;

  	},

  	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

  		var curve = new CubicBezierCurve(
  			this.currentPoint.clone(),
  			new Vector2( aCP1x, aCP1y ),
  			new Vector2( aCP2x, aCP2y ),
  			new Vector2( aX, aY )
  		);

  		this.curves.push( curve );

  		this.currentPoint.set( aX, aY );

  		return this;

  	},

  	splineThru: function ( pts /*Array of Vector*/ ) {

  		var npts = [ this.currentPoint.clone() ].concat( pts );

  		var curve = new SplineCurve( npts );
  		this.curves.push( curve );

  		this.currentPoint.copy( pts[ pts.length - 1 ] );

  		return this;

  	},

  	arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

  		var x0 = this.currentPoint.x;
  		var y0 = this.currentPoint.y;

  		this.absarc( aX + x0, aY + y0, aRadius,
  			aStartAngle, aEndAngle, aClockwise );

  		return this;

  	},

  	absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

  		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

  		return this;

  	},

  	ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

  		var x0 = this.currentPoint.x;
  		var y0 = this.currentPoint.y;

  		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

  		return this;

  	},

  	absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

  		var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

  		if ( this.curves.length > 0 ) {

  			// if a previous curve is present, attempt to join
  			var firstPoint = curve.getPoint( 0 );

  			if ( ! firstPoint.equals( this.currentPoint ) ) {

  				this.lineTo( firstPoint.x, firstPoint.y );

  			}

  		}

  		this.curves.push( curve );

  		var lastPoint = curve.getPoint( 1 );
  		this.currentPoint.copy( lastPoint );

  		return this;

  	},

  	copy: function ( source ) {

  		CurvePath.prototype.copy.call( this, source );

  		this.currentPoint.copy( source.currentPoint );

  		return this;

  	},

  	toJSON: function () {

  		var data = CurvePath.prototype.toJSON.call( this );

  		data.currentPoint = this.currentPoint.toArray();

  		return data;

  	},

  	fromJSON: function ( json ) {

  		CurvePath.prototype.fromJSON.call( this, json );

  		this.currentPoint.fromArray( json.currentPoint );

  		return this;

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * Defines a 2d shape plane using paths.
   **/

  // STEP 1 Create a path.
  // STEP 2 Turn path into shape.
  // STEP 3 ExtrudeGeometry takes in Shape/Shapes
  // STEP 3a - Extract points from each shape, turn to vertices
  // STEP 3b - Triangulate each shape, add faces.

  function Shape( points ) {

  	Path.call( this, points );

  	this.uuid = MathUtils.generateUUID();

  	this.type = 'Shape';

  	this.holes = [];

  }

  Shape.prototype = Object.assign( Object.create( Path.prototype ), {

  	constructor: Shape,

  	getPointsHoles: function ( divisions ) {

  		var holesPts = [];

  		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

  			holesPts[ i ] = this.holes[ i ].getPoints( divisions );

  		}

  		return holesPts;

  	},

  	// get points of shape and holes (keypoints based on segments parameter)

  	extractPoints: function ( divisions ) {

  		return {

  			shape: this.getPoints( divisions ),
  			holes: this.getPointsHoles( divisions )

  		};

  	},

  	copy: function ( source ) {

  		Path.prototype.copy.call( this, source );

  		this.holes = [];

  		for ( var i = 0, l = source.holes.length; i < l; i ++ ) {

  			var hole = source.holes[ i ];

  			this.holes.push( hole.clone() );

  		}

  		return this;

  	},

  	toJSON: function () {

  		var data = Path.prototype.toJSON.call( this );

  		data.uuid = this.uuid;
  		data.holes = [];

  		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

  			var hole = this.holes[ i ];
  			data.holes.push( hole.toJSON() );

  		}

  		return data;

  	},

  	fromJSON: function ( json ) {

  		Path.prototype.fromJSON.call( this, json );

  		this.uuid = json.uuid;
  		this.holes = [];

  		for ( var i = 0, l = json.holes.length; i < l; i ++ ) {

  			var hole = json.holes[ i ];
  			this.holes.push( new Path().fromJSON( hole ) );

  		}

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function Light( color, intensity ) {

  	Object3D.call( this );

  	this.type = 'Light';

  	this.color = new Color( color );
  	this.intensity = intensity !== undefined ? intensity : 1;

  	this.receiveShadow = undefined;

  }

  Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Light,

  	isLight: true,

  	copy: function ( source ) {

  		Object3D.prototype.copy.call( this, source );

  		this.color.copy( source.color );
  		this.intensity = source.intensity;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		data.object.color = this.color.getHex();
  		data.object.intensity = this.intensity;

  		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

  		if ( this.distance !== undefined ) data.object.distance = this.distance;
  		if ( this.angle !== undefined ) data.object.angle = this.angle;
  		if ( this.decay !== undefined ) data.object.decay = this.decay;
  		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

  		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

  		return data;

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function HemisphereLight( skyColor, groundColor, intensity ) {

  	Light.call( this, skyColor, intensity );

  	this.type = 'HemisphereLight';

  	this.castShadow = undefined;

  	this.position.copy( Object3D.DefaultUp );
  	this.updateMatrix();

  	this.groundColor = new Color( groundColor );

  }

  HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: HemisphereLight,

  	isHemisphereLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.groundColor.copy( source.groundColor );

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function LightShadow( camera ) {

  	this.camera = camera;

  	this.bias = 0;
  	this.radius = 1;

  	this.mapSize = new Vector2( 512, 512 );

  	this.map = null;
  	this.mapPass = null;
  	this.matrix = new Matrix4();

  	this._frustum = new Frustum();
  	this._frameExtents = new Vector2( 1, 1 );

  	this._viewportCount = 1;

  	this._viewports = [

  		new Vector4( 0, 0, 1, 1 )

  	];

  }

  Object.assign( LightShadow.prototype, {

  	_projScreenMatrix: new Matrix4(),

  	_lightPositionWorld: new Vector3(),

  	_lookTarget: new Vector3(),

  	getViewportCount: function () {

  		return this._viewportCount;

  	},

  	getFrustum: function () {

  		return this._frustum;

  	},

  	updateMatrices: function ( light ) {

  		var shadowCamera = this.camera,
  			shadowMatrix = this.matrix,
  			projScreenMatrix = this._projScreenMatrix,
  			lookTarget = this._lookTarget,
  			lightPositionWorld = this._lightPositionWorld;

  		lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
  		shadowCamera.position.copy( lightPositionWorld );

  		lookTarget.setFromMatrixPosition( light.target.matrixWorld );
  		shadowCamera.lookAt( lookTarget );
  		shadowCamera.updateMatrixWorld();

  		projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
  		this._frustum.setFromProjectionMatrix( projScreenMatrix );

  		shadowMatrix.set(
  			0.5, 0.0, 0.0, 0.5,
  			0.0, 0.5, 0.0, 0.5,
  			0.0, 0.0, 0.5, 0.5,
  			0.0, 0.0, 0.0, 1.0
  		);

  		shadowMatrix.multiply( shadowCamera.projectionMatrix );
  		shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

  	},

  	getViewport: function ( viewportIndex ) {

  		return this._viewports[ viewportIndex ];

  	},

  	getFrameExtents: function () {

  		return this._frameExtents;

  	},

  	copy: function ( source ) {

  		this.camera = source.camera.clone();

  		this.bias = source.bias;
  		this.radius = source.radius;

  		this.mapSize.copy( source.mapSize );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	toJSON: function () {

  		var object = {};

  		if ( this.bias !== 0 ) object.bias = this.bias;
  		if ( this.radius !== 1 ) object.radius = this.radius;
  		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

  		object.camera = this.camera.toJSON( false ).object;
  		delete object.camera.matrix;

  		return object;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function SpotLightShadow() {

  	LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

  }

  SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

  	constructor: SpotLightShadow,

  	isSpotLightShadow: true,

  	updateMatrices: function ( light ) {

  		var camera = this.camera;

  		var fov = MathUtils.RAD2DEG * 2 * light.angle;
  		var aspect = this.mapSize.width / this.mapSize.height;
  		var far = light.distance || camera.far;

  		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

  			camera.fov = fov;
  			camera.aspect = aspect;
  			camera.far = far;
  			camera.updateProjectionMatrix();

  		}

  		LightShadow.prototype.updateMatrices.call( this, light );

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

  	Light.call( this, color, intensity );

  	this.type = 'SpotLight';

  	this.position.copy( Object3D.DefaultUp );
  	this.updateMatrix();

  	this.target = new Object3D();

  	Object.defineProperty( this, 'power', {
  		get: function () {

  			// intensity = power per solid angle.
  			// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  			return this.intensity * Math.PI;

  		},
  		set: function ( power ) {

  			// intensity = power per solid angle.
  			// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  			this.intensity = power / Math.PI;

  		}
  	} );

  	this.distance = ( distance !== undefined ) ? distance : 0;
  	this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
  	this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
  	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

  	this.shadow = new SpotLightShadow();

  }

  SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: SpotLight,

  	isSpotLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.distance = source.distance;
  		this.angle = source.angle;
  		this.penumbra = source.penumbra;
  		this.decay = source.decay;

  		this.target = source.target.clone();

  		this.shadow = source.shadow.clone();

  		return this;

  	}

  } );

  function PointLightShadow() {

  	LightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );

  	this._frameExtents = new Vector2( 4, 2 );

  	this._viewportCount = 6;

  	this._viewports = [
  		// These viewports map a cube-map onto a 2D texture with the
  		// following orientation:
  		//
  		//  xzXZ
  		//   y Y
  		//
  		// X - Positive x direction
  		// x - Negative x direction
  		// Y - Positive y direction
  		// y - Negative y direction
  		// Z - Positive z direction
  		// z - Negative z direction

  		// positive X
  		new Vector4( 2, 1, 1, 1 ),
  		// negative X
  		new Vector4( 0, 1, 1, 1 ),
  		// positive Z
  		new Vector4( 3, 1, 1, 1 ),
  		// negative Z
  		new Vector4( 1, 1, 1, 1 ),
  		// positive Y
  		new Vector4( 3, 0, 1, 1 ),
  		// negative Y
  		new Vector4( 1, 0, 1, 1 )
  	];

  	this._cubeDirections = [
  		new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
  		new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
  	];

  	this._cubeUps = [
  		new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
  		new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
  	];

  }

  PointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

  	constructor: PointLightShadow,

  	isPointLightShadow: true,

  	updateMatrices: function ( light, viewportIndex ) {

  		if ( viewportIndex === undefined ) viewportIndex = 0;

  		var camera = this.camera,
  			shadowMatrix = this.matrix,
  			lightPositionWorld = this._lightPositionWorld,
  			lookTarget = this._lookTarget,
  			projScreenMatrix = this._projScreenMatrix;

  		lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
  		camera.position.copy( lightPositionWorld );

  		lookTarget.copy( camera.position );
  		lookTarget.add( this._cubeDirections[ viewportIndex ] );
  		camera.up.copy( this._cubeUps[ viewportIndex ] );
  		camera.lookAt( lookTarget );
  		camera.updateMatrixWorld();

  		shadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );

  		projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
  		this._frustum.setFromProjectionMatrix( projScreenMatrix );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */


  function PointLight( color, intensity, distance, decay ) {

  	Light.call( this, color, intensity );

  	this.type = 'PointLight';

  	Object.defineProperty( this, 'power', {
  		get: function () {

  			// intensity = power per solid angle.
  			// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  			return this.intensity * 4 * Math.PI;

  		},
  		set: function ( power ) {

  			// intensity = power per solid angle.
  			// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
  			this.intensity = power / ( 4 * Math.PI );

  		}
  	} );

  	this.distance = ( distance !== undefined ) ? distance : 0;
  	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

  	this.shadow = new PointLightShadow();

  }

  PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: PointLight,

  	isPointLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.distance = source.distance;
  		this.decay = source.decay;

  		this.shadow = source.shadow.clone();

  		return this;

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author arose / http://github.com/arose
   */

  function OrthographicCamera( left, right, top, bottom, near, far ) {

  	Camera.call( this );

  	this.type = 'OrthographicCamera';

  	this.zoom = 1;
  	this.view = null;

  	this.left = ( left !== undefined ) ? left : - 1;
  	this.right = ( right !== undefined ) ? right : 1;
  	this.top = ( top !== undefined ) ? top : 1;
  	this.bottom = ( bottom !== undefined ) ? bottom : - 1;

  	this.near = ( near !== undefined ) ? near : 0.1;
  	this.far = ( far !== undefined ) ? far : 2000;

  	this.updateProjectionMatrix();

  }

  OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

  	constructor: OrthographicCamera,

  	isOrthographicCamera: true,

  	copy: function ( source, recursive ) {

  		Camera.prototype.copy.call( this, source, recursive );

  		this.left = source.left;
  		this.right = source.right;
  		this.top = source.top;
  		this.bottom = source.bottom;
  		this.near = source.near;
  		this.far = source.far;

  		this.zoom = source.zoom;
  		this.view = source.view === null ? null : Object.assign( {}, source.view );

  		return this;

  	},

  	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

  		if ( this.view === null ) {

  			this.view = {
  				enabled: true,
  				fullWidth: 1,
  				fullHeight: 1,
  				offsetX: 0,
  				offsetY: 0,
  				width: 1,
  				height: 1
  			};

  		}

  		this.view.enabled = true;
  		this.view.fullWidth = fullWidth;
  		this.view.fullHeight = fullHeight;
  		this.view.offsetX = x;
  		this.view.offsetY = y;
  		this.view.width = width;
  		this.view.height = height;

  		this.updateProjectionMatrix();

  	},

  	clearViewOffset: function () {

  		if ( this.view !== null ) {

  			this.view.enabled = false;

  		}

  		this.updateProjectionMatrix();

  	},

  	updateProjectionMatrix: function () {

  		var dx = ( this.right - this.left ) / ( 2 * this.zoom );
  		var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
  		var cx = ( this.right + this.left ) / 2;
  		var cy = ( this.top + this.bottom ) / 2;

  		var left = cx - dx;
  		var right = cx + dx;
  		var top = cy + dy;
  		var bottom = cy - dy;

  		if ( this.view !== null && this.view.enabled ) {

  			var scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
  			var scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;

  			left += scaleW * this.view.offsetX;
  			right = left + scaleW * this.view.width;
  			top -= scaleH * this.view.offsetY;
  			bottom = top - scaleH * this.view.height;

  		}

  		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

  		this.projectionMatrixInverse.getInverse( this.projectionMatrix );

  	},

  	toJSON: function ( meta ) {

  		var data = Object3D.prototype.toJSON.call( this, meta );

  		data.object.zoom = this.zoom;
  		data.object.left = this.left;
  		data.object.right = this.right;
  		data.object.top = this.top;
  		data.object.bottom = this.bottom;
  		data.object.near = this.near;
  		data.object.far = this.far;

  		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

  		return data;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function DirectionalLightShadow() {

  	LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

  }

  DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

  	constructor: DirectionalLightShadow,

  	isDirectionalLightShadow: true,

  	updateMatrices: function ( light ) {

  		LightShadow.prototype.updateMatrices.call( this, light );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author alteredq / http://alteredqualia.com/
   */

  function DirectionalLight( color, intensity ) {

  	Light.call( this, color, intensity );

  	this.type = 'DirectionalLight';

  	this.position.copy( Object3D.DefaultUp );
  	this.updateMatrix();

  	this.target = new Object3D();

  	this.shadow = new DirectionalLightShadow();

  }

  DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: DirectionalLight,

  	isDirectionalLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.target = source.target.clone();

  		this.shadow = source.shadow.clone();

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function AmbientLight( color, intensity ) {

  	Light.call( this, color, intensity );

  	this.type = 'AmbientLight';

  	this.castShadow = undefined;

  }

  AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: AmbientLight,

  	isAmbientLight: true

  } );

  /**
   * @author abelnation / http://github.com/abelnation
   */

  function RectAreaLight( color, intensity, width, height ) {

  	Light.call( this, color, intensity );

  	this.type = 'RectAreaLight';

  	this.width = ( width !== undefined ) ? width : 10;
  	this.height = ( height !== undefined ) ? height : 10;

  }

  RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: RectAreaLight,

  	isRectAreaLight: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.width = source.width;
  		this.height = source.height;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = Light.prototype.toJSON.call( this, meta );

  		data.object.width = this.width;
  		data.object.height = this.height;

  		return data;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function MaterialLoader( manager ) {

  	Loader.call( this, manager );

  	this.textures = {};

  }

  MaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  	constructor: MaterialLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var loader = new FileLoader( scope.manager );
  		loader.setPath( scope.path );
  		loader.load( url, function ( text ) {

  			onLoad( scope.parse( JSON.parse( text ) ) );

  		}, onProgress, onError );

  	},

  	parse: function ( json ) {

  		var textures = this.textures;

  		function getTexture( name ) {

  			if ( textures[ name ] === undefined ) {

  				console.warn( 'THREE.MaterialLoader: Undefined texture', name );

  			}

  			return textures[ name ];

  		}

  		var material = new Materials[ json.type ]();

  		if ( json.uuid !== undefined ) material.uuid = json.uuid;
  		if ( json.name !== undefined ) material.name = json.name;
  		if ( json.color !== undefined ) material.color.setHex( json.color );
  		if ( json.roughness !== undefined ) material.roughness = json.roughness;
  		if ( json.metalness !== undefined ) material.metalness = json.metalness;
  		if ( json.sheen !== undefined ) material.sheen = new Color().setHex( json.sheen );
  		if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
  		if ( json.specular !== undefined ) material.specular.setHex( json.specular );
  		if ( json.shininess !== undefined ) material.shininess = json.shininess;
  		if ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;
  		if ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;
  		if ( json.fog !== undefined ) material.fog = json.fog;
  		if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
  		if ( json.blending !== undefined ) material.blending = json.blending;
  		if ( json.combine !== undefined ) material.combine = json.combine;
  		if ( json.side !== undefined ) material.side = json.side;
  		if ( json.opacity !== undefined ) material.opacity = json.opacity;
  		if ( json.transparent !== undefined ) material.transparent = json.transparent;
  		if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
  		if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
  		if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
  		if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;

  		if ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;
  		if ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;
  		if ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;
  		if ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;
  		if ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;
  		if ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;
  		if ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;
  		if ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;

  		if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
  		if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
  		if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
  		if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;

  		if ( json.rotation !== undefined ) material.rotation = json.rotation;

  		if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
  		if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
  		if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
  		if ( json.scale !== undefined ) material.scale = json.scale;

  		if ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;
  		if ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;
  		if ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;

  		if ( json.skinning !== undefined ) material.skinning = json.skinning;
  		if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;
  		if ( json.morphNormals !== undefined ) material.morphNormals = json.morphNormals;
  		if ( json.dithering !== undefined ) material.dithering = json.dithering;

  		if ( json.vertexTangents !== undefined ) material.vertexTangents = json.vertexTangents;

  		if ( json.visible !== undefined ) material.visible = json.visible;

  		if ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;

  		if ( json.userData !== undefined ) material.userData = json.userData;

  		if ( json.vertexColors !== undefined ) {

  			if ( typeof json.vertexColors === 'number' ) {

  				material.vertexColors = ( json.vertexColors > 0 ) ? true : false;

  			} else {

  				material.vertexColors = json.vertexColors;

  			}

  		}

  		// Shader Material

  		if ( json.uniforms !== undefined ) {

  			for ( var name in json.uniforms ) {

  				var uniform = json.uniforms[ name ];

  				material.uniforms[ name ] = {};

  				switch ( uniform.type ) {

  					case 't':
  						material.uniforms[ name ].value = getTexture( uniform.value );
  						break;

  					case 'c':
  						material.uniforms[ name ].value = new Color().setHex( uniform.value );
  						break;

  					case 'v2':
  						material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );
  						break;

  					case 'v3':
  						material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );
  						break;

  					case 'v4':
  						material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );
  						break;

  					case 'm3':
  						material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );

  					case 'm4':
  						material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );
  						break;

  					default:
  						material.uniforms[ name ].value = uniform.value;

  				}

  			}

  		}

  		if ( json.defines !== undefined ) material.defines = json.defines;
  		if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
  		if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;

  		if ( json.extensions !== undefined ) {

  			for ( var key in json.extensions ) {

  				material.extensions[ key ] = json.extensions[ key ];

  			}

  		}

  		// Deprecated

  		if ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading

  		// for PointsMaterial

  		if ( json.size !== undefined ) material.size = json.size;
  		if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

  		// maps

  		if ( json.map !== undefined ) material.map = getTexture( json.map );
  		if ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );

  		if ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );

  		if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
  		if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

  		if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
  		if ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;
  		if ( json.normalScale !== undefined ) {

  			var normalScale = json.normalScale;

  			if ( Array.isArray( normalScale ) === false ) {

  				// Blender exporter used to export a scalar. See #7459

  				normalScale = [ normalScale, normalScale ];

  			}

  			material.normalScale = new Vector2().fromArray( normalScale );

  		}

  		if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
  		if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
  		if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

  		if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
  		if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

  		if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
  		if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

  		if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );

  		if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );
  		if ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;

  		if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;
  		if ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;

  		if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
  		if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

  		if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
  		if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

  		if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );

  		if ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );
  		if ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );
  		if ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );
  		if ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );

  		return material;

  	},

  	setTextures: function ( value ) {

  		this.textures = value;
  		return this;

  	}

  } );

  /**
   * @author Don McCurdy / https://www.donmccurdy.com
   */

  var LoaderUtils = {

  	decodeText: function ( array ) {

  		if ( typeof TextDecoder !== 'undefined' ) {

  			return new TextDecoder().decode( array );

  		}

  		// Avoid the String.fromCharCode.apply(null, array) shortcut, which
  		// throws a "maximum call stack size exceeded" error for large arrays.

  		var s = '';

  		for ( var i = 0, il = array.length; i < il; i ++ ) {

  			// Implicitly assumes little-endian.
  			s += String.fromCharCode( array[ i ] );

  		}

  		try {

  			// merges multi-byte utf-8 characters.

  			return decodeURIComponent( escape( s ) );

  		} catch ( e ) { // see #16358

  			return s;

  		}

  	},

  	extractUrlBase: function ( url ) {

  		var index = url.lastIndexOf( '/' );

  		if ( index === - 1 ) return './';

  		return url.substr( 0, index + 1 );

  	}

  };

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  function InstancedBufferGeometry() {

  	BufferGeometry.call( this );

  	this.type = 'InstancedBufferGeometry';
  	this.maxInstancedCount = undefined;

  }

  InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {

  	constructor: InstancedBufferGeometry,

  	isInstancedBufferGeometry: true,

  	copy: function ( source ) {

  		BufferGeometry.prototype.copy.call( this, source );

  		this.maxInstancedCount = source.maxInstancedCount;

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	toJSON: function () {

  		var data = BufferGeometry.prototype.toJSON.call( this );

  		data.maxInstancedCount = this.maxInstancedCount;

  		data.isInstancedBufferGeometry = true;

  		return data;

  	}

  } );

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  function InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {

  	if ( typeof ( normalized ) === 'number' ) {

  		meshPerAttribute = normalized;

  		normalized = false;

  		console.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );

  	}

  	BufferAttribute.call( this, array, itemSize, normalized );

  	this.meshPerAttribute = meshPerAttribute || 1;

  }

  InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {

  	constructor: InstancedBufferAttribute,

  	isInstancedBufferAttribute: true,

  	copy: function ( source ) {

  		BufferAttribute.prototype.copy.call( this, source );

  		this.meshPerAttribute = source.meshPerAttribute;

  		return this;

  	},

  	toJSON: function ()	{

  		var data = BufferAttribute.prototype.toJSON.call( this );

  		data.meshPerAttribute = this.meshPerAttribute;

  		data.isInstancedBufferAttribute = true;

  		return data;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function BufferGeometryLoader( manager ) {

  	Loader.call( this, manager );

  }

  BufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  	constructor: BufferGeometryLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var loader = new FileLoader( scope.manager );
  		loader.setPath( scope.path );
  		loader.load( url, function ( text ) {

  			onLoad( scope.parse( JSON.parse( text ) ) );

  		}, onProgress, onError );

  	},

  	parse: function ( json ) {

  		var geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();

  		var index = json.data.index;

  		if ( index !== undefined ) {

  			var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
  			geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

  		}

  		var attributes = json.data.attributes;

  		for ( var key in attributes ) {

  			var attribute = attributes[ key ];
  			var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
  			var bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
  			var bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );
  			if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
  			geometry.setAttribute( key, bufferAttribute );

  		}

  		var morphAttributes = json.data.morphAttributes;

  		if ( morphAttributes ) {

  			for ( var key in morphAttributes ) {

  				var attributeArray = morphAttributes[ key ];

  				var array = [];

  				for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {

  					var attribute = attributeArray[ i ];
  					var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

  					var bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );
  					if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
  					array.push( bufferAttribute );

  				}

  				geometry.morphAttributes[ key ] = array;

  			}

  		}

  		var morphTargetsRelative = json.data.morphTargetsRelative;

  		if ( morphTargetsRelative ) {

  			geometry.morphTargetsRelative = true;

  		}

  		var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

  		if ( groups !== undefined ) {

  			for ( var i = 0, n = groups.length; i !== n; ++ i ) {

  				var group = groups[ i ];

  				geometry.addGroup( group.start, group.count, group.materialIndex );

  			}

  		}

  		var boundingSphere = json.data.boundingSphere;

  		if ( boundingSphere !== undefined ) {

  			var center = new Vector3();

  			if ( boundingSphere.center !== undefined ) {

  				center.fromArray( boundingSphere.center );

  			}

  			geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

  		}

  		if ( json.name ) geometry.name = json.name;
  		if ( json.userData ) geometry.userData = json.userData;

  		return geometry;

  	}

  } );

  var TYPED_ARRAYS = {
  	Int8Array: Int8Array,
  	Uint8Array: Uint8Array,
  	// Workaround for IE11 pre KB2929437. See #11440
  	Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
  	Int16Array: Int16Array,
  	Uint16Array: Uint16Array,
  	Int32Array: Int32Array,
  	Uint32Array: Uint32Array,
  	Float32Array: Float32Array,
  	Float64Array: Float64Array
  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function ObjectLoader( manager ) {

  	Loader.call( this, manager );

  }

  ObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  	constructor: ObjectLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;
  		this.resourcePath = this.resourcePath || path;

  		var loader = new FileLoader( scope.manager );
  		loader.setPath( this.path );
  		loader.load( url, function ( text ) {

  			var json = null;

  			try {

  				json = JSON.parse( text );

  			} catch ( error ) {

  				if ( onError !== undefined ) onError( error );

  				console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

  				return;

  			}

  			var metadata = json.metadata;

  			if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

  				console.error( 'THREE.ObjectLoader: Can\'t load ' + url );
  				return;

  			}

  			scope.parse( json, onLoad );

  		}, onProgress, onError );

  	},

  	parse: function ( json, onLoad ) {

  		var shapes = this.parseShape( json.shapes );
  		var geometries = this.parseGeometries( json.geometries, shapes );

  		var images = this.parseImages( json.images, function () {

  			if ( onLoad !== undefined ) onLoad( object );

  		} );

  		var textures = this.parseTextures( json.textures, images );
  		var materials = this.parseMaterials( json.materials, textures );

  		var object = this.parseObject( json.object, geometries, materials );

  		if ( json.animations ) {

  			object.animations = this.parseAnimations( json.animations );

  		}

  		if ( json.images === undefined || json.images.length === 0 ) {

  			if ( onLoad !== undefined ) onLoad( object );

  		}

  		return object;

  	},

  	parseShape: function ( json ) {

  		var shapes = {};

  		if ( json !== undefined ) {

  			for ( var i = 0, l = json.length; i < l; i ++ ) {

  				var shape = new Shape().fromJSON( json[ i ] );

  				shapes[ shape.uuid ] = shape;

  			}

  		}

  		return shapes;

  	},

  	parseGeometries: function ( json, shapes ) {

  		var geometries = {};

  		if ( json !== undefined ) {

  			var bufferGeometryLoader = new BufferGeometryLoader();

  			for ( var i = 0, l = json.length; i < l; i ++ ) {

  				var geometry;
  				var data = json[ i ];

  				switch ( data.type ) {

  					case 'PlaneGeometry':
  					case 'PlaneBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.width,
  							data.height,
  							data.widthSegments,
  							data.heightSegments
  						);

  						break;

  					case 'BoxGeometry':
  					case 'BoxBufferGeometry':
  					case 'CubeGeometry': // backwards compatible

  						geometry = new Geometries[ data.type ](
  							data.width,
  							data.height,
  							data.depth,
  							data.widthSegments,
  							data.heightSegments,
  							data.depthSegments
  						);

  						break;

  					case 'CircleGeometry':
  					case 'CircleBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.segments,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'CylinderGeometry':
  					case 'CylinderBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radiusTop,
  							data.radiusBottom,
  							data.height,
  							data.radialSegments,
  							data.heightSegments,
  							data.openEnded,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'ConeGeometry':
  					case 'ConeBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.height,
  							data.radialSegments,
  							data.heightSegments,
  							data.openEnded,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'SphereGeometry':
  					case 'SphereBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.widthSegments,
  							data.heightSegments,
  							data.phiStart,
  							data.phiLength,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'DodecahedronGeometry':
  					case 'DodecahedronBufferGeometry':
  					case 'IcosahedronGeometry':
  					case 'IcosahedronBufferGeometry':
  					case 'OctahedronGeometry':
  					case 'OctahedronBufferGeometry':
  					case 'TetrahedronGeometry':
  					case 'TetrahedronBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.detail
  						);

  						break;

  					case 'RingGeometry':
  					case 'RingBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.innerRadius,
  							data.outerRadius,
  							data.thetaSegments,
  							data.phiSegments,
  							data.thetaStart,
  							data.thetaLength
  						);

  						break;

  					case 'TorusGeometry':
  					case 'TorusBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.tube,
  							data.radialSegments,
  							data.tubularSegments,
  							data.arc
  						);

  						break;

  					case 'TorusKnotGeometry':
  					case 'TorusKnotBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.radius,
  							data.tube,
  							data.tubularSegments,
  							data.radialSegments,
  							data.p,
  							data.q
  						);

  						break;

  					case 'TubeGeometry':
  					case 'TubeBufferGeometry':

  						// This only works for built-in curves (e.g. CatmullRomCurve3).
  						// User defined curves or instances of CurvePath will not be deserialized.
  						geometry = new Geometries[ data.type ](
  							new Curves[ data.path.type ]().fromJSON( data.path ),
  							data.tubularSegments,
  							data.radius,
  							data.radialSegments,
  							data.closed
  						);

  						break;

  					case 'LatheGeometry':
  					case 'LatheBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.points,
  							data.segments,
  							data.phiStart,
  							data.phiLength
  						);

  						break;

  					case 'PolyhedronGeometry':
  					case 'PolyhedronBufferGeometry':

  						geometry = new Geometries[ data.type ](
  							data.vertices,
  							data.indices,
  							data.radius,
  							data.details
  						);

  						break;

  					case 'ShapeGeometry':
  					case 'ShapeBufferGeometry':

  						var geometryShapes = [];

  						for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {

  							var shape = shapes[ data.shapes[ j ] ];

  							geometryShapes.push( shape );

  						}

  						geometry = new Geometries[ data.type ](
  							geometryShapes,
  							data.curveSegments
  						);

  						break;


  					case 'ExtrudeGeometry':
  					case 'ExtrudeBufferGeometry':

  						var geometryShapes = [];

  						for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {

  							var shape = shapes[ data.shapes[ j ] ];

  							geometryShapes.push( shape );

  						}

  						var extrudePath = data.options.extrudePath;

  						if ( extrudePath !== undefined ) {

  							data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );

  						}

  						geometry = new Geometries[ data.type ](
  							geometryShapes,
  							data.options
  						);

  						break;

  					case 'BufferGeometry':
  					case 'InstancedBufferGeometry':

  						geometry = bufferGeometryLoader.parse( data );

  						break;

  					case 'Geometry':

  						console.error( 'THREE.ObjectLoader: Loading "Geometry" is not supported anymore.' );

  						break;

  					default:

  						console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

  						continue;

  				}

  				geometry.uuid = data.uuid;

  				if ( data.name !== undefined ) geometry.name = data.name;
  				if ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;

  				geometries[ data.uuid ] = geometry;

  			}

  		}

  		return geometries;

  	},

  	parseMaterials: function ( json, textures ) {

  		var cache = {}; // MultiMaterial
  		var materials = {};

  		if ( json !== undefined ) {

  			var loader = new MaterialLoader();
  			loader.setTextures( textures );

  			for ( var i = 0, l = json.length; i < l; i ++ ) {

  				var data = json[ i ];

  				if ( data.type === 'MultiMaterial' ) {

  					// Deprecated

  					var array = [];

  					for ( var j = 0; j < data.materials.length; j ++ ) {

  						var material = data.materials[ j ];

  						if ( cache[ material.uuid ] === undefined ) {

  							cache[ material.uuid ] = loader.parse( material );

  						}

  						array.push( cache[ material.uuid ] );

  					}

  					materials[ data.uuid ] = array;

  				} else {

  					if ( cache[ data.uuid ] === undefined ) {

  						cache[ data.uuid ] = loader.parse( data );

  					}

  					materials[ data.uuid ] = cache[ data.uuid ];

  				}

  			}

  		}

  		return materials;

  	},

  	parseAnimations: function ( json ) {

  		var animations = [];

  		for ( var i = 0; i < json.length; i ++ ) {

  			var data = json[ i ];

  			var clip = AnimationClip.parse( data );

  			if ( data.uuid !== undefined ) clip.uuid = data.uuid;

  			animations.push( clip );

  		}

  		return animations;

  	},

  	parseImages: function ( json, onLoad ) {

  		var scope = this;
  		var images = {};

  		function loadImage( url ) {

  			scope.manager.itemStart( url );

  			return loader.load( url, function () {

  				scope.manager.itemEnd( url );

  			}, undefined, function () {

  				scope.manager.itemError( url );
  				scope.manager.itemEnd( url );

  			} );

  		}

  		if ( json !== undefined && json.length > 0 ) {

  			var manager = new LoadingManager( onLoad );

  			var loader = new ImageLoader( manager );
  			loader.setCrossOrigin( this.crossOrigin );

  			for ( var i = 0, il = json.length; i < il; i ++ ) {

  				var image = json[ i ];
  				var url = image.url;

  				if ( Array.isArray( url ) ) {

  					// load array of images e.g CubeTexture

  					images[ image.uuid ] = [];

  					for ( var j = 0, jl = url.length; j < jl; j ++ ) {

  						var currentUrl = url[ j ];

  						var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;

  						images[ image.uuid ].push( loadImage( path ) );

  					}

  				} else {

  					// load single image

  					var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;

  					images[ image.uuid ] = loadImage( path );

  				}

  			}

  		}

  		return images;

  	},

  	parseTextures: function ( json, images ) {

  		function parseConstant( value, type ) {

  			if ( typeof value === 'number' ) return value;

  			console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

  			return type[ value ];

  		}

  		var textures = {};

  		if ( json !== undefined ) {

  			for ( var i = 0, l = json.length; i < l; i ++ ) {

  				var data = json[ i ];

  				if ( data.image === undefined ) {

  					console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

  				}

  				if ( images[ data.image ] === undefined ) {

  					console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

  				}

  				var texture;

  				if ( Array.isArray( images[ data.image ] ) ) {

  					texture = new CubeTexture( images[ data.image ] );

  				} else {

  					texture = new Texture( images[ data.image ] );

  				}

  				texture.needsUpdate = true;

  				texture.uuid = data.uuid;

  				if ( data.name !== undefined ) texture.name = data.name;

  				if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );

  				if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
  				if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
  				if ( data.center !== undefined ) texture.center.fromArray( data.center );
  				if ( data.rotation !== undefined ) texture.rotation = data.rotation;

  				if ( data.wrap !== undefined ) {

  					texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
  					texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

  				}

  				if ( data.format !== undefined ) texture.format = data.format;
  				if ( data.type !== undefined ) texture.type = data.type;
  				if ( data.encoding !== undefined ) texture.encoding = data.encoding;

  				if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
  				if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
  				if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

  				if ( data.flipY !== undefined ) texture.flipY = data.flipY;

  				if ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;
  				if ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;

  				textures[ data.uuid ] = texture;

  			}

  		}

  		return textures;

  	},

  	parseObject: function ( data, geometries, materials ) {

  		var object;

  		function getGeometry( name ) {

  			if ( geometries[ name ] === undefined ) {

  				console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

  			}

  			return geometries[ name ];

  		}

  		function getMaterial( name ) {

  			if ( name === undefined ) return undefined;

  			if ( Array.isArray( name ) ) {

  				var array = [];

  				for ( var i = 0, l = name.length; i < l; i ++ ) {

  					var uuid = name[ i ];

  					if ( materials[ uuid ] === undefined ) {

  						console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

  					}

  					array.push( materials[ uuid ] );

  				}

  				return array;

  			}

  			if ( materials[ name ] === undefined ) {

  				console.warn( 'THREE.ObjectLoader: Undefined material', name );

  			}

  			return materials[ name ];

  		}

  		switch ( data.type ) {

  			case 'Scene':

  				object = new Scene();

  				if ( data.background !== undefined ) {

  					if ( Number.isInteger( data.background ) ) {

  						object.background = new Color( data.background );

  					}

  				}

  				if ( data.fog !== undefined ) {

  					if ( data.fog.type === 'Fog' ) {

  						object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

  					} else if ( data.fog.type === 'FogExp2' ) {

  						object.fog = new FogExp2( data.fog.color, data.fog.density );

  					}

  				}

  				break;

  			case 'PerspectiveCamera':

  				object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

  				if ( data.focus !== undefined ) object.focus = data.focus;
  				if ( data.zoom !== undefined ) object.zoom = data.zoom;
  				if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
  				if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
  				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

  				break;

  			case 'OrthographicCamera':

  				object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

  				if ( data.zoom !== undefined ) object.zoom = data.zoom;
  				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

  				break;

  			case 'AmbientLight':

  				object = new AmbientLight( data.color, data.intensity );

  				break;

  			case 'DirectionalLight':

  				object = new DirectionalLight( data.color, data.intensity );

  				break;

  			case 'PointLight':

  				object = new PointLight( data.color, data.intensity, data.distance, data.decay );

  				break;

  			case 'RectAreaLight':

  				object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

  				break;

  			case 'SpotLight':

  				object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

  				break;

  			case 'HemisphereLight':

  				object = new HemisphereLight( data.color, data.groundColor, data.intensity );

  				break;

  			case 'SkinnedMesh':

  				console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );

  			case 'Mesh':

  				var geometry = getGeometry( data.geometry );
  				var material = getMaterial( data.material );

  				object = new Mesh( geometry, material );

  				break;

  			case 'InstancedMesh':

  				var geometry = getGeometry( data.geometry );
  				var material = getMaterial( data.material );
  				var count = data.count;
  				var instanceMatrix = data.instanceMatrix;

  				object = new InstancedMesh( geometry, material, count );
  				object.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );

  				break;

  			case 'LOD':

  				object = new LOD();

  				break;

  			case 'Line':

  				object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

  				break;

  			case 'LineLoop':

  				object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

  				break;

  			case 'LineSegments':

  				object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

  				break;

  			case 'PointCloud':
  			case 'Points':

  				object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

  				break;

  			case 'Sprite':

  				object = new Sprite( getMaterial( data.material ) );

  				break;

  			case 'Group':

  				object = new Group();

  				break;

  			default:

  				object = new Object3D();

  		}

  		object.uuid = data.uuid;

  		if ( data.name !== undefined ) object.name = data.name;

  		if ( data.matrix !== undefined ) {

  			object.matrix.fromArray( data.matrix );

  			if ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;
  			if ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );

  		} else {

  			if ( data.position !== undefined ) object.position.fromArray( data.position );
  			if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
  			if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
  			if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

  		}

  		if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
  		if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

  		if ( data.shadow ) {

  			if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
  			if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
  			if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
  			if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

  		}

  		if ( data.visible !== undefined ) object.visible = data.visible;
  		if ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;
  		if ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;
  		if ( data.userData !== undefined ) object.userData = data.userData;
  		if ( data.layers !== undefined ) object.layers.mask = data.layers;

  		if ( data.children !== undefined ) {

  			var children = data.children;

  			for ( var i = 0; i < children.length; i ++ ) {

  				object.add( this.parseObject( children[ i ], geometries, materials ) );

  			}

  		}

  		if ( data.type === 'LOD' ) {

  			if ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;

  			var levels = data.levels;

  			for ( var l = 0; l < levels.length; l ++ ) {

  				var level = levels[ l ];
  				var child = object.getObjectByProperty( 'uuid', level.object );

  				if ( child !== undefined ) {

  					object.addLevel( child, level.distance );

  				}

  			}

  		}

  		return object;

  	}

  } );

  var TEXTURE_MAPPING = {
  	UVMapping: UVMapping,
  	CubeReflectionMapping: CubeReflectionMapping,
  	CubeRefractionMapping: CubeRefractionMapping,
  	EquirectangularReflectionMapping: EquirectangularReflectionMapping,
  	EquirectangularRefractionMapping: EquirectangularRefractionMapping,
  	SphericalReflectionMapping: SphericalReflectionMapping,
  	CubeUVReflectionMapping: CubeUVReflectionMapping,
  	CubeUVRefractionMapping: CubeUVRefractionMapping
  };

  var TEXTURE_WRAPPING = {
  	RepeatWrapping: RepeatWrapping,
  	ClampToEdgeWrapping: ClampToEdgeWrapping,
  	MirroredRepeatWrapping: MirroredRepeatWrapping
  };

  var TEXTURE_FILTER = {
  	NearestFilter: NearestFilter,
  	NearestMipmapNearestFilter: NearestMipmapNearestFilter,
  	NearestMipmapLinearFilter: NearestMipmapLinearFilter,
  	LinearFilter: LinearFilter,
  	LinearMipmapNearestFilter: LinearMipmapNearestFilter,
  	LinearMipmapLinearFilter: LinearMipmapLinearFilter
  };

  /**
   * @author thespite / http://clicktorelease.com/
   */


  function ImageBitmapLoader( manager ) {

  	if ( typeof createImageBitmap === 'undefined' ) {

  		console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );

  	}

  	if ( typeof fetch === 'undefined' ) {

  		console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );

  	}

  	Loader.call( this, manager );

  	this.options = undefined;

  }

  ImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  	constructor: ImageBitmapLoader,

  	setOptions: function setOptions( options ) {

  		this.options = options;

  		return this;

  	},

  	load: function ( url, onLoad, onProgress, onError ) {

  		if ( url === undefined ) url = '';

  		if ( this.path !== undefined ) url = this.path + url;

  		url = this.manager.resolveURL( url );

  		var scope = this;

  		var cached = Cache.get( url );

  		if ( cached !== undefined ) {

  			scope.manager.itemStart( url );

  			setTimeout( function () {

  				if ( onLoad ) onLoad( cached );

  				scope.manager.itemEnd( url );

  			}, 0 );

  			return cached;

  		}

  		fetch( url ).then( function ( res ) {

  			return res.blob();

  		} ).then( function ( blob ) {

  			if ( scope.options === undefined ) {

  				// Workaround for FireFox. It causes an error if you pass options.
  				return createImageBitmap( blob );

  			} else {

  				return createImageBitmap( blob, scope.options );

  			}

  		} ).then( function ( imageBitmap ) {

  			Cache.add( url, imageBitmap );

  			if ( onLoad ) onLoad( imageBitmap );

  			scope.manager.itemEnd( url );

  		} ).catch( function ( e ) {

  			if ( onError ) onError( e );

  			scope.manager.itemError( url );
  			scope.manager.itemEnd( url );

  		} );

  		scope.manager.itemStart( url );

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
   **/

  function ShapePath() {

  	this.type = 'ShapePath';

  	this.color = new Color();

  	this.subPaths = [];
  	this.currentPath = null;

  }

  Object.assign( ShapePath.prototype, {

  	moveTo: function ( x, y ) {

  		this.currentPath = new Path();
  		this.subPaths.push( this.currentPath );
  		this.currentPath.moveTo( x, y );

  		return this;

  	},

  	lineTo: function ( x, y ) {

  		this.currentPath.lineTo( x, y );

  		return this;

  	},

  	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

  		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

  		return this;

  	},

  	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

  		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

  		return this;

  	},

  	splineThru: function ( pts ) {

  		this.currentPath.splineThru( pts );

  		return this;

  	},

  	toShapes: function ( isCCW, noHoles ) {

  		function toShapesNoHoles( inSubpaths ) {

  			var shapes = [];

  			for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

  				var tmpPath = inSubpaths[ i ];

  				var tmpShape = new Shape();
  				tmpShape.curves = tmpPath.curves;

  				shapes.push( tmpShape );

  			}

  			return shapes;

  		}

  		function isPointInsidePolygon( inPt, inPolygon ) {

  			var polyLen = inPolygon.length;

  			// inPt on polygon contour => immediate success    or
  			// toggling of inside/outside at every single! intersection point of an edge
  			//  with the horizontal line through inPt, left of inPt
  			//  not counting lowerY endpoints of edges and whole edges on that line
  			var inside = false;
  			for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

  				var edgeLowPt = inPolygon[ p ];
  				var edgeHighPt = inPolygon[ q ];

  				var edgeDx = edgeHighPt.x - edgeLowPt.x;
  				var edgeDy = edgeHighPt.y - edgeLowPt.y;

  				if ( Math.abs( edgeDy ) > Number.EPSILON ) {

  					// not parallel
  					if ( edgeDy < 0 ) {

  						edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
  						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

  					}
  					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

  					if ( inPt.y === edgeLowPt.y ) {

  						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
  						// continue;				// no intersection or edgeLowPt => doesn't count !!!

  					} else {

  						var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
  						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
  						if ( perpEdge < 0 ) 				continue;
  						inside = ! inside;		// true intersection left of inPt

  					}

  				} else {

  					// parallel or collinear
  					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
  					// edge lies on the same horizontal line as inPt
  					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
  						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
  					// continue;

  				}

  			}

  			return	inside;

  		}

  		var isClockWise = ShapeUtils.isClockWise;

  		var subPaths = this.subPaths;
  		if ( subPaths.length === 0 ) return [];

  		if ( noHoles === true )	return	toShapesNoHoles( subPaths );


  		var solid, tmpPath, tmpShape, shapes = [];

  		if ( subPaths.length === 1 ) {

  			tmpPath = subPaths[ 0 ];
  			tmpShape = new Shape();
  			tmpShape.curves = tmpPath.curves;
  			shapes.push( tmpShape );
  			return shapes;

  		}

  		var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
  		holesFirst = isCCW ? ! holesFirst : holesFirst;

  		// console.log("Holes first", holesFirst);

  		var betterShapeHoles = [];
  		var newShapes = [];
  		var newShapeHoles = [];
  		var mainIdx = 0;
  		var tmpPoints;

  		newShapes[ mainIdx ] = undefined;
  		newShapeHoles[ mainIdx ] = [];

  		for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

  			tmpPath = subPaths[ i ];
  			tmpPoints = tmpPath.getPoints();
  			solid = isClockWise( tmpPoints );
  			solid = isCCW ? ! solid : solid;

  			if ( solid ) {

  				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

  				newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
  				newShapes[ mainIdx ].s.curves = tmpPath.curves;

  				if ( holesFirst )	mainIdx ++;
  				newShapeHoles[ mainIdx ] = [];

  				//console.log('cw', i);

  			} else {

  				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

  				//console.log('ccw', i);

  			}

  		}

  		// only Holes? -> probably all Shapes with wrong orientation
  		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


  		if ( newShapes.length > 1 ) {

  			var ambiguous = false;
  			var toChange = [];

  			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

  				betterShapeHoles[ sIdx ] = [];

  			}

  			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

  				var sho = newShapeHoles[ sIdx ];

  				for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

  					var ho = sho[ hIdx ];
  					var hole_unassigned = true;

  					for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

  						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

  							if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
  							if ( hole_unassigned ) {

  								hole_unassigned = false;
  								betterShapeHoles[ s2Idx ].push( ho );

  							} else {

  								ambiguous = true;

  							}

  						}

  					}
  					if ( hole_unassigned ) {

  						betterShapeHoles[ sIdx ].push( ho );

  					}

  				}

  			}
  			// console.log("ambiguous: ", ambiguous);
  			if ( toChange.length > 0 ) {

  				// console.log("to change: ", toChange);
  				if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

  			}

  		}

  		var tmpHoles;

  		for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

  			tmpShape = newShapes[ i ].s;
  			shapes.push( tmpShape );
  			tmpHoles = newShapeHoles[ i ];

  			for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

  				tmpShape.holes.push( tmpHoles[ j ].h );

  			}

  		}

  		//console.log("shape", shapes);

  		return shapes;

  	}

  } );

  /**
   * @author zz85 / http://www.lab4games.net/zz85/blog
   * @author mrdoob / http://mrdoob.com/
   */


  function Font( data ) {

  	this.type = 'Font';

  	this.data = data;

  }

  Object.assign( Font.prototype, {

  	isFont: true,

  	generateShapes: function ( text, size ) {

  		if ( size === undefined ) size = 100;

  		var shapes = [];
  		var paths = createPaths( text, size, this.data );

  		for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

  			Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

  		}

  		return shapes;

  	}

  } );

  function createPaths( text, size, data ) {

  	var chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // workaround for IE11, see #13988
  	var scale = size / data.resolution;
  	var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

  	var paths = [];

  	var offsetX = 0, offsetY = 0;

  	for ( var i = 0; i < chars.length; i ++ ) {

  		var char = chars[ i ];

  		if ( char === '\n' ) {

  			offsetX = 0;
  			offsetY -= line_height;

  		} else {

  			var ret = createPath( char, scale, offsetX, offsetY, data );
  			offsetX += ret.offsetX;
  			paths.push( ret.path );

  		}

  	}

  	return paths;

  }

  function createPath( char, scale, offsetX, offsetY, data ) {

  	var glyph = data.glyphs[ char ] || data.glyphs[ '?' ];

  	if ( ! glyph ) {

  		console.error( 'THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + '.' );

  		return;

  	}

  	var path = new ShapePath();

  	var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;

  	if ( glyph.o ) {

  		var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

  		for ( var i = 0, l = outline.length; i < l; ) {

  			var action = outline[ i ++ ];

  			switch ( action ) {

  				case 'm': // moveTo

  					x = outline[ i ++ ] * scale + offsetX;
  					y = outline[ i ++ ] * scale + offsetY;

  					path.moveTo( x, y );

  					break;

  				case 'l': // lineTo

  					x = outline[ i ++ ] * scale + offsetX;
  					y = outline[ i ++ ] * scale + offsetY;

  					path.lineTo( x, y );

  					break;

  				case 'q': // quadraticCurveTo

  					cpx = outline[ i ++ ] * scale + offsetX;
  					cpy = outline[ i ++ ] * scale + offsetY;
  					cpx1 = outline[ i ++ ] * scale + offsetX;
  					cpy1 = outline[ i ++ ] * scale + offsetY;

  					path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

  					break;

  				case 'b': // bezierCurveTo

  					cpx = outline[ i ++ ] * scale + offsetX;
  					cpy = outline[ i ++ ] * scale + offsetY;
  					cpx1 = outline[ i ++ ] * scale + offsetX;
  					cpy1 = outline[ i ++ ] * scale + offsetY;
  					cpx2 = outline[ i ++ ] * scale + offsetX;
  					cpy2 = outline[ i ++ ] * scale + offsetY;

  					path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

  					break;

  			}

  		}

  	}

  	return { offsetX: glyph.ha * scale, path: path };

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function FontLoader( manager ) {

  	Loader.call( this, manager );

  }

  FontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  	constructor: FontLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var scope = this;

  		var loader = new FileLoader( this.manager );
  		loader.setPath( this.path );
  		loader.load( url, function ( text ) {

  			var json;

  			try {

  				json = JSON.parse( text );

  			} catch ( e ) {

  				console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
  				json = JSON.parse( text.substring( 65, text.length - 2 ) );

  			}

  			var font = scope.parse( json );

  			if ( onLoad ) onLoad( font );

  		}, onProgress, onError );

  	},

  	parse: function ( json ) {

  		return new Font( json );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _context;

  var AudioContext = {

  	getContext: function () {

  		if ( _context === undefined ) {

  			_context = new ( window.AudioContext || window.webkitAudioContext )();

  		}

  		return _context;

  	},

  	setContext: function ( value ) {

  		_context = value;

  	}

  };

  /**
   * @author Reece Aaron Lecrivain / http://reecenotes.com/
   */

  function AudioLoader( manager ) {

  	Loader.call( this, manager );

  }

  AudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  	constructor: AudioLoader,

  	load: function ( url, onLoad, onProgress, onError ) {

  		var loader = new FileLoader( this.manager );
  		loader.setResponseType( 'arraybuffer' );
  		loader.setPath( this.path );
  		loader.load( url, function ( buffer ) {

  			// Create a copy of the buffer. The `decodeAudioData` method
  			// detaches the buffer when complete, preventing reuse.
  			var bufferCopy = buffer.slice( 0 );

  			var context = AudioContext.getContext();
  			context.decodeAudioData( bufferCopy, function ( audioBuffer ) {

  				onLoad( audioBuffer );

  			} );

  		}, onProgress, onError );

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   * @author WestLangley / http://github.com/WestLangley
   *
   * Primary reference:
   *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
   *
   * Secondary reference:
   *   https://www.ppsloan.org/publications/StupidSH36.pdf
   */

  // 3-band SH defined by 9 coefficients

  function SphericalHarmonics3() {

  	this.coefficients = [];

  	for ( var i = 0; i < 9; i ++ ) {

  		this.coefficients.push( new Vector3() );

  	}

  }

  Object.assign( SphericalHarmonics3.prototype, {

  	isSphericalHarmonics3: true,

  	set: function ( coefficients ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].copy( coefficients[ i ] );

  		}

  		return this;

  	},

  	zero: function () {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].set( 0, 0, 0 );

  		}

  		return this;

  	},

  	// get the radiance in the direction of the normal
  	// target is a Vector3
  	getAt: function ( normal, target ) {

  		// normal is assumed to be unit length

  		var x = normal.x, y = normal.y, z = normal.z;

  		var coeff = this.coefficients;

  		// band 0
  		target.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );

  		// band 1
  		target.addScaledVector( coeff[ 1 ], 0.488603 * y );
  		target.addScaledVector( coeff[ 2 ], 0.488603 * z );
  		target.addScaledVector( coeff[ 3 ], 0.488603 * x );

  		// band 2
  		target.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );
  		target.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );
  		target.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );
  		target.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );
  		target.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );

  		return target;

  	},

  	// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
  	// target is a Vector3
  	// https://graphics.stanford.edu/papers/envmap/envmap.pdf
  	getIrradianceAt: function ( normal, target ) {

  		// normal is assumed to be unit length

  		var x = normal.x, y = normal.y, z = normal.z;

  		var coeff = this.coefficients;

  		// band 0
  		target.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // Ï * 0.282095

  		// band 1
  		target.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * Ï / 3 ) * 0.488603
  		target.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );
  		target.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );

  		// band 2
  		target.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( Ï / 4 ) * 1.092548
  		target.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );
  		target.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( Ï / 4 ) * 0.315392 * 3
  		target.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );
  		target.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( Ï / 4 ) * 0.546274

  		return target;

  	},

  	add: function ( sh ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].add( sh.coefficients[ i ] );

  		}

  		return this;

  	},

  	addScaledSH: function ( sh, s ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );

  		}

  		return this;

  	},

  	scale: function ( s ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].multiplyScalar( s );

  		}

  		return this;

  	},

  	lerp: function ( sh, alpha ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );

  		}

  		return this;

  	},

  	equals: function ( sh ) {

  		for ( var i = 0; i < 9; i ++ ) {

  			if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {

  				return false;

  			}

  		}

  		return true;

  	},

  	copy: function ( sh ) {

  		return this.set( sh.coefficients );

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	fromArray: function ( array, offset ) {

  		if ( offset === undefined ) offset = 0;

  		var coefficients = this.coefficients;

  		for ( var i = 0; i < 9; i ++ ) {

  			coefficients[ i ].fromArray( array, offset + ( i * 3 ) );

  		}

  		return this;

  	},

  	toArray: function ( array, offset ) {

  		if ( array === undefined ) array = [];
  		if ( offset === undefined ) offset = 0;

  		var coefficients = this.coefficients;

  		for ( var i = 0; i < 9; i ++ ) {

  			coefficients[ i ].toArray( array, offset + ( i * 3 ) );

  		}

  		return array;

  	}

  } );

  Object.assign( SphericalHarmonics3, {

  	// evaluate the basis functions
  	// shBasis is an Array[ 9 ]
  	getBasisAt: function ( normal, shBasis ) {

  		// normal is assumed to be unit length

  		var x = normal.x, y = normal.y, z = normal.z;

  		// band 0
  		shBasis[ 0 ] = 0.282095;

  		// band 1
  		shBasis[ 1 ] = 0.488603 * y;
  		shBasis[ 2 ] = 0.488603 * z;
  		shBasis[ 3 ] = 0.488603 * x;

  		// band 2
  		shBasis[ 4 ] = 1.092548 * x * y;
  		shBasis[ 5 ] = 1.092548 * y * z;
  		shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );
  		shBasis[ 7 ] = 1.092548 * x * z;
  		shBasis[ 8 ] = 0.546274 * ( x * x - y * y );

  	}

  } );

  /**
   * @author WestLangley / http://github.com/WestLangley
   *
   * A LightProbe is a source of indirect-diffuse light
   */

  function LightProbe( sh, intensity ) {

  	Light.call( this, undefined, intensity );

  	this.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();

  }

  LightProbe.prototype = Object.assign( Object.create( Light.prototype ), {

  	constructor: LightProbe,

  	isLightProbe: true,

  	copy: function ( source ) {

  		Light.prototype.copy.call( this, source );

  		this.sh.copy( source.sh );
  		this.intensity = source.intensity;

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = Light.prototype.toJSON.call( this, meta );

  		// data.sh = this.sh.toArray(); // todo

  		return data;

  	}

  } );

  /**
   * @author WestLangley / http://github.com/WestLangley
   */

  function HemisphereLightProbe( skyColor, groundColor, intensity ) {

  	LightProbe.call( this, undefined, intensity );

  	var color1 = new Color().set( skyColor );
  	var color2 = new Color().set( groundColor );

  	var sky = new Vector3( color1.r, color1.g, color1.b );
  	var ground = new Vector3( color2.r, color2.g, color2.b );

  	// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
  	var c0 = Math.sqrt( Math.PI );
  	var c1 = c0 * Math.sqrt( 0.75 );

  	this.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );
  	this.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );

  }

  HemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {

  	constructor: HemisphereLightProbe,

  	isHemisphereLightProbe: true,

  	copy: function ( source ) { // modifying colors not currently supported

  		LightProbe.prototype.copy.call( this, source );

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = LightProbe.prototype.toJSON.call( this, meta );

  		// data.sh = this.sh.toArray(); // todo

  		return data;

  	}

  } );

  /**
   * @author WestLangley / http://github.com/WestLangley
   */

  function AmbientLightProbe( color, intensity ) {

  	LightProbe.call( this, undefined, intensity );

  	var color1 = new Color().set( color );

  	// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
  	this.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );

  }

  AmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {

  	constructor: AmbientLightProbe,

  	isAmbientLightProbe: true,

  	copy: function ( source ) { // modifying color not currently supported

  		LightProbe.prototype.copy.call( this, source );

  		return this;

  	},

  	toJSON: function ( meta ) {

  		var data = LightProbe.prototype.toJSON.call( this, meta );

  		// data.sh = this.sh.toArray(); // todo

  		return data;

  	}

  } );

  var _eyeRight = new Matrix4();
  var _eyeLeft = new Matrix4();

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function StereoCamera() {

  	this.type = 'StereoCamera';

  	this.aspect = 1;

  	this.eyeSep = 0.064;

  	this.cameraL = new PerspectiveCamera();
  	this.cameraL.layers.enable( 1 );
  	this.cameraL.matrixAutoUpdate = false;

  	this.cameraR = new PerspectiveCamera();
  	this.cameraR.layers.enable( 2 );
  	this.cameraR.matrixAutoUpdate = false;

  	this._cache = {
  		focus: null,
  		fov: null,
  		aspect: null,
  		near: null,
  		far: null,
  		zoom: null,
  		eyeSep: null
  	};

  }

  Object.assign( StereoCamera.prototype, {

  	update: function ( camera ) {

  		var cache = this._cache;

  		var needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||
  			cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||
  			cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;

  		if ( needsUpdate ) {

  			cache.focus = camera.focus;
  			cache.fov = camera.fov;
  			cache.aspect = camera.aspect * this.aspect;
  			cache.near = camera.near;
  			cache.far = camera.far;
  			cache.zoom = camera.zoom;
  			cache.eyeSep = this.eyeSep;

  			// Off-axis stereoscopic effect based on
  			// http://paulbourke.net/stereographics/stereorender/

  			var projectionMatrix = camera.projectionMatrix.clone();
  			var eyeSepHalf = cache.eyeSep / 2;
  			var eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
  			var ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;
  			var xmin, xmax;

  			// translate xOffset

  			_eyeLeft.elements[ 12 ] = - eyeSepHalf;
  			_eyeRight.elements[ 12 ] = eyeSepHalf;

  			// for left eye

  			xmin = - ymax * cache.aspect + eyeSepOnProjection;
  			xmax = ymax * cache.aspect + eyeSepOnProjection;

  			projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
  			projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

  			this.cameraL.projectionMatrix.copy( projectionMatrix );

  			// for right eye

  			xmin = - ymax * cache.aspect - eyeSepOnProjection;
  			xmax = ymax * cache.aspect - eyeSepOnProjection;

  			projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
  			projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

  			this.cameraR.projectionMatrix.copy( projectionMatrix );

  		}

  		this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );
  		this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function Clock( autoStart ) {

  	this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

  	this.startTime = 0;
  	this.oldTime = 0;
  	this.elapsedTime = 0;

  	this.running = false;

  }

  Object.assign( Clock.prototype, {

  	start: function () {

  		this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

  		this.oldTime = this.startTime;
  		this.elapsedTime = 0;
  		this.running = true;

  	},

  	stop: function () {

  		this.getElapsedTime();
  		this.running = false;
  		this.autoStart = false;

  	},

  	getElapsedTime: function () {

  		this.getDelta();
  		return this.elapsedTime;

  	},

  	getDelta: function () {

  		var diff = 0;

  		if ( this.autoStart && ! this.running ) {

  			this.start();
  			return 0;

  		}

  		if ( this.running ) {

  			var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();

  			diff = ( newTime - this.oldTime ) / 1000;
  			this.oldTime = newTime;

  			this.elapsedTime += diff;

  		}

  		return diff;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _position$2 = new Vector3();
  var _quaternion$3 = new Quaternion();
  var _scale$1 = new Vector3();
  var _orientation = new Vector3();

  function AudioListener() {

  	Object3D.call( this );

  	this.type = 'AudioListener';

  	this.context = AudioContext.getContext();

  	this.gain = this.context.createGain();
  	this.gain.connect( this.context.destination );

  	this.filter = null;

  	this.timeDelta = 0;

  	// private

  	this._clock = new Clock();

  }

  AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: AudioListener,

  	getInput: function () {

  		return this.gain;

  	},

  	removeFilter: function ( ) {

  		if ( this.filter !== null ) {

  			this.gain.disconnect( this.filter );
  			this.filter.disconnect( this.context.destination );
  			this.gain.connect( this.context.destination );
  			this.filter = null;

  		}

  		return this;

  	},

  	getFilter: function () {

  		return this.filter;

  	},

  	setFilter: function ( value ) {

  		if ( this.filter !== null ) {

  			this.gain.disconnect( this.filter );
  			this.filter.disconnect( this.context.destination );

  		} else {

  			this.gain.disconnect( this.context.destination );

  		}

  		this.filter = value;
  		this.gain.connect( this.filter );
  		this.filter.connect( this.context.destination );

  		return this;

  	},

  	getMasterVolume: function () {

  		return this.gain.gain.value;

  	},

  	setMasterVolume: function ( value ) {

  		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

  		return this;

  	},

  	updateMatrixWorld: function ( force ) {

  		Object3D.prototype.updateMatrixWorld.call( this, force );

  		var listener = this.context.listener;
  		var up = this.up;

  		this.timeDelta = this._clock.getDelta();

  		this.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );

  		_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );

  		if ( listener.positionX ) {

  			// code path for Chrome (see #14393)

  			var endTime = this.context.currentTime + this.timeDelta;

  			listener.positionX.linearRampToValueAtTime( _position$2.x, endTime );
  			listener.positionY.linearRampToValueAtTime( _position$2.y, endTime );
  			listener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );
  			listener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );
  			listener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );
  			listener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );
  			listener.upX.linearRampToValueAtTime( up.x, endTime );
  			listener.upY.linearRampToValueAtTime( up.y, endTime );
  			listener.upZ.linearRampToValueAtTime( up.z, endTime );

  		} else {

  			listener.setPosition( _position$2.x, _position$2.y, _position$2.z );
  			listener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );

  		}

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Reece Aaron Lecrivain / http://reecenotes.com/
   */

  function Audio( listener ) {

  	Object3D.call( this );

  	this.type = 'Audio';

  	this.listener = listener;
  	this.context = listener.context;

  	this.gain = this.context.createGain();
  	this.gain.connect( listener.getInput() );

  	this.autoplay = false;

  	this.buffer = null;
  	this.detune = 0;
  	this.loop = false;
  	this.loopStart = 0;
  	this.loopEnd = 0;
  	this.offset = 0;
  	this.duration = undefined;
  	this.playbackRate = 1;
  	this.isPlaying = false;
  	this.hasPlaybackControl = true;
  	this.sourceType = 'empty';

  	this._startedAt = 0;
  	this._pausedAt = 0;

  	this.filters = [];

  }

  Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

  	constructor: Audio,

  	getOutput: function () {

  		return this.gain;

  	},

  	setNodeSource: function ( audioNode ) {

  		this.hasPlaybackControl = false;
  		this.sourceType = 'audioNode';
  		this.source = audioNode;
  		this.connect();

  		return this;

  	},

  	setMediaElementSource: function ( mediaElement ) {

  		this.hasPlaybackControl = false;
  		this.sourceType = 'mediaNode';
  		this.source = this.context.createMediaElementSource( mediaElement );
  		this.connect();

  		return this;

  	},

  	setMediaStreamSource: function ( mediaStream ) {

  		this.hasPlaybackControl = false;
  		this.sourceType = 'mediaStreamNode';
  		this.source = this.context.createMediaStreamSource( mediaStream );
  		this.connect();

  		return this;

  	},

  	setBuffer: function ( audioBuffer ) {

  		this.buffer = audioBuffer;
  		this.sourceType = 'buffer';

  		if ( this.autoplay ) this.play();

  		return this;

  	},

  	play: function ( delay ) {

  		if ( delay === undefined ) delay = 0;

  		if ( this.isPlaying === true ) {

  			console.warn( 'THREE.Audio: Audio is already playing.' );
  			return;

  		}

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		this._startedAt = this.context.currentTime + delay;

  		var source = this.context.createBufferSource();
  		source.buffer = this.buffer;
  		source.loop = this.loop;
  		source.loopStart = this.loopStart;
  		source.loopEnd = this.loopEnd;
  		source.onended = this.onEnded.bind( this );
  		source.start( this._startedAt, this._pausedAt + this.offset, this.duration );

  		this.isPlaying = true;

  		this.source = source;

  		this.setDetune( this.detune );
  		this.setPlaybackRate( this.playbackRate );

  		return this.connect();

  	},

  	pause: function () {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		if ( this.isPlaying === true ) {

  			this._pausedAt += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;

  			this.source.stop();
  			this.source.onended = null;

  			this.isPlaying = false;

  		}

  		return this;

  	},

  	stop: function () {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		this._pausedAt = 0;

  		this.source.stop();
  		this.source.onended = null;
  		this.isPlaying = false;

  		return this;

  	},

  	connect: function () {

  		if ( this.filters.length > 0 ) {

  			this.source.connect( this.filters[ 0 ] );

  			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

  				this.filters[ i - 1 ].connect( this.filters[ i ] );

  			}

  			this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

  		} else {

  			this.source.connect( this.getOutput() );

  		}

  		return this;

  	},

  	disconnect: function () {

  		if ( this.filters.length > 0 ) {

  			this.source.disconnect( this.filters[ 0 ] );

  			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

  				this.filters[ i - 1 ].disconnect( this.filters[ i ] );

  			}

  			this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

  		} else {

  			this.source.disconnect( this.getOutput() );

  		}

  		return this;

  	},

  	getFilters: function () {

  		return this.filters;

  	},

  	setFilters: function ( value ) {

  		if ( ! value ) value = [];

  		if ( this.isPlaying === true ) {

  			this.disconnect();
  			this.filters = value;
  			this.connect();

  		} else {

  			this.filters = value;

  		}

  		return this;

  	},

  	setDetune: function ( value ) {

  		this.detune = value;

  		if ( this.source.detune === undefined ) return; // only set detune when available

  		if ( this.isPlaying === true ) {

  			this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );

  		}

  		return this;

  	},

  	getDetune: function () {

  		return this.detune;

  	},

  	getFilter: function () {

  		return this.getFilters()[ 0 ];

  	},

  	setFilter: function ( filter ) {

  		return this.setFilters( filter ? [ filter ] : [] );

  	},

  	setPlaybackRate: function ( value ) {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		this.playbackRate = value;

  		if ( this.isPlaying === true ) {

  			this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );

  		}

  		return this;

  	},

  	getPlaybackRate: function () {

  		return this.playbackRate;

  	},

  	onEnded: function () {

  		this.isPlaying = false;

  	},

  	getLoop: function () {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return false;

  		}

  		return this.loop;

  	},

  	setLoop: function ( value ) {

  		if ( this.hasPlaybackControl === false ) {

  			console.warn( 'THREE.Audio: this Audio has no playback control.' );
  			return;

  		}

  		this.loop = value;

  		if ( this.isPlaying === true ) {

  			this.source.loop = this.loop;

  		}

  		return this;

  	},

  	setLoopStart: function ( value ) {

  		this.loopStart = value;

  		return this;

  	},

  	setLoopEnd: function ( value ) {

  		this.loopEnd = value;

  		return this;

  	},

  	getVolume: function () {

  		return this.gain.gain.value;

  	},

  	setVolume: function ( value ) {

  		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  var _position$3 = new Vector3();
  var _quaternion$4 = new Quaternion();
  var _scale$2 = new Vector3();
  var _orientation$1 = new Vector3();

  function PositionalAudio( listener ) {

  	Audio.call( this, listener );

  	this.panner = this.context.createPanner();
  	this.panner.panningModel = 'HRTF';
  	this.panner.connect( this.gain );

  }

  PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

  	constructor: PositionalAudio,

  	getOutput: function () {

  		return this.panner;

  	},

  	getRefDistance: function () {

  		return this.panner.refDistance;

  	},

  	setRefDistance: function ( value ) {

  		this.panner.refDistance = value;

  		return this;

  	},

  	getRolloffFactor: function () {

  		return this.panner.rolloffFactor;

  	},

  	setRolloffFactor: function ( value ) {

  		this.panner.rolloffFactor = value;

  		return this;

  	},

  	getDistanceModel: function () {

  		return this.panner.distanceModel;

  	},

  	setDistanceModel: function ( value ) {

  		this.panner.distanceModel = value;

  		return this;

  	},

  	getMaxDistance: function () {

  		return this.panner.maxDistance;

  	},

  	setMaxDistance: function ( value ) {

  		this.panner.maxDistance = value;

  		return this;

  	},

  	setDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {

  		this.panner.coneInnerAngle = coneInnerAngle;
  		this.panner.coneOuterAngle = coneOuterAngle;
  		this.panner.coneOuterGain = coneOuterGain;

  		return this;

  	},

  	updateMatrixWorld: function ( force ) {

  		Object3D.prototype.updateMatrixWorld.call( this, force );

  		if ( this.hasPlaybackControl === true && this.isPlaying === false ) return;

  		this.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );

  		_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );

  		var panner = this.panner;

  		if ( panner.positionX ) {

  			// code path for Chrome and Firefox (see #14393)

  			var endTime = this.context.currentTime + this.listener.timeDelta;

  			panner.positionX.linearRampToValueAtTime( _position$3.x, endTime );
  			panner.positionY.linearRampToValueAtTime( _position$3.y, endTime );
  			panner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );
  			panner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );
  			panner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );
  			panner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );

  		} else {

  			panner.setPosition( _position$3.x, _position$3.y, _position$3.z );
  			panner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );

  		}

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function AudioAnalyser( audio, fftSize ) {

  	this.analyser = audio.context.createAnalyser();
  	this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

  	this.data = new Uint8Array( this.analyser.frequencyBinCount );

  	audio.getOutput().connect( this.analyser );

  }

  Object.assign( AudioAnalyser.prototype, {

  	getFrequencyData: function () {

  		this.analyser.getByteFrequencyData( this.data );

  		return this.data;

  	},

  	getAverageFrequency: function () {

  		var value = 0, data = this.getFrequencyData();

  		for ( var i = 0; i < data.length; i ++ ) {

  			value += data[ i ];

  		}

  		return value / data.length;

  	}

  } );

  /**
   *
   * Buffered scene graph property that allows weighted accumulation.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function PropertyMixer( binding, typeName, valueSize ) {

  	this.binding = binding;
  	this.valueSize = valueSize;

  	var bufferType = Float64Array,
  		mixFunction;

  	switch ( typeName ) {

  		case 'quaternion':
  			mixFunction = this._slerp;
  			break;

  		case 'string':
  		case 'bool':
  			bufferType = Array;
  			mixFunction = this._select;
  			break;

  		default:
  			mixFunction = this._lerp;

  	}

  	this.buffer = new bufferType( valueSize * 4 );
  	// layout: [ incoming | accu0 | accu1 | orig ]
  	//
  	// interpolators can use .buffer as their .result
  	// the data then goes to 'incoming'
  	//
  	// 'accu0' and 'accu1' are used frame-interleaved for
  	// the cumulative result and are compared to detect
  	// changes
  	//
  	// 'orig' stores the original state of the property

  	this._mixBufferRegion = mixFunction;

  	this.cumulativeWeight = 0;

  	this.useCount = 0;
  	this.referenceCount = 0;

  }

  Object.assign( PropertyMixer.prototype, {

  	// accumulate data in the 'incoming' region into 'accu<i>'
  	accumulate: function ( accuIndex, weight ) {

  		// note: happily accumulating nothing when weight = 0, the caller knows
  		// the weight and shouldn't have made the call in the first place

  		var buffer = this.buffer,
  			stride = this.valueSize,
  			offset = accuIndex * stride + stride,

  			currentWeight = this.cumulativeWeight;

  		if ( currentWeight === 0 ) {

  			// accuN := incoming * weight

  			for ( var i = 0; i !== stride; ++ i ) {

  				buffer[ offset + i ] = buffer[ i ];

  			}

  			currentWeight = weight;

  		} else {

  			// accuN := accuN + incoming * weight

  			currentWeight += weight;
  			var mix = weight / currentWeight;
  			this._mixBufferRegion( buffer, offset, 0, mix, stride );

  		}

  		this.cumulativeWeight = currentWeight;

  	},

  	// apply the state of 'accu<i>' to the binding when accus differ
  	apply: function ( accuIndex ) {

  		var stride = this.valueSize,
  			buffer = this.buffer,
  			offset = accuIndex * stride + stride,

  			weight = this.cumulativeWeight,

  			binding = this.binding;

  		this.cumulativeWeight = 0;

  		if ( weight < 1 ) {

  			// accuN := accuN + original * ( 1 - cumulativeWeight )

  			var originalValueOffset = stride * 3;

  			this._mixBufferRegion(
  				buffer, offset, originalValueOffset, 1 - weight, stride );

  		}

  		for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

  			if ( buffer[ i ] !== buffer[ i + stride ] ) {

  				// value has changed -> update scene graph

  				binding.setValue( buffer, offset );
  				break;

  			}

  		}

  	},

  	// remember the state of the bound property and copy it to both accus
  	saveOriginalState: function () {

  		var binding = this.binding;

  		var buffer = this.buffer,
  			stride = this.valueSize,

  			originalValueOffset = stride * 3;

  		binding.getValue( buffer, originalValueOffset );

  		// accu[0..1] := orig -- initially detect changes against the original
  		for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

  			buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

  		}

  		this.cumulativeWeight = 0;

  	},

  	// apply the state previously taken via 'saveOriginalState' to the binding
  	restoreOriginalState: function () {

  		var originalValueOffset = this.valueSize * 3;
  		this.binding.setValue( this.buffer, originalValueOffset );

  	},


  	// mix functions

  	_select: function ( buffer, dstOffset, srcOffset, t, stride ) {

  		if ( t >= 0.5 ) {

  			for ( var i = 0; i !== stride; ++ i ) {

  				buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

  			}

  		}

  	},

  	_slerp: function ( buffer, dstOffset, srcOffset, t ) {

  		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

  	},

  	_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {

  		var s = 1 - t;

  		for ( var i = 0; i !== stride; ++ i ) {

  			var j = dstOffset + i;

  			buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

  		}

  	}

  } );

  /**
   *
   * A reference to a real property in the scene graph.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  // Characters [].:/ are reserved for track binding syntax.
  var _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
  var _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );

  // Attempts to allow node names from any language. ES5's `\w` regexp matches
  // only latin characters, and the unicode \p{L} is not yet supported. So
  // instead, we exclude reserved characters and match everything else.
  var _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
  var _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';

  // Parent directories, delimited by '/' or ':'. Currently unused, but must
  // be matched to parse the rest of the track name.
  var _directoryRe = /((?:WC+[\/:])*)/.source.replace( 'WC', _wordChar );

  // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
  var _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );

  // Object on target node, and accessor. May not contain reserved
  // characters. Accessor may contain any character except closing bracket.
  var _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', _wordChar );

  // Property and accessor. May not contain reserved characters. Accessor may
  // contain any non-bracket characters.
  var _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', _wordChar );

  var _trackRe = new RegExp( ''
  	+ '^'
  	+ _directoryRe
  	+ _nodeRe
  	+ _objectRe
  	+ _propertyRe
  	+ '$'
  );

  var _supportedObjectNames = [ 'material', 'materials', 'bones' ];

  function Composite( targetGroup, path, optionalParsedPath ) {

  	var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

  	this._targetGroup = targetGroup;
  	this._bindings = targetGroup.subscribe_( path, parsedPath );

  }

  Object.assign( Composite.prototype, {

  	getValue: function ( array, offset ) {

  		this.bind(); // bind all binding

  		var firstValidIndex = this._targetGroup.nCachedObjects_,
  			binding = this._bindings[ firstValidIndex ];

  		// and only call .getValue on the first
  		if ( binding !== undefined ) binding.getValue( array, offset );

  	},

  	setValue: function ( array, offset ) {

  		var bindings = this._bindings;

  		for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

  			bindings[ i ].setValue( array, offset );

  		}

  	},

  	bind: function () {

  		var bindings = this._bindings;

  		for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

  			bindings[ i ].bind();

  		}

  	},

  	unbind: function () {

  		var bindings = this._bindings;

  		for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

  			bindings[ i ].unbind();

  		}

  	}

  } );


  function PropertyBinding( rootNode, path, parsedPath ) {

  	this.path = path;
  	this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

  	this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

  	this.rootNode = rootNode;

  }

  Object.assign( PropertyBinding, {

  	Composite: Composite,

  	create: function ( root, path, parsedPath ) {

  		if ( ! ( root && root.isAnimationObjectGroup ) ) {

  			return new PropertyBinding( root, path, parsedPath );

  		} else {

  			return new PropertyBinding.Composite( root, path, parsedPath );

  		}

  	},

  	/**
  	 * Replaces spaces with underscores and removes unsupported characters from
  	 * node names, to ensure compatibility with parseTrackName().
  	 *
  	 * @param {string} name Node name to be sanitized.
  	 * @return {string}
  	 */
  	sanitizeNodeName: function ( name ) {

  		return name.replace( /\s/g, '_' ).replace( _reservedRe, '' );

  	},

  	parseTrackName: function ( trackName ) {

  		var matches = _trackRe.exec( trackName );

  		if ( ! matches ) {

  			throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

  		}

  		var results = {
  			// directoryName: matches[ 1 ], // (tschw) currently unused
  			nodeName: matches[ 2 ],
  			objectName: matches[ 3 ],
  			objectIndex: matches[ 4 ],
  			propertyName: matches[ 5 ], // required
  			propertyIndex: matches[ 6 ]
  		};

  		var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

  		if ( lastDot !== undefined && lastDot !== - 1 ) {

  			var objectName = results.nodeName.substring( lastDot + 1 );

  			// Object names must be checked against a whitelist. Otherwise, there
  			// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
  			// 'bar' could be the objectName, or part of a nodeName (which can
  			// include '.' characters).
  			if ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {

  				results.nodeName = results.nodeName.substring( 0, lastDot );
  				results.objectName = objectName;

  			}

  		}

  		if ( results.propertyName === null || results.propertyName.length === 0 ) {

  			throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

  		}

  		return results;

  	},

  	findNode: function ( root, nodeName ) {

  		if ( ! nodeName || nodeName === "" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

  			return root;

  		}

  		// search into skeleton bones.
  		if ( root.skeleton ) {

  			var bone = root.skeleton.getBoneByName( nodeName );

  			if ( bone !== undefined ) {

  				return bone;

  			}

  		}

  		// search into node subtree.
  		if ( root.children ) {

  			var searchNodeSubtree = function ( children ) {

  				for ( var i = 0; i < children.length; i ++ ) {

  					var childNode = children[ i ];

  					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

  						return childNode;

  					}

  					var result = searchNodeSubtree( childNode.children );

  					if ( result ) return result;

  				}

  				return null;

  			};

  			var subTreeNode = searchNodeSubtree( root.children );

  			if ( subTreeNode ) {

  				return subTreeNode;

  			}

  		}

  		return null;

  	}

  } );

  Object.assign( PropertyBinding.prototype, { // prototype, continued

  	// these are used to "bind" a nonexistent property
  	_getValue_unavailable: function () {},
  	_setValue_unavailable: function () {},

  	BindingType: {
  		Direct: 0,
  		EntireArray: 1,
  		ArrayElement: 2,
  		HasFromToArray: 3
  	},

  	Versioning: {
  		None: 0,
  		NeedsUpdate: 1,
  		MatrixWorldNeedsUpdate: 2
  	},

  	GetterByBindingType: [

  		function getValue_direct( buffer, offset ) {

  			buffer[ offset ] = this.node[ this.propertyName ];

  		},

  		function getValue_array( buffer, offset ) {

  			var source = this.resolvedProperty;

  			for ( var i = 0, n = source.length; i !== n; ++ i ) {

  				buffer[ offset ++ ] = source[ i ];

  			}

  		},

  		function getValue_arrayElement( buffer, offset ) {

  			buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

  		},

  		function getValue_toArray( buffer, offset ) {

  			this.resolvedProperty.toArray( buffer, offset );

  		}

  	],

  	SetterByBindingTypeAndVersioning: [

  		[
  			// Direct

  			function setValue_direct( buffer, offset ) {

  				this.targetObject[ this.propertyName ] = buffer[ offset ];

  			},

  			function setValue_direct_setNeedsUpdate( buffer, offset ) {

  				this.targetObject[ this.propertyName ] = buffer[ offset ];
  				this.targetObject.needsUpdate = true;

  			},

  			function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

  				this.targetObject[ this.propertyName ] = buffer[ offset ];
  				this.targetObject.matrixWorldNeedsUpdate = true;

  			}

  		], [

  			// EntireArray

  			function setValue_array( buffer, offset ) {

  				var dest = this.resolvedProperty;

  				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

  					dest[ i ] = buffer[ offset ++ ];

  				}

  			},

  			function setValue_array_setNeedsUpdate( buffer, offset ) {

  				var dest = this.resolvedProperty;

  				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

  					dest[ i ] = buffer[ offset ++ ];

  				}

  				this.targetObject.needsUpdate = true;

  			},

  			function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

  				var dest = this.resolvedProperty;

  				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

  					dest[ i ] = buffer[ offset ++ ];

  				}

  				this.targetObject.matrixWorldNeedsUpdate = true;

  			}

  		], [

  			// ArrayElement

  			function setValue_arrayElement( buffer, offset ) {

  				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

  			},

  			function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

  				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
  				this.targetObject.needsUpdate = true;

  			},

  			function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

  				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
  				this.targetObject.matrixWorldNeedsUpdate = true;

  			}

  		], [

  			// HasToFromArray

  			function setValue_fromArray( buffer, offset ) {

  				this.resolvedProperty.fromArray( buffer, offset );

  			},

  			function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

  				this.resolvedProperty.fromArray( buffer, offset );
  				this.targetObject.needsUpdate = true;

  			},

  			function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

  				this.resolvedProperty.fromArray( buffer, offset );
  				this.targetObject.matrixWorldNeedsUpdate = true;

  			}

  		]

  	],

  	getValue: function getValue_unbound( targetArray, offset ) {

  		this.bind();
  		this.getValue( targetArray, offset );

  		// Note: This class uses a State pattern on a per-method basis:
  		// 'bind' sets 'this.getValue' / 'setValue' and shadows the
  		// prototype version of these methods with one that represents
  		// the bound state. When the property is not found, the methods
  		// become no-ops.

  	},

  	setValue: function getValue_unbound( sourceArray, offset ) {

  		this.bind();
  		this.setValue( sourceArray, offset );

  	},

  	// create getter / setter pair for a property in the scene graph
  	bind: function () {

  		var targetObject = this.node,
  			parsedPath = this.parsedPath,

  			objectName = parsedPath.objectName,
  			propertyName = parsedPath.propertyName,
  			propertyIndex = parsedPath.propertyIndex;

  		if ( ! targetObject ) {

  			targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;

  			this.node = targetObject;

  		}

  		// set fail state so we can just 'return' on error
  		this.getValue = this._getValue_unavailable;
  		this.setValue = this._setValue_unavailable;

  		// ensure there is a value node
  		if ( ! targetObject ) {

  			console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
  			return;

  		}

  		if ( objectName ) {

  			var objectIndex = parsedPath.objectIndex;

  			// special cases were we need to reach deeper into the hierarchy to get the face materials....
  			switch ( objectName ) {

  				case 'materials':

  					if ( ! targetObject.material ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
  						return;

  					}

  					if ( ! targetObject.material.materials ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
  						return;

  					}

  					targetObject = targetObject.material.materials;

  					break;

  				case 'bones':

  					if ( ! targetObject.skeleton ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
  						return;

  					}

  					// potential future optimization: skip this if propertyIndex is already an integer
  					// and convert the integer string to a true integer.

  					targetObject = targetObject.skeleton.bones;

  					// support resolving morphTarget names into indices.
  					for ( var i = 0; i < targetObject.length; i ++ ) {

  						if ( targetObject[ i ].name === objectIndex ) {

  							objectIndex = i;
  							break;

  						}

  					}

  					break;

  				default:

  					if ( targetObject[ objectName ] === undefined ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
  						return;

  					}

  					targetObject = targetObject[ objectName ];

  			}


  			if ( objectIndex !== undefined ) {

  				if ( targetObject[ objectIndex ] === undefined ) {

  					console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
  					return;

  				}

  				targetObject = targetObject[ objectIndex ];

  			}

  		}

  		// resolve property
  		var nodeProperty = targetObject[ propertyName ];

  		if ( nodeProperty === undefined ) {

  			var nodeName = parsedPath.nodeName;

  			console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
  				'.' + propertyName + ' but it wasn\'t found.', targetObject );
  			return;

  		}

  		// determine versioning scheme
  		var versioning = this.Versioning.None;

  		this.targetObject = targetObject;

  		if ( targetObject.needsUpdate !== undefined ) { // material

  			versioning = this.Versioning.NeedsUpdate;

  		} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

  			versioning = this.Versioning.MatrixWorldNeedsUpdate;

  		}

  		// determine how the property gets bound
  		var bindingType = this.BindingType.Direct;

  		if ( propertyIndex !== undefined ) {

  			// access a sub element of the property array (only primitives are supported right now)

  			if ( propertyName === "morphTargetInfluences" ) {

  				// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

  				// support resolving morphTarget names into indices.
  				if ( ! targetObject.geometry ) {

  					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
  					return;

  				}

  				if ( targetObject.geometry.isBufferGeometry ) {

  					if ( ! targetObject.geometry.morphAttributes ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
  						return;

  					}

  					for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {

  						if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {

  							propertyIndex = i;
  							break;

  						}

  					}


  				} else {

  					if ( ! targetObject.geometry.morphTargets ) {

  						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
  						return;

  					}

  					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

  						if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

  							propertyIndex = i;
  							break;

  						}

  					}

  				}

  			}

  			bindingType = this.BindingType.ArrayElement;

  			this.resolvedProperty = nodeProperty;
  			this.propertyIndex = propertyIndex;

  		} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

  			// must use copy for Object3D.Euler/Quaternion

  			bindingType = this.BindingType.HasFromToArray;

  			this.resolvedProperty = nodeProperty;

  		} else if ( Array.isArray( nodeProperty ) ) {

  			bindingType = this.BindingType.EntireArray;

  			this.resolvedProperty = nodeProperty;

  		} else {

  			this.propertyName = propertyName;

  		}

  		// select getter / setter
  		this.getValue = this.GetterByBindingType[ bindingType ];
  		this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

  	},

  	unbind: function () {

  		this.node = null;

  		// back to the prototype version of getValue / setValue
  		// note: avoiding to mutate the shape of 'this' via 'delete'
  		this.getValue = this._getValue_unbound;
  		this.setValue = this._setValue_unbound;

  	}

  } );

  // DECLARE ALIAS AFTER assign prototype
  Object.assign( PropertyBinding.prototype, {

  	// initial state of these methods that calls 'bind'
  	_getValue_unbound: PropertyBinding.prototype.getValue,
  	_setValue_unbound: PropertyBinding.prototype.setValue,

  } );

  /**
   *
   * A group of objects that receives a shared animation state.
   *
   * Usage:
   *
   *  - Add objects you would otherwise pass as 'root' to the
   *    constructor or the .clipAction method of AnimationMixer.
   *
   *  - Instead pass this object as 'root'.
   *
   *  - You can also add and remove objects later when the mixer
   *    is running.
   *
   * Note:
   *
   *    Objects of this class appear as one object to the mixer,
   *    so cache control of the individual objects must be done
   *    on the group.
   *
   * Limitation:
   *
   *  - The animated properties must be compatible among the
   *    all objects in the group.
   *
   *  - A single property can either be controlled through a
   *    target group or directly, but not both.
   *
   * @author tschw
   */

  function AnimationObjectGroup() {

  	this.uuid = MathUtils.generateUUID();

  	// cached objects followed by the active ones
  	this._objects = Array.prototype.slice.call( arguments );

  	this.nCachedObjects_ = 0; // threshold
  	// note: read by PropertyBinding.Composite

  	var indices = {};
  	this._indicesByUUID = indices; // for bookkeeping

  	for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

  		indices[ arguments[ i ].uuid ] = i;

  	}

  	this._paths = []; // inside: string
  	this._parsedPaths = []; // inside: { we don't care, here }
  	this._bindings = []; // inside: Array< PropertyBinding >
  	this._bindingsIndicesByPath = {}; // inside: indices in these arrays

  	var scope = this;

  	this.stats = {

  		objects: {
  			get total() {

  				return scope._objects.length;

  			},
  			get inUse() {

  				return this.total - scope.nCachedObjects_;

  			}
  		},
  		get bindingsPerObject() {

  			return scope._bindings.length;

  		}

  	};

  }

  Object.assign( AnimationObjectGroup.prototype, {

  	isAnimationObjectGroup: true,

  	add: function () {

  		var objects = this._objects,
  			nObjects = objects.length,
  			nCachedObjects = this.nCachedObjects_,
  			indicesByUUID = this._indicesByUUID,
  			paths = this._paths,
  			parsedPaths = this._parsedPaths,
  			bindings = this._bindings,
  			nBindings = bindings.length,
  			knownObject = undefined;

  		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

  			var object = arguments[ i ],
  				uuid = object.uuid,
  				index = indicesByUUID[ uuid ];

  			if ( index === undefined ) {

  				// unknown object -> add it to the ACTIVE region

  				index = nObjects ++;
  				indicesByUUID[ uuid ] = index;
  				objects.push( object );

  				// accounting is done, now do the same for all bindings

  				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

  					bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );

  				}

  			} else if ( index < nCachedObjects ) {

  				knownObject = objects[ index ];

  				// move existing object to the ACTIVE region

  				var firstActiveIndex = -- nCachedObjects,
  					lastCachedObject = objects[ firstActiveIndex ];

  				indicesByUUID[ lastCachedObject.uuid ] = index;
  				objects[ index ] = lastCachedObject;

  				indicesByUUID[ uuid ] = firstActiveIndex;
  				objects[ firstActiveIndex ] = object;

  				// accounting is done, now do the same for all bindings

  				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

  					var bindingsForPath = bindings[ j ],
  						lastCached = bindingsForPath[ firstActiveIndex ],
  						binding = bindingsForPath[ index ];

  					bindingsForPath[ index ] = lastCached;

  					if ( binding === undefined ) {

  						// since we do not bother to create new bindings
  						// for objects that are cached, the binding may
  						// or may not exist

  						binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );

  					}

  					bindingsForPath[ firstActiveIndex ] = binding;

  				}

  			} else if ( objects[ index ] !== knownObject ) {

  				console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
  					'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

  			} // else the object is already where we want it to be

  		} // for arguments

  		this.nCachedObjects_ = nCachedObjects;

  	},

  	remove: function () {

  		var objects = this._objects,
  			nCachedObjects = this.nCachedObjects_,
  			indicesByUUID = this._indicesByUUID,
  			bindings = this._bindings,
  			nBindings = bindings.length;

  		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

  			var object = arguments[ i ],
  				uuid = object.uuid,
  				index = indicesByUUID[ uuid ];

  			if ( index !== undefined && index >= nCachedObjects ) {

  				// move existing object into the CACHED region

  				var lastCachedIndex = nCachedObjects ++,
  					firstActiveObject = objects[ lastCachedIndex ];

  				indicesByUUID[ firstActiveObject.uuid ] = index;
  				objects[ index ] = firstActiveObject;

  				indicesByUUID[ uuid ] = lastCachedIndex;
  				objects[ lastCachedIndex ] = object;

  				// accounting is done, now do the same for all bindings

  				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

  					var bindingsForPath = bindings[ j ],
  						firstActive = bindingsForPath[ lastCachedIndex ],
  						binding = bindingsForPath[ index ];

  					bindingsForPath[ index ] = firstActive;
  					bindingsForPath[ lastCachedIndex ] = binding;

  				}

  			}

  		} // for arguments

  		this.nCachedObjects_ = nCachedObjects;

  	},

  	// remove & forget
  	uncache: function () {

  		var objects = this._objects,
  			nObjects = objects.length,
  			nCachedObjects = this.nCachedObjects_,
  			indicesByUUID = this._indicesByUUID,
  			bindings = this._bindings,
  			nBindings = bindings.length;

  		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

  			var object = arguments[ i ],
  				uuid = object.uuid,
  				index = indicesByUUID[ uuid ];

  			if ( index !== undefined ) {

  				delete indicesByUUID[ uuid ];

  				if ( index < nCachedObjects ) {

  					// object is cached, shrink the CACHED region

  					var firstActiveIndex = -- nCachedObjects,
  						lastCachedObject = objects[ firstActiveIndex ],
  						lastIndex = -- nObjects,
  						lastObject = objects[ lastIndex ];

  					// last cached object takes this object's place
  					indicesByUUID[ lastCachedObject.uuid ] = index;
  					objects[ index ] = lastCachedObject;

  					// last object goes to the activated slot and pop
  					indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
  					objects[ firstActiveIndex ] = lastObject;
  					objects.pop();

  					// accounting is done, now do the same for all bindings

  					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

  						var bindingsForPath = bindings[ j ],
  							lastCached = bindingsForPath[ firstActiveIndex ],
  							last = bindingsForPath[ lastIndex ];

  						bindingsForPath[ index ] = lastCached;
  						bindingsForPath[ firstActiveIndex ] = last;
  						bindingsForPath.pop();

  					}

  				} else {

  					// object is active, just swap with the last and pop

  					var lastIndex = -- nObjects,
  						lastObject = objects[ lastIndex ];

  					indicesByUUID[ lastObject.uuid ] = index;
  					objects[ index ] = lastObject;
  					objects.pop();

  					// accounting is done, now do the same for all bindings

  					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

  						var bindingsForPath = bindings[ j ];

  						bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
  						bindingsForPath.pop();

  					}

  				} // cached or active

  			} // if object is known

  		} // for arguments

  		this.nCachedObjects_ = nCachedObjects;

  	},

  	// Internal interface used by befriended PropertyBinding.Composite:

  	subscribe_: function ( path, parsedPath ) {

  		// returns an array of bindings for the given path that is changed
  		// according to the contained objects in the group

  		var indicesByPath = this._bindingsIndicesByPath,
  			index = indicesByPath[ path ],
  			bindings = this._bindings;

  		if ( index !== undefined ) return bindings[ index ];

  		var paths = this._paths,
  			parsedPaths = this._parsedPaths,
  			objects = this._objects,
  			nObjects = objects.length,
  			nCachedObjects = this.nCachedObjects_,
  			bindingsForPath = new Array( nObjects );

  		index = bindings.length;

  		indicesByPath[ path ] = index;

  		paths.push( path );
  		parsedPaths.push( parsedPath );
  		bindings.push( bindingsForPath );

  		for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

  			var object = objects[ i ];
  			bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

  		}

  		return bindingsForPath;

  	},

  	unsubscribe_: function ( path ) {

  		// tells the group to forget about a property path and no longer
  		// update the array previously obtained with 'subscribe_'

  		var indicesByPath = this._bindingsIndicesByPath,
  			index = indicesByPath[ path ];

  		if ( index !== undefined ) {

  			var paths = this._paths,
  				parsedPaths = this._parsedPaths,
  				bindings = this._bindings,
  				lastBindingsIndex = bindings.length - 1,
  				lastBindings = bindings[ lastBindingsIndex ],
  				lastBindingsPath = path[ lastBindingsIndex ];

  			indicesByPath[ lastBindingsPath ] = index;

  			bindings[ index ] = lastBindings;
  			bindings.pop();

  			parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
  			parsedPaths.pop();

  			paths[ index ] = paths[ lastBindingsIndex ];
  			paths.pop();

  		}

  	}

  } );

  /**
   *
   * Action provided by AnimationMixer for scheduling clip playback on specific
   * objects.
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   *
   */

  function AnimationAction( mixer, clip, localRoot ) {

  	this._mixer = mixer;
  	this._clip = clip;
  	this._localRoot = localRoot || null;

  	var tracks = clip.tracks,
  		nTracks = tracks.length,
  		interpolants = new Array( nTracks );

  	var interpolantSettings = {
  		endingStart: ZeroCurvatureEnding,
  		endingEnd: ZeroCurvatureEnding
  	};

  	for ( var i = 0; i !== nTracks; ++ i ) {

  		var interpolant = tracks[ i ].createInterpolant( null );
  		interpolants[ i ] = interpolant;
  		interpolant.settings = interpolantSettings;

  	}

  	this._interpolantSettings = interpolantSettings;

  	this._interpolants = interpolants; // bound by the mixer

  	// inside: PropertyMixer (managed by the mixer)
  	this._propertyBindings = new Array( nTracks );

  	this._cacheIndex = null; // for the memory manager
  	this._byClipCacheIndex = null; // for the memory manager

  	this._timeScaleInterpolant = null;
  	this._weightInterpolant = null;

  	this.loop = LoopRepeat;
  	this._loopCount = - 1;

  	// global mixer time when the action is to be started
  	// it's set back to 'null' upon start of the action
  	this._startTime = null;

  	// scaled local time of the action
  	// gets clamped or wrapped to 0..clip.duration according to loop
  	this.time = 0;

  	this.timeScale = 1;
  	this._effectiveTimeScale = 1;

  	this.weight = 1;
  	this._effectiveWeight = 1;

  	this.repetitions = Infinity; // no. of repetitions when looping

  	this.paused = false; // true -> zero effective time scale
  	this.enabled = true; // false -> zero effective weight

  	this.clampWhenFinished = false;// keep feeding the last frame?

  	this.zeroSlopeAtStart = true;// for smooth interpolation w/o separate
  	this.zeroSlopeAtEnd = true;// clips for start, loop and end

  }

  Object.assign( AnimationAction.prototype, {

  	// State & Scheduling

  	play: function () {

  		this._mixer._activateAction( this );

  		return this;

  	},

  	stop: function () {

  		this._mixer._deactivateAction( this );

  		return this.reset();

  	},

  	reset: function () {

  		this.paused = false;
  		this.enabled = true;

  		this.time = 0; // restart clip
  		this._loopCount = - 1;// forget previous loops
  		this._startTime = null;// forget scheduling

  		return this.stopFading().stopWarping();

  	},

  	isRunning: function () {

  		return this.enabled && ! this.paused && this.timeScale !== 0 &&
  			this._startTime === null && this._mixer._isActiveAction( this );

  	},

  	// return true when play has been called
  	isScheduled: function () {

  		return this._mixer._isActiveAction( this );

  	},

  	startAt: function ( time ) {

  		this._startTime = time;

  		return this;

  	},

  	setLoop: function ( mode, repetitions ) {

  		this.loop = mode;
  		this.repetitions = repetitions;

  		return this;

  	},

  	// Weight

  	// set the weight stopping any scheduled fading
  	// although .enabled = false yields an effective weight of zero, this
  	// method does *not* change .enabled, because it would be confusing
  	setEffectiveWeight: function ( weight ) {

  		this.weight = weight;

  		// note: same logic as when updated at runtime
  		this._effectiveWeight = this.enabled ? weight : 0;

  		return this.stopFading();

  	},

  	// return the weight considering fading and .enabled
  	getEffectiveWeight: function () {

  		return this._effectiveWeight;

  	},

  	fadeIn: function ( duration ) {

  		return this._scheduleFading( duration, 0, 1 );

  	},

  	fadeOut: function ( duration ) {

  		return this._scheduleFading( duration, 1, 0 );

  	},

  	crossFadeFrom: function ( fadeOutAction, duration, warp ) {

  		fadeOutAction.fadeOut( duration );
  		this.fadeIn( duration );

  		if ( warp ) {

  			var fadeInDuration = this._clip.duration,
  				fadeOutDuration = fadeOutAction._clip.duration,

  				startEndRatio = fadeOutDuration / fadeInDuration,
  				endStartRatio = fadeInDuration / fadeOutDuration;

  			fadeOutAction.warp( 1.0, startEndRatio, duration );
  			this.warp( endStartRatio, 1.0, duration );

  		}

  		return this;

  	},

  	crossFadeTo: function ( fadeInAction, duration, warp ) {

  		return fadeInAction.crossFadeFrom( this, duration, warp );

  	},

  	stopFading: function () {

  		var weightInterpolant = this._weightInterpolant;

  		if ( weightInterpolant !== null ) {

  			this._weightInterpolant = null;
  			this._mixer._takeBackControlInterpolant( weightInterpolant );

  		}

  		return this;

  	},

  	// Time Scale Control

  	// set the time scale stopping any scheduled warping
  	// although .paused = true yields an effective time scale of zero, this
  	// method does *not* change .paused, because it would be confusing
  	setEffectiveTimeScale: function ( timeScale ) {

  		this.timeScale = timeScale;
  		this._effectiveTimeScale = this.paused ? 0 : timeScale;

  		return this.stopWarping();

  	},

  	// return the time scale considering warping and .paused
  	getEffectiveTimeScale: function () {

  		return this._effectiveTimeScale;

  	},

  	setDuration: function ( duration ) {

  		this.timeScale = this._clip.duration / duration;

  		return this.stopWarping();

  	},

  	syncWith: function ( action ) {

  		this.time = action.time;
  		this.timeScale = action.timeScale;

  		return this.stopWarping();

  	},

  	halt: function ( duration ) {

  		return this.warp( this._effectiveTimeScale, 0, duration );

  	},

  	warp: function ( startTimeScale, endTimeScale, duration ) {

  		var mixer = this._mixer, now = mixer.time,
  			interpolant = this._timeScaleInterpolant,

  			timeScale = this.timeScale;

  		if ( interpolant === null ) {

  			interpolant = mixer._lendControlInterpolant();
  			this._timeScaleInterpolant = interpolant;

  		}

  		var times = interpolant.parameterPositions,
  			values = interpolant.sampleValues;

  		times[ 0 ] = now;
  		times[ 1 ] = now + duration;

  		values[ 0 ] = startTimeScale / timeScale;
  		values[ 1 ] = endTimeScale / timeScale;

  		return this;

  	},

  	stopWarping: function () {

  		var timeScaleInterpolant = this._timeScaleInterpolant;

  		if ( timeScaleInterpolant !== null ) {

  			this._timeScaleInterpolant = null;
  			this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

  		}

  		return this;

  	},

  	// Object Accessors

  	getMixer: function () {

  		return this._mixer;

  	},

  	getClip: function () {

  		return this._clip;

  	},

  	getRoot: function () {

  		return this._localRoot || this._mixer._root;

  	},

  	// Interna

  	_update: function ( time, deltaTime, timeDirection, accuIndex ) {

  		// called by the mixer

  		if ( ! this.enabled ) {

  			// call ._updateWeight() to update ._effectiveWeight

  			this._updateWeight( time );
  			return;

  		}

  		var startTime = this._startTime;

  		if ( startTime !== null ) {

  			// check for scheduled start of action

  			var timeRunning = ( time - startTime ) * timeDirection;
  			if ( timeRunning < 0 || timeDirection === 0 ) {

  				return; // yet to come / don't decide when delta = 0

  			}

  			// start

  			this._startTime = null; // unschedule
  			deltaTime = timeDirection * timeRunning;

  		}

  		// apply time scale and advance time

  		deltaTime *= this._updateTimeScale( time );
  		var clipTime = this._updateTime( deltaTime );

  		// note: _updateTime may disable the action resulting in
  		// an effective weight of 0

  		var weight = this._updateWeight( time );

  		if ( weight > 0 ) {

  			var interpolants = this._interpolants;
  			var propertyMixers = this._propertyBindings;

  			for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

  				interpolants[ j ].evaluate( clipTime );
  				propertyMixers[ j ].accumulate( accuIndex, weight );

  			}

  		}

  	},

  	_updateWeight: function ( time ) {

  		var weight = 0;

  		if ( this.enabled ) {

  			weight = this.weight;
  			var interpolant = this._weightInterpolant;

  			if ( interpolant !== null ) {

  				var interpolantValue = interpolant.evaluate( time )[ 0 ];

  				weight *= interpolantValue;

  				if ( time > interpolant.parameterPositions[ 1 ] ) {

  					this.stopFading();

  					if ( interpolantValue === 0 ) {

  						// faded out, disable
  						this.enabled = false;

  					}

  				}

  			}

  		}

  		this._effectiveWeight = weight;
  		return weight;

  	},

  	_updateTimeScale: function ( time ) {

  		var timeScale = 0;

  		if ( ! this.paused ) {

  			timeScale = this.timeScale;

  			var interpolant = this._timeScaleInterpolant;

  			if ( interpolant !== null ) {

  				var interpolantValue = interpolant.evaluate( time )[ 0 ];

  				timeScale *= interpolantValue;

  				if ( time > interpolant.parameterPositions[ 1 ] ) {

  					this.stopWarping();

  					if ( timeScale === 0 ) {

  						// motion has halted, pause
  						this.paused = true;

  					} else {

  						// warp done - apply final time scale
  						this.timeScale = timeScale;

  					}

  				}

  			}

  		}

  		this._effectiveTimeScale = timeScale;
  		return timeScale;

  	},

  	_updateTime: function ( deltaTime ) {

  		var time = this.time + deltaTime;
  		var duration = this._clip.duration;
  		var loop = this.loop;
  		var loopCount = this._loopCount;

  		var pingPong = ( loop === LoopPingPong );

  		if ( deltaTime === 0 ) {

  			if ( loopCount === - 1 ) return time;

  			return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;

  		}

  		if ( loop === LoopOnce ) {

  			if ( loopCount === - 1 ) {

  				// just started

  				this._loopCount = 0;
  				this._setEndings( true, true, false );

  			}

  			handle_stop: {

  				if ( time >= duration ) {

  					time = duration;

  				} else if ( time < 0 ) {

  					time = 0;

  				} else {

  					this.time = time;

  					break handle_stop;

  				}

  				if ( this.clampWhenFinished ) this.paused = true;
  				else this.enabled = false;

  				this.time = time;

  				this._mixer.dispatchEvent( {
  					type: 'finished', action: this,
  					direction: deltaTime < 0 ? - 1 : 1
  				} );

  			}

  		} else { // repetitive Repeat or PingPong

  			if ( loopCount === - 1 ) {

  				// just started

  				if ( deltaTime >= 0 ) {

  					loopCount = 0;

  					this._setEndings( true, this.repetitions === 0, pingPong );

  				} else {

  					// when looping in reverse direction, the initial
  					// transition through zero counts as a repetition,
  					// so leave loopCount at -1

  					this._setEndings( this.repetitions === 0, true, pingPong );

  				}

  			}

  			if ( time >= duration || time < 0 ) {

  				// wrap around

  				var loopDelta = Math.floor( time / duration ); // signed
  				time -= duration * loopDelta;

  				loopCount += Math.abs( loopDelta );

  				var pending = this.repetitions - loopCount;

  				if ( pending <= 0 ) {

  					// have to stop (switch state, clamp time, fire event)

  					if ( this.clampWhenFinished ) this.paused = true;
  					else this.enabled = false;

  					time = deltaTime > 0 ? duration : 0;

  					this.time = time;

  					this._mixer.dispatchEvent( {
  						type: 'finished', action: this,
  						direction: deltaTime > 0 ? 1 : - 1
  					} );

  				} else {

  					// keep running

  					if ( pending === 1 ) {

  						// entering the last round

  						var atStart = deltaTime < 0;
  						this._setEndings( atStart, ! atStart, pingPong );

  					} else {

  						this._setEndings( false, false, pingPong );

  					}

  					this._loopCount = loopCount;

  					this.time = time;

  					this._mixer.dispatchEvent( {
  						type: 'loop', action: this, loopDelta: loopDelta
  					} );

  				}

  			} else {

  				this.time = time;

  			}

  			if ( pingPong && ( loopCount & 1 ) === 1 ) {

  				// invert time for the "pong round"

  				return duration - time;

  			}

  		}

  		return time;

  	},

  	_setEndings: function ( atStart, atEnd, pingPong ) {

  		var settings = this._interpolantSettings;

  		if ( pingPong ) {

  			settings.endingStart = ZeroSlopeEnding;
  			settings.endingEnd = ZeroSlopeEnding;

  		} else {

  			// assuming for LoopOnce atStart == atEnd == true

  			if ( atStart ) {

  				settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;

  			} else {

  				settings.endingStart = WrapAroundEnding;

  			}

  			if ( atEnd ) {

  				settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;

  			} else {

  				settings.endingEnd 	 = WrapAroundEnding;

  			}

  		}

  	},

  	_scheduleFading: function ( duration, weightNow, weightThen ) {

  		var mixer = this._mixer, now = mixer.time,
  			interpolant = this._weightInterpolant;

  		if ( interpolant === null ) {

  			interpolant = mixer._lendControlInterpolant();
  			this._weightInterpolant = interpolant;

  		}

  		var times = interpolant.parameterPositions,
  			values = interpolant.sampleValues;

  		times[ 0 ] = now;
  		values[ 0 ] = weightNow;
  		times[ 1 ] = now + duration;
  		values[ 1 ] = weightThen;

  		return this;

  	}

  } );

  /**
   *
   * Player for AnimationClips.
   *
   *
   * @author Ben Houston / http://clara.io/
   * @author David Sarno / http://lighthaus.us/
   * @author tschw
   */

  function AnimationMixer( root ) {

  	this._root = root;
  	this._initMemoryManager();
  	this._accuIndex = 0;

  	this.time = 0;

  	this.timeScale = 1.0;

  }

  AnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

  	constructor: AnimationMixer,

  	_bindAction: function ( action, prototypeAction ) {

  		var root = action._localRoot || this._root,
  			tracks = action._clip.tracks,
  			nTracks = tracks.length,
  			bindings = action._propertyBindings,
  			interpolants = action._interpolants,
  			rootUuid = root.uuid,
  			bindingsByRoot = this._bindingsByRootAndName,
  			bindingsByName = bindingsByRoot[ rootUuid ];

  		if ( bindingsByName === undefined ) {

  			bindingsByName = {};
  			bindingsByRoot[ rootUuid ] = bindingsByName;

  		}

  		for ( var i = 0; i !== nTracks; ++ i ) {

  			var track = tracks[ i ],
  				trackName = track.name,
  				binding = bindingsByName[ trackName ];

  			if ( binding !== undefined ) {

  				bindings[ i ] = binding;

  			} else {

  				binding = bindings[ i ];

  				if ( binding !== undefined ) {

  					// existing binding, make sure the cache knows

  					if ( binding._cacheIndex === null ) {

  						++ binding.referenceCount;
  						this._addInactiveBinding( binding, rootUuid, trackName );

  					}

  					continue;

  				}

  				var path = prototypeAction && prototypeAction.
  					_propertyBindings[ i ].binding.parsedPath;

  				binding = new PropertyMixer(
  					PropertyBinding.create( root, trackName, path ),
  					track.ValueTypeName, track.getValueSize() );

  				++ binding.referenceCount;
  				this._addInactiveBinding( binding, rootUuid, trackName );

  				bindings[ i ] = binding;

  			}

  			interpolants[ i ].resultBuffer = binding.buffer;

  		}

  	},

  	_activateAction: function ( action ) {

  		if ( ! this._isActiveAction( action ) ) {

  			if ( action._cacheIndex === null ) {

  				// this action has been forgotten by the cache, but the user
  				// appears to be still using it -> rebind

  				var rootUuid = ( action._localRoot || this._root ).uuid,
  					clipUuid = action._clip.uuid,
  					actionsForClip = this._actionsByClip[ clipUuid ];

  				this._bindAction( action,
  					actionsForClip && actionsForClip.knownActions[ 0 ] );

  				this._addInactiveAction( action, clipUuid, rootUuid );

  			}

  			var bindings = action._propertyBindings;

  			// increment reference counts / sort out state
  			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

  				var binding = bindings[ i ];

  				if ( binding.useCount ++ === 0 ) {

  					this._lendBinding( binding );
  					binding.saveOriginalState();

  				}

  			}

  			this._lendAction( action );

  		}

  	},

  	_deactivateAction: function ( action ) {

  		if ( this._isActiveAction( action ) ) {

  			var bindings = action._propertyBindings;

  			// decrement reference counts / sort out state
  			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

  				var binding = bindings[ i ];

  				if ( -- binding.useCount === 0 ) {

  					binding.restoreOriginalState();
  					this._takeBackBinding( binding );

  				}

  			}

  			this._takeBackAction( action );

  		}

  	},

  	// Memory manager

  	_initMemoryManager: function () {

  		this._actions = []; // 'nActiveActions' followed by inactive ones
  		this._nActiveActions = 0;

  		this._actionsByClip = {};
  		// inside:
  		// {
  		// 	knownActions: Array< AnimationAction > - used as prototypes
  		// 	actionByRoot: AnimationAction - lookup
  		// }


  		this._bindings = []; // 'nActiveBindings' followed by inactive ones
  		this._nActiveBindings = 0;

  		this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


  		this._controlInterpolants = []; // same game as above
  		this._nActiveControlInterpolants = 0;

  		var scope = this;

  		this.stats = {

  			actions: {
  				get total() {

  					return scope._actions.length;

  				},
  				get inUse() {

  					return scope._nActiveActions;

  				}
  			},
  			bindings: {
  				get total() {

  					return scope._bindings.length;

  				},
  				get inUse() {

  					return scope._nActiveBindings;

  				}
  			},
  			controlInterpolants: {
  				get total() {

  					return scope._controlInterpolants.length;

  				},
  				get inUse() {

  					return scope._nActiveControlInterpolants;

  				}
  			}

  		};

  	},

  	// Memory management for AnimationAction objects

  	_isActiveAction: function ( action ) {

  		var index = action._cacheIndex;
  		return index !== null && index < this._nActiveActions;

  	},

  	_addInactiveAction: function ( action, clipUuid, rootUuid ) {

  		var actions = this._actions,
  			actionsByClip = this._actionsByClip,
  			actionsForClip = actionsByClip[ clipUuid ];

  		if ( actionsForClip === undefined ) {

  			actionsForClip = {

  				knownActions: [ action ],
  				actionByRoot: {}

  			};

  			action._byClipCacheIndex = 0;

  			actionsByClip[ clipUuid ] = actionsForClip;

  		} else {

  			var knownActions = actionsForClip.knownActions;

  			action._byClipCacheIndex = knownActions.length;
  			knownActions.push( action );

  		}

  		action._cacheIndex = actions.length;
  		actions.push( action );

  		actionsForClip.actionByRoot[ rootUuid ] = action;

  	},

  	_removeInactiveAction: function ( action ) {

  		var actions = this._actions,
  			lastInactiveAction = actions[ actions.length - 1 ],
  			cacheIndex = action._cacheIndex;

  		lastInactiveAction._cacheIndex = cacheIndex;
  		actions[ cacheIndex ] = lastInactiveAction;
  		actions.pop();

  		action._cacheIndex = null;


  		var clipUuid = action._clip.uuid,
  			actionsByClip = this._actionsByClip,
  			actionsForClip = actionsByClip[ clipUuid ],
  			knownActionsForClip = actionsForClip.knownActions,

  			lastKnownAction =
  				knownActionsForClip[ knownActionsForClip.length - 1 ],

  			byClipCacheIndex = action._byClipCacheIndex;

  		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
  		knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
  		knownActionsForClip.pop();

  		action._byClipCacheIndex = null;


  		var actionByRoot = actionsForClip.actionByRoot,
  			rootUuid = ( action._localRoot || this._root ).uuid;

  		delete actionByRoot[ rootUuid ];

  		if ( knownActionsForClip.length === 0 ) {

  			delete actionsByClip[ clipUuid ];

  		}

  		this._removeInactiveBindingsForAction( action );

  	},

  	_removeInactiveBindingsForAction: function ( action ) {

  		var bindings = action._propertyBindings;
  		for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

  			var binding = bindings[ i ];

  			if ( -- binding.referenceCount === 0 ) {

  				this._removeInactiveBinding( binding );

  			}

  		}

  	},

  	_lendAction: function ( action ) {

  		// [ active actions |  inactive actions  ]
  		// [  active actions >| inactive actions ]
  		//                 s        a
  		//                  <-swap->
  		//                 a        s

  		var actions = this._actions,
  			prevIndex = action._cacheIndex,

  			lastActiveIndex = this._nActiveActions ++,

  			firstInactiveAction = actions[ lastActiveIndex ];

  		action._cacheIndex = lastActiveIndex;
  		actions[ lastActiveIndex ] = action;

  		firstInactiveAction._cacheIndex = prevIndex;
  		actions[ prevIndex ] = firstInactiveAction;

  	},

  	_takeBackAction: function ( action ) {

  		// [  active actions  | inactive actions ]
  		// [ active actions |< inactive actions  ]
  		//        a        s
  		//         <-swap->
  		//        s        a

  		var actions = this._actions,
  			prevIndex = action._cacheIndex,

  			firstInactiveIndex = -- this._nActiveActions,

  			lastActiveAction = actions[ firstInactiveIndex ];

  		action._cacheIndex = firstInactiveIndex;
  		actions[ firstInactiveIndex ] = action;

  		lastActiveAction._cacheIndex = prevIndex;
  		actions[ prevIndex ] = lastActiveAction;

  	},

  	// Memory management for PropertyMixer objects

  	_addInactiveBinding: function ( binding, rootUuid, trackName ) {

  		var bindingsByRoot = this._bindingsByRootAndName,
  			bindingByName = bindingsByRoot[ rootUuid ],

  			bindings = this._bindings;

  		if ( bindingByName === undefined ) {

  			bindingByName = {};
  			bindingsByRoot[ rootUuid ] = bindingByName;

  		}

  		bindingByName[ trackName ] = binding;

  		binding._cacheIndex = bindings.length;
  		bindings.push( binding );

  	},

  	_removeInactiveBinding: function ( binding ) {

  		var bindings = this._bindings,
  			propBinding = binding.binding,
  			rootUuid = propBinding.rootNode.uuid,
  			trackName = propBinding.path,
  			bindingsByRoot = this._bindingsByRootAndName,
  			bindingByName = bindingsByRoot[ rootUuid ],

  			lastInactiveBinding = bindings[ bindings.length - 1 ],
  			cacheIndex = binding._cacheIndex;

  		lastInactiveBinding._cacheIndex = cacheIndex;
  		bindings[ cacheIndex ] = lastInactiveBinding;
  		bindings.pop();

  		delete bindingByName[ trackName ];

  		if ( Object.keys( bindingByName ).length === 0 ) {

  			delete bindingsByRoot[ rootUuid ];

  		}

  	},

  	_lendBinding: function ( binding ) {

  		var bindings = this._bindings,
  			prevIndex = binding._cacheIndex,

  			lastActiveIndex = this._nActiveBindings ++,

  			firstInactiveBinding = bindings[ lastActiveIndex ];

  		binding._cacheIndex = lastActiveIndex;
  		bindings[ lastActiveIndex ] = binding;

  		firstInactiveBinding._cacheIndex = prevIndex;
  		bindings[ prevIndex ] = firstInactiveBinding;

  	},

  	_takeBackBinding: function ( binding ) {

  		var bindings = this._bindings,
  			prevIndex = binding._cacheIndex,

  			firstInactiveIndex = -- this._nActiveBindings,

  			lastActiveBinding = bindings[ firstInactiveIndex ];

  		binding._cacheIndex = firstInactiveIndex;
  		bindings[ firstInactiveIndex ] = binding;

  		lastActiveBinding._cacheIndex = prevIndex;
  		bindings[ prevIndex ] = lastActiveBinding;

  	},


  	// Memory management of Interpolants for weight and time scale

  	_lendControlInterpolant: function () {

  		var interpolants = this._controlInterpolants,
  			lastActiveIndex = this._nActiveControlInterpolants ++,
  			interpolant = interpolants[ lastActiveIndex ];

  		if ( interpolant === undefined ) {

  			interpolant = new LinearInterpolant(
  				new Float32Array( 2 ), new Float32Array( 2 ),
  				1, this._controlInterpolantsResultBuffer );

  			interpolant.__cacheIndex = lastActiveIndex;
  			interpolants[ lastActiveIndex ] = interpolant;

  		}

  		return interpolant;

  	},

  	_takeBackControlInterpolant: function ( interpolant ) {

  		var interpolants = this._controlInterpolants,
  			prevIndex = interpolant.__cacheIndex,

  			firstInactiveIndex = -- this._nActiveControlInterpolants,

  			lastActiveInterpolant = interpolants[ firstInactiveIndex ];

  		interpolant.__cacheIndex = firstInactiveIndex;
  		interpolants[ firstInactiveIndex ] = interpolant;

  		lastActiveInterpolant.__cacheIndex = prevIndex;
  		interpolants[ prevIndex ] = lastActiveInterpolant;

  	},

  	_controlInterpolantsResultBuffer: new Float32Array( 1 ),

  	// return an action for a clip optionally using a custom root target
  	// object (this method allocates a lot of dynamic memory in case a
  	// previously unknown clip/root combination is specified)
  	clipAction: function ( clip, optionalRoot ) {

  		var root = optionalRoot || this._root,
  			rootUuid = root.uuid,

  			clipObject = typeof clip === 'string' ?
  				AnimationClip.findByName( root, clip ) : clip,

  			clipUuid = clipObject !== null ? clipObject.uuid : clip,

  			actionsForClip = this._actionsByClip[ clipUuid ],
  			prototypeAction = null;

  		if ( actionsForClip !== undefined ) {

  			var existingAction =
  					actionsForClip.actionByRoot[ rootUuid ];

  			if ( existingAction !== undefined ) {

  				return existingAction;

  			}

  			// we know the clip, so we don't have to parse all
  			// the bindings again but can just copy
  			prototypeAction = actionsForClip.knownActions[ 0 ];

  			// also, take the clip from the prototype action
  			if ( clipObject === null )
  				clipObject = prototypeAction._clip;

  		}

  		// clip must be known when specified via string
  		if ( clipObject === null ) return null;

  		// allocate all resources required to run it
  		var newAction = new AnimationAction( this, clipObject, optionalRoot );

  		this._bindAction( newAction, prototypeAction );

  		// and make the action known to the memory manager
  		this._addInactiveAction( newAction, clipUuid, rootUuid );

  		return newAction;

  	},

  	// get an existing action
  	existingAction: function ( clip, optionalRoot ) {

  		var root = optionalRoot || this._root,
  			rootUuid = root.uuid,

  			clipObject = typeof clip === 'string' ?
  				AnimationClip.findByName( root, clip ) : clip,

  			clipUuid = clipObject ? clipObject.uuid : clip,

  			actionsForClip = this._actionsByClip[ clipUuid ];

  		if ( actionsForClip !== undefined ) {

  			return actionsForClip.actionByRoot[ rootUuid ] || null;

  		}

  		return null;

  	},

  	// deactivates all previously scheduled actions
  	stopAllAction: function () {

  		var actions = this._actions,
  			nActions = this._nActiveActions,
  			bindings = this._bindings,
  			nBindings = this._nActiveBindings;

  		this._nActiveActions = 0;
  		this._nActiveBindings = 0;

  		for ( var i = 0; i !== nActions; ++ i ) {

  			actions[ i ].reset();

  		}

  		for ( var i = 0; i !== nBindings; ++ i ) {

  			bindings[ i ].useCount = 0;

  		}

  		return this;

  	},

  	// advance the time and update apply the animation
  	update: function ( deltaTime ) {

  		deltaTime *= this.timeScale;

  		var actions = this._actions,
  			nActions = this._nActiveActions,

  			time = this.time += deltaTime,
  			timeDirection = Math.sign( deltaTime ),

  			accuIndex = this._accuIndex ^= 1;

  		// run active actions

  		for ( var i = 0; i !== nActions; ++ i ) {

  			var action = actions[ i ];

  			action._update( time, deltaTime, timeDirection, accuIndex );

  		}

  		// update scene graph

  		var bindings = this._bindings,
  			nBindings = this._nActiveBindings;

  		for ( var i = 0; i !== nBindings; ++ i ) {

  			bindings[ i ].apply( accuIndex );

  		}

  		return this;

  	},

  	// Allows you to seek to a specific time in an animation.
  	setTime: function ( timeInSeconds ) {

  		this.time = 0; // Zero out time attribute for AnimationMixer object;
  		for ( var i = 0; i < this._actions.length; i ++ ) {

  			this._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.

  		}

  		return this.update( timeInSeconds ); // Update used to set exact time. Returns "this" AnimationMixer object.

  	},

  	// return this mixer's root target object
  	getRoot: function () {

  		return this._root;

  	},

  	// free all resources specific to a particular clip
  	uncacheClip: function ( clip ) {

  		var actions = this._actions,
  			clipUuid = clip.uuid,
  			actionsByClip = this._actionsByClip,
  			actionsForClip = actionsByClip[ clipUuid ];

  		if ( actionsForClip !== undefined ) {

  			// note: just calling _removeInactiveAction would mess up the
  			// iteration state and also require updating the state we can
  			// just throw away

  			var actionsToRemove = actionsForClip.knownActions;

  			for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

  				var action = actionsToRemove[ i ];

  				this._deactivateAction( action );

  				var cacheIndex = action._cacheIndex,
  					lastInactiveAction = actions[ actions.length - 1 ];

  				action._cacheIndex = null;
  				action._byClipCacheIndex = null;

  				lastInactiveAction._cacheIndex = cacheIndex;
  				actions[ cacheIndex ] = lastInactiveAction;
  				actions.pop();

  				this._removeInactiveBindingsForAction( action );

  			}

  			delete actionsByClip[ clipUuid ];

  		}

  	},

  	// free all resources specific to a particular root target object
  	uncacheRoot: function ( root ) {

  		var rootUuid = root.uuid,
  			actionsByClip = this._actionsByClip;

  		for ( var clipUuid in actionsByClip ) {

  			var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
  				action = actionByRoot[ rootUuid ];

  			if ( action !== undefined ) {

  				this._deactivateAction( action );
  				this._removeInactiveAction( action );

  			}

  		}

  		var bindingsByRoot = this._bindingsByRootAndName,
  			bindingByName = bindingsByRoot[ rootUuid ];

  		if ( bindingByName !== undefined ) {

  			for ( var trackName in bindingByName ) {

  				var binding = bindingByName[ trackName ];
  				binding.restoreOriginalState();
  				this._removeInactiveBinding( binding );

  			}

  		}

  	},

  	// remove a targeted clip from the cache
  	uncacheAction: function ( clip, optionalRoot ) {

  		var action = this.existingAction( clip, optionalRoot );

  		if ( action !== null ) {

  			this._deactivateAction( action );
  			this._removeInactiveAction( action );

  		}

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function Uniform( value ) {

  	if ( typeof value === 'string' ) {

  		console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
  		value = arguments[ 1 ];

  	}

  	this.value = value;

  }

  Uniform.prototype.clone = function () {

  	return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

  };

  /**
   * @author benaadams / https://twitter.com/ben_a_adams
   */

  function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

  	InterleavedBuffer.call( this, array, stride );

  	this.meshPerAttribute = meshPerAttribute || 1;

  }

  InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {

  	constructor: InstancedInterleavedBuffer,

  	isInstancedInterleavedBuffer: true,

  	copy: function ( source ) {

  		InterleavedBuffer.prototype.copy.call( this, source );

  		this.meshPerAttribute = source.meshPerAttribute;

  		return this;

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author bhouston / http://clara.io/
   * @author stephomi / http://stephaneginier.com/
   */

  function Raycaster( origin, direction, near, far ) {

  	this.ray = new Ray( origin, direction );
  	// direction is assumed to be normalized (for accurate distance calculations)

  	this.near = near || 0;
  	this.far = far || Infinity;
  	this.camera = null;
  	this.layers = new Layers();

  	this.params = {
  		Mesh: {},
  		Line: { threshold: 1 },
  		LOD: {},
  		Points: { threshold: 1 },
  		Sprite: {}
  	};

  	Object.defineProperties( this.params, {
  		PointCloud: {
  			get: function () {

  				console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
  				return this.Points;

  			}
  		}
  	} );

  }

  function ascSort( a, b ) {

  	return a.distance - b.distance;

  }

  function intersectObject( object, raycaster, intersects, recursive ) {

  	if ( object.layers.test( raycaster.layers ) ) {

  		object.raycast( raycaster, intersects );

  	}

  	if ( recursive === true ) {

  		var children = object.children;

  		for ( var i = 0, l = children.length; i < l; i ++ ) {

  			intersectObject( children[ i ], raycaster, intersects, true );

  		}

  	}

  }

  Object.assign( Raycaster.prototype, {

  	set: function ( origin, direction ) {

  		// direction is assumed to be normalized (for accurate distance calculations)

  		this.ray.set( origin, direction );

  	},

  	setFromCamera: function ( coords, camera ) {

  		if ( ( camera && camera.isPerspectiveCamera ) ) {

  			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
  			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
  			this.camera = camera;

  		} else if ( ( camera && camera.isOrthographicCamera ) ) {

  			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
  			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
  			this.camera = camera;

  		} else {

  			console.error( 'THREE.Raycaster: Unsupported camera type.' );

  		}

  	},

  	intersectObject: function ( object, recursive, optionalTarget ) {

  		var intersects = optionalTarget || [];

  		intersectObject( object, this, intersects, recursive );

  		intersects.sort( ascSort );

  		return intersects;

  	},

  	intersectObjects: function ( objects, recursive, optionalTarget ) {

  		var intersects = optionalTarget || [];

  		if ( Array.isArray( objects ) === false ) {

  			console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
  			return intersects;

  		}

  		for ( var i = 0, l = objects.length; i < l; i ++ ) {

  			intersectObject( objects[ i ], this, intersects, recursive );

  		}

  		intersects.sort( ascSort );

  		return intersects;

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   * @author WestLangley / http://github.com/WestLangley
   *
   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
   *
   * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
   * The azimuthal angle (theta) is measured from the positive z-axis.
   */

  function Spherical( radius, phi, theta ) {

  	this.radius = ( radius !== undefined ) ? radius : 1.0;
  	this.phi = ( phi !== undefined ) ? phi : 0; // polar angle
  	this.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle

  	return this;

  }

  Object.assign( Spherical.prototype, {

  	set: function ( radius, phi, theta ) {

  		this.radius = radius;
  		this.phi = phi;
  		this.theta = theta;

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( other ) {

  		this.radius = other.radius;
  		this.phi = other.phi;
  		this.theta = other.theta;

  		return this;

  	},

  	// restrict phi to be betwee EPS and PI-EPS
  	makeSafe: function () {

  		var EPS = 0.000001;
  		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

  		return this;

  	},

  	setFromVector3: function ( v ) {

  		return this.setFromCartesianCoords( v.x, v.y, v.z );

  	},

  	setFromCartesianCoords: function ( x, y, z ) {

  		this.radius = Math.sqrt( x * x + y * y + z * z );

  		if ( this.radius === 0 ) {

  			this.theta = 0;
  			this.phi = 0;

  		} else {

  			this.theta = Math.atan2( x, z );
  			this.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );

  		}

  		return this;

  	}

  } );

  /**
   * @author Mugen87 / https://github.com/Mugen87
   *
   * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
   *
   */

  function Cylindrical( radius, theta, y ) {

  	this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
  	this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
  	this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane

  	return this;

  }

  Object.assign( Cylindrical.prototype, {

  	set: function ( radius, theta, y ) {

  		this.radius = radius;
  		this.theta = theta;
  		this.y = y;

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( other ) {

  		this.radius = other.radius;
  		this.theta = other.theta;
  		this.y = other.y;

  		return this;

  	},

  	setFromVector3: function ( v ) {

  		return this.setFromCartesianCoords( v.x, v.y, v.z );

  	},

  	setFromCartesianCoords: function ( x, y, z ) {

  		this.radius = Math.sqrt( x * x + z * z );
  		this.theta = Math.atan2( x, z );
  		this.y = y;

  		return this;

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   */

  var _vector$7 = new Vector2();

  function Box2( min, max ) {

  	this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
  	this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

  }

  Object.assign( Box2.prototype, {

  	set: function ( min, max ) {

  		this.min.copy( min );
  		this.max.copy( max );

  		return this;

  	},

  	setFromPoints: function ( points ) {

  		this.makeEmpty();

  		for ( var i = 0, il = points.length; i < il; i ++ ) {

  			this.expandByPoint( points[ i ] );

  		}

  		return this;

  	},

  	setFromCenterAndSize: function ( center, size ) {

  		var halfSize = _vector$7.copy( size ).multiplyScalar( 0.5 );
  		this.min.copy( center ).sub( halfSize );
  		this.max.copy( center ).add( halfSize );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( box ) {

  		this.min.copy( box.min );
  		this.max.copy( box.max );

  		return this;

  	},

  	makeEmpty: function () {

  		this.min.x = this.min.y = + Infinity;
  		this.max.x = this.max.y = - Infinity;

  		return this;

  	},

  	isEmpty: function () {

  		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

  		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

  	},

  	getCenter: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box2: .getCenter() target is now required' );
  			target = new Vector2();

  		}

  		return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

  	},

  	getSize: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box2: .getSize() target is now required' );
  			target = new Vector2();

  		}

  		return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );

  	},

  	expandByPoint: function ( point ) {

  		this.min.min( point );
  		this.max.max( point );

  		return this;

  	},

  	expandByVector: function ( vector ) {

  		this.min.sub( vector );
  		this.max.add( vector );

  		return this;

  	},

  	expandByScalar: function ( scalar ) {

  		this.min.addScalar( - scalar );
  		this.max.addScalar( scalar );

  		return this;

  	},

  	containsPoint: function ( point ) {

  		return point.x < this.min.x || point.x > this.max.x ||
  			point.y < this.min.y || point.y > this.max.y ? false : true;

  	},

  	containsBox: function ( box ) {

  		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
  			this.min.y <= box.min.y && box.max.y <= this.max.y;

  	},

  	getParameter: function ( point, target ) {

  		// This can potentially have a divide by zero if the box
  		// has a size dimension of 0.

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box2: .getParameter() target is now required' );
  			target = new Vector2();

  		}

  		return target.set(
  			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
  			( point.y - this.min.y ) / ( this.max.y - this.min.y )
  		);

  	},

  	intersectsBox: function ( box ) {

  		// using 4 splitting planes to rule out intersections

  		return box.max.x < this.min.x || box.min.x > this.max.x ||
  			box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

  	},

  	clampPoint: function ( point, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Box2: .clampPoint() target is now required' );
  			target = new Vector2();

  		}

  		return target.copy( point ).clamp( this.min, this.max );

  	},

  	distanceToPoint: function ( point ) {

  		var clampedPoint = _vector$7.copy( point ).clamp( this.min, this.max );
  		return clampedPoint.sub( point ).length();

  	},

  	intersect: function ( box ) {

  		this.min.max( box.min );
  		this.max.min( box.max );

  		return this;

  	},

  	union: function ( box ) {

  		this.min.min( box.min );
  		this.max.max( box.max );

  		return this;

  	},

  	translate: function ( offset ) {

  		this.min.add( offset );
  		this.max.add( offset );

  		return this;

  	},

  	equals: function ( box ) {

  		return box.min.equals( this.min ) && box.max.equals( this.max );

  	}

  } );

  /**
   * @author bhouston / http://clara.io
   */

  var _startP = new Vector3();
  var _startEnd = new Vector3();

  function Line3( start, end ) {

  	this.start = ( start !== undefined ) ? start : new Vector3();
  	this.end = ( end !== undefined ) ? end : new Vector3();

  }

  Object.assign( Line3.prototype, {

  	set: function ( start, end ) {

  		this.start.copy( start );
  		this.end.copy( end );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	},

  	copy: function ( line ) {

  		this.start.copy( line.start );
  		this.end.copy( line.end );

  		return this;

  	},

  	getCenter: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Line3: .getCenter() target is now required' );
  			target = new Vector3();

  		}

  		return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

  	},

  	delta: function ( target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Line3: .delta() target is now required' );
  			target = new Vector3();

  		}

  		return target.subVectors( this.end, this.start );

  	},

  	distanceSq: function () {

  		return this.start.distanceToSquared( this.end );

  	},

  	distance: function () {

  		return this.start.distanceTo( this.end );

  	},

  	at: function ( t, target ) {

  		if ( target === undefined ) {

  			console.warn( 'THREE.Line3: .at() target is now required' );
  			target = new Vector3();

  		}

  		return this.delta( target ).multiplyScalar( t ).add( this.start );

  	},

  	closestPointToPointParameter: function ( point, clampToLine ) {

  		_startP.subVectors( point, this.start );
  		_startEnd.subVectors( this.end, this.start );

  		var startEnd2 = _startEnd.dot( _startEnd );
  		var startEnd_startP = _startEnd.dot( _startP );

  		var t = startEnd_startP / startEnd2;

  		if ( clampToLine ) {

  			t = MathUtils.clamp( t, 0, 1 );

  		}

  		return t;

  	},

  	closestPointToPoint: function ( point, clampToLine, target ) {

  		var t = this.closestPointToPointParameter( point, clampToLine );

  		if ( target === undefined ) {

  			console.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );
  			target = new Vector3();

  		}

  		return this.delta( target ).multiplyScalar( t ).add( this.start );

  	},

  	applyMatrix4: function ( matrix ) {

  		this.start.applyMatrix4( matrix );
  		this.end.applyMatrix4( matrix );

  		return this;

  	},

  	equals: function ( line ) {

  		return line.start.equals( this.start ) && line.end.equals( this.end );

  	}

  } );

  /**
   * @author alteredq / http://alteredqualia.com/
   */

  function ImmediateRenderObject( material ) {

  	Object3D.call( this );

  	this.material = material;
  	this.render = function ( /* renderCallback */ ) {};

  }

  ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
  ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

  ImmediateRenderObject.prototype.isImmediateRenderObject = true;

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  var _vector$8 = new Vector3();

  function SpotLightHelper( light, color ) {

  	Object3D.call( this );

  	this.light = light;
  	this.light.updateMatrixWorld();

  	this.matrix = light.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.color = color;

  	var geometry = new BufferGeometry();

  	var positions = [
  		0, 0, 0, 	0, 0, 1,
  		0, 0, 0, 	1, 0, 1,
  		0, 0, 0,	- 1, 0, 1,
  		0, 0, 0, 	0, 1, 1,
  		0, 0, 0, 	0, - 1, 1
  	];

  	for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

  		var p1 = ( i / l ) * Math.PI * 2;
  		var p2 = ( j / l ) * Math.PI * 2;

  		positions.push(
  			Math.cos( p1 ), Math.sin( p1 ), 1,
  			Math.cos( p2 ), Math.sin( p2 ), 1
  		);

  	}

  	geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

  	var material = new LineBasicMaterial( { fog: false, toneMapped: false } );

  	this.cone = new LineSegments( geometry, material );
  	this.add( this.cone );

  	this.update();

  }

  SpotLightHelper.prototype = Object.create( Object3D.prototype );
  SpotLightHelper.prototype.constructor = SpotLightHelper;

  SpotLightHelper.prototype.dispose = function () {

  	this.cone.geometry.dispose();
  	this.cone.material.dispose();

  };

  SpotLightHelper.prototype.update = function () {

  	this.light.updateMatrixWorld();

  	var coneLength = this.light.distance ? this.light.distance : 1000;
  	var coneWidth = coneLength * Math.tan( this.light.angle );

  	this.cone.scale.set( coneWidth, coneWidth, coneLength );

  	_vector$8.setFromMatrixPosition( this.light.target.matrixWorld );

  	this.cone.lookAt( _vector$8 );

  	if ( this.color !== undefined ) {

  		this.cone.material.color.set( this.color );

  	} else {

  		this.cone.material.color.copy( this.light.color );

  	}

  };

  /**
   * @author Sean Griffin / http://twitter.com/sgrif
   * @author Michael Guerrero / http://realitymeltdown.com
   * @author mrdoob / http://mrdoob.com/
   * @author ikerr / http://verold.com
   * @author Mugen87 / https://github.com/Mugen87
   */

  var _vector$9 = new Vector3();
  var _boneMatrix = new Matrix4();
  var _matrixWorldInv = new Matrix4();

  function getBoneList( object ) {

  	var boneList = [];

  	if ( object && object.isBone ) {

  		boneList.push( object );

  	}

  	for ( var i = 0; i < object.children.length; i ++ ) {

  		boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

  	}

  	return boneList;

  }

  function SkeletonHelper( object ) {

  	var bones = getBoneList( object );

  	var geometry = new BufferGeometry();

  	var vertices = [];
  	var colors = [];

  	var color1 = new Color( 0, 0, 1 );
  	var color2 = new Color( 0, 1, 0 );

  	for ( var i = 0; i < bones.length; i ++ ) {

  		var bone = bones[ i ];

  		if ( bone.parent && bone.parent.isBone ) {

  			vertices.push( 0, 0, 0 );
  			vertices.push( 0, 0, 0 );
  			colors.push( color1.r, color1.g, color1.b );
  			colors.push( color2.r, color2.g, color2.b );

  		}

  	}

  	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	var material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );

  	LineSegments.call( this, geometry, material );

  	this.root = object;
  	this.bones = bones;

  	this.matrix = object.matrixWorld;
  	this.matrixAutoUpdate = false;

  }

  SkeletonHelper.prototype = Object.create( LineSegments.prototype );
  SkeletonHelper.prototype.constructor = SkeletonHelper;

  SkeletonHelper.prototype.isSkeletonHelper = true;

  SkeletonHelper.prototype.updateMatrixWorld = function ( force ) {

  	var bones = this.bones;

  	var geometry = this.geometry;
  	var position = geometry.getAttribute( 'position' );

  	_matrixWorldInv.getInverse( this.root.matrixWorld );

  	for ( var i = 0, j = 0; i < bones.length; i ++ ) {

  		var bone = bones[ i ];

  		if ( bone.parent && bone.parent.isBone ) {

  			_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );
  			_vector$9.setFromMatrixPosition( _boneMatrix );
  			position.setXYZ( j, _vector$9.x, _vector$9.y, _vector$9.z );

  			_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );
  			_vector$9.setFromMatrixPosition( _boneMatrix );
  			position.setXYZ( j + 1, _vector$9.x, _vector$9.y, _vector$9.z );

  			j += 2;

  		}

  	}

  	geometry.getAttribute( 'position' ).needsUpdate = true;

  	Object3D.prototype.updateMatrixWorld.call( this, force );

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   */

  function PointLightHelper( light, sphereSize, color ) {

  	this.light = light;
  	this.light.updateMatrixWorld();

  	this.color = color;

  	var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
  	var material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );

  	Mesh.call( this, geometry, material );

  	this.matrix = this.light.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.update();


  	/*
  	var distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
  	var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

  	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
  	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

  	var d = light.distance;

  	if ( d === 0.0 ) {

  		this.lightDistance.visible = false;

  	} else {

  		this.lightDistance.scale.set( d, d, d );

  	}

  	this.add( this.lightDistance );
  	*/

  }

  PointLightHelper.prototype = Object.create( Mesh.prototype );
  PointLightHelper.prototype.constructor = PointLightHelper;

  PointLightHelper.prototype.dispose = function () {

  	this.geometry.dispose();
  	this.material.dispose();

  };

  PointLightHelper.prototype.update = function () {

  	if ( this.color !== undefined ) {

  		this.material.color.set( this.color );

  	} else {

  		this.material.color.copy( this.light.color );

  	}

  	/*
  	var d = this.light.distance;

  	if ( d === 0.0 ) {

  		this.lightDistance.visible = false;

  	} else {

  		this.lightDistance.visible = true;
  		this.lightDistance.scale.set( d, d, d );

  	}
  	*/

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / https://github.com/Mugen87
   */

  var _vector$a = new Vector3();
  var _color1 = new Color();
  var _color2 = new Color();

  function HemisphereLightHelper( light, size, color ) {

  	Object3D.call( this );

  	this.light = light;
  	this.light.updateMatrixWorld();

  	this.matrix = light.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.color = color;

  	var geometry = new OctahedronBufferGeometry( size );
  	geometry.rotateY( Math.PI * 0.5 );

  	this.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );
  	if ( this.color === undefined ) this.material.vertexColors = true;

  	var position = geometry.getAttribute( 'position' );
  	var colors = new Float32Array( position.count * 3 );

  	geometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );

  	this.add( new Mesh( geometry, this.material ) );

  	this.update();

  }

  HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
  HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

  HemisphereLightHelper.prototype.dispose = function () {

  	this.children[ 0 ].geometry.dispose();
  	this.children[ 0 ].material.dispose();

  };

  HemisphereLightHelper.prototype.update = function () {

  	var mesh = this.children[ 0 ];

  	if ( this.color !== undefined ) {

  		this.material.color.set( this.color );

  	} else {

  		var colors = mesh.geometry.getAttribute( 'color' );

  		_color1.copy( this.light.color );
  		_color2.copy( this.light.groundColor );

  		for ( var i = 0, l = colors.count; i < l; i ++ ) {

  			var color = ( i < ( l / 2 ) ) ? _color1 : _color2;

  			colors.setXYZ( i, color.r, color.g, color.b );

  		}

  		colors.needsUpdate = true;

  	}

  	mesh.lookAt( _vector$a.setFromMatrixPosition( this.light.matrixWorld ).negate() );

  };

  /**
   * @author mrdoob / http://mrdoob.com/
   */

  function GridHelper( size, divisions, color1, color2 ) {

  	size = size || 10;
  	divisions = divisions || 10;
  	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
  	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

  	var center = divisions / 2;
  	var step = size / divisions;
  	var halfSize = size / 2;

  	var vertices = [], colors = [];

  	for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {

  		vertices.push( - halfSize, 0, k, halfSize, 0, k );
  		vertices.push( k, 0, - halfSize, k, 0, halfSize );

  		var color = i === center ? color1 : color2;

  		color.toArray( colors, j ); j += 3;
  		color.toArray( colors, j ); j += 3;
  		color.toArray( colors, j ); j += 3;
  		color.toArray( colors, j ); j += 3;

  	}

  	var geometry = new BufferGeometry();
  	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	var material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );

  	LineSegments.call( this, geometry, material );

  }

  GridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {

  	constructor: GridHelper,

  	copy: function ( source ) {

  		LineSegments.prototype.copy.call( this, source );

  		this.geometry.copy( source.geometry );
  		this.material.copy( source.material );

  		return this;

  	},

  	clone: function () {

  		return new this.constructor().copy( this );

  	}

  } );

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / http://github.com/Mugen87
   * @author Hectate / http://www.github.com/Hectate
   */

  function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {

  	radius = radius || 10;
  	radials = radials || 16;
  	circles = circles || 8;
  	divisions = divisions || 64;
  	color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
  	color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

  	var vertices = [];
  	var colors = [];

  	var x, z;
  	var v, i, j, r, color;

  	// create the radials

  	for ( i = 0; i <= radials; i ++ ) {

  		v = ( i / radials ) * ( Math.PI * 2 );

  		x = Math.sin( v ) * radius;
  		z = Math.cos( v ) * radius;

  		vertices.push( 0, 0, 0 );
  		vertices.push( x, 0, z );

  		color = ( i & 1 ) ? color1 : color2;

  		colors.push( color.r, color.g, color.b );
  		colors.push( color.r, color.g, color.b );

  	}

  	// create the circles

  	for ( i = 0; i <= circles; i ++ ) {

  		color = ( i & 1 ) ? color1 : color2;

  		r = radius - ( radius / circles * i );

  		for ( j = 0; j < divisions; j ++ ) {

  			// first vertex

  			v = ( j / divisions ) * ( Math.PI * 2 );

  			x = Math.sin( v ) * r;
  			z = Math.cos( v ) * r;

  			vertices.push( x, 0, z );
  			colors.push( color.r, color.g, color.b );

  			// second vertex

  			v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );

  			x = Math.sin( v ) * r;
  			z = Math.cos( v ) * r;

  			vertices.push( x, 0, z );
  			colors.push( color.r, color.g, color.b );

  		}

  	}

  	var geometry = new BufferGeometry();
  	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	var material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );

  	LineSegments.call( this, geometry, material );

  }

  PolarGridHelper.prototype = Object.create( LineSegments.prototype );
  PolarGridHelper.prototype.constructor = PolarGridHelper;

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author mrdoob / http://mrdoob.com/
   * @author WestLangley / http://github.com/WestLangley
   */

  var _v1$5 = new Vector3();
  var _v2$3 = new Vector3();
  var _v3$1 = new Vector3();

  function DirectionalLightHelper( light, size, color ) {

  	Object3D.call( this );

  	this.light = light;
  	this.light.updateMatrixWorld();

  	this.matrix = light.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.color = color;

  	if ( size === undefined ) size = 1;

  	var geometry = new BufferGeometry();
  	geometry.setAttribute( 'position', new Float32BufferAttribute( [
  		- size, size, 0,
  		size, size, 0,
  		size, - size, 0,
  		- size, - size, 0,
  		- size, size, 0
  	], 3 ) );

  	var material = new LineBasicMaterial( { fog: false, toneMapped: false } );

  	this.lightPlane = new Line( geometry, material );
  	this.add( this.lightPlane );

  	geometry = new BufferGeometry();
  	geometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

  	this.targetLine = new Line( geometry, material );
  	this.add( this.targetLine );

  	this.update();

  }

  DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
  DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

  DirectionalLightHelper.prototype.dispose = function () {

  	this.lightPlane.geometry.dispose();
  	this.lightPlane.material.dispose();
  	this.targetLine.geometry.dispose();
  	this.targetLine.material.dispose();

  };

  DirectionalLightHelper.prototype.update = function () {

  	_v1$5.setFromMatrixPosition( this.light.matrixWorld );
  	_v2$3.setFromMatrixPosition( this.light.target.matrixWorld );
  	_v3$1.subVectors( _v2$3, _v1$5 );

  	this.lightPlane.lookAt( _v2$3 );

  	if ( this.color !== undefined ) {

  		this.lightPlane.material.color.set( this.color );
  		this.targetLine.material.color.set( this.color );

  	} else {

  		this.lightPlane.material.color.copy( this.light.color );
  		this.targetLine.material.color.copy( this.light.color );

  	}

  	this.targetLine.lookAt( _v2$3 );
  	this.targetLine.scale.z = _v3$1.length();

  };

  /**
   * @author alteredq / http://alteredqualia.com/
   * @author Mugen87 / https://github.com/Mugen87
   *
   *	- shows frustum, line of sight and up of the camera
   *	- suitable for fast updates
   * 	- based on frustum visualization in lightgl.js shadowmap example
   *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
   */

  var _vector$b = new Vector3();
  var _camera = new Camera();

  function CameraHelper( camera ) {

  	var geometry = new BufferGeometry();
  	var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );

  	var vertices = [];
  	var colors = [];

  	var pointMap = {};

  	// colors

  	var colorFrustum = new Color( 0xffaa00 );
  	var colorCone = new Color( 0xff0000 );
  	var colorUp = new Color( 0x00aaff );
  	var colorTarget = new Color( 0xffffff );
  	var colorCross = new Color( 0x333333 );

  	// near

  	addLine( 'n1', 'n2', colorFrustum );
  	addLine( 'n2', 'n4', colorFrustum );
  	addLine( 'n4', 'n3', colorFrustum );
  	addLine( 'n3', 'n1', colorFrustum );

  	// far

  	addLine( 'f1', 'f2', colorFrustum );
  	addLine( 'f2', 'f4', colorFrustum );
  	addLine( 'f4', 'f3', colorFrustum );
  	addLine( 'f3', 'f1', colorFrustum );

  	// sides

  	addLine( 'n1', 'f1', colorFrustum );
  	addLine( 'n2', 'f2', colorFrustum );
  	addLine( 'n3', 'f3', colorFrustum );
  	addLine( 'n4', 'f4', colorFrustum );

  	// cone

  	addLine( 'p', 'n1', colorCone );
  	addLine( 'p', 'n2', colorCone );
  	addLine( 'p', 'n3', colorCone );
  	addLine( 'p', 'n4', colorCone );

  	// up

  	addLine( 'u1', 'u2', colorUp );
  	addLine( 'u2', 'u3', colorUp );
  	addLine( 'u3', 'u1', colorUp );

  	// target

  	addLine( 'c', 't', colorTarget );
  	addLine( 'p', 'c', colorCross );

  	// cross

  	addLine( 'cn1', 'cn2', colorCross );
  	addLine( 'cn3', 'cn4', colorCross );

  	addLine( 'cf1', 'cf2', colorCross );
  	addLine( 'cf3', 'cf4', colorCross );

  	function addLine( a, b, color ) {

  		addPoint( a, color );
  		addPoint( b, color );

  	}

  	function addPoint( id, color ) {

  		vertices.push( 0, 0, 0 );
  		colors.push( color.r, color.g, color.b );

  		if ( pointMap[ id ] === undefined ) {

  			pointMap[ id ] = [];

  		}

  		pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

  	}

  	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	LineSegments.call( this, geometry, material );

  	this.camera = camera;
  	if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

  	this.matrix = camera.matrixWorld;
  	this.matrixAutoUpdate = false;

  	this.pointMap = pointMap;

  	this.update();

  }

  CameraHelper.prototype = Object.create( LineSegments.prototype );
  CameraHelper.prototype.constructor = CameraHelper;

  CameraHelper.prototype.update = function () {

  	var geometry = this.geometry;
  	var pointMap = this.pointMap;

  	var w = 1, h = 1;

  	// we need just camera projection matrix inverse
  	// world matrix must be identity

  	_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );

  	// center / target

  	setPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );
  	setPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );

  	// near

  	setPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );
  	setPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );
  	setPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );
  	setPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );

  	// far

  	setPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );
  	setPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );
  	setPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );
  	setPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );

  	// up

  	setPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );
  	setPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );
  	setPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );

  	// cross

  	setPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );
  	setPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );
  	setPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );
  	setPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );

  	setPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );
  	setPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );
  	setPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );
  	setPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );

  	geometry.getAttribute( 'position' ).needsUpdate = true;

  };

  function setPoint( point, pointMap, geometry, camera, x, y, z ) {

  	_vector$b.set( x, y, z ).unproject( camera );

  	var points = pointMap[ point ];

  	if ( points !== undefined ) {

  		var position = geometry.getAttribute( 'position' );

  		for ( var i = 0, l = points.length; i < l; i ++ ) {

  			position.setXYZ( points[ i ], _vector$b.x, _vector$b.y, _vector$b.z );

  		}

  	}

  }

  /**
   * @author mrdoob / http://mrdoob.com/
   * @author Mugen87 / http://github.com/Mugen87
   */

  var _box$3 = new Box3();

  function BoxHelper( object, color ) {

  	this.object = object;

  	if ( color === undefined ) color = 0xffff00;

  	var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
  	var positions = new Float32Array( 8 * 3 );

  	var geometry = new BufferGeometry();
  	geometry.setIndex( new BufferAttribute( indices, 1 ) );
  	geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );

  	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );

  	this.matrixAutoUpdate = false;

  	this.update();

  }

  BoxHelper.prototype = Object.create( LineSegments.prototype );
  BoxHelper.prototype.constructor = BoxHelper;

  BoxHelper.prototype.update = function ( object ) {

  	if ( object !== undefined ) {

  		console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );

  	}

  	if ( this.object !== undefined ) {

  		_box$3.setFromObject( this.object );

  	}

  	if ( _box$3.isEmpty() ) return;

  	var min = _box$3.min;
  	var max = _box$3.max;

  	/*
  	  5____4
  	1/___0/|
  	| 6__|_7
  	2/___3/

  	0: max.x, max.y, max.z
  	1: min.x, max.y, max.z
  	2: min.x, min.y, max.z
  	3: max.x, min.y, max.z
  	4: max.x, max.y, min.z
  	5: min.x, max.y, min.z
  	6: min.x, min.y, min.z
  	7: max.x, min.y, min.z
  	*/

  	var position = this.geometry.attributes.position;
  	var array = position.array;

  	array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
  	array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
  	array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
  	array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
  	array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
  	array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
  	array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
  	array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

  	position.needsUpdate = true;

  	this.geometry.computeBoundingSphere();


  };

  BoxHelper.prototype.setFromObject = function ( object ) {

  	this.object = object;
  	this.update();

  	return this;

  };

  BoxHelper.prototype.copy = function ( source ) {

  	LineSegments.prototype.copy.call( this, source );

  	this.object = source.object;

  	return this;

  };

  BoxHelper.prototype.clone = function () {

  	return new this.constructor().copy( this );

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   */

  function Box3Helper( box, color ) {

  	this.type = 'Box3Helper';

  	this.box = box;

  	color = color || 0xffff00;

  	var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );

  	var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];

  	var geometry = new BufferGeometry();

  	geometry.setIndex( new BufferAttribute( indices, 1 ) );

  	geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

  	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );

  	this.geometry.computeBoundingSphere();

  }

  Box3Helper.prototype = Object.create( LineSegments.prototype );
  Box3Helper.prototype.constructor = Box3Helper;

  Box3Helper.prototype.updateMatrixWorld = function ( force ) {

  	var box = this.box;

  	if ( box.isEmpty() ) return;

  	box.getCenter( this.position );

  	box.getSize( this.scale );

  	this.scale.multiplyScalar( 0.5 );

  	Object3D.prototype.updateMatrixWorld.call( this, force );

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   */

  function PlaneHelper( plane, size, hex ) {

  	this.type = 'PlaneHelper';

  	this.plane = plane;

  	this.size = ( size === undefined ) ? 1 : size;

  	var color = ( hex !== undefined ) ? hex : 0xffff00;

  	var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];

  	var geometry = new BufferGeometry();
  	geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
  	geometry.computeBoundingSphere();

  	Line.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );

  	//

  	var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];

  	var geometry2 = new BufferGeometry();
  	geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
  	geometry2.computeBoundingSphere();

  	this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );

  }

  PlaneHelper.prototype = Object.create( Line.prototype );
  PlaneHelper.prototype.constructor = PlaneHelper;

  PlaneHelper.prototype.updateMatrixWorld = function ( force ) {

  	var scale = - this.plane.constant;

  	if ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter

  	this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );

  	this.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here

  	this.lookAt( this.plane.normal );

  	Object3D.prototype.updateMatrixWorld.call( this, force );

  };

  /**
   * @author WestLangley / http://github.com/WestLangley
   * @author zz85 / http://github.com/zz85
   * @author bhouston / http://clara.io
   *
   * Creates an arrow for visualizing directions
   *
   * Parameters:
   *  dir - Vector3
   *  origin - Vector3
   *  length - Number
   *  color - color in hex value
   *  headLength - Number
   *  headWidth - Number
   */

  var _axis = new Vector3();
  var _lineGeometry, _coneGeometry;

  function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

  	// dir is assumed to be normalized

  	Object3D.call( this );

  	if ( dir === undefined ) dir = new Vector3( 0, 0, 1 );
  	if ( origin === undefined ) origin = new Vector3( 0, 0, 0 );
  	if ( length === undefined ) length = 1;
  	if ( color === undefined ) color = 0xffff00;
  	if ( headLength === undefined ) headLength = 0.2 * length;
  	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

  	if ( _lineGeometry === undefined ) {

  		_lineGeometry = new BufferGeometry();
  		_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

  		_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
  		_coneGeometry.translate( 0, - 0.5, 0 );

  	}

  	this.position.copy( origin );

  	this.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );
  	this.line.matrixAutoUpdate = false;
  	this.add( this.line );

  	this.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );
  	this.cone.matrixAutoUpdate = false;
  	this.add( this.cone );

  	this.setDirection( dir );
  	this.setLength( length, headLength, headWidth );

  }

  ArrowHelper.prototype = Object.create( Object3D.prototype );
  ArrowHelper.prototype.constructor = ArrowHelper;

  ArrowHelper.prototype.setDirection = function ( dir ) {

  	// dir is assumed to be normalized

  	if ( dir.y > 0.99999 ) {

  		this.quaternion.set( 0, 0, 0, 1 );

  	} else if ( dir.y < - 0.99999 ) {

  		this.quaternion.set( 1, 0, 0, 0 );

  	} else {

  		_axis.set( dir.z, 0, - dir.x ).normalize();

  		var radians = Math.acos( dir.y );

  		this.quaternion.setFromAxisAngle( _axis, radians );

  	}

  };

  ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

  	if ( headLength === undefined ) headLength = 0.2 * length;
  	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

  	this.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458
  	this.line.updateMatrix();

  	this.cone.scale.set( headWidth, headLength, headWidth );
  	this.cone.position.y = length;
  	this.cone.updateMatrix();

  };

  ArrowHelper.prototype.setColor = function ( color ) {

  	this.line.material.color.set( color );
  	this.cone.material.color.set( color );

  };

  ArrowHelper.prototype.copy = function ( source ) {

  	Object3D.prototype.copy.call( this, source, false );

  	this.line.copy( source.line );
  	this.cone.copy( source.cone );

  	return this;

  };

  ArrowHelper.prototype.clone = function () {

  	return new this.constructor().copy( this );

  };

  /**
   * @author sroucheray / http://sroucheray.org/
   * @author mrdoob / http://mrdoob.com/
   */

  function AxesHelper( size ) {

  	size = size || 1;

  	var vertices = [
  		0, 0, 0,	size, 0, 0,
  		0, 0, 0,	0, size, 0,
  		0, 0, 0,	0, 0, size
  	];

  	var colors = [
  		1, 0, 0,	1, 0.6, 0,
  		0, 1, 0,	0.6, 1, 0,
  		0, 0, 1,	0, 0.6, 1
  	];

  	var geometry = new BufferGeometry();
  	geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
  	geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

  	var material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );

  	LineSegments.call( this, geometry, material );

  }

  AxesHelper.prototype = Object.create( LineSegments.prototype );
  AxesHelper.prototype.constructor = AxesHelper;

  /**
   * @author Emmett Lalish / elalish
   *
   * This class generates a Prefiltered, Mipmapped Radiance Environment Map
   * (PMREM) from a cubeMap environment texture. This allows different levels of
   * blur to be quickly accessed based on material roughness. It is packed into a
   * special CubeUV format that allows us to perform custom interpolation so that
   * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
   * chain, it only goes down to the LOD_MIN level (above), and then creates extra
   * even more filtered 'mips' at the same LOD_MIN resolution, associated with
   * higher roughness levels. In this way we maintain resolution to smoothly
   * interpolate diffuse lighting while limiting sampling computation.
   */

  var LOD_MIN = 4;
  var LOD_MAX = 8;
  var SIZE_MAX = Math.pow( 2, LOD_MAX );
  // The standard deviations (radians) associated with the extra mips. These are
  // chosen to approximate a Trowbridge-Reitz distribution function times the
  // geometric shadowing function. These sigma values squared must match the
  // variance #defines in cube_uv_reflection_fragment.glsl.js.
  var EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];
  var TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
  // The maximum length of the blur for loop. Smaller sigmas will use fewer
  // samples and exit early, but not recompile the shader.
  var MAX_SAMPLES = 20;
  var ENCODINGS = {
  	[ LinearEncoding ]: 0,
  	[ sRGBEncoding ]: 1,
  	[ RGBEEncoding ]: 2,
  	[ RGBM7Encoding ]: 3,
  	[ RGBM16Encoding ]: 4,
  	[ RGBDEncoding ]: 5,
  	[ GammaEncoding ]: 6
  };

  var _flatCamera = new OrthographicCamera();
  var _blurMaterial = _getBlurShader( MAX_SAMPLES );
  var _equirectShader = null;
  var _cubemapShader = null;

  var { _lodPlanes, _sizeLods, _sigmas } = _createPlanes();
  var _pingPongRenderTarget = null;
  var _renderer = null;

  var _oldTarget = null;

  // Golden Ratio
  var PHI = ( 1 + Math.sqrt( 5 ) ) / 2;
  var INV_PHI = 1 / PHI;
  // Vertices of a dodecahedron (except the opposites, which represent the
  // same axis), used as axis directions evenly spread on a sphere.
  var _axisDirections = [
  	new Vector3( 1, 1, 1 ),
  	new Vector3( - 1, 1, 1 ),
  	new Vector3( 1, 1, - 1 ),
  	new Vector3( - 1, 1, - 1 ),
  	new Vector3( 0, PHI, INV_PHI ),
  	new Vector3( 0, PHI, - INV_PHI ),
  	new Vector3( INV_PHI, 0, PHI ),
  	new Vector3( - INV_PHI, 0, PHI ),
  	new Vector3( PHI, INV_PHI, 0 ),
  	new Vector3( - PHI, INV_PHI, 0 ) ];

  function PMREMGenerator( renderer ) {

  	_renderer = renderer;
  	_compileMaterial( _blurMaterial );

  }

  PMREMGenerator.prototype = {

  	constructor: PMREMGenerator,

  	/**
  	 * Generates a PMREM from a supplied Scene, which can be faster than using an
  	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
  	 * in radians to be applied to the scene before PMREM generation. Optional near
  	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
  	 * is placed at the origin).
  	 */
  	fromScene: function ( scene, sigma = 0, near = 0.1, far = 100 ) {

  		_oldTarget = _renderer.getRenderTarget();
  		var cubeUVRenderTarget = _allocateTargets();
  		_sceneToCubeUV( scene, near, far, cubeUVRenderTarget );
  		if ( sigma > 0 ) {

  			_blur( cubeUVRenderTarget, 0, 0, sigma );

  		}
  		_applyPMREM( cubeUVRenderTarget );
  		_cleanup( cubeUVRenderTarget );

  		return cubeUVRenderTarget;

  	},

  	/**
  	 * Generates a PMREM from an equirectangular texture, which can be either LDR
  	 * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),
  	 * as this matches best with the 256 x 256 cubemap output.
  	 */
  	fromEquirectangular: function ( equirectangular ) {

  		equirectangular.magFilter = NearestFilter;
  		equirectangular.minFilter = NearestFilter;
  		equirectangular.generateMipmaps = false;

  		return this.fromCubemap( equirectangular );

  	},

  	/**
  	 * Generates a PMREM from an cubemap texture, which can be either LDR
  	 * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,
  	 * as this matches best with the 256 x 256 cubemap output.
  	 */
  	fromCubemap: function ( cubemap ) {

  		_oldTarget = _renderer.getRenderTarget();
  		var cubeUVRenderTarget = _allocateTargets( cubemap );
  		_textureToCubeUV( cubemap, cubeUVRenderTarget );
  		_applyPMREM( cubeUVRenderTarget );
  		_cleanup( cubeUVRenderTarget );

  		return cubeUVRenderTarget;

  	},

  	/**
  	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
  	 * your texture's network fetch for increased concurrency.
  	 */
  	compileCubemapShader: function () {

  		if ( _cubemapShader == null ) {

  			_cubemapShader = _getCubemapShader();
  			_compileMaterial( _cubemapShader );

  		}

  	},

  	/**
  	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
  	 * your texture's network fetch for increased concurrency.
  	 */
  	compileEquirectangularShader: function () {

  		if ( _equirectShader == null ) {

  			_equirectShader = _getEquirectShader();
  			_compileMaterial( _equirectShader );

  		}

  	},

  	/**
  	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
  	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
  	 * one of them will cause any others to also become unusable.
  	 */
  	dispose: function () {

  		_blurMaterial.dispose();

  		if ( _cubemapShader != null ) _cubemapShader.dispose();
  		if ( _equirectShader != null ) _equirectShader.dispose();

  		for ( var i = 0; i < _lodPlanes.length; i ++ ) {

  			_lodPlanes[ i ].dispose();

  		}

  	},

  };

  function _createPlanes() {

  	var _lodPlanes = [];
  	var _sizeLods = [];
  	var _sigmas = [];

  	var lod = LOD_MAX;
  	for ( var i = 0; i < TOTAL_LODS; i ++ ) {

  		var sizeLod = Math.pow( 2, lod );
  		_sizeLods.push( sizeLod );
  		var sigma = 1.0 / sizeLod;
  		if ( i > LOD_MAX - LOD_MIN ) {

  			sigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];

  		} else if ( i == 0 ) {

  			sigma = 0;

  		}
  		_sigmas.push( sigma );

  		var texelSize = 1.0 / ( sizeLod - 1 );
  		var min = - texelSize / 2;
  		var max = 1 + texelSize / 2;
  		var uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];

  		var cubeFaces = 6;
  		var vertices = 6;
  		var positionSize = 3;
  		var uvSize = 2;
  		var faceIndexSize = 1;

  		var position = new Float32Array( positionSize * vertices * cubeFaces );
  		var uv = new Float32Array( uvSize * vertices * cubeFaces );
  		var faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );

  		for ( var face = 0; face < cubeFaces; face ++ ) {

  			var x = ( face % 3 ) * 2 / 3 - 1;
  			var y = face > 2 ? 0 : - 1;
  			var coordinates = [
  				x, y, 0,
  				x + 2 / 3, y, 0,
  				x + 2 / 3, y + 1, 0,
  				x, y, 0,
  				x + 2 / 3, y + 1, 0,
  				x, y + 1, 0
  			];
  			position.set( coordinates, positionSize * vertices * face );
  			uv.set( uv1, uvSize * vertices * face );
  			var fill = [ face, face, face, face, face, face ];
  			faceIndex.set( fill, faceIndexSize * vertices * face );

  		}
  		var planes = new BufferGeometry();
  		planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );
  		planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );
  		planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );
  		_lodPlanes.push( planes );

  		if ( lod > LOD_MIN ) {

  			lod --;

  		}

  	}
  	return { _lodPlanes, _sizeLods, _sigmas };

  }

  function _allocateTargets( equirectangular ) {

  	var params = {
  		magFilter: NearestFilter,
  		minFilter: NearestFilter,
  		generateMipmaps: false,
  		type: equirectangular ? equirectangular.type : UnsignedByteType,
  		format: equirectangular ? equirectangular.format : RGBEFormat,
  		encoding: equirectangular ? equirectangular.encoding : RGBEEncoding,
  		depthBuffer: false,
  		stencilBuffer: false
  	};
  	var cubeUVRenderTarget = _createRenderTarget( params );
  	cubeUVRenderTarget.depthBuffer = equirectangular ? false : true;
  	_pingPongRenderTarget = _createRenderTarget( params );
  	return cubeUVRenderTarget;

  }

  function _cleanup( outputTarget ) {

  	_pingPongRenderTarget.dispose();
  	_renderer.setRenderTarget( _oldTarget );
  	outputTarget.scissorTest = false;
  	// reset viewport and scissor
  	outputTarget.setSize( outputTarget.width, outputTarget.height );

  }

  function _sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {

  	var fov = 90;
  	var aspect = 1;
  	var cubeCamera = new PerspectiveCamera( fov, aspect, near, far );
  	var upSign = [ 1, 1, 1, 1, - 1, 1 ];
  	var forwardSign = [ 1, 1, - 1, - 1, - 1, 1 ];

  	var outputEncoding = _renderer.outputEncoding;
  	var toneMapping = _renderer.toneMapping;
  	var toneMappingExposure = _renderer.toneMappingExposure;
  	var clearColor = _renderer.getClearColor();
  	var clearAlpha = _renderer.getClearAlpha();

  	_renderer.toneMapping = LinearToneMapping;
  	_renderer.toneMappingExposure = 1.0;
  	_renderer.outputEncoding = LinearEncoding;
  	scene.scale.z *= - 1;

  	var background = scene.background;
  	if ( background && background.isColor ) {

  		background.convertSRGBToLinear();
  		// Convert linear to RGBE
  		var maxComponent = Math.max( background.r, background.g, background.b );
  		var fExp = Math.min( Math.max( Math.ceil( Math.log2( maxComponent ) ), - 128.0 ), 127.0 );
  		background = background.multiplyScalar( Math.pow( 2.0, - fExp ) );
  		var alpha = ( fExp + 128.0 ) / 255.0;
  		_renderer.setClearColor( background, alpha );
  		scene.background = null;

  	}

  	for ( var i = 0; i < 6; i ++ ) {

  		var col = i % 3;
  		if ( col == 0 ) {

  			cubeCamera.up.set( 0, upSign[ i ], 0 );
  			cubeCamera.lookAt( forwardSign[ i ], 0, 0 );

  		} else if ( col == 1 ) {

  			cubeCamera.up.set( 0, 0, upSign[ i ] );
  			cubeCamera.lookAt( 0, forwardSign[ i ], 0 );

  		} else {

  			cubeCamera.up.set( 0, upSign[ i ], 0 );
  			cubeCamera.lookAt( 0, 0, forwardSign[ i ] );

  		}
  		_setViewport( cubeUVRenderTarget,
  			col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );
  		_renderer.setRenderTarget( cubeUVRenderTarget );
  		_renderer.render( scene, cubeCamera );

  	}

  	_renderer.toneMapping = toneMapping;
  	_renderer.toneMappingExposure = toneMappingExposure;
  	_renderer.outputEncoding = outputEncoding;
  	_renderer.setClearColor( clearColor, clearAlpha );
  	scene.scale.z *= - 1;

  }

  function _textureToCubeUV( texture, cubeUVRenderTarget ) {

  	var scene = new Scene();
  	if ( texture.isCubeTexture ) {

  		if ( _cubemapShader == null ) {

  			_cubemapShader = _getCubemapShader();

  		}

  	} else {

  		if ( _equirectShader == null ) {

  			_equirectShader = _getEquirectShader();

  		}

  	}
  	var material = texture.isCubeTexture ? _cubemapShader : _equirectShader;
  	scene.add( new Mesh( _lodPlanes[ 0 ], material ) );
  	var uniforms = material.uniforms;

  	uniforms[ 'envMap' ].value = texture;
  	if ( ! texture.isCubeTexture ) {

  		uniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );

  	}
  	uniforms[ 'inputEncoding' ].value = ENCODINGS[ texture.encoding ];
  	uniforms[ 'outputEncoding' ].value = ENCODINGS[ texture.encoding ];

  	_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );
  	_renderer.setRenderTarget( cubeUVRenderTarget );
  	_renderer.render( scene, _flatCamera );

  }

  function _compileMaterial( material ) {

  	var tmpScene = new Scene();
  	tmpScene.add( new Mesh( _lodPlanes[ 0 ], material ) );
  	_renderer.compile( tmpScene, _flatCamera );

  }

  function _createRenderTarget( params ) {

  	var cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );
  	cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
  	cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
  	cubeUVRenderTarget.scissorTest = true;
  	return cubeUVRenderTarget;

  }

  function _setViewport( target, x, y, width, height ) {

  	target.viewport.set( x, y, width, height );
  	target.scissor.set( x, y, width, height );

  }

  function _applyPMREM( cubeUVRenderTarget ) {

  	var autoClear = _renderer.autoClear;
  	_renderer.autoClear = false;

  	for ( var i = 1; i < TOTAL_LODS; i ++ ) {

  		var sigma = Math.sqrt(
  			_sigmas[ i ] * _sigmas[ i ] -
  		_sigmas[ i - 1 ] * _sigmas[ i - 1 ] );
  		var poleAxis =
  		_axisDirections[ ( i - 1 ) % _axisDirections.length ];
  		_blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );

  	}

  	_renderer.autoClear = autoClear;

  }

  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   */
  function _blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {

  	_halfBlur(
  		cubeUVRenderTarget,
  		_pingPongRenderTarget,
  		lodIn,
  		lodOut,
  		sigma,
  		'latitudinal',
  		poleAxis );

  	_halfBlur(
  		_pingPongRenderTarget,
  		cubeUVRenderTarget,
  		lodOut,
  		lodOut,
  		sigma,
  		'longitudinal',
  		poleAxis );

  }

  function _halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {

  	if ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {

  		console.error(
  			'blur direction must be either latitudinal or longitudinal!' );

  	}

  	// Number of standard deviations at which to cut off the discrete approximation.
  	var STANDARD_DEVIATIONS = 3;

  	var blurScene = new Scene();
  	blurScene.add( new Mesh( _lodPlanes[ lodOut ], _blurMaterial ) );
  	var blurUniforms = _blurMaterial.uniforms;

  	var pixels = _sizeLods[ lodIn ] - 1;
  	var radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );
  	var sigmaPixels = sigmaRadians / radiansPerPixel;
  	var samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;

  	if ( samples > MAX_SAMPLES ) {

  		console.warn( `sigmaRadians, ${
			sigmaRadians}, is too large and will clip, as it requested ${
			samples} samples when the maximum is set to ${MAX_SAMPLES}` );

  	}

  	var weights = [];
  	var sum = 0;

  	for ( var i = 0; i < MAX_SAMPLES; ++ i ) {

  		var x = i / sigmaPixels;
  		var weight = Math.exp( - x * x / 2 );
  		weights.push( weight );

  		if ( i == 0 ) {

  			sum += weight;

  		} else if ( i < samples ) {

  			sum += 2 * weight;

  		}

  	}

  	for ( var i = 0; i < weights.length; i ++ ) {

  		weights[ i ] = weights[ i ] / sum;

  	}

  	blurUniforms[ 'envMap' ].value = targetIn.texture;
  	blurUniforms[ 'samples' ].value = samples;
  	blurUniforms[ 'weights' ].value = weights;
  	blurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';
  	if ( poleAxis ) {

  		blurUniforms[ 'poleAxis' ].value = poleAxis;

  	}
  	blurUniforms[ 'dTheta' ].value = radiansPerPixel;
  	blurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;
  	blurUniforms[ 'inputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];
  	blurUniforms[ 'outputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];

  	var outputSize = _sizeLods[ lodOut ];
  	var x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );
  	var y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) +
  	2 * outputSize *
  		( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );

  	_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );
  	_renderer.setRenderTarget( targetOut );
  	_renderer.render( blurScene, _flatCamera );

  }

  function _getBlurShader( maxSamples ) {

  	var weights = new Float32Array( maxSamples );
  	var poleAxis = new Vector3( 0, 1, 0 );
  	var shaderMaterial = new RawShaderMaterial( {

  		defines: { 'n': maxSamples },

  		uniforms: {
  			'envMap': { value: null },
  			'samples': { value: 1 },
  			'weights': { value: weights },
  			'latitudinal': { value: false },
  			'dTheta': { value: 0 },
  			'mipInt': { value: 0 },
  			'poleAxis': { value: poleAxis },
  			'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },
  			'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }
  		},

  		vertexShader: _getCommonVertexShader(),

  		fragmentShader: `
precision mediump float;
precision mediump int;
varying vec3 vOutputDirection;
uniform sampler2D envMap;
uniform int samples;
uniform float weights[n];
uniform bool latitudinal;
uniform float dTheta;
uniform float mipInt;
uniform vec3 poleAxis;

${_getEncodings()}

#define ENVMAP_TYPE_CUBE_UV
#include <cube_uv_reflection_fragment>

vec3 getSample(float theta, vec3 axis) {
	float cosTheta = cos(theta);
	// Rodrigues' axis-angle rotation
	vec3 sampleDirection = vOutputDirection * cosTheta
		+ cross(axis, vOutputDirection) * sin(theta)
		+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);
	return bilinearCubeUV(envMap, sampleDirection, mipInt);
}

void main() {
	vec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);
	if (all(equal(axis, vec3(0.0))))
		axis = vec3(vOutputDirection.z, 0.0, - vOutputDirection.x);
	axis = normalize(axis);
	gl_FragColor = vec4(0.0);
	gl_FragColor.rgb += weights[0] * getSample(0.0, axis);
	for (int i = 1; i < n; i++) {
		if (i >= samples)
			break;
		float theta = dTheta * float(i);
		gl_FragColor.rgb += weights[i] * getSample(-1.0 * theta, axis);
		gl_FragColor.rgb += weights[i] * getSample(theta, axis);
	}
	gl_FragColor = linearToOutputTexel(gl_FragColor);
}
		`,

  		blending: NoBlending,
  		depthTest: false,
  		depthWrite: false

  	} );

  	shaderMaterial.type = 'SphericalGaussianBlur';

  	return shaderMaterial;

  }

  function _getEquirectShader() {

  	var texelSize = new Vector2( 1, 1 );
  	var shaderMaterial = new RawShaderMaterial( {

  		uniforms: {
  			'envMap': { value: null },
  			'texelSize': { value: texelSize },
  			'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },
  			'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }
  		},

  		vertexShader: _getCommonVertexShader(),

  		fragmentShader: `
precision mediump float;
precision mediump int;
varying vec3 vOutputDirection;
uniform sampler2D envMap;
uniform vec2 texelSize;

${_getEncodings()}

#define RECIPROCAL_PI 0.31830988618
#define RECIPROCAL_PI2 0.15915494

void main() {
	gl_FragColor = vec4(0.0);
	vec3 outputDirection = normalize(vOutputDirection);
	vec2 uv;
	uv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;
	uv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;
	vec2 f = fract(uv / texelSize - 0.5);
	uv -= f * texelSize;
	vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;
	uv.x += texelSize.x;
	vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;
	uv.y += texelSize.y;
	vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;
	uv.x -= texelSize.x;
	vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;
	vec3 tm = mix(tl, tr, f.x);
	vec3 bm = mix(bl, br, f.x);
	gl_FragColor.rgb = mix(tm, bm, f.y);
	gl_FragColor = linearToOutputTexel(gl_FragColor);
}
		`,

  		blending: NoBlending,
  		depthTest: false,
  		depthWrite: false

  	} );

  	shaderMaterial.type = 'EquirectangularToCubeUV';

  	return shaderMaterial;

  }

  function _getCubemapShader() {

  	var shaderMaterial = new RawShaderMaterial( {

  		uniforms: {
  			'envMap': { value: null },
  			'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },
  			'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }
  		},

  		vertexShader: _getCommonVertexShader(),

  		fragmentShader: `
precision mediump float;
precision mediump int;
varying vec3 vOutputDirection;
uniform samplerCube envMap;

${_getEncodings()}

void main() {
	gl_FragColor = vec4(0.0);
	gl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;
	gl_FragColor = linearToOutputTexel(gl_FragColor);
}
		`,

  		blending: NoBlending,
  		depthTest: false,
  		depthWrite: false

  	} );

  	shaderMaterial.type = 'CubemapToCubeUV';

  	return shaderMaterial;

  }

  function _getCommonVertexShader() {

  	return `
precision mediump float;
precision mediump int;
attribute vec3 position;
attribute vec2 uv;
attribute float faceIndex;
varying vec3 vOutputDirection;
vec3 getDirection(vec2 uv, float face) {
	uv = 2.0 * uv - 1.0;
	vec3 direction = vec3(uv, 1.0);
	if (face == 0.0) {
		direction = direction.zyx;
		direction.z *= -1.0;
	} else if (face == 1.0) {
		direction = direction.xzy;
		direction.z *= -1.0;
	} else if (face == 3.0) {
		direction = direction.zyx;
		direction.x *= -1.0;
	} else if (face == 4.0) {
		direction = direction.xzy;
		direction.y *= -1.0;
	} else if (face == 5.0) {
		direction.xz *= -1.0;
	}
	return direction;
}
void main() {
	vOutputDirection = getDirection(uv, faceIndex);
	gl_Position = vec4( position, 1.0 );
}
	`;

  }

  function _getEncodings() {

  	return `
uniform int inputEncoding;
uniform int outputEncoding;

#include <encodings_pars_fragment>

vec4 inputTexelToLinear(vec4 value){
	if(inputEncoding == 0){
		return value;
	}else if(inputEncoding == 1){
		return sRGBToLinear(value);
	}else if(inputEncoding == 2){
		return RGBEToLinear(value);
	}else if(inputEncoding == 3){
		return RGBMToLinear(value, 7.0);
	}else if(inputEncoding == 4){
		return RGBMToLinear(value, 16.0);
	}else if(inputEncoding == 5){
		return RGBDToLinear(value, 256.0);
	}else{
		return GammaToLinear(value, 2.2);
	}
}

vec4 linearToOutputTexel(vec4 value){
	if(outputEncoding == 0){
		return value;
	}else if(outputEncoding == 1){
		return LinearTosRGB(value);
	}else if(outputEncoding == 2){
		return LinearToRGBE(value);
	}else if(outputEncoding == 3){
		return LinearToRGBM(value, 7.0);
	}else if(outputEncoding == 4){
		return LinearToRGBM(value, 16.0);
	}else if(outputEncoding == 5){
		return LinearToRGBD(value, 256.0);
	}else{
		return LinearToGamma(value, 2.2);
	}
}

vec4 envMapTexelToLinear(vec4 color) {
	return inputTexelToLinear(color);
}
	`;

  }

  //

  Curve.create = function ( construct, getPoint ) {

  	console.log( 'THREE.Curve.create() has been deprecated' );

  	construct.prototype = Object.create( Curve.prototype );
  	construct.prototype.constructor = construct;
  	construct.prototype.getPoint = getPoint;

  	return construct;

  };

  //

  Object.assign( CurvePath.prototype, {

  	createPointsGeometry: function ( divisions ) {

  		console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

  		// generate geometry from path points (for Line or Points objects)

  		var pts = this.getPoints( divisions );
  		return this.createGeometry( pts );

  	},

  	createSpacedPointsGeometry: function ( divisions ) {

  		console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

  		// generate geometry from equidistant sampling along the path

  		var pts = this.getSpacedPoints( divisions );
  		return this.createGeometry( pts );

  	},

  	createGeometry: function ( points ) {

  		console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

  		var geometry = new Geometry();

  		for ( var i = 0, l = points.length; i < l; i ++ ) {

  			var point = points[ i ];
  			geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

  		}

  		return geometry;

  	}

  } );

  //

  Object.assign( Path.prototype, {

  	fromPoints: function ( points ) {

  		console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
  		return this.setFromPoints( points );

  	}

  } );

  //

  function Spline( points ) {

  	console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );

  	CatmullRomCurve3.call( this, points );
  	this.type = 'catmullrom';

  }

  Spline.prototype = Object.create( CatmullRomCurve3.prototype );

  Object.assign( Spline.prototype, {

  	initFromArray: function ( /* a */ ) {

  		console.error( 'THREE.Spline: .initFromArray() has been removed.' );

  	},
  	getControlPointsArray: function ( /* optionalTarget */ ) {

  		console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );

  	},
  	reparametrizeByArcLength: function ( /* samplingCoef */ ) {

  		console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );

  	}

  } );

  GridHelper.prototype.setColors = function () {

  	console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

  };

  SkeletonHelper.prototype.update = function () {

  	console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );

  };

  //

  Object.assign( Loader.prototype, {

  	extractUrlBase: function ( url ) {

  		console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
  		return LoaderUtils.extractUrlBase( url );

  	}

  } );

  Loader.Handlers = {

  	add: function ( /* regex, loader */ ) {

  		console.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );

  	},

  	get: function ( /* file */ ) {

  		console.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );

  	}

  };

  Object.assign( ObjectLoader.prototype, {

  	setTexturePath: function ( value ) {

  		console.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );
  		return this.setResourcePath( value );

  	}

  } );

  //

  Object.assign( Box2.prototype, {

  	center: function ( optionalTarget ) {

  		console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
  		return this.getCenter( optionalTarget );

  	},
  	empty: function () {

  		console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
  		return this.isEmpty();

  	},
  	isIntersectionBox: function ( box ) {

  		console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
  		return this.intersectsBox( box );

  	},
  	size: function ( optionalTarget ) {

  		console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
  		return this.getSize( optionalTarget );

  	}
  } );

  Object.assign( Box3.prototype, {

  	center: function ( optionalTarget ) {

  		console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
  		return this.getCenter( optionalTarget );

  	},
  	empty: function () {

  		console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
  		return this.isEmpty();

  	},
  	isIntersectionBox: function ( box ) {

  		console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
  		return this.intersectsBox( box );

  	},
  	isIntersectionSphere: function ( sphere ) {

  		console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
  		return this.intersectsSphere( sphere );

  	},
  	size: function ( optionalTarget ) {

  		console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
  		return this.getSize( optionalTarget );

  	}
  } );

  Frustum.prototype.setFromMatrix = function ( m ) {

  	console.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );
  	return this.setFromProjectionMatrix( m );

  };

  Line3.prototype.center = function ( optionalTarget ) {

  	console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
  	return this.getCenter( optionalTarget );

  };

  Object.assign( MathUtils, {

  	random16: function () {

  		console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
  		return Math.random();

  	},

  	nearestPowerOfTwo: function ( value ) {

  		console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
  		return MathUtils.floorPowerOfTwo( value );

  	},

  	nextPowerOfTwo: function ( value ) {

  		console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
  		return MathUtils.ceilPowerOfTwo( value );

  	}

  } );

  Object.assign( Matrix3.prototype, {

  	flattenToArrayOffset: function ( array, offset ) {

  		console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
  		return this.toArray( array, offset );

  	},
  	multiplyVector3: function ( vector ) {

  		console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
  		return vector.applyMatrix3( this );

  	},
  	multiplyVector3Array: function ( /* a */ ) {

  		console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );

  	},
  	applyToBufferAttribute: function ( attribute ) {

  		console.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );
  		return attribute.applyMatrix3( this );

  	},
  	applyToVector3Array: function ( /* array, offset, length */ ) {

  		console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

  	}

  } );

  Object.assign( Matrix4.prototype, {

  	extractPosition: function ( m ) {

  		console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
  		return this.copyPosition( m );

  	},
  	flattenToArrayOffset: function ( array, offset ) {

  		console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
  		return this.toArray( array, offset );

  	},
  	getPosition: function () {

  		console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
  		return new Vector3().setFromMatrixColumn( this, 3 );

  	},
  	setRotationFromQuaternion: function ( q ) {

  		console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
  		return this.makeRotationFromQuaternion( q );

  	},
  	multiplyToArray: function () {

  		console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

  	},
  	multiplyVector3: function ( vector ) {

  		console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
  		return vector.applyMatrix4( this );

  	},
  	multiplyVector4: function ( vector ) {

  		console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
  		return vector.applyMatrix4( this );

  	},
  	multiplyVector3Array: function ( /* a */ ) {

  		console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );

  	},
  	rotateAxis: function ( v ) {

  		console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
  		v.transformDirection( this );

  	},
  	crossVector: function ( vector ) {

  		console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
  		return vector.applyMatrix4( this );

  	},
  	translate: function () {

  		console.error( 'THREE.Matrix4: .translate() has been removed.' );

  	},
  	rotateX: function () {

  		console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

  	},
  	rotateY: function () {

  		console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

  	},
  	rotateZ: function () {

  		console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

  	},
  	rotateByAxis: function () {

  		console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

  	},
  	applyToBufferAttribute: function ( attribute ) {

  		console.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );
  		return attribute.applyMatrix4( this );

  	},
  	applyToVector3Array: function ( /* array, offset, length */ ) {

  		console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

  	},
  	makeFrustum: function ( left, right, bottom, top, near, far ) {

  		console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
  		return this.makePerspective( left, right, top, bottom, near, far );

  	}

  } );

  Plane.prototype.isIntersectionLine = function ( line ) {

  	console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
  	return this.intersectsLine( line );

  };

  Quaternion.prototype.multiplyVector3 = function ( vector ) {

  	console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
  	return vector.applyQuaternion( this );

  };

  Object.assign( Ray.prototype, {

  	isIntersectionBox: function ( box ) {

  		console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
  		return this.intersectsBox( box );

  	},
  	isIntersectionPlane: function ( plane ) {

  		console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
  		return this.intersectsPlane( plane );

  	},
  	isIntersectionSphere: function ( sphere ) {

  		console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
  		return this.intersectsSphere( sphere );

  	}

  } );

  Object.assign( Triangle.prototype, {

  	area: function () {

  		console.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );
  		return this.getArea();

  	},
  	barycoordFromPoint: function ( point, target ) {

  		console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
  		return this.getBarycoord( point, target );

  	},
  	midpoint: function ( target ) {

  		console.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );
  		return this.getMidpoint( target );

  	},
  	normal: function ( target ) {

  		console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
  		return this.getNormal( target );

  	},
  	plane: function ( target ) {

  		console.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );
  		return this.getPlane( target );

  	}

  } );

  Object.assign( Triangle, {

  	barycoordFromPoint: function ( point, a, b, c, target ) {

  		console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
  		return Triangle.getBarycoord( point, a, b, c, target );

  	},
  	normal: function ( a, b, c, target ) {

  		console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
  		return Triangle.getNormal( a, b, c, target );

  	}

  } );

  Object.assign( Shape.prototype, {

  	extractAllPoints: function ( divisions ) {

  		console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
  		return this.extractPoints( divisions );

  	},
  	extrude: function ( options ) {

  		console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
  		return new ExtrudeGeometry( this, options );

  	},
  	makeGeometry: function ( options ) {

  		console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
  		return new ShapeGeometry( this, options );

  	}

  } );

  Object.assign( Vector2.prototype, {

  	fromAttribute: function ( attribute, index, offset ) {

  		console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
  		return this.fromBufferAttribute( attribute, index, offset );

  	},
  	distanceToManhattan: function ( v ) {

  		console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
  		return this.manhattanDistanceTo( v );

  	},
  	lengthManhattan: function () {

  		console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
  		return this.manhattanLength();

  	}

  } );

  Object.assign( Vector3.prototype, {

  	setEulerFromRotationMatrix: function () {

  		console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

  	},
  	setEulerFromQuaternion: function () {

  		console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

  	},
  	getPositionFromMatrix: function ( m ) {

  		console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
  		return this.setFromMatrixPosition( m );

  	},
  	getScaleFromMatrix: function ( m ) {

  		console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
  		return this.setFromMatrixScale( m );

  	},
  	getColumnFromMatrix: function ( index, matrix ) {

  		console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
  		return this.setFromMatrixColumn( matrix, index );

  	},
  	applyProjection: function ( m ) {

  		console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
  		return this.applyMatrix4( m );

  	},
  	fromAttribute: function ( attribute, index, offset ) {

  		console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
  		return this.fromBufferAttribute( attribute, index, offset );

  	},
  	distanceToManhattan: function ( v ) {

  		console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
  		return this.manhattanDistanceTo( v );

  	},
  	lengthManhattan: function () {

  		console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
  		return this.manhattanLength();

  	}

  } );

  Object.assign( Vector4.prototype, {

  	fromAttribute: function ( attribute, index, offset ) {

  		console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
  		return this.fromBufferAttribute( attribute, index, offset );

  	},
  	lengthManhattan: function () {

  		console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
  		return this.manhattanLength();

  	}

  } );

  //

  Object.assign( Geometry.prototype, {

  	computeTangents: function () {

  		console.error( 'THREE.Geometry: .computeTangents() has been removed.' );

  	},
  	computeLineDistances: function () {

  		console.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );

  	},
  	applyMatrix: function ( matrix ) {

  		console.warn( 'THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().' );
  		return this.applyMatrix4( matrix );

  	}

  } );

  Object.assign( Object3D.prototype, {

  	getChildByName: function ( name ) {

  		console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
  		return this.getObjectByName( name );

  	},
  	renderDepth: function () {

  		console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

  	},
  	translate: function ( distance, axis ) {

  		console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
  		return this.translateOnAxis( axis, distance );

  	},
  	getWorldRotation: function () {

  		console.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );

  	},
  	applyMatrix: function ( matrix ) {

  		console.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );
  		return this.applyMatrix4( matrix );

  	}

  } );

  Object.defineProperties( Object3D.prototype, {

  	eulerOrder: {
  		get: function () {

  			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
  			return this.rotation.order;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
  			this.rotation.order = value;

  		}
  	},
  	useQuaternion: {
  		get: function () {

  			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

  		},
  		set: function () {

  			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

  		}
  	}

  } );

  Object.assign( Mesh.prototype, {

  	setDrawMode: function () {

  		console.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );

  	},

  } );

  Object.defineProperties( Mesh.prototype, {

  	drawMode: {
  		get: function () {

  			console.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );
  			return TrianglesDrawMode;

  		},
  		set: function () {

  			console.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );

  		}
  	}

  } );

  Object.defineProperties( LOD.prototype, {

  	objects: {
  		get: function () {

  			console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
  			return this.levels;

  		}
  	}

  } );

  Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {

  	get: function () {

  		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

  	},
  	set: function () {

  		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

  	}

  } );

  SkinnedMesh.prototype.initBones = function () {

  	console.error( 'THREE.SkinnedMesh: initBones() has been removed.' );

  };

  Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {

  	get: function () {

  		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
  		return this.arcLengthDivisions;

  	},
  	set: function ( value ) {

  		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
  		this.arcLengthDivisions = value;

  	}

  } );

  //

  PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

  	console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
  			"Use .setFocalLength and .filmGauge for a photographic setup." );

  	if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
  	this.setFocalLength( focalLength );

  };

  //

  Object.defineProperties( Light.prototype, {
  	onlyShadow: {
  		set: function () {

  			console.warn( 'THREE.Light: .onlyShadow has been removed.' );

  		}
  	},
  	shadowCameraFov: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
  			this.shadow.camera.fov = value;

  		}
  	},
  	shadowCameraLeft: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
  			this.shadow.camera.left = value;

  		}
  	},
  	shadowCameraRight: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
  			this.shadow.camera.right = value;

  		}
  	},
  	shadowCameraTop: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
  			this.shadow.camera.top = value;

  		}
  	},
  	shadowCameraBottom: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
  			this.shadow.camera.bottom = value;

  		}
  	},
  	shadowCameraNear: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
  			this.shadow.camera.near = value;

  		}
  	},
  	shadowCameraFar: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
  			this.shadow.camera.far = value;

  		}
  	},
  	shadowCameraVisible: {
  		set: function () {

  			console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

  		}
  	},
  	shadowBias: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
  			this.shadow.bias = value;

  		}
  	},
  	shadowDarkness: {
  		set: function () {

  			console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

  		}
  	},
  	shadowMapWidth: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
  			this.shadow.mapSize.width = value;

  		}
  	},
  	shadowMapHeight: {
  		set: function ( value ) {

  			console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
  			this.shadow.mapSize.height = value;

  		}
  	}
  } );

  //

  Object.defineProperties( BufferAttribute.prototype, {

  	length: {
  		get: function () {

  			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
  			return this.array.length;

  		}
  	},
  	dynamic: {
  		get: function () {

  			console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
  			return this.usage === DynamicDrawUsage;

  		},
  		set: function ( /* value */ ) {

  			console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
  			this.setUsage( DynamicDrawUsage );

  		}
  	}

  } );

  Object.assign( BufferAttribute.prototype, {
  	setDynamic: function ( value ) {

  		console.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );
  		this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
  		return this;

  	},
  	copyIndicesArray: function ( /* indices */ ) {

  		console.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );

  	},
  	setArray: function ( /* array */ ) {

  		console.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );

  	}
  } );

  Object.assign( BufferGeometry.prototype, {

  	addIndex: function ( index ) {

  		console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
  		this.setIndex( index );

  	},
  	addAttribute: function ( name, attribute ) {

  		console.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );

  		if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

  			console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

  			return this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

  		}

  		if ( name === 'index' ) {

  			console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
  			this.setIndex( attribute );

  			return this;

  		}

  		return this.setAttribute( name, attribute );

  	},
  	addDrawCall: function ( start, count, indexOffset ) {

  		if ( indexOffset !== undefined ) {

  			console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

  		}
  		console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
  		this.addGroup( start, count );

  	},
  	clearDrawCalls: function () {

  		console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
  		this.clearGroups();

  	},
  	computeTangents: function () {

  		console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

  	},
  	computeOffsets: function () {

  		console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

  	},
  	removeAttribute: function ( name ) {

  		console.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );

  		return this.deleteAttribute( name );

  	},
  	applyMatrix: function ( matrix ) {

  		console.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );
  		return this.applyMatrix4( matrix );

  	}

  } );

  Object.defineProperties( BufferGeometry.prototype, {

  	drawcalls: {
  		get: function () {

  			console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
  			return this.groups;

  		}
  	},
  	offsets: {
  		get: function () {

  			console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
  			return this.groups;

  		}
  	}

  } );

  Object.defineProperties( Raycaster.prototype, {

  	linePrecision: {
  		get: function () {

  			console.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );
  			return this.params.Line.threshold;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );
  			this.params.Line.threshold = value;

  		}
  	}

  } );

  Object.defineProperties( InterleavedBuffer.prototype, {

  	dynamic: {
  		get: function () {

  			console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
  			return this.usage === DynamicDrawUsage;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
  			this.setUsage( value );

  		}
  	}

  } );

  Object.assign( InterleavedBuffer.prototype, {
  	setDynamic: function ( value ) {

  		console.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );
  		this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
  		return this;

  	},
  	setArray: function ( /* array */ ) {

  		console.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );

  	}
  } );

  //

  Object.assign( ExtrudeBufferGeometry.prototype, {

  	getArrays: function () {

  		console.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );

  	},

  	addShapeList: function () {

  		console.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );

  	},

  	addShape: function () {

  		console.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );

  	}

  } );

  //

  Object.defineProperties( Uniform.prototype, {

  	dynamic: {
  		set: function () {

  			console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );

  		}
  	},
  	onUpdate: {
  		value: function () {

  			console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
  			return this;

  		}
  	}

  } );

  //

  Object.defineProperties( Material.prototype, {

  	wrapAround: {
  		get: function () {

  			console.warn( 'THREE.Material: .wrapAround has been removed.' );

  		},
  		set: function () {

  			console.warn( 'THREE.Material: .wrapAround has been removed.' );

  		}
  	},

  	overdraw: {
  		get: function () {

  			console.warn( 'THREE.Material: .overdraw has been removed.' );

  		},
  		set: function () {

  			console.warn( 'THREE.Material: .overdraw has been removed.' );

  		}
  	},

  	wrapRGB: {
  		get: function () {

  			console.warn( 'THREE.Material: .wrapRGB has been removed.' );
  			return new Color();

  		}
  	},

  	shading: {
  		get: function () {

  			console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
  			this.flatShading = ( value === FlatShading );

  		}
  	},

  	stencilMask: {
  		get: function () {

  			console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
  			return this.stencilFuncMask;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
  			this.stencilFuncMask = value;

  		}
  	}

  } );

  Object.defineProperties( MeshPhongMaterial.prototype, {

  	metal: {
  		get: function () {

  			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
  			return false;

  		},
  		set: function () {

  			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );

  		}
  	}

  } );

  Object.defineProperties( ShaderMaterial.prototype, {

  	derivatives: {
  		get: function () {

  			console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
  			return this.extensions.derivatives;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
  			this.extensions.derivatives = value;

  		}
  	}

  } );

  //

  Object.assign( WebGLRenderer.prototype, {

  	clearTarget: function ( renderTarget, color, depth, stencil ) {

  		console.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );
  		this.setRenderTarget( renderTarget );
  		this.clear( color, depth, stencil );

  	},
  	animate: function ( callback ) {

  		console.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );
  		this.setAnimationLoop( callback );

  	},
  	getCurrentRenderTarget: function () {

  		console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
  		return this.getRenderTarget();

  	},
  	getMaxAnisotropy: function () {

  		console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
  		return this.capabilities.getMaxAnisotropy();

  	},
  	getPrecision: function () {

  		console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
  		return this.capabilities.precision;

  	},
  	resetGLState: function () {

  		console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
  		return this.state.reset();

  	},
  	supportsFloatTextures: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
  		return this.extensions.get( 'OES_texture_float' );

  	},
  	supportsHalfFloatTextures: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
  		return this.extensions.get( 'OES_texture_half_float' );

  	},
  	supportsStandardDerivatives: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
  		return this.extensions.get( 'OES_standard_derivatives' );

  	},
  	supportsCompressedTextureS3TC: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
  		return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

  	},
  	supportsCompressedTexturePVRTC: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
  		return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

  	},
  	supportsBlendMinMax: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
  		return this.extensions.get( 'EXT_blend_minmax' );

  	},
  	supportsVertexTextures: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
  		return this.capabilities.vertexTextures;

  	},
  	supportsInstancedArrays: function () {

  		console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
  		return this.extensions.get( 'ANGLE_instanced_arrays' );

  	},
  	enableScissorTest: function ( boolean ) {

  		console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
  		this.setScissorTest( boolean );

  	},
  	initMaterial: function () {

  		console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

  	},
  	addPrePlugin: function () {

  		console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

  	},
  	addPostPlugin: function () {

  		console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

  	},
  	updateShadowMap: function () {

  		console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

  	},
  	setFaceCulling: function () {

  		console.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );

  	},
  	allocTextureUnit: function () {

  		console.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );

  	},
  	setTexture: function () {

  		console.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );

  	},
  	setTexture2D: function () {

  		console.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );

  	},
  	setTextureCube: function () {

  		console.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );

  	},
  	getActiveMipMapLevel: function () {

  		console.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );
  		return this.getActiveMipmapLevel();

  	}

  } );

  Object.defineProperties( WebGLRenderer.prototype, {

  	shadowMapEnabled: {
  		get: function () {

  			return this.shadowMap.enabled;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
  			this.shadowMap.enabled = value;

  		}
  	},
  	shadowMapType: {
  		get: function () {

  			return this.shadowMap.type;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
  			this.shadowMap.type = value;

  		}
  	},
  	shadowMapCullFace: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
  			return undefined;

  		},
  		set: function ( /* value */ ) {

  			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );

  		}
  	},
  	context: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );
  			return this.getContext();

  		}
  	},
  	vr: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );
  			return this.xr;

  		}
  	},
  	gammaInput: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );
  			return false;

  		},
  		set: function () {

  			console.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );

  		}
  	},
  	gammaOutput: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );
  			return false;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );
  			this.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;

  		}
  	}

  } );

  Object.defineProperties( WebGLShadowMap.prototype, {

  	cullFace: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
  			return undefined;

  		},
  		set: function ( /* cullFace */ ) {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );

  		}
  	},
  	renderReverseSided: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
  			return undefined;

  		},
  		set: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );

  		}
  	},
  	renderSingleSided: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
  			return undefined;

  		},
  		set: function () {

  			console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );

  		}
  	}

  } );

  //

  Object.defineProperties( WebGLRenderTarget.prototype, {

  	wrapS: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
  			return this.texture.wrapS;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
  			this.texture.wrapS = value;

  		}
  	},
  	wrapT: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
  			return this.texture.wrapT;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
  			this.texture.wrapT = value;

  		}
  	},
  	magFilter: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
  			return this.texture.magFilter;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
  			this.texture.magFilter = value;

  		}
  	},
  	minFilter: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
  			return this.texture.minFilter;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
  			this.texture.minFilter = value;

  		}
  	},
  	anisotropy: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
  			return this.texture.anisotropy;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
  			this.texture.anisotropy = value;

  		}
  	},
  	offset: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
  			return this.texture.offset;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
  			this.texture.offset = value;

  		}
  	},
  	repeat: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
  			return this.texture.repeat;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
  			this.texture.repeat = value;

  		}
  	},
  	format: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
  			return this.texture.format;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
  			this.texture.format = value;

  		}
  	},
  	type: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
  			return this.texture.type;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
  			this.texture.type = value;

  		}
  	},
  	generateMipmaps: {
  		get: function () {

  			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
  			return this.texture.generateMipmaps;

  		},
  		set: function ( value ) {

  			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
  			this.texture.generateMipmaps = value;

  		}
  	}

  } );

  //

  Object.defineProperties( Audio.prototype, {

  	load: {
  		value: function ( file ) {

  			console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
  			var scope = this;
  			var audioLoader = new AudioLoader();
  			audioLoader.load( file, function ( buffer ) {

  				scope.setBuffer( buffer );

  			} );
  			return this;

  		}
  	},
  	startTime: {
  		set: function () {

  			console.warn( 'THREE.Audio: .startTime is now .play( delay ).' );

  		}
  	}

  } );

  AudioAnalyser.prototype.getData = function () {

  	console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
  	return this.getFrequencyData();

  };

  //

  CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {

  	console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
  	return this.update( renderer, scene );

  };

  ImageUtils.crossOrigin = undefined;

  ImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {

  	console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

  	var loader = new TextureLoader();
  	loader.setCrossOrigin( this.crossOrigin );

  	var texture = loader.load( url, onLoad, undefined, onError );

  	if ( mapping ) texture.mapping = mapping;

  	return texture;

  };

  ImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {

  	console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

  	var loader = new CubeTextureLoader();
  	loader.setCrossOrigin( this.crossOrigin );

  	var texture = loader.load( urls, onLoad, undefined, onError );

  	if ( mapping ) texture.mapping = mapping;

  	return texture;

  };

  ImageUtils.loadCompressedTexture = function () {

  	console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

  };

  ImageUtils.loadCompressedTextureCube = function () {

  	console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

  };

  if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

  	/* eslint-disable no-undef */
  	__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
  		revision: REVISION,
  	} } ) );
  	/* eslint-enable no-undef */

  }

  /**
   * @author qiao / https://github.com/qiao
   * @author mrdoob / http://mrdoob.com
   * @author alteredq / http://alteredqualia.com/
   * @author WestLangley / http://github.com/WestLangley
   * @author erich666 / http://erichaines.com
   * @author ScieCode / http://github.com/sciecode
   */

  // This set of controls performs orbiting, dollying (zooming), and panning.
  // Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
  //
  //    Orbit - left mouse / touch: one-finger move
  //    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
  //    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move

  var OrbitControls = function ( object, domElement ) {

  	if ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter "domElement" is now mandatory.' );
  	if ( domElement === document ) console.error( 'THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.' );

  	this.object = object;
  	this.domElement = domElement;

  	// Set to false to disable this control
  	this.enabled = true;

  	// "target" sets the location of focus, where the object orbits around
  	this.target = new Vector3();

  	// How far you can dolly in and out ( PerspectiveCamera only )
  	this.minDistance = 0;
  	this.maxDistance = Infinity;

  	// How far you can zoom in and out ( OrthographicCamera only )
  	this.minZoom = 0;
  	this.maxZoom = Infinity;

  	// How far you can orbit vertically, upper and lower limits.
  	// Range is 0 to Math.PI radians.
  	this.minPolarAngle = 0; // radians
  	this.maxPolarAngle = Math.PI; // radians

  	// How far you can orbit horizontally, upper and lower limits.
  	// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
  	this.minAzimuthAngle = - Infinity; // radians
  	this.maxAzimuthAngle = Infinity; // radians

  	// Set to true to enable damping (inertia)
  	// If damping is enabled, you must call controls.update() in your animation loop
  	this.enableDamping = false;
  	this.dampingFactor = 0.05;

  	// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
  	// Set to false to disable zooming
  	this.enableZoom = true;
  	this.zoomSpeed = 1.0;

  	// Set to false to disable rotating
  	this.enableRotate = true;
  	this.rotateSpeed = 1.0;

  	// Set to false to disable panning
  	this.enablePan = true;
  	this.panSpeed = 1.0;
  	this.screenSpacePanning = false; // if true, pan in screen-space
  	this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

  	// Set to true to automatically rotate around the target
  	// If auto-rotate is enabled, you must call controls.update() in your animation loop
  	this.autoRotate = false;
  	this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

  	// Set to false to disable use of the keys
  	this.enableKeys = true;

  	// The four arrow keys
  	this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };

  	// Mouse buttons
  	this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };

  	// Touch fingers
  	this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };

  	// for reset
  	this.target0 = this.target.clone();
  	this.position0 = this.object.position.clone();
  	this.zoom0 = this.object.zoom;

  	//
  	// public methods
  	//

  	this.getPolarAngle = function () {

  		return spherical.phi;

  	};

  	this.getAzimuthalAngle = function () {

  		return spherical.theta;

  	};

  	this.saveState = function () {

  		scope.target0.copy( scope.target );
  		scope.position0.copy( scope.object.position );
  		scope.zoom0 = scope.object.zoom;

  	};

  	this.reset = function () {

  		scope.target.copy( scope.target0 );
  		scope.object.position.copy( scope.position0 );
  		scope.object.zoom = scope.zoom0;

  		scope.object.updateProjectionMatrix();
  		scope.dispatchEvent( changeEvent );

  		scope.update();

  		state = STATE.NONE;

  	};

  	// this method is exposed, but perhaps it would be better if we can make it private...
  	this.update = function () {

  		var offset = new Vector3();

  		// so camera.up is the orbit axis
  		var quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );
  		var quatInverse = quat.clone().inverse();

  		var lastPosition = new Vector3();
  		var lastQuaternion = new Quaternion();

  		return function update() {

  			var position = scope.object.position;

  			offset.copy( position ).sub( scope.target );

  			// rotate offset to "y-axis-is-up" space
  			offset.applyQuaternion( quat );

  			// angle from z-axis around y-axis
  			spherical.setFromVector3( offset );

  			if ( scope.autoRotate && state === STATE.NONE ) {

  				rotateLeft( getAutoRotationAngle() );

  			}

  			if ( scope.enableDamping ) {

  				spherical.theta += sphericalDelta.theta * scope.dampingFactor;
  				spherical.phi += sphericalDelta.phi * scope.dampingFactor;

  			} else {

  				spherical.theta += sphericalDelta.theta;
  				spherical.phi += sphericalDelta.phi;

  			}

  			// restrict theta to be between desired limits
  			spherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );

  			// restrict phi to be between desired limits
  			spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );

  			spherical.makeSafe();


  			spherical.radius *= scale;

  			// restrict radius to be between desired limits
  			spherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );

  			// move target to panned location

  			if ( scope.enableDamping === true ) {

  				scope.target.addScaledVector( panOffset, scope.dampingFactor );

  			} else {

  				scope.target.add( panOffset );

  			}

  			offset.setFromSpherical( spherical );

  			// rotate offset back to "camera-up-vector-is-up" space
  			offset.applyQuaternion( quatInverse );

  			position.copy( scope.target ).add( offset );

  			scope.object.lookAt( scope.target );

  			if ( scope.enableDamping === true ) {

  				sphericalDelta.theta *= ( 1 - scope.dampingFactor );
  				sphericalDelta.phi *= ( 1 - scope.dampingFactor );

  				panOffset.multiplyScalar( 1 - scope.dampingFactor );

  			} else {

  				sphericalDelta.set( 0, 0, 0 );

  				panOffset.set( 0, 0, 0 );

  			}

  			scale = 1;

  			// update condition is:
  			// min(camera displacement, camera rotation in radians)^2 > EPS
  			// using small-angle approximation cos(x/2) = 1 - x^2 / 8

  			if ( zoomChanged ||
  				lastPosition.distanceToSquared( scope.object.position ) > EPS ||
  				8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {

  				scope.dispatchEvent( changeEvent );

  				lastPosition.copy( scope.object.position );
  				lastQuaternion.copy( scope.object.quaternion );
  				zoomChanged = false;

  				return true;

  			}

  			return false;

  		};

  	}();

  	this.dispose = function () {

  		scope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );
  		scope.domElement.removeEventListener( 'mousedown', onMouseDown, false );
  		scope.domElement.removeEventListener( 'wheel', onMouseWheel, false );

  		scope.domElement.removeEventListener( 'touchstart', onTouchStart, false );
  		scope.domElement.removeEventListener( 'touchend', onTouchEnd, false );
  		scope.domElement.removeEventListener( 'touchmove', onTouchMove, false );

  		document.removeEventListener( 'mousemove', onMouseMove, false );
  		document.removeEventListener( 'mouseup', onMouseUp, false );

  		scope.domElement.removeEventListener( 'keydown', onKeyDown, false );

  		//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

  	};

  	//
  	// internals
  	//

  	var scope = this;

  	var changeEvent = { type: 'change' };
  	var startEvent = { type: 'start' };
  	var endEvent = { type: 'end' };

  	var STATE = {
  		NONE: - 1,
  		ROTATE: 0,
  		DOLLY: 1,
  		PAN: 2,
  		TOUCH_ROTATE: 3,
  		TOUCH_PAN: 4,
  		TOUCH_DOLLY_PAN: 5,
  		TOUCH_DOLLY_ROTATE: 6
  	};

  	var state = STATE.NONE;

  	var EPS = 0.000001;

  	// current position in spherical coordinates
  	var spherical = new Spherical();
  	var sphericalDelta = new Spherical();

  	var scale = 1;
  	var panOffset = new Vector3();
  	var zoomChanged = false;

  	var rotateStart = new Vector2();
  	var rotateEnd = new Vector2();
  	var rotateDelta = new Vector2();

  	var panStart = new Vector2();
  	var panEnd = new Vector2();
  	var panDelta = new Vector2();

  	var dollyStart = new Vector2();
  	var dollyEnd = new Vector2();
  	var dollyDelta = new Vector2();

  	function getAutoRotationAngle() {

  		return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

  	}

  	function getZoomScale() {

  		return Math.pow( 0.95, scope.zoomSpeed );

  	}

  	function rotateLeft( angle ) {

  		sphericalDelta.theta -= angle;

  	}

  	function rotateUp( angle ) {

  		sphericalDelta.phi -= angle;

  	}

  	var panLeft = function () {

  		var v = new Vector3();

  		return function panLeft( distance, objectMatrix ) {

  			v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
  			v.multiplyScalar( - distance );

  			panOffset.add( v );

  		};

  	}();

  	var panUp = function () {

  		var v = new Vector3();

  		return function panUp( distance, objectMatrix ) {

  			if ( scope.screenSpacePanning === true ) {

  				v.setFromMatrixColumn( objectMatrix, 1 );

  			} else {

  				v.setFromMatrixColumn( objectMatrix, 0 );
  				v.crossVectors( scope.object.up, v );

  			}

  			v.multiplyScalar( distance );

  			panOffset.add( v );

  		};

  	}();

  	// deltaX and deltaY are in pixels; right and down are positive
  	var pan = function () {

  		var offset = new Vector3();

  		return function pan( deltaX, deltaY ) {

  			var element = scope.domElement;

  			if ( scope.object.isPerspectiveCamera ) {

  				// perspective
  				var position = scope.object.position;
  				offset.copy( position ).sub( scope.target );
  				var targetDistance = offset.length();

  				// half of the fov is center to top of screen
  				targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

  				// we use only clientHeight here so aspect ratio does not distort speed
  				panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
  				panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

  			} else if ( scope.object.isOrthographicCamera ) {

  				// orthographic
  				panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
  				panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

  			} else {

  				// camera neither orthographic nor perspective
  				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
  				scope.enablePan = false;

  			}

  		};

  	}();

  	function dollyOut( dollyScale ) {

  		if ( scope.object.isPerspectiveCamera ) {

  			scale /= dollyScale;

  		} else if ( scope.object.isOrthographicCamera ) {

  			scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );
  			scope.object.updateProjectionMatrix();
  			zoomChanged = true;

  		} else {

  			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
  			scope.enableZoom = false;

  		}

  	}

  	function dollyIn( dollyScale ) {

  		if ( scope.object.isPerspectiveCamera ) {

  			scale *= dollyScale;

  		} else if ( scope.object.isOrthographicCamera ) {

  			scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );
  			scope.object.updateProjectionMatrix();
  			zoomChanged = true;

  		} else {

  			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
  			scope.enableZoom = false;

  		}

  	}

  	//
  	// event callbacks - update the object state
  	//

  	function handleMouseDownRotate( event ) {

  		rotateStart.set( event.clientX, event.clientY );

  	}

  	function handleMouseDownDolly( event ) {

  		dollyStart.set( event.clientX, event.clientY );

  	}

  	function handleMouseDownPan( event ) {

  		panStart.set( event.clientX, event.clientY );

  	}

  	function handleMouseMoveRotate( event ) {

  		rotateEnd.set( event.clientX, event.clientY );

  		rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );

  		var element = scope.domElement;

  		rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height

  		rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );

  		rotateStart.copy( rotateEnd );

  		scope.update();

  	}

  	function handleMouseMoveDolly( event ) {

  		dollyEnd.set( event.clientX, event.clientY );

  		dollyDelta.subVectors( dollyEnd, dollyStart );

  		if ( dollyDelta.y > 0 ) {

  			dollyOut( getZoomScale() );

  		} else if ( dollyDelta.y < 0 ) {

  			dollyIn( getZoomScale() );

  		}

  		dollyStart.copy( dollyEnd );

  		scope.update();

  	}

  	function handleMouseMovePan( event ) {

  		panEnd.set( event.clientX, event.clientY );

  		panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );

  		pan( panDelta.x, panDelta.y );

  		panStart.copy( panEnd );

  		scope.update();

  	}

  	function handleMouseWheel( event ) {

  		if ( event.deltaY < 0 ) {

  			dollyIn( getZoomScale() );

  		} else if ( event.deltaY > 0 ) {

  			dollyOut( getZoomScale() );

  		}

  		scope.update();

  	}

  	function handleKeyDown( event ) {

  		var needsUpdate = false;

  		switch ( event.keyCode ) {

  			case scope.keys.UP:
  				pan( 0, scope.keyPanSpeed );
  				needsUpdate = true;
  				break;

  			case scope.keys.BOTTOM:
  				pan( 0, - scope.keyPanSpeed );
  				needsUpdate = true;
  				break;

  			case scope.keys.LEFT:
  				pan( scope.keyPanSpeed, 0 );
  				needsUpdate = true;
  				break;

  			case scope.keys.RIGHT:
  				pan( - scope.keyPanSpeed, 0 );
  				needsUpdate = true;
  				break;

  		}

  		if ( needsUpdate ) {

  			// prevent the browser from scrolling on cursor keys
  			event.preventDefault();

  			scope.update();

  		}


  	}

  	function handleTouchStartRotate( event ) {

  		if ( event.touches.length == 1 ) {

  			rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

  		} else {

  			var x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );
  			var y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );

  			rotateStart.set( x, y );

  		}

  	}

  	function handleTouchStartPan( event ) {

  		if ( event.touches.length == 1 ) {

  			panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

  		} else {

  			var x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );
  			var y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );

  			panStart.set( x, y );

  		}

  	}

  	function handleTouchStartDolly( event ) {

  		var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
  		var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

  		var distance = Math.sqrt( dx * dx + dy * dy );

  		dollyStart.set( 0, distance );

  	}

  	function handleTouchStartDollyPan( event ) {

  		if ( scope.enableZoom ) handleTouchStartDolly( event );

  		if ( scope.enablePan ) handleTouchStartPan( event );

  	}

  	function handleTouchStartDollyRotate( event ) {

  		if ( scope.enableZoom ) handleTouchStartDolly( event );

  		if ( scope.enableRotate ) handleTouchStartRotate( event );

  	}

  	function handleTouchMoveRotate( event ) {

  		if ( event.touches.length == 1 ) {

  			rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

  		} else {

  			var x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );
  			var y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );

  			rotateEnd.set( x, y );

  		}

  		rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );

  		var element = scope.domElement;

  		rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height

  		rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );

  		rotateStart.copy( rotateEnd );

  	}

  	function handleTouchMovePan( event ) {

  		if ( event.touches.length == 1 ) {

  			panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

  		} else {

  			var x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );
  			var y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );

  			panEnd.set( x, y );

  		}

  		panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );

  		pan( panDelta.x, panDelta.y );

  		panStart.copy( panEnd );

  	}

  	function handleTouchMoveDolly( event ) {

  		var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
  		var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

  		var distance = Math.sqrt( dx * dx + dy * dy );

  		dollyEnd.set( 0, distance );

  		dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );

  		dollyOut( dollyDelta.y );

  		dollyStart.copy( dollyEnd );

  	}

  	function handleTouchMoveDollyPan( event ) {

  		if ( scope.enableZoom ) handleTouchMoveDolly( event );

  		if ( scope.enablePan ) handleTouchMovePan( event );

  	}

  	function handleTouchMoveDollyRotate( event ) {

  		if ( scope.enableZoom ) handleTouchMoveDolly( event );

  		if ( scope.enableRotate ) handleTouchMoveRotate( event );

  	}

  	//
  	// event handlers - FSM: listen for events and reset state
  	//

  	function onMouseDown( event ) {

  		if ( scope.enabled === false ) return;

  		// Prevent the browser from scrolling.
  		event.preventDefault();

  		// Manually set the focus since calling preventDefault above
  		// prevents the browser from setting it automatically.

  		scope.domElement.focus ? scope.domElement.focus() : window.focus();

  		var mouseAction;

  		switch ( event.button ) {

  			case 0:

  				mouseAction = scope.mouseButtons.LEFT;
  				break;

  			case 1:

  				mouseAction = scope.mouseButtons.MIDDLE;
  				break;

  			case 2:

  				mouseAction = scope.mouseButtons.RIGHT;
  				break;

  			default:

  				mouseAction = - 1;

  		}

  		switch ( mouseAction ) {

  			case MOUSE.DOLLY:

  				if ( scope.enableZoom === false ) return;

  				handleMouseDownDolly( event );

  				state = STATE.DOLLY;

  				break;

  			case MOUSE.ROTATE:

  				if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

  					if ( scope.enablePan === false ) return;

  					handleMouseDownPan( event );

  					state = STATE.PAN;

  				} else {

  					if ( scope.enableRotate === false ) return;

  					handleMouseDownRotate( event );

  					state = STATE.ROTATE;

  				}

  				break;

  			case MOUSE.PAN:

  				if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

  					if ( scope.enableRotate === false ) return;

  					handleMouseDownRotate( event );

  					state = STATE.ROTATE;

  				} else {

  					if ( scope.enablePan === false ) return;

  					handleMouseDownPan( event );

  					state = STATE.PAN;

  				}

  				break;

  			default:

  				state = STATE.NONE;

  		}

  		if ( state !== STATE.NONE ) {

  			document.addEventListener( 'mousemove', onMouseMove, false );
  			document.addEventListener( 'mouseup', onMouseUp, false );

  			scope.dispatchEvent( startEvent );

  		}

  	}

  	function onMouseMove( event ) {

  		if ( scope.enabled === false ) return;

  		event.preventDefault();

  		switch ( state ) {

  			case STATE.ROTATE:

  				if ( scope.enableRotate === false ) return;

  				handleMouseMoveRotate( event );

  				break;

  			case STATE.DOLLY:

  				if ( scope.enableZoom === false ) return;

  				handleMouseMoveDolly( event );

  				break;

  			case STATE.PAN:

  				if ( scope.enablePan === false ) return;

  				handleMouseMovePan( event );

  				break;

  		}

  	}

  	function onMouseUp( event ) {

  		if ( scope.enabled === false ) return;

  		document.removeEventListener( 'mousemove', onMouseMove, false );
  		document.removeEventListener( 'mouseup', onMouseUp, false );

  		scope.dispatchEvent( endEvent );

  		state = STATE.NONE;

  	}

  	function onMouseWheel( event ) {

  		if ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;

  		event.preventDefault();
  		event.stopPropagation();

  		scope.dispatchEvent( startEvent );

  		handleMouseWheel( event );

  		scope.dispatchEvent( endEvent );

  	}

  	function onKeyDown( event ) {

  		if ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;

  		handleKeyDown( event );

  	}

  	function onTouchStart( event ) {

  		if ( scope.enabled === false ) return;

  		event.preventDefault(); // prevent scrolling

  		switch ( event.touches.length ) {

  			case 1:

  				switch ( scope.touches.ONE ) {

  					case TOUCH.ROTATE:

  						if ( scope.enableRotate === false ) return;

  						handleTouchStartRotate( event );

  						state = STATE.TOUCH_ROTATE;

  						break;

  					case TOUCH.PAN:

  						if ( scope.enablePan === false ) return;

  						handleTouchStartPan( event );

  						state = STATE.TOUCH_PAN;

  						break;

  					default:

  						state = STATE.NONE;

  				}

  				break;

  			case 2:

  				switch ( scope.touches.TWO ) {

  					case TOUCH.DOLLY_PAN:

  						if ( scope.enableZoom === false && scope.enablePan === false ) return;

  						handleTouchStartDollyPan( event );

  						state = STATE.TOUCH_DOLLY_PAN;

  						break;

  					case TOUCH.DOLLY_ROTATE:

  						if ( scope.enableZoom === false && scope.enableRotate === false ) return;

  						handleTouchStartDollyRotate( event );

  						state = STATE.TOUCH_DOLLY_ROTATE;

  						break;

  					default:

  						state = STATE.NONE;

  				}

  				break;

  			default:

  				state = STATE.NONE;

  		}

  		if ( state !== STATE.NONE ) {

  			scope.dispatchEvent( startEvent );

  		}

  	}

  	function onTouchMove( event ) {

  		if ( scope.enabled === false ) return;

  		event.preventDefault(); // prevent scrolling
  		event.stopPropagation();

  		switch ( state ) {

  			case STATE.TOUCH_ROTATE:

  				if ( scope.enableRotate === false ) return;

  				handleTouchMoveRotate( event );

  				scope.update();

  				break;

  			case STATE.TOUCH_PAN:

  				if ( scope.enablePan === false ) return;

  				handleTouchMovePan( event );

  				scope.update();

  				break;

  			case STATE.TOUCH_DOLLY_PAN:

  				if ( scope.enableZoom === false && scope.enablePan === false ) return;

  				handleTouchMoveDollyPan( event );

  				scope.update();

  				break;

  			case STATE.TOUCH_DOLLY_ROTATE:

  				if ( scope.enableZoom === false && scope.enableRotate === false ) return;

  				handleTouchMoveDollyRotate( event );

  				scope.update();

  				break;

  			default:

  				state = STATE.NONE;

  		}

  	}

  	function onTouchEnd( event ) {

  		if ( scope.enabled === false ) return;

  		scope.dispatchEvent( endEvent );

  		state = STATE.NONE;

  	}

  	function onContextMenu( event ) {

  		if ( scope.enabled === false ) return;

  		event.preventDefault();

  	}

  	//

  	scope.domElement.addEventListener( 'contextmenu', onContextMenu, false );

  	scope.domElement.addEventListener( 'mousedown', onMouseDown, false );
  	scope.domElement.addEventListener( 'wheel', onMouseWheel, false );

  	scope.domElement.addEventListener( 'touchstart', onTouchStart, false );
  	scope.domElement.addEventListener( 'touchend', onTouchEnd, false );
  	scope.domElement.addEventListener( 'touchmove', onTouchMove, false );

  	scope.domElement.addEventListener( 'keydown', onKeyDown, false );

  	// make sure element can receive keys.

  	if ( scope.domElement.tabIndex === - 1 ) {

  		scope.domElement.tabIndex = 0;

  	}

  	// force an update at start

  	this.update();

  };

  OrbitControls.prototype = Object.create( EventDispatcher.prototype );
  OrbitControls.prototype.constructor = OrbitControls;


  // This set of controls performs orbiting, dollying (zooming), and panning.
  // Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
  // This is very similar to OrbitControls, another set of touch behavior
  //
  //    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate
  //    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
  //    Pan - left mouse, or arrow keys / touch: one-finger move

  var MapControls = function ( object, domElement ) {

  	OrbitControls.call( this, object, domElement );

  	this.mouseButtons.LEFT = MOUSE.PAN;
  	this.mouseButtons.RIGHT = MOUSE.ROTATE;

  	this.touches.ONE = TOUCH.PAN;
  	this.touches.TWO = TOUCH.DOLLY_ROTATE;

  };

  MapControls.prototype = Object.create( EventDispatcher.prototype );
  MapControls.prototype.constructor = MapControls;

  /**
   * @author Rich Tibbett / https://github.com/richtr
   * @author mrdoob / http://mrdoob.com/
   * @author Tony Parisi / http://www.tonyparisi.com/
   * @author Takahiro / https://github.com/takahirox
   * @author Don McCurdy / https://www.donmccurdy.com
   */

  var GLTFLoader = ( function () {

  	function GLTFLoader( manager ) {

  		Loader.call( this, manager );

  		this.dracoLoader = null;
  		this.ddsLoader = null;

  	}

  	GLTFLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

  		constructor: GLTFLoader,

  		load: function ( url, onLoad, onProgress, onError ) {

  			var scope = this;

  			var resourcePath;

  			if ( this.resourcePath !== '' ) {

  				resourcePath = this.resourcePath;

  			} else if ( this.path !== '' ) {

  				resourcePath = this.path;

  			} else {

  				resourcePath = LoaderUtils.extractUrlBase( url );

  			}

  			// Tells the LoadingManager to track an extra item, which resolves after
  			// the model is fully loaded. This means the count of items loaded will
  			// be incorrect, but ensures manager.onLoad() does not fire early.
  			scope.manager.itemStart( url );

  			var _onError = function ( e ) {

  				if ( onError ) {

  					onError( e );

  				} else {

  					console.error( e );

  				}

  				scope.manager.itemError( url );
  				scope.manager.itemEnd( url );

  			};

  			var loader = new FileLoader( scope.manager );

  			loader.setPath( this.path );
  			loader.setResponseType( 'arraybuffer' );

  			if ( scope.crossOrigin === 'use-credentials' ) {

  				loader.setWithCredentials( true );

  			}

  			loader.load( url, function ( data ) {

  				try {

  					scope.parse( data, resourcePath, function ( gltf ) {

  						onLoad( gltf );

  						scope.manager.itemEnd( url );

  					}, _onError );

  				} catch ( e ) {

  					_onError( e );

  				}

  			}, onProgress, _onError );

  		},

  		setDRACOLoader: function ( dracoLoader ) {

  			this.dracoLoader = dracoLoader;
  			return this;

  		},

  		setDDSLoader: function ( ddsLoader ) {

  			this.ddsLoader = ddsLoader;
  			return this;

  		},

  		parse: function ( data, path, onLoad, onError ) {

  			var content;
  			var extensions = {};

  			if ( typeof data === 'string' ) {

  				content = data;

  			} else {

  				var magic = LoaderUtils.decodeText( new Uint8Array( data, 0, 4 ) );

  				if ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {

  					try {

  						extensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );

  					} catch ( error ) {

  						if ( onError ) onError( error );
  						return;

  					}

  					content = extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content;

  				} else {

  					content = LoaderUtils.decodeText( new Uint8Array( data ) );

  				}

  			}

  			var json = JSON.parse( content );

  			if ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {

  				if ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.' ) );
  				return;

  			}

  			if ( json.extensionsUsed ) {

  				for ( var i = 0; i < json.extensionsUsed.length; ++ i ) {

  					var extensionName = json.extensionsUsed[ i ];
  					var extensionsRequired = json.extensionsRequired || [];

  					switch ( extensionName ) {

  						case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:
  							extensions[ extensionName ] = new GLTFLightsExtension( json );
  							break;

  						case EXTENSIONS.KHR_MATERIALS_CLEARCOAT:
  							extensions[ extensionName ] = new GLTFMaterialsClearcoatExtension();
  							break;

  						case EXTENSIONS.KHR_MATERIALS_UNLIT:
  							extensions[ extensionName ] = new GLTFMaterialsUnlitExtension();
  							break;

  						case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:
  							extensions[ extensionName ] = new GLTFMaterialsPbrSpecularGlossinessExtension();
  							break;

  						case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:
  							extensions[ extensionName ] = new GLTFDracoMeshCompressionExtension( json, this.dracoLoader );
  							break;

  						case EXTENSIONS.MSFT_TEXTURE_DDS:
  							extensions[ extensionName ] = new GLTFTextureDDSExtension( this.ddsLoader );
  							break;

  						case EXTENSIONS.KHR_TEXTURE_TRANSFORM:
  							extensions[ extensionName ] = new GLTFTextureTransformExtension();
  							break;

  						case EXTENSIONS.KHR_MESH_QUANTIZATION:
  							extensions[ extensionName ] = new GLTFMeshQuantizationExtension();
  							break;

  						default:

  							if ( extensionsRequired.indexOf( extensionName ) >= 0 ) {

  								console.warn( 'THREE.GLTFLoader: Unknown extension "' + extensionName + '".' );

  							}

  					}

  				}

  			}

  			var parser = new GLTFParser( json, extensions, {

  				path: path || this.resourcePath || '',
  				crossOrigin: this.crossOrigin,
  				manager: this.manager

  			} );

  			parser.parse( onLoad, onError );

  		}

  	} );

  	/* GLTFREGISTRY */

  	function GLTFRegistry() {

  		var objects = {};

  		return	{

  			get: function ( key ) {

  				return objects[ key ];

  			},

  			add: function ( key, object ) {

  				objects[ key ] = object;

  			},

  			remove: function ( key ) {

  				delete objects[ key ];

  			},

  			removeAll: function () {

  				objects = {};

  			}

  		};

  	}

  	/*********************************/
  	/********** EXTENSIONS ***********/
  	/*********************************/

  	var EXTENSIONS = {
  		KHR_BINARY_GLTF: 'KHR_binary_glTF',
  		KHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',
  		KHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',
  		KHR_MATERIALS_CLEARCOAT: 'KHR_materials_clearcoat',
  		KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',
  		KHR_MATERIALS_UNLIT: 'KHR_materials_unlit',
  		KHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',
  		KHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',
  		MSFT_TEXTURE_DDS: 'MSFT_texture_dds'
  	};

  	/**
  	 * DDS Texture Extension
  	 *
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_texture_dds
  	 *
  	 */
  	function GLTFTextureDDSExtension( ddsLoader ) {

  		if ( ! ddsLoader ) {

  			throw new Error( 'THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader' );

  		}

  		this.name = EXTENSIONS.MSFT_TEXTURE_DDS;
  		this.ddsLoader = ddsLoader;

  	}

  	/**
  	 * Punctual Lights Extension
  	 *
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual
  	 */
  	function GLTFLightsExtension( json ) {

  		this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;

  		var extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ] ) || {};
  		this.lightDefs = extension.lights || [];

  	}

  	GLTFLightsExtension.prototype.loadLight = function ( lightIndex ) {

  		var lightDef = this.lightDefs[ lightIndex ];
  		var lightNode;

  		var color = new Color( 0xffffff );
  		if ( lightDef.color !== undefined ) color.fromArray( lightDef.color );

  		var range = lightDef.range !== undefined ? lightDef.range : 0;

  		switch ( lightDef.type ) {

  			case 'directional':
  				lightNode = new DirectionalLight( color );
  				lightNode.target.position.set( 0, 0, - 1 );
  				lightNode.add( lightNode.target );
  				break;

  			case 'point':
  				lightNode = new PointLight( color );
  				lightNode.distance = range;
  				break;

  			case 'spot':
  				lightNode = new SpotLight( color );
  				lightNode.distance = range;
  				// Handle spotlight properties.
  				lightDef.spot = lightDef.spot || {};
  				lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;
  				lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;
  				lightNode.angle = lightDef.spot.outerConeAngle;
  				lightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;
  				lightNode.target.position.set( 0, 0, - 1 );
  				lightNode.add( lightNode.target );
  				break;

  			default:
  				throw new Error( 'THREE.GLTFLoader: Unexpected light type, "' + lightDef.type + '".' );

  		}

  		// Some lights (e.g. spot) default to a position other than the origin. Reset the position
  		// here, because node-level parsing will only override position if explicitly specified.
  		lightNode.position.set( 0, 0, 0 );

  		lightNode.decay = 2;

  		if ( lightDef.intensity !== undefined ) lightNode.intensity = lightDef.intensity;

  		lightNode.name = lightDef.name || ( 'light_' + lightIndex );

  		return Promise.resolve( lightNode );

  	};

  	/**
  	 * Unlit Materials Extension
  	 *
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit
  	 */
  	function GLTFMaterialsUnlitExtension() {

  		this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;

  	}

  	GLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {

  		return MeshBasicMaterial;

  	};

  	GLTFMaterialsUnlitExtension.prototype.extendParams = function ( materialParams, materialDef, parser ) {

  		var pending = [];

  		materialParams.color = new Color( 1.0, 1.0, 1.0 );
  		materialParams.opacity = 1.0;

  		var metallicRoughness = materialDef.pbrMetallicRoughness;

  		if ( metallicRoughness ) {

  			if ( Array.isArray( metallicRoughness.baseColorFactor ) ) {

  				var array = metallicRoughness.baseColorFactor;

  				materialParams.color.fromArray( array );
  				materialParams.opacity = array[ 3 ];

  			}

  			if ( metallicRoughness.baseColorTexture !== undefined ) {

  				pending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );

  			}

  		}

  		return Promise.all( pending );

  	};

  	/**
  	 * Clearcoat Materials Extension
  	 *
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_clearcoat
  	 */
  	function GLTFMaterialsClearcoatExtension() {

  		this.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;

  	}

  	GLTFMaterialsClearcoatExtension.prototype.getMaterialType = function () {

  		return MeshPhysicalMaterial;

  	};

  	GLTFMaterialsClearcoatExtension.prototype.extendParams = function ( materialParams, materialDef, parser ) {

  		var pending = [];

  		var extension = materialDef.extensions[ this.name ];

  		if ( extension.clearcoatFactor !== undefined ) {

  			materialParams.clearcoat = extension.clearcoatFactor;

  		}

  		if ( extension.clearcoatTexture !== undefined ) {

  			pending.push( parser.assignTexture( materialParams, 'clearcoatMap', extension.clearcoatTexture ) );

  		}

  		if ( extension.clearcoatRoughnessFactor !== undefined ) {

  			materialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;

  		}

  		if ( extension.clearcoatRoughnessTexture !== undefined ) {

  			pending.push( parser.assignTexture( materialParams, 'clearcoatRoughnessMap', extension.clearcoatRoughnessTexture ) );

  		}

  		if ( extension.clearcoatNormalTexture !== undefined ) {

  			pending.push( parser.assignTexture( materialParams, 'clearcoatNormalMap', extension.clearcoatNormalTexture ) );

  			if ( extension.clearcoatNormalTexture.scale !== undefined ) {

  				var scale = extension.clearcoatNormalTexture.scale;

  				materialParams.clearcoatNormalScale = new Vector2( scale, scale );

  			}

  		}

  		return Promise.all( pending );

  	};

  	/* BINARY EXTENSION */
  	var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';
  	var BINARY_EXTENSION_HEADER_LENGTH = 12;
  	var BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };

  	function GLTFBinaryExtension( data ) {

  		this.name = EXTENSIONS.KHR_BINARY_GLTF;
  		this.content = null;
  		this.body = null;

  		var headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );

  		this.header = {
  			magic: LoaderUtils.decodeText( new Uint8Array( data.slice( 0, 4 ) ) ),
  			version: headerView.getUint32( 4, true ),
  			length: headerView.getUint32( 8, true )
  		};

  		if ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {

  			throw new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );

  		} else if ( this.header.version < 2.0 ) {

  			throw new Error( 'THREE.GLTFLoader: Legacy binary file detected.' );

  		}

  		var chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );
  		var chunkIndex = 0;

  		while ( chunkIndex < chunkView.byteLength ) {

  			var chunkLength = chunkView.getUint32( chunkIndex, true );
  			chunkIndex += 4;

  			var chunkType = chunkView.getUint32( chunkIndex, true );
  			chunkIndex += 4;

  			if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {

  				var contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );
  				this.content = LoaderUtils.decodeText( contentArray );

  			} else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {

  				var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;
  				this.body = data.slice( byteOffset, byteOffset + chunkLength );

  			}

  			// Clients must ignore chunks with unknown types.

  			chunkIndex += chunkLength;

  		}

  		if ( this.content === null ) {

  			throw new Error( 'THREE.GLTFLoader: JSON content not found.' );

  		}

  	}

  	/**
  	 * DRACO Mesh Compression Extension
  	 *
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression
  	 */
  	function GLTFDracoMeshCompressionExtension( json, dracoLoader ) {

  		if ( ! dracoLoader ) {

  			throw new Error( 'THREE.GLTFLoader: No DRACOLoader instance provided.' );

  		}

  		this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;
  		this.json = json;
  		this.dracoLoader = dracoLoader;
  		this.dracoLoader.preload();

  	}

  	GLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function ( primitive, parser ) {

  		var json = this.json;
  		var dracoLoader = this.dracoLoader;
  		var bufferViewIndex = primitive.extensions[ this.name ].bufferView;
  		var gltfAttributeMap = primitive.extensions[ this.name ].attributes;
  		var threeAttributeMap = {};
  		var attributeNormalizedMap = {};
  		var attributeTypeMap = {};

  		for ( var attributeName in gltfAttributeMap ) {

  			var threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();

  			threeAttributeMap[ threeAttributeName ] = gltfAttributeMap[ attributeName ];

  		}

  		for ( attributeName in primitive.attributes ) {

  			var threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();

  			if ( gltfAttributeMap[ attributeName ] !== undefined ) {

  				var accessorDef = json.accessors[ primitive.attributes[ attributeName ] ];
  				var componentType = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];

  				attributeTypeMap[ threeAttributeName ] = componentType;
  				attributeNormalizedMap[ threeAttributeName ] = accessorDef.normalized === true;

  			}

  		}

  		return parser.getDependency( 'bufferView', bufferViewIndex ).then( function ( bufferView ) {

  			return new Promise( function ( resolve ) {

  				dracoLoader.decodeDracoFile( bufferView, function ( geometry ) {

  					for ( var attributeName in geometry.attributes ) {

  						var attribute = geometry.attributes[ attributeName ];
  						var normalized = attributeNormalizedMap[ attributeName ];

  						if ( normalized !== undefined ) attribute.normalized = normalized;

  					}

  					resolve( geometry );

  				}, threeAttributeMap, attributeTypeMap );

  			} );

  		} );

  	};

  	/**
  	 * Texture Transform Extension
  	 *
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_transform
  	 */
  	function GLTFTextureTransformExtension() {

  		this.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;

  	}

  	GLTFTextureTransformExtension.prototype.extendTexture = function ( texture, transform ) {

  		texture = texture.clone();

  		if ( transform.offset !== undefined ) {

  			texture.offset.fromArray( transform.offset );

  		}

  		if ( transform.rotation !== undefined ) {

  			texture.rotation = transform.rotation;

  		}

  		if ( transform.scale !== undefined ) {

  			texture.repeat.fromArray( transform.scale );

  		}

  		if ( transform.texCoord !== undefined ) {

  			console.warn( 'THREE.GLTFLoader: Custom UV sets in "' + this.name + '" extension not yet supported.' );

  		}

  		texture.needsUpdate = true;

  		return texture;

  	};

  	/**
  	 * Specular-Glossiness Extension
  	 *
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness
  	 */

  	/**
  	 * A sub class of StandardMaterial with some of the functionality
  	 * changed via the `onBeforeCompile` callback
  	 * @pailhead
  	 */

  	function GLTFMeshStandardSGMaterial( params ) {

  		MeshStandardMaterial.call( this );

  		this.isGLTFSpecularGlossinessMaterial = true;

  		//various chunks that need replacing
  		var specularMapParsFragmentChunk = [
  			'#ifdef USE_SPECULARMAP',
  			'	uniform sampler2D specularMap;',
  			'#endif'
  		].join( '\n' );

  		var glossinessMapParsFragmentChunk = [
  			'#ifdef USE_GLOSSINESSMAP',
  			'	uniform sampler2D glossinessMap;',
  			'#endif'
  		].join( '\n' );

  		var specularMapFragmentChunk = [
  			'vec3 specularFactor = specular;',
  			'#ifdef USE_SPECULARMAP',
  			'	vec4 texelSpecular = texture2D( specularMap, vUv );',
  			'	texelSpecular = sRGBToLinear( texelSpecular );',
  			'	// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',
  			'	specularFactor *= texelSpecular.rgb;',
  			'#endif'
  		].join( '\n' );

  		var glossinessMapFragmentChunk = [
  			'float glossinessFactor = glossiness;',
  			'#ifdef USE_GLOSSINESSMAP',
  			'	vec4 texelGlossiness = texture2D( glossinessMap, vUv );',
  			'	// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',
  			'	glossinessFactor *= texelGlossiness.a;',
  			'#endif'
  		].join( '\n' );

  		var lightPhysicalFragmentChunk = [
  			'PhysicalMaterial material;',
  			'material.diffuseColor = diffuseColor.rgb;',
  			'vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );',
  			'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',
  			'material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.',
  			'material.specularRoughness += geometryRoughness;',
  			'material.specularRoughness = min( material.specularRoughness, 1.0 );',
  			'material.specularColor = specularFactor.rgb;',
  		].join( '\n' );

  		var uniforms = {
  			specular: { value: new Color().setHex( 0xffffff ) },
  			glossiness: { value: 1 },
  			specularMap: { value: null },
  			glossinessMap: { value: null }
  		};

  		this._extraUniforms = uniforms;

  		// please see #14031 or #13198 for an alternate approach
  		this.onBeforeCompile = function ( shader ) {

  			for ( var uniformName in uniforms ) {

  				shader.uniforms[ uniformName ] = uniforms[ uniformName ];

  			}

  			shader.fragmentShader = shader.fragmentShader.replace( 'uniform float roughness;', 'uniform vec3 specular;' );
  			shader.fragmentShader = shader.fragmentShader.replace( 'uniform float metalness;', 'uniform float glossiness;' );
  			shader.fragmentShader = shader.fragmentShader.replace( '#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk );
  			shader.fragmentShader = shader.fragmentShader.replace( '#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk );
  			shader.fragmentShader = shader.fragmentShader.replace( '#include <roughnessmap_fragment>', specularMapFragmentChunk );
  			shader.fragmentShader = shader.fragmentShader.replace( '#include <metalnessmap_fragment>', glossinessMapFragmentChunk );
  			shader.fragmentShader = shader.fragmentShader.replace( '#include <lights_physical_fragment>', lightPhysicalFragmentChunk );

  		};

  		/*eslint-disable*/
  		Object.defineProperties(
  			this,
  			{
  				specular: {
  					get: function () { return uniforms.specular.value; },
  					set: function ( v ) { uniforms.specular.value = v; }
  				},
  				specularMap: {
  					get: function () { return uniforms.specularMap.value; },
  					set: function ( v ) { uniforms.specularMap.value = v; }
  				},
  				glossiness: {
  					get: function () { return uniforms.glossiness.value; },
  					set: function ( v ) { uniforms.glossiness.value = v; }
  				},
  				glossinessMap: {
  					get: function () { return uniforms.glossinessMap.value; },
  					set: function ( v ) {

  						uniforms.glossinessMap.value = v;
  						//how about something like this - @pailhead
  						if ( v ) {

  							this.defines.USE_GLOSSINESSMAP = '';
  							// set USE_ROUGHNESSMAP to enable vUv
  							this.defines.USE_ROUGHNESSMAP = '';

  						} else {

  							delete this.defines.USE_ROUGHNESSMAP;
  							delete this.defines.USE_GLOSSINESSMAP;

  						}

  					}
  				}
  			}
  		);

  		/*eslint-enable*/
  		delete this.metalness;
  		delete this.roughness;
  		delete this.metalnessMap;
  		delete this.roughnessMap;

  		this.setValues( params );

  	}

  	GLTFMeshStandardSGMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
  	GLTFMeshStandardSGMaterial.prototype.constructor = GLTFMeshStandardSGMaterial;

  	GLTFMeshStandardSGMaterial.prototype.copy = function ( source ) {

  		MeshStandardMaterial.prototype.copy.call( this, source );
  		this.specularMap = source.specularMap;
  		this.specular.copy( source.specular );
  		this.glossinessMap = source.glossinessMap;
  		this.glossiness = source.glossiness;
  		delete this.metalness;
  		delete this.roughness;
  		delete this.metalnessMap;
  		delete this.roughnessMap;
  		return this;

  	};

  	function GLTFMaterialsPbrSpecularGlossinessExtension() {

  		return {

  			name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,

  			specularGlossinessParams: [
  				'color',
  				'map',
  				'lightMap',
  				'lightMapIntensity',
  				'aoMap',
  				'aoMapIntensity',
  				'emissive',
  				'emissiveIntensity',
  				'emissiveMap',
  				'bumpMap',
  				'bumpScale',
  				'normalMap',
  				'normalMapType',
  				'displacementMap',
  				'displacementScale',
  				'displacementBias',
  				'specularMap',
  				'specular',
  				'glossinessMap',
  				'glossiness',
  				'alphaMap',
  				'envMap',
  				'envMapIntensity',
  				'refractionRatio',
  			],

  			getMaterialType: function () {

  				return GLTFMeshStandardSGMaterial;

  			},

  			extendParams: function ( materialParams, materialDef, parser ) {

  				var pbrSpecularGlossiness = materialDef.extensions[ this.name ];

  				materialParams.color = new Color( 1.0, 1.0, 1.0 );
  				materialParams.opacity = 1.0;

  				var pending = [];

  				if ( Array.isArray( pbrSpecularGlossiness.diffuseFactor ) ) {

  					var array = pbrSpecularGlossiness.diffuseFactor;

  					materialParams.color.fromArray( array );
  					materialParams.opacity = array[ 3 ];

  				}

  				if ( pbrSpecularGlossiness.diffuseTexture !== undefined ) {

  					pending.push( parser.assignTexture( materialParams, 'map', pbrSpecularGlossiness.diffuseTexture ) );

  				}

  				materialParams.emissive = new Color( 0.0, 0.0, 0.0 );
  				materialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;
  				materialParams.specular = new Color( 1.0, 1.0, 1.0 );

  				if ( Array.isArray( pbrSpecularGlossiness.specularFactor ) ) {

  					materialParams.specular.fromArray( pbrSpecularGlossiness.specularFactor );

  				}

  				if ( pbrSpecularGlossiness.specularGlossinessTexture !== undefined ) {

  					var specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;
  					pending.push( parser.assignTexture( materialParams, 'glossinessMap', specGlossMapDef ) );
  					pending.push( parser.assignTexture( materialParams, 'specularMap', specGlossMapDef ) );

  				}

  				return Promise.all( pending );

  			},

  			createMaterial: function ( materialParams ) {

  				var material = new GLTFMeshStandardSGMaterial( materialParams );
  				material.fog = true;

  				material.color = materialParams.color;

  				material.map = materialParams.map === undefined ? null : materialParams.map;

  				material.lightMap = null;
  				material.lightMapIntensity = 1.0;

  				material.aoMap = materialParams.aoMap === undefined ? null : materialParams.aoMap;
  				material.aoMapIntensity = 1.0;

  				material.emissive = materialParams.emissive;
  				material.emissiveIntensity = 1.0;
  				material.emissiveMap = materialParams.emissiveMap === undefined ? null : materialParams.emissiveMap;

  				material.bumpMap = materialParams.bumpMap === undefined ? null : materialParams.bumpMap;
  				material.bumpScale = 1;

  				material.normalMap = materialParams.normalMap === undefined ? null : materialParams.normalMap;
  				material.normalMapType = TangentSpaceNormalMap;

  				if ( materialParams.normalScale ) material.normalScale = materialParams.normalScale;

  				material.displacementMap = null;
  				material.displacementScale = 1;
  				material.displacementBias = 0;

  				material.specularMap = materialParams.specularMap === undefined ? null : materialParams.specularMap;
  				material.specular = materialParams.specular;

  				material.glossinessMap = materialParams.glossinessMap === undefined ? null : materialParams.glossinessMap;
  				material.glossiness = materialParams.glossiness;

  				material.alphaMap = null;

  				material.envMap = materialParams.envMap === undefined ? null : materialParams.envMap;
  				material.envMapIntensity = 1.0;

  				material.refractionRatio = 0.98;

  				return material;

  			},

  		};

  	}

  	/**
  	 * Mesh Quantization Extension
  	 *
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization
  	 */
  	function GLTFMeshQuantizationExtension() {

  		this.name = EXTENSIONS.KHR_MESH_QUANTIZATION;

  	}

  	/*********************************/
  	/********** INTERPOLATION ********/
  	/*********************************/

  	// Spline Interpolation
  	// Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation
  	function GLTFCubicSplineInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

  		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

  	}

  	GLTFCubicSplineInterpolant.prototype = Object.create( Interpolant.prototype );
  	GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;

  	GLTFCubicSplineInterpolant.prototype.copySampleValue_ = function ( index ) {

  		// Copies a sample value to the result buffer. See description of glTF
  		// CUBICSPLINE values layout in interpolate_() function below.

  		var result = this.resultBuffer,
  			values = this.sampleValues,
  			valueSize = this.valueSize,
  			offset = index * valueSize * 3 + valueSize;

  		for ( var i = 0; i !== valueSize; i ++ ) {

  			result[ i ] = values[ offset + i ];

  		}

  		return result;

  	};

  	GLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;

  	GLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;

  	GLTFCubicSplineInterpolant.prototype.interpolate_ = function ( i1, t0, t, t1 ) {

  		var result = this.resultBuffer;
  		var values = this.sampleValues;
  		var stride = this.valueSize;

  		var stride2 = stride * 2;
  		var stride3 = stride * 3;

  		var td = t1 - t0;

  		var p = ( t - t0 ) / td;
  		var pp = p * p;
  		var ppp = pp * p;

  		var offset1 = i1 * stride3;
  		var offset0 = offset1 - stride3;

  		var s2 = - 2 * ppp + 3 * pp;
  		var s3 = ppp - pp;
  		var s0 = 1 - s2;
  		var s1 = s3 - pp + p;

  		// Layout of keyframe output values for CUBICSPLINE animations:
  		//   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]
  		for ( var i = 0; i !== stride; i ++ ) {

  			var p0 = values[ offset0 + i + stride ]; // splineVertex_k
  			var m0 = values[ offset0 + i + stride2 ] * td; // outTangent_k * (t_k+1 - t_k)
  			var p1 = values[ offset1 + i + stride ]; // splineVertex_k+1
  			var m1 = values[ offset1 + i ] * td; // inTangent_k+1 * (t_k+1 - t_k)

  			result[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;

  		}

  		return result;

  	};

  	/*********************************/
  	/********** INTERNALS ************/
  	/*********************************/

  	/* CONSTANTS */

  	var WEBGL_CONSTANTS = {
  		FLOAT: 5126,
  		//FLOAT_MAT2: 35674,
  		FLOAT_MAT3: 35675,
  		FLOAT_MAT4: 35676,
  		FLOAT_VEC2: 35664,
  		FLOAT_VEC3: 35665,
  		FLOAT_VEC4: 35666,
  		LINEAR: 9729,
  		REPEAT: 10497,
  		SAMPLER_2D: 35678,
  		POINTS: 0,
  		LINES: 1,
  		LINE_LOOP: 2,
  		LINE_STRIP: 3,
  		TRIANGLES: 4,
  		TRIANGLE_STRIP: 5,
  		TRIANGLE_FAN: 6,
  		UNSIGNED_BYTE: 5121,
  		UNSIGNED_SHORT: 5123
  	};

  	var WEBGL_COMPONENT_TYPES = {
  		5120: Int8Array,
  		5121: Uint8Array,
  		5122: Int16Array,
  		5123: Uint16Array,
  		5125: Uint32Array,
  		5126: Float32Array
  	};

  	var WEBGL_FILTERS = {
  		9728: NearestFilter,
  		9729: LinearFilter,
  		9984: NearestMipmapNearestFilter,
  		9985: LinearMipmapNearestFilter,
  		9986: NearestMipmapLinearFilter,
  		9987: LinearMipmapLinearFilter
  	};

  	var WEBGL_WRAPPINGS = {
  		33071: ClampToEdgeWrapping,
  		33648: MirroredRepeatWrapping,
  		10497: RepeatWrapping
  	};

  	var WEBGL_TYPE_SIZES = {
  		'SCALAR': 1,
  		'VEC2': 2,
  		'VEC3': 3,
  		'VEC4': 4,
  		'MAT2': 4,
  		'MAT3': 9,
  		'MAT4': 16
  	};

  	var ATTRIBUTES = {
  		POSITION: 'position',
  		NORMAL: 'normal',
  		TANGENT: 'tangent',
  		TEXCOORD_0: 'uv',
  		TEXCOORD_1: 'uv2',
  		COLOR_0: 'color',
  		WEIGHTS_0: 'skinWeight',
  		JOINTS_0: 'skinIndex',
  	};

  	var PATH_PROPERTIES = {
  		scale: 'scale',
  		translation: 'position',
  		rotation: 'quaternion',
  		weights: 'morphTargetInfluences'
  	};

  	var INTERPOLATION = {
  		CUBICSPLINE: undefined, // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each
  		                        // keyframe track will be initialized with a default interpolation type, then modified.
  		LINEAR: InterpolateLinear,
  		STEP: InterpolateDiscrete
  	};

  	var ALPHA_MODES = {
  		OPAQUE: 'OPAQUE',
  		MASK: 'MASK',
  		BLEND: 'BLEND'
  	};

  	var MIME_TYPE_FORMATS = {
  		'image/png': RGBAFormat,
  		'image/jpeg': RGBFormat
  	};

  	/* UTILITY FUNCTIONS */

  	function resolveURL( url, path ) {

  		// Invalid URL
  		if ( typeof url !== 'string' || url === '' ) return '';

  		// Host Relative URL
  		if ( /^https?:\/\//i.test( path ) && /^\//.test( url ) ) {

  			path = path.replace( /(^https?:\/\/[^\/]+).*/i, '$1' );

  		}

  		// Absolute URL http://,https://,//
  		if ( /^(https?:)?\/\//i.test( url ) ) return url;

  		// Data URI
  		if ( /^data:.*,.*$/i.test( url ) ) return url;

  		// Blob URL
  		if ( /^blob:.*$/i.test( url ) ) return url;

  		// Relative URL
  		return path + url;

  	}

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material
  	 */
  	function createDefaultMaterial( cache ) {

  		if ( cache[ 'DefaultMaterial' ] === undefined ) {

  			cache[ 'DefaultMaterial' ] = new MeshStandardMaterial( {
  				color: 0xFFFFFF,
  				emissive: 0x000000,
  				metalness: 1,
  				roughness: 1,
  				transparent: false,
  				depthTest: true,
  				side: FrontSide
  			} );

  		}

  		return cache[ 'DefaultMaterial' ];

  	}

  	function addUnknownExtensionsToUserData( knownExtensions, object, objectDef ) {

  		// Add unknown glTF extensions to an object's userData.

  		for ( var name in objectDef.extensions ) {

  			if ( knownExtensions[ name ] === undefined ) {

  				object.userData.gltfExtensions = object.userData.gltfExtensions || {};
  				object.userData.gltfExtensions[ name ] = objectDef.extensions[ name ];

  			}

  		}

  	}

  	/**
  	 * @param {Object3D|Material|BufferGeometry} object
  	 * @param {GLTF.definition} gltfDef
  	 */
  	function assignExtrasToUserData( object, gltfDef ) {

  		if ( gltfDef.extras !== undefined ) {

  			if ( typeof gltfDef.extras === 'object' ) {

  				Object.assign( object.userData, gltfDef.extras );

  			} else {

  				console.warn( 'THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras );

  			}

  		}

  	}

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets
  	 *
  	 * @param {BufferGeometry} geometry
  	 * @param {Array<GLTF.Target>} targets
  	 * @param {GLTFParser} parser
  	 * @return {Promise<BufferGeometry>}
  	 */
  	function addMorphTargets( geometry, targets, parser ) {

  		var hasMorphPosition = false;
  		var hasMorphNormal = false;

  		for ( var i = 0, il = targets.length; i < il; i ++ ) {

  			var target = targets[ i ];

  			if ( target.POSITION !== undefined ) hasMorphPosition = true;
  			if ( target.NORMAL !== undefined ) hasMorphNormal = true;

  			if ( hasMorphPosition && hasMorphNormal ) break;

  		}

  		if ( ! hasMorphPosition && ! hasMorphNormal ) return Promise.resolve( geometry );

  		var pendingPositionAccessors = [];
  		var pendingNormalAccessors = [];

  		for ( var i = 0, il = targets.length; i < il; i ++ ) {

  			var target = targets[ i ];

  			if ( hasMorphPosition ) {

  				var pendingAccessor = target.POSITION !== undefined
  					? parser.getDependency( 'accessor', target.POSITION )
  					: geometry.attributes.position;

  				pendingPositionAccessors.push( pendingAccessor );

  			}

  			if ( hasMorphNormal ) {

  				var pendingAccessor = target.NORMAL !== undefined
  					? parser.getDependency( 'accessor', target.NORMAL )
  					: geometry.attributes.normal;

  				pendingNormalAccessors.push( pendingAccessor );

  			}

  		}

  		return Promise.all( [
  			Promise.all( pendingPositionAccessors ),
  			Promise.all( pendingNormalAccessors )
  		] ).then( function ( accessors ) {

  			var morphPositions = accessors[ 0 ];
  			var morphNormals = accessors[ 1 ];

  			if ( hasMorphPosition ) geometry.morphAttributes.position = morphPositions;
  			if ( hasMorphNormal ) geometry.morphAttributes.normal = morphNormals;
  			geometry.morphTargetsRelative = true;

  			return geometry;

  		} );

  	}

  	/**
  	 * @param {Mesh} mesh
  	 * @param {GLTF.Mesh} meshDef
  	 */
  	function updateMorphTargets( mesh, meshDef ) {

  		mesh.updateMorphTargets();

  		if ( meshDef.weights !== undefined ) {

  			for ( var i = 0, il = meshDef.weights.length; i < il; i ++ ) {

  				mesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];

  			}

  		}

  		// .extras has user-defined data, so check that .extras.targetNames is an array.
  		if ( meshDef.extras && Array.isArray( meshDef.extras.targetNames ) ) {

  			var targetNames = meshDef.extras.targetNames;

  			if ( mesh.morphTargetInfluences.length === targetNames.length ) {

  				mesh.morphTargetDictionary = {};

  				for ( var i = 0, il = targetNames.length; i < il; i ++ ) {

  					mesh.morphTargetDictionary[ targetNames[ i ] ] = i;

  				}

  			} else {

  				console.warn( 'THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.' );

  			}

  		}

  	}

  	function createPrimitiveKey( primitiveDef ) {

  		var dracoExtension = primitiveDef.extensions && primitiveDef.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ];
  		var geometryKey;

  		if ( dracoExtension ) {

  			geometryKey = 'draco:' + dracoExtension.bufferView
  				+ ':' + dracoExtension.indices
  				+ ':' + createAttributesKey( dracoExtension.attributes );

  		} else {

  			geometryKey = primitiveDef.indices + ':' + createAttributesKey( primitiveDef.attributes ) + ':' + primitiveDef.mode;

  		}

  		return geometryKey;

  	}

  	function createAttributesKey( attributes ) {

  		var attributesKey = '';

  		var keys = Object.keys( attributes ).sort();

  		for ( var i = 0, il = keys.length; i < il; i ++ ) {

  			attributesKey += keys[ i ] + ':' + attributes[ keys[ i ] ] + ';';

  		}

  		return attributesKey;

  	}

  	/* GLTF PARSER */

  	function GLTFParser( json, extensions, options ) {

  		this.json = json || {};
  		this.extensions = extensions || {};
  		this.options = options || {};

  		// loader object cache
  		this.cache = new GLTFRegistry();

  		// BufferGeometry caching
  		this.primitiveCache = {};

  		this.textureLoader = new TextureLoader( this.options.manager );
  		this.textureLoader.setCrossOrigin( this.options.crossOrigin );

  		this.fileLoader = new FileLoader( this.options.manager );
  		this.fileLoader.setResponseType( 'arraybuffer' );

  		if ( this.options.crossOrigin === 'use-credentials' ) {

  			this.fileLoader.setWithCredentials( true );

  		}

  	}

  	GLTFParser.prototype.parse = function ( onLoad, onError ) {

  		var parser = this;
  		var json = this.json;
  		var extensions = this.extensions;

  		// Clear the loader cache
  		this.cache.removeAll();

  		// Mark the special nodes/meshes in json for efficient parse
  		this.markDefs();

  		Promise.all( [

  			this.getDependencies( 'scene' ),
  			this.getDependencies( 'animation' ),
  			this.getDependencies( 'camera' ),

  		] ).then( function ( dependencies ) {

  			var result = {
  				scene: dependencies[ 0 ][ json.scene || 0 ],
  				scenes: dependencies[ 0 ],
  				animations: dependencies[ 1 ],
  				cameras: dependencies[ 2 ],
  				asset: json.asset,
  				parser: parser,
  				userData: {}
  			};

  			addUnknownExtensionsToUserData( extensions, result, json );

  			assignExtrasToUserData( result, json );

  			onLoad( result );

  		} ).catch( onError );

  	};

  	/**
  	 * Marks the special nodes/meshes in json for efficient parse.
  	 */
  	GLTFParser.prototype.markDefs = function () {

  		var nodeDefs = this.json.nodes || [];
  		var skinDefs = this.json.skins || [];
  		var meshDefs = this.json.meshes || [];

  		var meshReferences = {};
  		var meshUses = {};

  		// Nothing in the node definition indicates whether it is a Bone or an
  		// Object3D. Use the skins' joint references to mark bones.
  		for ( var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {

  			var joints = skinDefs[ skinIndex ].joints;

  			for ( var i = 0, il = joints.length; i < il; i ++ ) {

  				nodeDefs[ joints[ i ] ].isBone = true;

  			}

  		}

  		// Meshes can (and should) be reused by multiple nodes in a glTF asset. To
  		// avoid having more than one Mesh with the same name, count
  		// references and rename instances below.
  		//
  		// Example: CesiumMilkTruck sample model reuses "Wheel" meshes.
  		for ( var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {

  			var nodeDef = nodeDefs[ nodeIndex ];

  			if ( nodeDef.mesh !== undefined ) {

  				if ( meshReferences[ nodeDef.mesh ] === undefined ) {

  					meshReferences[ nodeDef.mesh ] = meshUses[ nodeDef.mesh ] = 0;

  				}

  				meshReferences[ nodeDef.mesh ] ++;

  				// Nothing in the mesh definition indicates whether it is
  				// a SkinnedMesh or Mesh. Use the node's mesh reference
  				// to mark SkinnedMesh if node has skin.
  				if ( nodeDef.skin !== undefined ) {

  					meshDefs[ nodeDef.mesh ].isSkinnedMesh = true;

  				}

  			}

  		}

  		this.json.meshReferences = meshReferences;
  		this.json.meshUses = meshUses;

  	};

  	/**
  	 * Requests the specified dependency asynchronously, with caching.
  	 * @param {string} type
  	 * @param {number} index
  	 * @return {Promise<Object3D|Material|THREE.Texture|AnimationClip|ArrayBuffer|Object>}
  	 */
  	GLTFParser.prototype.getDependency = function ( type, index ) {

  		var cacheKey = type + ':' + index;
  		var dependency = this.cache.get( cacheKey );

  		if ( ! dependency ) {

  			switch ( type ) {

  				case 'scene':
  					dependency = this.loadScene( index );
  					break;

  				case 'node':
  					dependency = this.loadNode( index );
  					break;

  				case 'mesh':
  					dependency = this.loadMesh( index );
  					break;

  				case 'accessor':
  					dependency = this.loadAccessor( index );
  					break;

  				case 'bufferView':
  					dependency = this.loadBufferView( index );
  					break;

  				case 'buffer':
  					dependency = this.loadBuffer( index );
  					break;

  				case 'material':
  					dependency = this.loadMaterial( index );
  					break;

  				case 'texture':
  					dependency = this.loadTexture( index );
  					break;

  				case 'skin':
  					dependency = this.loadSkin( index );
  					break;

  				case 'animation':
  					dependency = this.loadAnimation( index );
  					break;

  				case 'camera':
  					dependency = this.loadCamera( index );
  					break;

  				case 'light':
  					dependency = this.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].loadLight( index );
  					break;

  				default:
  					throw new Error( 'Unknown type: ' + type );

  			}

  			this.cache.add( cacheKey, dependency );

  		}

  		return dependency;

  	};

  	/**
  	 * Requests all dependencies of the specified type asynchronously, with caching.
  	 * @param {string} type
  	 * @return {Promise<Array<Object>>}
  	 */
  	GLTFParser.prototype.getDependencies = function ( type ) {

  		var dependencies = this.cache.get( type );

  		if ( ! dependencies ) {

  			var parser = this;
  			var defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];

  			dependencies = Promise.all( defs.map( function ( def, index ) {

  				return parser.getDependency( type, index );

  			} ) );

  			this.cache.add( type, dependencies );

  		}

  		return dependencies;

  	};

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
  	 * @param {number} bufferIndex
  	 * @return {Promise<ArrayBuffer>}
  	 */
  	GLTFParser.prototype.loadBuffer = function ( bufferIndex ) {

  		var bufferDef = this.json.buffers[ bufferIndex ];
  		var loader = this.fileLoader;

  		if ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {

  			throw new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );

  		}

  		// If present, GLB container is required to be the first buffer.
  		if ( bufferDef.uri === undefined && bufferIndex === 0 ) {

  			return Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );

  		}

  		var options = this.options;

  		return new Promise( function ( resolve, reject ) {

  			loader.load( resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {

  				reject( new Error( 'THREE.GLTFLoader: Failed to load buffer "' + bufferDef.uri + '".' ) );

  			} );

  		} );

  	};

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
  	 * @param {number} bufferViewIndex
  	 * @return {Promise<ArrayBuffer>}
  	 */
  	GLTFParser.prototype.loadBufferView = function ( bufferViewIndex ) {

  		var bufferViewDef = this.json.bufferViews[ bufferViewIndex ];

  		return this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {

  			var byteLength = bufferViewDef.byteLength || 0;
  			var byteOffset = bufferViewDef.byteOffset || 0;
  			return buffer.slice( byteOffset, byteOffset + byteLength );

  		} );

  	};

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors
  	 * @param {number} accessorIndex
  	 * @return {Promise<BufferAttribute|InterleavedBufferAttribute>}
  	 */
  	GLTFParser.prototype.loadAccessor = function ( accessorIndex ) {

  		var parser = this;
  		var json = this.json;

  		var accessorDef = this.json.accessors[ accessorIndex ];

  		if ( accessorDef.bufferView === undefined && accessorDef.sparse === undefined ) {

  			// Ignore empty accessors, which may be used to declare runtime
  			// information about attributes coming from another source (e.g. Draco
  			// compression extension).
  			return Promise.resolve( null );

  		}

  		var pendingBufferViews = [];

  		if ( accessorDef.bufferView !== undefined ) {

  			pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );

  		} else {

  			pendingBufferViews.push( null );

  		}

  		if ( accessorDef.sparse !== undefined ) {

  			pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );
  			pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );

  		}

  		return Promise.all( pendingBufferViews ).then( function ( bufferViews ) {

  			var bufferView = bufferViews[ 0 ];

  			var itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];
  			var TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];

  			// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.
  			var elementBytes = TypedArray.BYTES_PER_ELEMENT;
  			var itemBytes = elementBytes * itemSize;
  			var byteOffset = accessorDef.byteOffset || 0;
  			var byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[ accessorDef.bufferView ].byteStride : undefined;
  			var normalized = accessorDef.normalized === true;
  			var array, bufferAttribute;

  			// The buffer is not interleaved if the stride is the item size in bytes.
  			if ( byteStride && byteStride !== itemBytes ) {

  				// Each "slice" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer
  				// This makes sure that IBA.count reflects accessor.count properly
  				var ibSlice = Math.floor( byteOffset / byteStride );
  				var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;
  				var ib = parser.cache.get( ibCacheKey );

  				if ( ! ib ) {

  					array = new TypedArray( bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes );

  					// Integer parameters to IB/IBA are in array elements, not bytes.
  					ib = new InterleavedBuffer( array, byteStride / elementBytes );

  					parser.cache.add( ibCacheKey, ib );

  				}

  				bufferAttribute = new InterleavedBufferAttribute( ib, itemSize, ( byteOffset % byteStride ) / elementBytes, normalized );

  			} else {

  				if ( bufferView === null ) {

  					array = new TypedArray( accessorDef.count * itemSize );

  				} else {

  					array = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );

  				}

  				bufferAttribute = new BufferAttribute( array, itemSize, normalized );

  			}

  			// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors
  			if ( accessorDef.sparse !== undefined ) {

  				var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;
  				var TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];

  				var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;
  				var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;

  				var sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );
  				var sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );

  				if ( bufferView !== null ) {

  					// Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.
  					bufferAttribute = new BufferAttribute( bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized );

  				}

  				for ( var i = 0, il = sparseIndices.length; i < il; i ++ ) {

  					var index = sparseIndices[ i ];

  					bufferAttribute.setX( index, sparseValues[ i * itemSize ] );
  					if ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );
  					if ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );
  					if ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );
  					if ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );

  				}

  			}

  			return bufferAttribute;

  		} );

  	};

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures
  	 * @param {number} textureIndex
  	 * @return {Promise<THREE.Texture>}
  	 */
  	GLTFParser.prototype.loadTexture = function ( textureIndex ) {

  		var parser = this;
  		var json = this.json;
  		var options = this.options;
  		var textureLoader = this.textureLoader;

  		var URL = self.URL || self.webkitURL;

  		var textureDef = json.textures[ textureIndex ];

  		var textureExtensions = textureDef.extensions || {};

  		var source;

  		if ( textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ] ) {

  			source = json.images[ textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].source ];

  		} else {

  			source = json.images[ textureDef.source ];

  		}

  		var sourceURI = source.uri;
  		var isObjectURL = false;

  		if ( source.bufferView !== undefined ) {

  			// Load binary image data from bufferView, if provided.

  			sourceURI = parser.getDependency( 'bufferView', source.bufferView ).then( function ( bufferView ) {

  				isObjectURL = true;
  				var blob = new Blob( [ bufferView ], { type: source.mimeType } );
  				sourceURI = URL.createObjectURL( blob );
  				return sourceURI;

  			} );

  		}

  		return Promise.resolve( sourceURI ).then( function ( sourceURI ) {

  			// Load Texture resource.

  			var loader = options.manager.getHandler( sourceURI );

  			if ( ! loader ) {

  				loader = textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ]
  					? parser.extensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].ddsLoader
  					: textureLoader;

  			}

  			return new Promise( function ( resolve, reject ) {

  				loader.load( resolveURL( sourceURI, options.path ), resolve, undefined, reject );

  			} );

  		} ).then( function ( texture ) {

  			// Clean up resources and configure Texture.

  			if ( isObjectURL === true ) {

  				URL.revokeObjectURL( sourceURI );

  			}

  			texture.flipY = false;

  			if ( textureDef.name ) texture.name = textureDef.name;

  			// Ignore unknown mime types, like DDS files.
  			if ( source.mimeType in MIME_TYPE_FORMATS ) {

  				texture.format = MIME_TYPE_FORMATS[ source.mimeType ];

  			}

  			var samplers = json.samplers || {};
  			var sampler = samplers[ textureDef.sampler ] || {};

  			texture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || LinearFilter;
  			texture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || LinearMipmapLinearFilter;
  			texture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || RepeatWrapping;
  			texture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || RepeatWrapping;

  			return texture;

  		} );

  	};

  	/**
  	 * Asynchronously assigns a texture to the given material parameters.
  	 * @param {Object} materialParams
  	 * @param {string} mapName
  	 * @param {Object} mapDef
  	 * @return {Promise}
  	 */
  	GLTFParser.prototype.assignTexture = function ( materialParams, mapName, mapDef ) {

  		var parser = this;

  		return this.getDependency( 'texture', mapDef.index ).then( function ( texture ) {

  			if ( ! texture.isCompressedTexture ) {

  				switch ( mapName ) {

  					case 'aoMap':
  					case 'emissiveMap':
  					case 'metalnessMap':
  					case 'normalMap':
  					case 'roughnessMap':
  						texture.format = RGBFormat;
  						break;

  				}

  			}

  			// Materials sample aoMap from UV set 1 and other maps from UV set 0 - this can't be configured
  			// However, we will copy UV set 0 to UV set 1 on demand for aoMap
  			if ( mapDef.texCoord !== undefined && mapDef.texCoord != 0 && ! ( mapName === 'aoMap' && mapDef.texCoord == 1 ) ) {

  				console.warn( 'THREE.GLTFLoader: Custom UV set ' + mapDef.texCoord + ' for texture ' + mapName + ' not yet supported.' );

  			}

  			if ( parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] ) {

  				var transform = mapDef.extensions !== undefined ? mapDef.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] : undefined;

  				if ( transform ) {

  					texture = parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ].extendTexture( texture, transform );

  				}

  			}

  			materialParams[ mapName ] = texture;

  		} );

  	};

  	/**
  	 * Assigns final material to a Mesh, Line, or Points instance. The instance
  	 * already has a material (generated from the glTF material options alone)
  	 * but reuse of the same glTF material may require multiple threejs materials
  	 * to accomodate different primitive types, defines, etc. New materials will
  	 * be created if necessary, and reused from a cache.
  	 * @param  {Object3D} mesh Mesh, Line, or Points instance.
  	 */
  	GLTFParser.prototype.assignFinalMaterial = function ( mesh ) {

  		var geometry = mesh.geometry;
  		var material = mesh.material;

  		var useVertexTangents = geometry.attributes.tangent !== undefined;
  		var useVertexColors = geometry.attributes.color !== undefined;
  		var useFlatShading = geometry.attributes.normal === undefined;
  		var useSkinning = mesh.isSkinnedMesh === true;
  		var useMorphTargets = Object.keys( geometry.morphAttributes ).length > 0;
  		var useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;

  		if ( mesh.isPoints ) {

  			var cacheKey = 'PointsMaterial:' + material.uuid;

  			var pointsMaterial = this.cache.get( cacheKey );

  			if ( ! pointsMaterial ) {

  				pointsMaterial = new PointsMaterial();
  				Material.prototype.copy.call( pointsMaterial, material );
  				pointsMaterial.color.copy( material.color );
  				pointsMaterial.map = material.map;
  				pointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px

  				this.cache.add( cacheKey, pointsMaterial );

  			}

  			material = pointsMaterial;

  		} else if ( mesh.isLine ) {

  			var cacheKey = 'LineBasicMaterial:' + material.uuid;

  			var lineMaterial = this.cache.get( cacheKey );

  			if ( ! lineMaterial ) {

  				lineMaterial = new LineBasicMaterial();
  				Material.prototype.copy.call( lineMaterial, material );
  				lineMaterial.color.copy( material.color );

  				this.cache.add( cacheKey, lineMaterial );

  			}

  			material = lineMaterial;

  		}

  		// Clone the material if it will be modified
  		if ( useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets ) {

  			var cacheKey = 'ClonedMaterial:' + material.uuid + ':';

  			if ( material.isGLTFSpecularGlossinessMaterial ) cacheKey += 'specular-glossiness:';
  			if ( useSkinning ) cacheKey += 'skinning:';
  			if ( useVertexTangents ) cacheKey += 'vertex-tangents:';
  			if ( useVertexColors ) cacheKey += 'vertex-colors:';
  			if ( useFlatShading ) cacheKey += 'flat-shading:';
  			if ( useMorphTargets ) cacheKey += 'morph-targets:';
  			if ( useMorphNormals ) cacheKey += 'morph-normals:';

  			var cachedMaterial = this.cache.get( cacheKey );

  			if ( ! cachedMaterial ) {

  				cachedMaterial = material.clone();

  				if ( useSkinning ) cachedMaterial.skinning = true;
  				if ( useVertexTangents ) cachedMaterial.vertexTangents = true;
  				if ( useVertexColors ) cachedMaterial.vertexColors = true;
  				if ( useFlatShading ) cachedMaterial.flatShading = true;
  				if ( useMorphTargets ) cachedMaterial.morphTargets = true;
  				if ( useMorphNormals ) cachedMaterial.morphNormals = true;

  				this.cache.add( cacheKey, cachedMaterial );

  			}

  			material = cachedMaterial;

  		}

  		// workarounds for mesh and geometry

  		if ( material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined ) {

  			geometry.setAttribute( 'uv2', new BufferAttribute( geometry.attributes.uv.array, 2 ) );

  		}

  		// https://github.com/mrdoob/three.js/issues/11438#issuecomment-507003995
  		if ( material.normalScale && ! useVertexTangents ) {

  			material.normalScale.y = - material.normalScale.y;

  		}

  		if ( material.clearcoatNormalScale && ! useVertexTangents ) {

  			material.clearcoatNormalScale.y = - material.clearcoatNormalScale.y;

  		}

  		mesh.material = material;

  	};

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials
  	 * @param {number} materialIndex
  	 * @return {Promise<Material>}
  	 */
  	GLTFParser.prototype.loadMaterial = function ( materialIndex ) {

  		var parser = this;
  		var json = this.json;
  		var extensions = this.extensions;
  		var materialDef = json.materials[ materialIndex ];

  		var materialType;
  		var materialParams = {};
  		var materialExtensions = materialDef.extensions || {};

  		var pending = [];

  		if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] ) {

  			var sgExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];
  			materialType = sgExtension.getMaterialType();
  			pending.push( sgExtension.extendParams( materialParams, materialDef, parser ) );

  		} else if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ] ) {

  			var kmuExtension = extensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ];
  			materialType = kmuExtension.getMaterialType();
  			pending.push( kmuExtension.extendParams( materialParams, materialDef, parser ) );

  		} else {

  			// Specification:
  			// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material

  			materialType = MeshStandardMaterial;

  			var metallicRoughness = materialDef.pbrMetallicRoughness || {};

  			materialParams.color = new Color( 1.0, 1.0, 1.0 );
  			materialParams.opacity = 1.0;

  			if ( Array.isArray( metallicRoughness.baseColorFactor ) ) {

  				var array = metallicRoughness.baseColorFactor;

  				materialParams.color.fromArray( array );
  				materialParams.opacity = array[ 3 ];

  			}

  			if ( metallicRoughness.baseColorTexture !== undefined ) {

  				pending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );

  			}

  			materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;
  			materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;

  			if ( metallicRoughness.metallicRoughnessTexture !== undefined ) {

  				pending.push( parser.assignTexture( materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture ) );
  				pending.push( parser.assignTexture( materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture ) );

  			}

  		}

  		if ( materialDef.doubleSided === true ) {

  			materialParams.side = DoubleSide;

  		}

  		var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;

  		if ( alphaMode === ALPHA_MODES.BLEND ) {

  			materialParams.transparent = true;

  			// See: https://github.com/mrdoob/three.js/issues/17706
  			materialParams.depthWrite = false;

  		} else {

  			materialParams.transparent = false;

  			if ( alphaMode === ALPHA_MODES.MASK ) {

  				materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;

  			}

  		}

  		if ( materialDef.normalTexture !== undefined && materialType !== MeshBasicMaterial ) {

  			pending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture ) );

  			materialParams.normalScale = new Vector2( 1, 1 );

  			if ( materialDef.normalTexture.scale !== undefined ) {

  				materialParams.normalScale.set( materialDef.normalTexture.scale, materialDef.normalTexture.scale );

  			}

  		}

  		if ( materialDef.occlusionTexture !== undefined && materialType !== MeshBasicMaterial ) {

  			pending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture ) );

  			if ( materialDef.occlusionTexture.strength !== undefined ) {

  				materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;

  			}

  		}

  		if ( materialDef.emissiveFactor !== undefined && materialType !== MeshBasicMaterial ) {

  			materialParams.emissive = new Color().fromArray( materialDef.emissiveFactor );

  		}

  		if ( materialDef.emissiveTexture !== undefined && materialType !== MeshBasicMaterial ) {

  			pending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture ) );

  		}

  		if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_CLEARCOAT ] ) {

  			var clearcoatExtension = extensions[ EXTENSIONS.KHR_MATERIALS_CLEARCOAT ];
  			materialType = clearcoatExtension.getMaterialType();
  			pending.push( clearcoatExtension.extendParams( materialParams, { extensions: materialExtensions }, parser ) );

  		}

  		return Promise.all( pending ).then( function () {

  			var material;

  			if ( materialType === GLTFMeshStandardSGMaterial ) {

  				material = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].createMaterial( materialParams );

  			} else {

  				material = new materialType( materialParams );

  			}

  			if ( materialDef.name ) material.name = materialDef.name;

  			// baseColorTexture, emissiveTexture, and specularGlossinessTexture use sRGB encoding.
  			if ( material.map ) material.map.encoding = sRGBEncoding;
  			if ( material.emissiveMap ) material.emissiveMap.encoding = sRGBEncoding;

  			assignExtrasToUserData( material, materialDef );

  			if ( materialDef.extensions ) addUnknownExtensionsToUserData( extensions, material, materialDef );

  			return material;

  		} );

  	};

  	/**
  	 * @param {BufferGeometry} geometry
  	 * @param {GLTF.Primitive} primitiveDef
  	 * @param {GLTFParser} parser
  	 */
  	function computeBounds( geometry, primitiveDef, parser ) {

  		var attributes = primitiveDef.attributes;

  		var box = new Box3();

  		if ( attributes.POSITION !== undefined ) {

  			var accessor = parser.json.accessors[ attributes.POSITION ];

  			var min = accessor.min;
  			var max = accessor.max;

  			// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.

  			if ( min !== undefined && max !== undefined ) {

  				box.set(
  					new Vector3( min[ 0 ], min[ 1 ], min[ 2 ] ),
  					new Vector3( max[ 0 ], max[ 1 ], max[ 2 ] ) );

  			} else {

  				console.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );

  				return;

  			}

  		} else {

  			return;

  		}

  		var targets = primitiveDef.targets;

  		if ( targets !== undefined ) {

  			var maxDisplacement = new Vector3();
  			var vector = new Vector3();

  			for ( var i = 0, il = targets.length; i < il; i ++ ) {

  				var target = targets[ i ];

  				if ( target.POSITION !== undefined ) {

  					var accessor = parser.json.accessors[ target.POSITION ];
  					var min = accessor.min;
  					var max = accessor.max;

  					// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.

  					if ( min !== undefined && max !== undefined ) {

  						// we need to get max of absolute components because target weight is [-1,1]
  						vector.setX( Math.max( Math.abs( min[ 0 ] ), Math.abs( max[ 0 ] ) ) );
  						vector.setY( Math.max( Math.abs( min[ 1 ] ), Math.abs( max[ 1 ] ) ) );
  						vector.setZ( Math.max( Math.abs( min[ 2 ] ), Math.abs( max[ 2 ] ) ) );

  						// Note: this assumes that the sum of all weights is at most 1. This isn't quite correct - it's more conservative
  						// to assume that each target can have a max weight of 1. However, for some use cases - notably, when morph targets
  						// are used to implement key-frame animations and as such only two are active at a time - this results in very large
  						// boxes. So for now we make a box that's sometimes a touch too small but is hopefully mostly of reasonable size.
  						maxDisplacement.max( vector );

  					} else {

  						console.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );

  					}

  				}

  			}

  			// As per comment above this box isn't conservative, but has a reasonable size for a very large number of morph targets.
  			box.expandByVector( maxDisplacement );

  		}

  		geometry.boundingBox = box;

  		var sphere = new Sphere();

  		box.getCenter( sphere.center );
  		sphere.radius = box.min.distanceTo( box.max ) / 2;

  		geometry.boundingSphere = sphere;

  	}

  	/**
  	 * @param {BufferGeometry} geometry
  	 * @param {GLTF.Primitive} primitiveDef
  	 * @param {GLTFParser} parser
  	 * @return {Promise<BufferGeometry>}
  	 */
  	function addPrimitiveAttributes( geometry, primitiveDef, parser ) {

  		var attributes = primitiveDef.attributes;

  		var pending = [];

  		function assignAttributeAccessor( accessorIndex, attributeName ) {

  			return parser.getDependency( 'accessor', accessorIndex )
  				.then( function ( accessor ) {

  					geometry.setAttribute( attributeName, accessor );

  				} );

  		}

  		for ( var gltfAttributeName in attributes ) {

  			var threeAttributeName = ATTRIBUTES[ gltfAttributeName ] || gltfAttributeName.toLowerCase();

  			// Skip attributes already provided by e.g. Draco extension.
  			if ( threeAttributeName in geometry.attributes ) continue;

  			pending.push( assignAttributeAccessor( attributes[ gltfAttributeName ], threeAttributeName ) );

  		}

  		if ( primitiveDef.indices !== undefined && ! geometry.index ) {

  			var accessor = parser.getDependency( 'accessor', primitiveDef.indices ).then( function ( accessor ) {

  				geometry.setIndex( accessor );

  			} );

  			pending.push( accessor );

  		}

  		assignExtrasToUserData( geometry, primitiveDef );

  		computeBounds( geometry, primitiveDef, parser );

  		return Promise.all( pending ).then( function () {

  			return primitiveDef.targets !== undefined
  				? addMorphTargets( geometry, primitiveDef.targets, parser )
  				: geometry;

  		} );

  	}

  	/**
  	 * @param {BufferGeometry} geometry
  	 * @param {Number} drawMode
  	 * @return {BufferGeometry}
  	 */
  	function toTrianglesDrawMode( geometry, drawMode ) {

  		var index = geometry.getIndex();

  		// generate index if not present

  		if ( index === null ) {

  			var indices = [];

  			var position = geometry.getAttribute( 'position' );

  			if ( position !== undefined ) {

  				for ( var i = 0; i < position.count; i ++ ) {

  					indices.push( i );

  				}

  				geometry.setIndex( indices );
  				index = geometry.getIndex();

  			} else {

  				console.error( 'THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );
  				return geometry;

  			}

  		}

  		//

  		var numberOfTriangles = index.count - 2;
  		var newIndices = [];

  		if ( drawMode === TriangleFanDrawMode ) {

  			// gl.TRIANGLE_FAN

  			for ( var i = 1; i <= numberOfTriangles; i ++ ) {

  				newIndices.push( index.getX( 0 ) );
  				newIndices.push( index.getX( i ) );
  				newIndices.push( index.getX( i + 1 ) );

  			}

  		} else {

  			// gl.TRIANGLE_STRIP

  			for ( var i = 0; i < numberOfTriangles; i ++ ) {

  				if ( i % 2 === 0 ) {

  					newIndices.push( index.getX( i ) );
  					newIndices.push( index.getX( i + 1 ) );
  					newIndices.push( index.getX( i + 2 ) );


  				} else {

  					newIndices.push( index.getX( i + 2 ) );
  					newIndices.push( index.getX( i + 1 ) );
  					newIndices.push( index.getX( i ) );

  				}

  			}

  		}

  		if ( ( newIndices.length / 3 ) !== numberOfTriangles ) {

  			console.error( 'THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );

  		}

  		// build final geometry

  		var newGeometry = geometry.clone();
  		newGeometry.setIndex( newIndices );

  		return newGeometry;

  	}

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry
  	 *
  	 * Creates BufferGeometries from primitives.
  	 *
  	 * @param {Array<GLTF.Primitive>} primitives
  	 * @return {Promise<Array<BufferGeometry>>}
  	 */
  	GLTFParser.prototype.loadGeometries = function ( primitives ) {

  		var parser = this;
  		var extensions = this.extensions;
  		var cache = this.primitiveCache;

  		function createDracoPrimitive( primitive ) {

  			return extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ]
  				.decodePrimitive( primitive, parser )
  				.then( function ( geometry ) {

  					return addPrimitiveAttributes( geometry, primitive, parser );

  				} );

  		}

  		var pending = [];

  		for ( var i = 0, il = primitives.length; i < il; i ++ ) {

  			var primitive = primitives[ i ];
  			var cacheKey = createPrimitiveKey( primitive );

  			// See if we've already created this geometry
  			var cached = cache[ cacheKey ];

  			if ( cached ) {

  				// Use the cached geometry if it exists
  				pending.push( cached.promise );

  			} else {

  				var geometryPromise;

  				if ( primitive.extensions && primitive.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ] ) {

  					// Use DRACO geometry if available
  					geometryPromise = createDracoPrimitive( primitive );

  				} else {

  					// Otherwise create a new geometry
  					geometryPromise = addPrimitiveAttributes( new BufferGeometry(), primitive, parser );

  				}

  				// Cache this geometry
  				cache[ cacheKey ] = { primitive: primitive, promise: geometryPromise };

  				pending.push( geometryPromise );

  			}

  		}

  		return Promise.all( pending );

  	};

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes
  	 * @param {number} meshIndex
  	 * @return {Promise<Group|Mesh|SkinnedMesh>}
  	 */
  	GLTFParser.prototype.loadMesh = function ( meshIndex ) {

  		var parser = this;
  		var json = this.json;

  		var meshDef = json.meshes[ meshIndex ];
  		var primitives = meshDef.primitives;

  		var pending = [];

  		for ( var i = 0, il = primitives.length; i < il; i ++ ) {

  			var material = primitives[ i ].material === undefined
  				? createDefaultMaterial( this.cache )
  				: this.getDependency( 'material', primitives[ i ].material );

  			pending.push( material );

  		}

  		pending.push( parser.loadGeometries( primitives ) );

  		return Promise.all( pending ).then( function ( results ) {

  			var materials = results.slice( 0, results.length - 1 );
  			var geometries = results[ results.length - 1 ];

  			var meshes = [];

  			for ( var i = 0, il = geometries.length; i < il; i ++ ) {

  				var geometry = geometries[ i ];
  				var primitive = primitives[ i ];

  				// 1. create Mesh

  				var mesh;

  				var material = materials[ i ];

  				if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||
  					primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||
  					primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||
  					primitive.mode === undefined ) {

  					// .isSkinnedMesh isn't in glTF spec. See .markDefs()
  					mesh = meshDef.isSkinnedMesh === true
  						? new SkinnedMesh( geometry, material )
  						: new Mesh( geometry, material );

  					if ( mesh.isSkinnedMesh === true && ! mesh.geometry.attributes.skinWeight.normalized ) {

  						// we normalize floating point skin weight array to fix malformed assets (see #15319)
  						// it's important to skip this for non-float32 data since normalizeSkinWeights assumes non-normalized inputs
  						mesh.normalizeSkinWeights();

  					}

  					if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {

  						mesh.geometry = toTrianglesDrawMode( mesh.geometry, TriangleStripDrawMode );

  					} else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {

  						mesh.geometry = toTrianglesDrawMode( mesh.geometry, TriangleFanDrawMode );

  					}

  				} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {

  					mesh = new LineSegments( geometry, material );

  				} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {

  					mesh = new Line( geometry, material );

  				} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {

  					mesh = new LineLoop( geometry, material );

  				} else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {

  					mesh = new Points( geometry, material );

  				} else {

  					throw new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );

  				}

  				if ( Object.keys( mesh.geometry.morphAttributes ).length > 0 ) {

  					updateMorphTargets( mesh, meshDef );

  				}

  				mesh.name = meshDef.name || ( 'mesh_' + meshIndex );

  				if ( geometries.length > 1 ) mesh.name += '_' + i;

  				assignExtrasToUserData( mesh, meshDef );

  				parser.assignFinalMaterial( mesh );

  				meshes.push( mesh );

  			}

  			if ( meshes.length === 1 ) {

  				return meshes[ 0 ];

  			}

  			var group = new Group();

  			for ( var i = 0, il = meshes.length; i < il; i ++ ) {

  				group.add( meshes[ i ] );

  			}

  			return group;

  		} );

  	};

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras
  	 * @param {number} cameraIndex
  	 * @return {Promise<THREE.Camera>}
  	 */
  	GLTFParser.prototype.loadCamera = function ( cameraIndex ) {

  		var camera;
  		var cameraDef = this.json.cameras[ cameraIndex ];
  		var params = cameraDef[ cameraDef.type ];

  		if ( ! params ) {

  			console.warn( 'THREE.GLTFLoader: Missing camera parameters.' );
  			return;

  		}

  		if ( cameraDef.type === 'perspective' ) {

  			camera = new PerspectiveCamera( MathUtils.radToDeg( params.yfov ), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6 );

  		} else if ( cameraDef.type === 'orthographic' ) {

  			camera = new OrthographicCamera( params.xmag / - 2, params.xmag / 2, params.ymag / 2, params.ymag / - 2, params.znear, params.zfar );

  		}

  		if ( cameraDef.name ) camera.name = cameraDef.name;

  		assignExtrasToUserData( camera, cameraDef );

  		return Promise.resolve( camera );

  	};

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins
  	 * @param {number} skinIndex
  	 * @return {Promise<Object>}
  	 */
  	GLTFParser.prototype.loadSkin = function ( skinIndex ) {

  		var skinDef = this.json.skins[ skinIndex ];

  		var skinEntry = { joints: skinDef.joints };

  		if ( skinDef.inverseBindMatrices === undefined ) {

  			return Promise.resolve( skinEntry );

  		}

  		return this.getDependency( 'accessor', skinDef.inverseBindMatrices ).then( function ( accessor ) {

  			skinEntry.inverseBindMatrices = accessor;

  			return skinEntry;

  		} );

  	};

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations
  	 * @param {number} animationIndex
  	 * @return {Promise<AnimationClip>}
  	 */
  	GLTFParser.prototype.loadAnimation = function ( animationIndex ) {

  		var json = this.json;

  		var animationDef = json.animations[ animationIndex ];

  		var pendingNodes = [];
  		var pendingInputAccessors = [];
  		var pendingOutputAccessors = [];
  		var pendingSamplers = [];
  		var pendingTargets = [];

  		for ( var i = 0, il = animationDef.channels.length; i < il; i ++ ) {

  			var channel = animationDef.channels[ i ];
  			var sampler = animationDef.samplers[ channel.sampler ];
  			var target = channel.target;
  			var name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.
  			var input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;
  			var output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;

  			pendingNodes.push( this.getDependency( 'node', name ) );
  			pendingInputAccessors.push( this.getDependency( 'accessor', input ) );
  			pendingOutputAccessors.push( this.getDependency( 'accessor', output ) );
  			pendingSamplers.push( sampler );
  			pendingTargets.push( target );

  		}

  		return Promise.all( [

  			Promise.all( pendingNodes ),
  			Promise.all( pendingInputAccessors ),
  			Promise.all( pendingOutputAccessors ),
  			Promise.all( pendingSamplers ),
  			Promise.all( pendingTargets )

  		] ).then( function ( dependencies ) {

  			var nodes = dependencies[ 0 ];
  			var inputAccessors = dependencies[ 1 ];
  			var outputAccessors = dependencies[ 2 ];
  			var samplers = dependencies[ 3 ];
  			var targets = dependencies[ 4 ];

  			var tracks = [];

  			for ( var i = 0, il = nodes.length; i < il; i ++ ) {

  				var node = nodes[ i ];
  				var inputAccessor = inputAccessors[ i ];
  				var outputAccessor = outputAccessors[ i ];
  				var sampler = samplers[ i ];
  				var target = targets[ i ];

  				if ( node === undefined ) continue;

  				node.updateMatrix();
  				node.matrixAutoUpdate = true;

  				var TypedKeyframeTrack;

  				switch ( PATH_PROPERTIES[ target.path ] ) {

  					case PATH_PROPERTIES.weights:

  						TypedKeyframeTrack = NumberKeyframeTrack;
  						break;

  					case PATH_PROPERTIES.rotation:

  						TypedKeyframeTrack = QuaternionKeyframeTrack;
  						break;

  					case PATH_PROPERTIES.position:
  					case PATH_PROPERTIES.scale:
  					default:

  						TypedKeyframeTrack = VectorKeyframeTrack;
  						break;

  				}

  				var targetName = node.name ? node.name : node.uuid;

  				var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : InterpolateLinear;

  				var targetNames = [];

  				if ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {

  					// Node may be a Group (glTF mesh with several primitives) or a Mesh.
  					node.traverse( function ( object ) {

  						if ( object.isMesh === true && object.morphTargetInfluences ) {

  							targetNames.push( object.name ? object.name : object.uuid );

  						}

  					} );

  				} else {

  					targetNames.push( targetName );

  				}

  				var outputArray = outputAccessor.array;

  				if ( outputAccessor.normalized ) {

  					var scale;

  					if ( outputArray.constructor === Int8Array ) {

  						scale = 1 / 127;

  					} else if ( outputArray.constructor === Uint8Array ) {

  						scale = 1 / 255;

  					} else if ( outputArray.constructor == Int16Array ) {

  						scale = 1 / 32767;

  					} else if ( outputArray.constructor === Uint16Array ) {

  						scale = 1 / 65535;

  					} else {

  						throw new Error( 'THREE.GLTFLoader: Unsupported output accessor component type.' );

  					}

  					var scaled = new Float32Array( outputArray.length );

  					for ( var j = 0, jl = outputArray.length; j < jl; j ++ ) {

  						scaled[ j ] = outputArray[ j ] * scale;

  					}

  					outputArray = scaled;

  				}

  				for ( var j = 0, jl = targetNames.length; j < jl; j ++ ) {

  					var track = new TypedKeyframeTrack(
  						targetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],
  						inputAccessor.array,
  						outputArray,
  						interpolation
  					);

  					// Override interpolation with custom factory method.
  					if ( sampler.interpolation === 'CUBICSPLINE' ) {

  						track.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline( result ) {

  							// A CUBICSPLINE keyframe in glTF has three output values for each input value,
  							// representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()
  							// must be divided by three to get the interpolant's sampleSize argument.

  							return new GLTFCubicSplineInterpolant( this.times, this.values, this.getValueSize() / 3, result );

  						};

  						// Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.
  						track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;

  					}

  					tracks.push( track );

  				}

  			}

  			var name = animationDef.name ? animationDef.name : 'animation_' + animationIndex;

  			return new AnimationClip( name, undefined, tracks );

  		} );

  	};

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy
  	 * @param {number} nodeIndex
  	 * @return {Promise<Object3D>}
  	 */
  	GLTFParser.prototype.loadNode = function ( nodeIndex ) {

  		var json = this.json;
  		var extensions = this.extensions;
  		var parser = this;

  		var meshReferences = json.meshReferences;
  		var meshUses = json.meshUses;

  		var nodeDef = json.nodes[ nodeIndex ];

  		return ( function () {

  			var pending = [];

  			if ( nodeDef.mesh !== undefined ) {

  				pending.push( parser.getDependency( 'mesh', nodeDef.mesh ).then( function ( mesh ) {

  					var node;

  					if ( meshReferences[ nodeDef.mesh ] > 1 ) {

  						var instanceNum = meshUses[ nodeDef.mesh ] ++;

  						node = mesh.clone();
  						node.name += '_instance_' + instanceNum;

  					} else {

  						node = mesh;

  					}

  					// if weights are provided on the node, override weights on the mesh.
  					if ( nodeDef.weights !== undefined ) {

  						node.traverse( function ( o ) {

  							if ( ! o.isMesh ) return;

  							for ( var i = 0, il = nodeDef.weights.length; i < il; i ++ ) {

  								o.morphTargetInfluences[ i ] = nodeDef.weights[ i ];

  							}

  						} );

  					}

  					return node;

  				} ) );

  			}

  			if ( nodeDef.camera !== undefined ) {

  				pending.push( parser.getDependency( 'camera', nodeDef.camera ) );

  			}

  			if ( nodeDef.extensions
  				&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ]
  				&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light !== undefined ) {

  				pending.push( parser.getDependency( 'light', nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light ) );

  			}

  			return Promise.all( pending );

  		}() ).then( function ( objects ) {

  			var node;

  			// .isBone isn't in glTF spec. See .markDefs
  			if ( nodeDef.isBone === true ) {

  				node = new Bone();

  			} else if ( objects.length > 1 ) {

  				node = new Group();

  			} else if ( objects.length === 1 ) {

  				node = objects[ 0 ];

  			} else {

  				node = new Object3D();

  			}

  			if ( node !== objects[ 0 ] ) {

  				for ( var i = 0, il = objects.length; i < il; i ++ ) {

  					node.add( objects[ i ] );

  				}

  			}

  			if ( nodeDef.name ) {

  				node.userData.name = nodeDef.name;
  				node.name = PropertyBinding.sanitizeNodeName( nodeDef.name );

  			}

  			assignExtrasToUserData( node, nodeDef );

  			if ( nodeDef.extensions ) addUnknownExtensionsToUserData( extensions, node, nodeDef );

  			if ( nodeDef.matrix !== undefined ) {

  				var matrix = new Matrix4();
  				matrix.fromArray( nodeDef.matrix );
  				node.applyMatrix4( matrix );

  			} else {

  				if ( nodeDef.translation !== undefined ) {

  					node.position.fromArray( nodeDef.translation );

  				}

  				if ( nodeDef.rotation !== undefined ) {

  					node.quaternion.fromArray( nodeDef.rotation );

  				}

  				if ( nodeDef.scale !== undefined ) {

  					node.scale.fromArray( nodeDef.scale );

  				}

  			}

  			return node;

  		} );

  	};

  	/**
  	 * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes
  	 * @param {number} sceneIndex
  	 * @return {Promise<Group>}
  	 */
  	GLTFParser.prototype.loadScene = function () {

  		// scene node hierachy builder

  		function buildNodeHierachy( nodeId, parentObject, json, parser ) {

  			var nodeDef = json.nodes[ nodeId ];

  			return parser.getDependency( 'node', nodeId ).then( function ( node ) {

  				if ( nodeDef.skin === undefined ) return node;

  				// build skeleton here as well

  				var skinEntry;

  				return parser.getDependency( 'skin', nodeDef.skin ).then( function ( skin ) {

  					skinEntry = skin;

  					var pendingJoints = [];

  					for ( var i = 0, il = skinEntry.joints.length; i < il; i ++ ) {

  						pendingJoints.push( parser.getDependency( 'node', skinEntry.joints[ i ] ) );

  					}

  					return Promise.all( pendingJoints );

  				} ).then( function ( jointNodes ) {

  					node.traverse( function ( mesh ) {

  						if ( ! mesh.isMesh ) return;

  						var bones = [];
  						var boneInverses = [];

  						for ( var j = 0, jl = jointNodes.length; j < jl; j ++ ) {

  							var jointNode = jointNodes[ j ];

  							if ( jointNode ) {

  								bones.push( jointNode );

  								var mat = new Matrix4();

  								if ( skinEntry.inverseBindMatrices !== undefined ) {

  									mat.fromArray( skinEntry.inverseBindMatrices.array, j * 16 );

  								}

  								boneInverses.push( mat );

  							} else {

  								console.warn( 'THREE.GLTFLoader: Joint "%s" could not be found.', skinEntry.joints[ j ] );

  							}

  						}

  						mesh.bind( new Skeleton( bones, boneInverses ), mesh.matrixWorld );

  					} );

  					return node;

  				} );

  			} ).then( function ( node ) {

  				// build node hierachy

  				parentObject.add( node );

  				var pending = [];

  				if ( nodeDef.children ) {

  					var children = nodeDef.children;

  					for ( var i = 0, il = children.length; i < il; i ++ ) {

  						var child = children[ i ];
  						pending.push( buildNodeHierachy( child, node, json, parser ) );

  					}

  				}

  				return Promise.all( pending );

  			} );

  		}

  		return function loadScene( sceneIndex ) {

  			var json = this.json;
  			var extensions = this.extensions;
  			var sceneDef = this.json.scenes[ sceneIndex ];
  			var parser = this;

  			// Loader returns Group, not Scene.
  			// See: https://github.com/mrdoob/three.js/issues/18342#issuecomment-578981172
  			var scene = new Group();
  			if ( sceneDef.name ) scene.name = sceneDef.name;

  			assignExtrasToUserData( scene, sceneDef );

  			if ( sceneDef.extensions ) addUnknownExtensionsToUserData( extensions, scene, sceneDef );

  			var nodeIds = sceneDef.nodes || [];

  			var pending = [];

  			for ( var i = 0, il = nodeIds.length; i < il; i ++ ) {

  				pending.push( buildNodeHierachy( nodeIds[ i ], scene, json, parser ) );

  			}

  			return Promise.all( pending ).then( function () {

  				return scene;

  			} );

  		};

  	}();

  	return GLTFLoader;

  } )();

  /**
   * @author Nikos M. / https://github.com/foo123/
   */

  // https://github.com/mrdoob/three.js/issues/5552
  // http://en.wikipedia.org/wiki/RGBE_image_format

  var RGBELoader = function ( manager ) {

  	DataTextureLoader.call( this, manager );

  	this.type = UnsignedByteType;

  };

  RGBELoader.prototype = Object.assign( Object.create( DataTextureLoader.prototype ), {

  	constructor: RGBELoader,

  	// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html

  	parse: function ( buffer ) {

  		var
  			/* return codes for rgbe routines */
  			//RGBE_RETURN_SUCCESS = 0,
  			RGBE_RETURN_FAILURE = - 1,

  			/* default error routine.  change this to change error handling */
  			rgbe_read_error = 1,
  			rgbe_write_error = 2,
  			rgbe_format_error = 3,
  			rgbe_memory_error = 4,
  			rgbe_error = function ( rgbe_error_code, msg ) {

  				switch ( rgbe_error_code ) {

  					case rgbe_read_error: console.error( "RGBELoader Read Error: " + ( msg || '' ) );
  						break;
  					case rgbe_write_error: console.error( "RGBELoader Write Error: " + ( msg || '' ) );
  						break;
  					case rgbe_format_error: console.error( "RGBELoader Bad File Format: " + ( msg || '' ) );
  						break;
  					default:
  					case rgbe_memory_error: console.error( "RGBELoader: Error: " + ( msg || '' ) );

  				}
  				return RGBE_RETURN_FAILURE;

  			},

  			/* offsets to red, green, and blue components in a data (float) pixel */
  			//RGBE_DATA_RED = 0,
  			//RGBE_DATA_GREEN = 1,
  			//RGBE_DATA_BLUE = 2,

  			/* number of floats per pixel, use 4 since stored in rgba image format */
  			//RGBE_DATA_SIZE = 4,

  			/* flags indicating which fields in an rgbe_header_info are valid */
  			RGBE_VALID_PROGRAMTYPE = 1,
  			RGBE_VALID_FORMAT = 2,
  			RGBE_VALID_DIMENSIONS = 4,

  			NEWLINE = "\n",

  			fgets = function ( buffer, lineLimit, consume ) {

  				lineLimit = ! lineLimit ? 1024 : lineLimit;
  				var p = buffer.pos,
  					i = - 1, len = 0, s = '', chunkSize = 128,
  					chunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )
  				;
  				while ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {

  					s += chunk; len += chunk.length;
  					p += chunkSize;
  					chunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );

  				}

  				if ( - 1 < i ) {

  					/*for (i=l-1; i>=0; i--) {
  						byteCode = m.charCodeAt(i);
  						if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;
  						else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;
  						if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate
  					}*/
  					if ( false !== consume ) buffer.pos += len + i + 1;
  					return s + chunk.slice( 0, i );

  				}
  				return false;

  			},

  			/* minimal header reading.  modify if you want to parse more information */
  			RGBE_ReadHeader = function ( buffer ) {

  				var line, match,

  					// regexes to parse header info fields
  					magic_token_re = /^#\?(\S+)$/,
  					gamma_re = /^\s*GAMMA\s*=\s*(\d+(\.\d+)?)\s*$/,
  					exposure_re = /^\s*EXPOSURE\s*=\s*(\d+(\.\d+)?)\s*$/,
  					format_re = /^\s*FORMAT=(\S+)\s*$/,
  					dimensions_re = /^\s*\-Y\s+(\d+)\s+\+X\s+(\d+)\s*$/,

  					// RGBE format header struct
  					header = {

  						valid: 0, /* indicate which fields are valid */

  						string: '', /* the actual header string */

  						comments: '', /* comments found in header */

  						programtype: 'RGBE', /* listed at beginning of file to identify it after "#?". defaults to "RGBE" */

  						format: '', /* RGBE format, default 32-bit_rle_rgbe */

  						gamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */

  						exposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */

  						width: 0, height: 0 /* image dimensions, width/height */

  					};

  				if ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {

  					return rgbe_error( rgbe_read_error, "no header found" );

  				}
  				/* if you want to require the magic token then uncomment the next line */
  				if ( ! ( match = line.match( magic_token_re ) ) ) {

  					return rgbe_error( rgbe_format_error, "bad initial token" );

  				}
  				header.valid |= RGBE_VALID_PROGRAMTYPE;
  				header.programtype = match[ 1 ];
  				header.string += line + "\n";

  				while ( true ) {

  					line = fgets( buffer );
  					if ( false === line ) break;
  					header.string += line + "\n";

  					if ( '#' === line.charAt( 0 ) ) {

  						header.comments += line + "\n";
  						continue; // comment line

  					}

  					if ( match = line.match( gamma_re ) ) {

  						header.gamma = parseFloat( match[ 1 ], 10 );

  					}
  					if ( match = line.match( exposure_re ) ) {

  						header.exposure = parseFloat( match[ 1 ], 10 );

  					}
  					if ( match = line.match( format_re ) ) {

  						header.valid |= RGBE_VALID_FORMAT;
  						header.format = match[ 1 ];//'32-bit_rle_rgbe';

  					}
  					if ( match = line.match( dimensions_re ) ) {

  						header.valid |= RGBE_VALID_DIMENSIONS;
  						header.height = parseInt( match[ 1 ], 10 );
  						header.width = parseInt( match[ 2 ], 10 );

  					}

  					if ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;

  				}

  				if ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {

  					return rgbe_error( rgbe_format_error, "missing format specifier" );

  				}
  				if ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {

  					return rgbe_error( rgbe_format_error, "missing image size specifier" );

  				}

  				return header;

  			},

  			RGBE_ReadPixels_RLE = function ( buffer, w, h ) {

  				var data_rgba, offset, pos, count, byteValue,
  					scanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,
  					scanline_width = w, num_scanlines = h, rgbeStart
  				;

  				if (
  					// run length encoding is not allowed so read flat
  					( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||
  					// this file is not run length encoded
  					( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )
  				) {

  					// return the flat buffer
  					return new Uint8Array( buffer );

  				}

  				if ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {

  					return rgbe_error( rgbe_format_error, "wrong scanline width" );

  				}

  				data_rgba = new Uint8Array( 4 * w * h );

  				if ( ! data_rgba || ! data_rgba.length ) {

  					return rgbe_error( rgbe_memory_error, "unable to allocate buffer space" );

  				}

  				offset = 0; pos = 0; ptr_end = 4 * scanline_width;
  				rgbeStart = new Uint8Array( 4 );
  				scanline_buffer = new Uint8Array( ptr_end );

  				// read in each successive scanline
  				while ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {

  					if ( pos + 4 > buffer.byteLength ) {

  						return rgbe_error( rgbe_read_error );

  					}

  					rgbeStart[ 0 ] = buffer[ pos ++ ];
  					rgbeStart[ 1 ] = buffer[ pos ++ ];
  					rgbeStart[ 2 ] = buffer[ pos ++ ];
  					rgbeStart[ 3 ] = buffer[ pos ++ ];

  					if ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {

  						return rgbe_error( rgbe_format_error, "bad rgbe scanline format" );

  					}

  					// read each of the four channels for the scanline into the buffer
  					// first red, then green, then blue, then exponent
  					ptr = 0;
  					while ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {

  						count = buffer[ pos ++ ];
  						isEncodedRun = count > 128;
  						if ( isEncodedRun ) count -= 128;

  						if ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {

  							return rgbe_error( rgbe_format_error, "bad scanline data" );

  						}

  						if ( isEncodedRun ) {

  							// a (encoded) run of the same value
  							byteValue = buffer[ pos ++ ];
  							for ( i = 0; i < count; i ++ ) {

  								scanline_buffer[ ptr ++ ] = byteValue;

  							}
  							//ptr += count;

  						} else {

  							// a literal-run
  							scanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );
  							ptr += count; pos += count;

  						}

  					}


  					// now convert data from buffer into rgba
  					// first red, then green, then blue, then exponent (alpha)
  					l = scanline_width; //scanline_buffer.byteLength;
  					for ( i = 0; i < l; i ++ ) {

  						off = 0;
  						data_rgba[ offset ] = scanline_buffer[ i + off ];
  						off += scanline_width; //1;
  						data_rgba[ offset + 1 ] = scanline_buffer[ i + off ];
  						off += scanline_width; //1;
  						data_rgba[ offset + 2 ] = scanline_buffer[ i + off ];
  						off += scanline_width; //1;
  						data_rgba[ offset + 3 ] = scanline_buffer[ i + off ];
  						offset += 4;

  					}

  					num_scanlines --;

  				}

  				return data_rgba;

  			};

  		var RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {

  			var e = sourceArray[ sourceOffset + 3 ];
  			var scale = Math.pow( 2.0, e - 128.0 ) / 255.0;

  			destArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;
  			destArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;
  			destArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;

  		};

  		var RGBEByteToRGBHalf = ( function () {

  			// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410

  			var floatView = new Float32Array( 1 );
  			var int32View = new Int32Array( floatView.buffer );

  			/* This method is faster than the OpenEXR implementation (very often
  			 * used, eg. in Ogre), with the additional benefit of rounding, inspired
  			 * by James Tursa?s half-precision code. */
  			function toHalf( val ) {

  				floatView[ 0 ] = val;
  				var x = int32View[ 0 ];

  				var bits = ( x >> 16 ) & 0x8000; /* Get the sign */
  				var m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */
  				var e = ( x >> 23 ) & 0xff; /* Using int is faster here */

  				/* If zero, or denormal, or exponent underflows too much for a denormal
  				 * half, return signed zero. */
  				if ( e < 103 ) return bits;

  				/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */
  				if ( e > 142 ) {

  					bits |= 0x7c00;
  					/* If exponent was 0xff and one mantissa bit was set, it means NaN,
  							 * not Inf, so make sure we set one mantissa bit too. */
  					bits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );
  					return bits;

  				}

  				/* If exponent underflows but not too much, return a denormal */
  				if ( e < 113 ) {

  					m |= 0x0800;
  					/* Extra rounding may overflow and set mantissa to 0 and exponent
  					 * to 1, which is OK. */
  					bits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );
  					return bits;

  				}

  				bits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );
  				/* Extra rounding. An overflow will set mantissa to 0 and increment
  				 * the exponent, which is OK. */
  				bits += m & 1;
  				return bits;

  			}

  			return function ( sourceArray, sourceOffset, destArray, destOffset ) {

  				var e = sourceArray[ sourceOffset + 3 ];
  				var scale = Math.pow( 2.0, e - 128.0 ) / 255.0;

  				destArray[ destOffset + 0 ] = toHalf( sourceArray[ sourceOffset + 0 ] * scale );
  				destArray[ destOffset + 1 ] = toHalf( sourceArray[ sourceOffset + 1 ] * scale );
  				destArray[ destOffset + 2 ] = toHalf( sourceArray[ sourceOffset + 2 ] * scale );

  			};

  		} )();

  		var byteArray = new Uint8Array( buffer );
  		byteArray.pos = 0;
  		var rgbe_header_info = RGBE_ReadHeader( byteArray );

  		if ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {

  			var w = rgbe_header_info.width,
  				h = rgbe_header_info.height,
  				image_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );

  			if ( RGBE_RETURN_FAILURE !== image_rgba_data ) {

  				switch ( this.type ) {

  					case UnsignedByteType:

  						var data = image_rgba_data;
  						var format = RGBEFormat; // handled as THREE.RGBAFormat in shaders
  						var type = UnsignedByteType;
  						break;

  					case FloatType:

  						var numElements = ( image_rgba_data.length / 4 ) * 3;
  						var floatArray = new Float32Array( numElements );

  						for ( var j = 0; j < numElements; j ++ ) {

  							RGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );

  						}

  						var data = floatArray;
  						var format = RGBFormat;
  						var type = FloatType;
  						break;

  					case HalfFloatType:

  						var numElements = ( image_rgba_data.length / 4 ) * 3;
  						var halfArray = new Uint16Array( numElements );

  						for ( var j = 0; j < numElements; j ++ ) {

  							RGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );

  						}

  						var data = halfArray;
  						var format = RGBFormat;
  						var type = HalfFloatType;
  						break;

  					default:

  						console.error( 'THREE.RGBELoader: unsupported type: ', this.type );
  						break;

  				}

  				return {
  					width: w, height: h,
  					data: data,
  					header: rgbe_header_info.string,
  					gamma: rgbe_header_info.gamma,
  					exposure: rgbe_header_info.exposure,
  					format: format,
  					type: type
  				};

  			}

  		}

  		return null;

  	},

  	setDataType: function ( value ) {

  		this.type = value;
  		return this;

  	},

  	load: function ( url, onLoad, onProgress, onError ) {

  		function onLoadCallback( texture, texData ) {

  			switch ( texture.type ) {

  				case UnsignedByteType:

  					texture.encoding = RGBEEncoding;
  					texture.minFilter = NearestFilter;
  					texture.magFilter = NearestFilter;
  					texture.generateMipmaps = false;
  					texture.flipY = true;
  					break;

  				case FloatType:

  					texture.encoding = LinearEncoding;
  					texture.minFilter = LinearFilter;
  					texture.magFilter = LinearFilter;
  					texture.generateMipmaps = false;
  					texture.flipY = true;
  					break;

  				case HalfFloatType:

  					texture.encoding = LinearEncoding;
  					texture.minFilter = LinearFilter;
  					texture.magFilter = LinearFilter;
  					texture.generateMipmaps = false;
  					texture.flipY = true;
  					break;

  			}

  			if ( onLoad ) onLoad( texture, texData );

  		}

  		return DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );

  	}

  } );

  /**
   * @author Emmett Lalish / elalish
   *
   * This class generates custom mipmaps for a roughness map by encoding the lost variation in the
   * normal map mip levels as increased roughness in the corresponding roughness mip levels. This
   * helps with rendering accuracy for MeshStandardMaterial, and also helps with anti-aliasing when
   * using PMREM. If the normal map is larger than the roughness map, the roughness map will be
   * enlarged to match the dimensions of the normal map.
   */

  var RoughnessMipmapper = ( function () {

  	var _mipmapMaterial = _getMipmapMaterial();
  	var _scene = new Scene();
  	_scene.add( new Mesh( new PlaneBufferGeometry( 2, 2 ), _mipmapMaterial ) );

  	var _flatCamera = new OrthographicCamera( 0, 1, 0, 1, 0, 1 );
  	var _tempTarget = null;
  	var _renderer = null;

  	// constructor
  	var RoughnessMipmapper = function ( renderer ) {

  		_renderer = renderer;
  		_renderer.compile( _scene, _flatCamera );

  	};

  	RoughnessMipmapper.prototype = {

  		constructor: RoughnessMipmapper,

  		generateMipmaps: function ( material ) {

  			var { roughnessMap, normalMap } = material;
  			if ( roughnessMap == null || normalMap == null || ! roughnessMap.generateMipmaps ||
                  material.userData.roughnessUpdated ) return;

  			material.userData.roughnessUpdated = true;

  			var width = Math.max( roughnessMap.image.width, normalMap.image.width );
  			var height = Math.max( roughnessMap.image.height, normalMap.image.height );
  			if ( ! MathUtils.isPowerOfTwo( width ) || ! MathUtils.isPowerOfTwo( height ) ) return;

  			var oldTarget = _renderer.getRenderTarget();
  			var autoClear = _renderer.autoClear;
  			_renderer.autoClear = false;

  			if ( _tempTarget == null || _tempTarget.width !== width || _tempTarget.height !== height ) {

  				if ( _tempTarget != null ) _tempTarget.dispose();

  				_tempTarget = new WebGLRenderTarget( width, height, { depthBuffer: false, stencilBuffer: false } );
  				_tempTarget.scissorTest = true;

  			}

  			if ( width !== roughnessMap.image.width || height !== roughnessMap.image.height ) {

  				var newRoughnessTarget = new WebGLRenderTarget( width, height, {
  					minFilter: LinearMipMapLinearFilter,
  					depthBuffer: false,
  					stencilBuffer: false
  				} );
  				newRoughnessTarget.texture.generateMipmaps = true;
  				// Setting the render target causes the memory to be allocated.
  				_renderer.setRenderTarget( newRoughnessTarget );
  				material.roughnessMap = newRoughnessTarget.texture;
  				if ( material.metalnessMap == roughnessMap ) material.metalnessMap = material.roughnessMap;
  				if ( material.aoMap == roughnessMap ) material.aoMap = material.roughnessMap;

  			}

  			_mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;
  			_mipmapMaterial.uniforms.normalMap.value = normalMap;

  			var position = new Vector2( 0, 0 );
  			var texelSize = _mipmapMaterial.uniforms.texelSize.value;
  			for ( var mip = 0; width >= 1 && height >= 1;
  				++ mip, width /= 2, height /= 2 ) {

  				// Rendering to a mip level is not allowed in webGL1. Instead we must set
  				// up a secondary texture to write the result to, then copy it back to the
  				// proper mipmap level.
  				texelSize.set( 1.0 / width, 1.0 / height );
  				if ( mip == 0 ) texelSize.set( 0.0, 0.0 );

  				_tempTarget.viewport.set( position.x, position.y, width, height );
  				_tempTarget.scissor.set( position.x, position.y, width, height );
  				_renderer.setRenderTarget( _tempTarget );
  				_renderer.render( _scene, _flatCamera );
  				_renderer.copyFramebufferToTexture( position, material.roughnessMap, mip );
  				_mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;

  			}

  			if ( roughnessMap !== material.roughnessMap ) roughnessMap.dispose();

  			_renderer.setRenderTarget( oldTarget );
  			_renderer.autoClear = autoClear;

  		},

  		dispose: function ( ) {

  			_mipmapMaterial.dispose();
  			_scene.children[ 0 ].geometry.dispose();
  			if ( _tempTarget != null ) _tempTarget.dispose();

  		}

  	};

  	function _getMipmapMaterial() {

  		var shaderMaterial = new RawShaderMaterial( {

  			uniforms: {
  				roughnessMap: { value: null },
  				normalMap: { value: null },
  				texelSize: { value: new Vector2( 1, 1 ) }
  			},

  			vertexShader: `
precision mediump float;
precision mediump int;
attribute vec3 position;
attribute vec2 uv;
varying vec2 vUv;
void main() {
    vUv = uv;
    gl_Position = vec4( position, 1.0 );
}
              `,

  			fragmentShader: `
precision mediump float;
precision mediump int;
varying vec2 vUv;
uniform sampler2D roughnessMap;
uniform sampler2D normalMap;
uniform vec2 texelSize;

#define ENVMAP_TYPE_CUBE_UV
vec4 envMapTexelToLinear(vec4 a){return a;}
#include <cube_uv_reflection_fragment>

float roughnessToVariance(float roughness) {
  float variance = 0.0;
  if (roughness >= r1) {
    variance = (r0 - roughness) * (v1 - v0) / (r0 - r1) + v0;
  } else if (roughness >= r4) {
    variance = (r1 - roughness) * (v4 - v1) / (r1 - r4) + v1;
  } else if (roughness >= r5) {
    variance = (r4 - roughness) * (v5 - v4) / (r4 - r5) + v4;
  } else {
    float roughness2 = roughness * roughness;
    variance = 1.79 * roughness2 * roughness2;
  }
  return variance;
}
float varianceToRoughness(float variance) {
  float roughness = 0.0;
  if (variance >= v1) {
    roughness = (v0 - variance) * (r1 - r0) / (v0 - v1) + r0;
  } else if (variance >= v4) {
    roughness = (v1 - variance) * (r4 - r1) / (v1 - v4) + r1;
  } else if (variance >= v5) {
    roughness = (v4 - variance) * (r5 - r4) / (v4 - v5) + r4;
  } else {
    roughness = pow(0.559 * variance, 0.25);// 0.559 = 1.0 / 1.79
  }
  return roughness;
}

void main() {
    gl_FragColor = texture2D(roughnessMap, vUv, -1.0);
    if (texelSize.x == 0.0) return;
    float roughness = gl_FragColor.g;
    float variance = roughnessToVariance(roughness);
    vec3 avgNormal;
    for (float x = -1.0; x < 2.0; x += 2.0) {
    for (float y = -1.0; y < 2.0; y += 2.0) {
        vec2 uv = vUv + vec2(x, y) * 0.25 * texelSize;
        avgNormal += normalize(texture2D(normalMap, uv, -1.0).xyz - 0.5);
    }
    }
    variance += 1.0 - 0.25 * length(avgNormal);
    gl_FragColor.g = varianceToRoughness(variance);
}
              `,

  			blending: NoBlending,
  			depthTest: false,
  			depthWrite: false

  		} );

  		shaderMaterial.type = 'RoughnessMipmapper';

  		return shaderMaterial;

  	}

  	return RoughnessMipmapper;

  } )();

  var BASE_HREF = document.querySelector('base').getAttribute('href');

  var ModelViewerComponent = /*#__PURE__*/function (_Component) {
    _inheritsLoose(ModelViewerComponent, _Component);

    function ModelViewerComponent() {
      return _Component.apply(this, arguments) || this;
    }

    var _proto = ModelViewerComponent.prototype;

    _proto.onInit = function onInit() {
      console.log('ModelViewerComponent.onInit');
      this.createScene();
      this.loadAssets();
      this.addListeners(); // this.animate(); // !!! no
    } // onView() { const context = getContext(this); }
    // onChanges() {}
    ;

    _proto.onDestroy = function onDestroy() {
      this.removeListeners();
      var renderer = this.renderer;
      renderer.setAnimationLoop(function () {});
      renderer.destroy();
    };

    _proto.createScene = function createScene() {
      var _getContext = rxcomp.getContext(this),
          node = _getContext.node;

      this.size = {
        width: 0,
        height: 0,
        aspect: 0
      };
      var container = this.container = node.querySelector('.model-viewer__view');
      var info = this.info = node.querySelector('.model-viewer__info');
      var camera = this.camera = new PerspectiveCamera(45, container.offsetWidth / container.offsetHeight, 0.1, 1000);
      camera.position.set(-1.8, 0.6, 2.7);
      camera.target = new Vector3();
      console.log(container.offsetWidth, container.offsetHeight);
      var renderer = this.renderer = new WebGLRenderer({
        antialias: true,
        alpha: true
      });
      renderer.setClearColor(0x000000, 0);
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(container.offsetWidth, container.offsetHeight);
      renderer.toneMapping = ACESFilmicToneMapping;
      renderer.toneMappingExposure = 0.8;
      renderer.outputEncoding = sRGBEncoding;
      container.appendChild(renderer.domElement);
      var controls = this.controls = new OrbitControls(camera, renderer.domElement);
      controls.enablePan = false;
      controls.enableKeys = false;
      controls.minDistance = 2;
      controls.maxDistance = 10;
      controls.target.set(0, 0, -0.2);
      controls.update();
      var scene = this.scene = new Scene();
      var pivot = this.pivot = new Group();
      this.scene.add(pivot);
    };

    _proto.loadAssets = function loadAssets() {
      var _this = this;

      this.loadRgbeBackground(BASE_HREF + 'models/textures/equirectangular/', 'leadenhall_market_2k.hdr', function (envMap) {
        _this.render();

        _this.loadGltfModel(BASE_HREF + 'models/gltf/model/gltf/', 'boot.gltf', function (model) {
          var pivot = _this.pivot;
          pivot.scale.set(0.1, 0.1, 0.1);
          pivot.position.set(0, 0, 0); //-0.5

          pivot.add(model);

          _this.render();
        });
      });
    };

    _proto.loadRgbeBackground = function loadRgbeBackground(path, file, callback) {
      var scene = this.scene;
      var renderer = this.renderer;
      var pmremGenerator = new PMREMGenerator(renderer);
      pmremGenerator.compileEquirectangularShader();
      var loader = new RGBELoader();
      loader.setDataType(UnsignedByteType).setPath(path).load(file, function (texture) {
        var envMap = pmremGenerator.fromEquirectangular(texture).texture; // scene.background = envMap;

        scene.environment = envMap;
        texture.dispose();
        pmremGenerator.dispose();

        if (typeof callback === 'function') {
          callback(envMap);
        }
      });
      return loader;
    };

    _proto.loadGltfModel = function loadGltfModel(path, file, callback) {
      var renderer = this.renderer;
      var roughnessMipmapper = new RoughnessMipmapper(renderer); // optional

      var loader = new GLTFLoader().setPath(path);
      loader.load(file, function (gltf) {
        gltf.scene.traverse(function (child) {
          if (child.isMesh) {
            roughnessMipmapper.generateMipmaps(child.material);
          }
        });

        if (typeof callback === 'function') {
          callback(gltf.scene);
        }

        roughnessMipmapper.dispose();
      });
    };

    _proto.updateRaycaster = function updateRaycaster() {
    };

    _proto.render = function render(delta) {
      try {
        // this.updateOld();
        var renderer = this.renderer;
        renderer.render(this.scene, this.camera);
      } catch (error) {
        this.info.innerHTML = error;
      }
    };

    _proto.animate = function animate() {
      var renderer = this.renderer;
      renderer.setAnimationLoop(this.render);
    };

    _proto.resize = function resize() {
      try {
        var container = this.container,
            renderer = this.renderer,
            camera = this.camera;
        var size = this.size;
        size.width = container.offsetWidth;
        size.height = container.offsetHeight;
        size.aspect = size.width / size.height;

        if (renderer) {
          renderer.setSize(size.width, size.height);
        }

        if (camera) {
          camera.aspect = size.width / size.height;
          camera.updateProjectionMatrix();
        }

        this.render();
      } catch (error) {
        this.info.innerHTML = error;
      }
    };

    _proto.addListeners = function addListeners() {
      this.resize = this.resize.bind(this);
      this.render = this.render.bind(this);
      this.controls.addEventListener('change', this.render); // use if there is no animation loop

      window.addEventListener('resize', this.resize, false);
    };

    _proto.removeListeners = function removeListeners() {
      window.removeEventListener('resize', this.resize, false);
      this.controls.removeEventListener('change', this.render);
    };

    return ModelViewerComponent;
  }(rxcomp.Component);
  ModelViewerComponent.meta = {
    selector: '[model-viewer]'
  };

  var AppModule = /*#__PURE__*/function (_Module) {
    _inheritsLoose(AppModule, _Module);

    function AppModule() {
      return _Module.apply(this, arguments) || this;
    }

    return AppModule;
  }(rxcomp.Module);
  AppModule.meta = {
    imports: [rxcomp.CoreModule, rxcompForm.FormModule],
    declarations: [ModelViewerComponent
    /*
    AgentsComponent,
    AppearDirective,
    BimLibraryComponent,
    ClickOutsideDirective,
    ClubComponent,
    ClubForgotComponent,
    ClubModalComponent,
    ClubPasswordRecoveryComponent,
    ClubPasswordEditComponent,
    ClubProfileComponent,
    ClubSigninComponent,
    ClubSignupComponent,
    ControlCheckboxComponent,
    ControlCustomSelectComponent,
    ControlEmailComponent,
    ControlFileComponent,
    ControlPasswordComponent,
    ControlSelectComponent,
    ControlTextComponent,
    ControlTextareaComponent,
    DropdownDirective,
    DropdownItemDirective,
    ErrorsComponent,
    FileSizePipe,
    HtmlPipe,
    HeaderComponent,
    LazyDirective,
    MainMenuComponent,
    MediaLibraryComponent,
    ModalOutletComponent,
    ModalComponent,
    PriceListComponent,
    NaturalFormComponent,
    NaturalFormSearchComponent,
    NaturalFormContactComponent,
    NaturalFormRequestInfoComponent,
    NaturalFormControlComponent,
    NaturalFormNewsletterComponent,
    NaturalFormSignupComponent,
    RequestInfoCommercialComponent,
    RegisterOrLoginComponent,
    ReservedAreaComponent,
    SecureDirective,
    ScrollToDirective,
    SwiperDirective,
    SwiperListingDirective,
    SwiperSlidesDirective,
    TestComponent,
    // ValueDirective,
    VideoComponent,
    WorkWithUsComponent,
    YoutubeComponent,
    ZoomableDirective,
    */
    ],
    bootstrap: AppComponent
  };

  rxcomp.Browser.bootstrap(AppModule);

})));
